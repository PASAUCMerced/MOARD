	.file	"full.llvm"
	.section	.debug_info,"",@progbits
.Lsection_info:
	.section	.debug_abbrev,"",@progbits
.Lsection_abbrev:
	.section	.debug_aranges,"",@progbits
	.section	.debug_macinfo,"",@progbits
	.section	.debug_line,"",@progbits
.Lsection_line:
	.section	.debug_loc,"",@progbits
	.section	.debug_pubnames,"",@progbits
	.section	.debug_pubtypes,"",@progbits
	.section	.debug_str,"MS",@progbits,1
.Linfo_string:
	.section	.debug_ranges,"",@progbits
.Ldebug_range:
	.section	.debug_loc,"",@progbits
.Lsection_debug_loc:
	.text
.Ltext_begin:
	.data
	.file	1 "cluster.c"
	.file	2 "getopt.c"
	.file	3 "kmeans.c"
	.file	4 "/usr/include/stdlib.h"
	.file	5 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h"
	.file	6 "kmeans_clustering.c"
	.text
	.globl	cluster
	.align	16, 0x90
	.type	cluster,@function
cluster:                                # @cluster
	.cfi_startproc
.Lfunc_begin0:
	.loc	1 85 0                  # cluster.c:85:0
# BB#0:
	pushq	%rbp
.Ltmp7:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp8:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp9:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp10:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp11:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp12:
	.cfi_def_cfa_offset 56
	subq	$2264, %rsp             # imm = 0x8D8
.Ltmp13:
	.cfi_def_cfa_offset 2320
.Ltmp14:
	.cfi_offset %rbx, -56
.Ltmp15:
	.cfi_offset %r12, -48
.Ltmp16:
	.cfi_offset %r13, -40
.Ltmp17:
	.cfi_offset %r14, -32
.Ltmp18:
	.cfi_offset %r15, -24
.Ltmp19:
	.cfi_offset %rbp, -16
	movabsq	$24601, %rax            # imm = 0x6019
	movabsq	$64, %r9
	movabsq	$1, %r10
	leaq	.L.str23, %r11
	movabsq	$0, %rbx
	leaq	.L.str24, %r14
	leaq	.L.str21, %r15
	leaq	.L.str22, %r12
	movabsq	$2, %r13
	leaq	malloc, %rbp
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str19, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	movabsq	$90, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str16, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	leaq	.L.str18, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movl	%ecx, 2204(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 2200(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	leaq	.L.str15, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	leaq	.L.str12, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	leaq	.L.str13, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str10, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	leaq	.L.str11, %rax
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str8, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str5, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str3, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str4, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str1, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	leaq	.L.str2, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	#DEBUG_VALUE: cluster:numObjects <- EDI
	#DEBUG_VALUE: cluster:numAttributes <- ESI
	#DEBUG_VALUE: cluster:attributes <- RDX
	#DEBUG_VALUE: cluster:num_nclusters <- [RSP+2204]
	#DEBUG_VALUE: cluster:threshold <- XMM0
	#DEBUG_VALUE: cluster:cluster_centres <- R8
	.loc	1 90 0 prologue_end     # cluster.c:90:0
.Ltmp20:
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	movq	2232(%rsp), %rax        # 8-byte Reload
	movl	%edi, 2028(%rsp)        # 4-byte Spill
.Ltmp21:
	#DEBUG_VALUE: cluster:numObjects <- [RSP+2028]
	movq	%rax, %rdi
	movq	2056(%rsp), %rax        # 8-byte Reload
	movl	%esi, 2024(%rsp)        # 4-byte Spill
.Ltmp22:
	#DEBUG_VALUE: cluster:numAttributes <- [RSP+2024]
	movq	%rax, %rsi
	movq	2048(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2016(%rsp)        # 8-byte Spill
.Ltmp23:
	#DEBUG_VALUE: cluster:attributes <- [RSP+2016]
	movq	%rax, %rdx
	movq	2040(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 2012(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	2032(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2000(%rsp)         # 8-byte Spill
.Ltmp24:
	#DEBUG_VALUE: cluster:cluster_centres <- [RSP+2000]
	movq	%rax, %r8
	movl	2200(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1992(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, 1984(%rsp)        # 8-byte Spill
	movq	%r14, 1976(%rsp)        # 8-byte Spill
	vmovss	%xmm0, 1972(%rsp)       # 4-byte Spill
.Ltmp25:
	#DEBUG_VALUE: cluster:threshold <- [RSP+1972]
	movq	%r15, 1960(%rsp)        # 8-byte Spill
	movq	%r12, 1952(%rsp)        # 8-byte Spill
	movq	%rbp, 1944(%rsp)        # 8-byte Spill
	movq	%rbx, 1936(%rsp)        # 8-byte Spill
	movq	%r10, 1928(%rsp)        # 8-byte Spill
	movq	%r11, 1920(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	2028(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	2080(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movq	1936(%rsp), %r9         # 8-byte Reload
	movq	2064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2028(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1992(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1928(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1912(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	1936(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	movq	2120(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	2200(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	1992(%rsp), %rsi        # 8-byte Reload
	movq	1984(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1936(%rsp), %r9         # 8-byte Reload
	movq	2136(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	1992(%rsp), %rsi        # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movq	1936(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1912(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1992(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1928(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1904(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	1936(%rsp), %r9         # 8-byte Reload
	movq	2168(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2224(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movl	2200(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	1992(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	1936(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	1992(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1936(%rsp), %r9         # 8-byte Reload
	movq	1952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	1992(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1920(%rsp), %r8         # 8-byte Reload
	movq	1936(%rsp), %r9         # 8-byte Reload
	movq	1976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rdi        # 8-byte Reload
	callq	malloc
.Ltmp26:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$32, %rcx
	movabsq	$7, %rdx
	movabsq	$1, %rsi
	leaq	.L.str41, %r8
	movabsq	$0, %r9
	leaq	.L.str42, %r10
	leaq	.L.str39, %r11
	leaq	.L.str40, %rbx
	movabsq	$2, %r14
	movabsq	$64, %r15
	leaq	srand, %r12
	leaq	.L.str37, %r13
	leaq	.L.str38, %rbp
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$94, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str34, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str35, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1856(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1852(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str33, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	leaq	.L.str30, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str31, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$90, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str27, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str28, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str25, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str26, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1736(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1732(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	1896(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1720(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1704(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1696(%rsp)         # 8-byte Spill
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 1688(%rsp)        # 8-byte Spill
	movq	%r15, 1680(%rsp)        # 8-byte Spill
	movq	%r12, 1672(%rsp)        # 8-byte Spill
	movq	%r13, 1664(%rsp)        # 8-byte Spill
	movq	%r14, 1656(%rsp)        # 8-byte Spill
	movq	%rbx, 1648(%rsp)        # 8-byte Spill
	movq	%r10, 1640(%rsp)        # 8-byte Spill
	movq	%r11, 1632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1792(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1852(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1680(%rsp), %rsi        # 8-byte Reload
	movq	1896(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1896(%rsp), %rax        # 8-byte Reload
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1680(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1816(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp27:
	#DEBUG_VALUE: cluster:membership <- [RSP+1624]
	#DEBUG_VALUE: cluster:nclusters <- [RSP+2204]
	.loc	1 94 0                  # cluster.c:94:0
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movl	1852(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1680(%rsp), %rsi        # 8-byte Reload
	movq	1672(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1688(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1720(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1720(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1640(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$7, %edi
	callq	srand
.Ltmp28:
	movabsq	$24601, %rax            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str70, %r8
	movabsq	$0, %rsi
	leaq	.L.str71, %r9
	movabsq	$6, %rdi
	leaq	.L.str68, %r10
	leaq	.L.str69, %r11
	movabsq	$32, %rbx
	leaq	.L.str66, %r14
	leaq	.L.str67, %r15
	movabsq	$5, %r12
	leaq	.L.str64, %r13
	leaq	.L.str65, %rbp
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str62, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str63, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str60, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str61, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str58, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str59, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str56, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str57, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str54, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str55, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	movabsq	$2, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str52, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str53, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	leaq	.L.str51, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str48, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movabsq	$7, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	leaq	kmeans_clustering, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str46, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	leaq	.L.str47, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	movabsq	$96, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str43, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str44, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str45, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1392(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1388(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	1 96 0                  # cluster.c:96:0
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1368(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1416(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1364(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1408(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1352(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1400(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1344(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1376(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1336(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1388(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1328(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1320(%rsp)        # 8-byte Spill
	movq	%r12, 1312(%rsp)        # 8-byte Spill
	movq	%r14, 1304(%rsp)        # 8-byte Spill
	movq	%r13, 1296(%rsp)        # 8-byte Spill
	movq	%rbx, 1288(%rsp)        # 8-byte Spill
	movq	%rbp, 1280(%rsp)        # 8-byte Spill
	movq	%r10, 1272(%rsp)        # 8-byte Spill
	movq	%r11, 1264(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1456(%rsp), %rdi        # 8-byte Reload
	movq	1344(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1352(%rsp), %rdi        # 8-byte Reload
	movq	1344(%rsp), %rsi        # 8-byte Reload
	movq	2016(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1344(%rsp), %rsi        # 8-byte Reload
	movq	2016(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1480(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2024(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1496(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2024(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2028(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2028(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2204(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1592(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1576(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2204(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovss	1972(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1972(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1320(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1344(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	1344(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1328(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2016(%rsp), %rdi        # 8-byte Reload
	movl	2024(%rsp), %esi        # 4-byte Reload
	movl	2028(%rsp), %edx        # 4-byte Reload
	movl	2204(%rsp), %ecx        # 4-byte Reload
	vmovss	1972(%rsp), %xmm0       # 4-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	callq	kmeans_clustering
	movabsq	$1, %rdi
	leaq	.L.str97, %r8
	movabsq	$0, %r9
	leaq	.L.str98, %r10
	movabsq	$2, %r11
	leaq	.L.str95, %rbx
	leaq	.L.str96, %r14
	movabsq	$3, %r15
	leaq	.L.str93, %r12
	leaq	.L.str94, %r13
	movabsq	$103, %rbp
	leaq	.L.str90, %rsi
	leaq	.L.str91, %rdx
	leaq	.L.str92, %rcx
	movq	%rsi, 1256(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1252(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str88, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str89, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str86, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str87, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str84, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str85, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str81, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str83, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str79, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str80, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str78, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str74, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str75, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str76, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str72, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str73, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	movq	1232(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1056(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1208(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1052(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1040(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1056(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1032(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1072(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1024(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1016(%rsp)         # 8-byte Spill
	movq	1064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 1008(%rsp)        # 8-byte Spill
	movq	%r13, 1000(%rsp)        # 8-byte Spill
	movq	%r12, 992(%rsp)         # 8-byte Spill
	movq	%r10, 984(%rsp)         # 8-byte Spill
	movq	%r11, 976(%rsp)         # 8-byte Spill
	movq	%rbx, 968(%rsp)         # 8-byte Spill
	movq	%r14, 960(%rsp)         # 8-byte Spill
	movq	%r15, 952(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp29:
	#DEBUG_VALUE: cluster:tmp_cluster_centres <- [RSP+1240]
	.loc	1 103 0                 # cluster.c:103:0
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	1252(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	2000(%rsp), %rdx        # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2000(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movl	1252(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	944(%rsp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	movq	1216(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 943(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movl	1252(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	movq	1000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	943(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	movq	984(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	943(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB0_2
.Ltmp30:
# BB#1:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str120, %r8
	movabsq	$0, %rdx
	leaq	.L.str121, %rsi
	leaq	.L.str118, %r9
	leaq	.L.str119, %r10
	movabsq	$2, %r11
	leaq	free, %rbx
	leaq	.L.str116, %r14
	leaq	.L.str117, %r15
	movabsq	$104, %r12
	leaq	.L.str113, %r13
	leaq	.L.str114, %rbp
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str115, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 912(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 908(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 888(%rsp)         # 8-byte Spill
	leaq	.L.str111, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str112, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str109, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	leaq	.L.str106, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str108, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str104, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str105, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	leaq	.L.str102, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str103, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	leaq	.L.str99, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str100, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str101, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	1 104 0                 # cluster.c:104:0
.Ltmp31:
	movq	%rdi, 760(%rsp)         # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 752(%rsp)         # 8-byte Spill
	movq	784(%rsp), %rax         # 8-byte Reload
	movl	%esi, 748(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	776(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 736(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	768(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%r8, 720(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	908(%rsp), %eax         # 4-byte Reload
	movq	%r9, 712(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 704(%rsp)         # 8-byte Spill
	movq	%r15, 696(%rsp)         # 8-byte Spill
	movq	%r14, 688(%rsp)         # 8-byte Spill
	movq	%r12, 680(%rsp)         # 8-byte Spill
	movq	%r13, 672(%rsp)         # 8-byte Spill
	movq	%rbx, 664(%rsp)         # 8-byte Spill
	movq	%r10, 656(%rsp)         # 8-byte Spill
	movq	%r11, 648(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	movq	792(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	(%rcx), %rdx
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 640(%rsp)         # 8-byte Spill
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	848(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 632(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	movq	872(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	672(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	664(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	movq	696(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	movq	912(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	632(%rsp), %rdi         # 8-byte Reload
	callq	free
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str143, %r8
	movabsq	$0, %rsi
	leaq	.L.str144, %r9
	leaq	.L.str141, %r10
	leaq	.L.str142, %r11
	movabsq	$2, %rbx
	leaq	free, %r14
	leaq	.L.str139, %r15
	leaq	.L.str140, %r12
	movabsq	$105, %r13
	leaq	.L.str136, %rbp
	leaq	.L.str137, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	leaq	.L.str138, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 608(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 604(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 592(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str134, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str135, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	.L.str132, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str133, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str129, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str130, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str131, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str127, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str128, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str125, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str126, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str122, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str123, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str124, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	1 105 0                 # cluster.c:105:0
	movq	%rdi, 456(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movq	480(%rsp), %rax         # 8-byte Reload
	movl	%esi, 444(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	472(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 432(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	464(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	448(%rsp), %rax         # 8-byte Reload
	movq	%r8, 416(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	604(%rsp), %eax         # 4-byte Reload
	movq	%r9, 408(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 400(%rsp)         # 8-byte Spill
	movq	%r13, 392(%rsp)         # 8-byte Spill
	movq	%r15, 384(%rsp)         # 8-byte Spill
	movq	%rbp, 376(%rsp)         # 8-byte Spill
	movq	%r14, 368(%rsp)         # 8-byte Spill
	movq	%r10, 360(%rsp)         # 8-byte Spill
	movq	%r11, 352(%rsp)         # 8-byte Spill
	movq	%rbx, 344(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	2000(%rsp), %rdx        # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	488(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 336(%rsp)         # 8-byte Spill
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	504(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	544(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	604(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	552(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	568(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	604(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	400(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	callq	free
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str148, %r8
	leaq	.L.str149, %rsi
	movabsq	$106, %rdi
	leaq	.L.str145, %r9
	leaq	.L.str146, %r10
	leaq	.L.str147, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	.loc	1 106 0                 # cluster.c:106:0
	movq	%rsi, 320(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 312(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 296(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 292(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	312(%rsp), %r9          # 8-byte Reload
	movq	320(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp32:
.LBB0_2:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str164, %r8
	movabsq	$0, %rdx
	leaq	.L.str165, %rsi
	leaq	.L.str162, %r9
	leaq	.L.str163, %r10
	movabsq	$2, %r11
	leaq	free, %rbx
	leaq	.L.str160, %r14
	leaq	.L.str161, %r15
	movabsq	$110, %r12
	leaq	.L.str157, %r13
	leaq	.L.str158, %rbp
	movq	%rax, 280(%rsp)         # 8-byte Spill
	leaq	.L.str159, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 264(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 260(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str155, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	leaq	.L.str156, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	leaq	.L.str153, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str154, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movabsq	$107, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	leaq	.L.str150, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	.L.str151, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str152, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	.loc	1 107 0                 # cluster.c:107:0
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 168(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	200(%rsp), %rax         # 8-byte Reload
	movl	%esi, 164(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 152(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%r8, 136(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	260(%rsp), %eax         # 4-byte Reload
	movq	%r9, 128(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 120(%rsp)         # 8-byte Spill
	movq	%r15, 112(%rsp)         # 8-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r12, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r11, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	2000(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, (%rcx)
	.loc	1 110 0                 # cluster.c:110:0
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	272(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	260(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	112(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	1896(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	72(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	1896(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	264(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1896(%rsp), %rdi        # 8-byte Reload
	callq	free
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$32, %rsi
	movabsq	$0, %rdx
	leaq	.L.str169, %r8
	leaq	.L.str170, %rdi
	movabsq	$112, %r9
	leaq	.L.str166, %r10
	leaq	.L.str167, %r11
	leaq	.L.str168, %rbx
	movl	$1, %ebp
	.loc	1 112 0                 # cluster.c:112:0
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rbx, %rcx
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%r9, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movl	%ebp, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	addq	$2264, %rsp             # imm = 0x8D8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp33:
.Ltmp34:
	.size	cluster, .Ltmp34-cluster
.Lfunc_end0:
	.cfi_endproc

	.globl	usage
	.align	16, 0x90
	.type	usage,@function
usage:                                  # @usage
	.cfi_startproc
.Lfunc_begin1:
	.loc	3 85 0                  # kmeans.c:85:0
# BB#0:
	pushq	%rbp
.Ltmp42:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp43:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp44:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp45:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp46:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp47:
	.cfi_def_cfa_offset 56
	subq	$520, %rsp              # imm = 0x208
.Ltmp48:
	.cfi_def_cfa_offset 576
.Ltmp49:
	.cfi_offset %rbx, -56
.Ltmp50:
	.cfi_offset %r12, -48
.Ltmp51:
	.cfi_offset %r13, -40
.Ltmp52:
	.cfi_offset %r14, -32
.Ltmp53:
	.cfi_offset %r15, -24
.Ltmp54:
	.cfi_offset %rbp, -16
	movabsq	$24601, %rax            # imm = 0x6019
	movabsq	$64, %rcx
	leaq	.L.str171, %rdx
	movabsq	$1, %rsi
	leaq	.L.str28199, %r8
	movabsq	$0, %r9
	leaq	.L.str29200, %r10
	movabsq	$2, %r11
	leaq	.L.str26197, %rbx
	leaq	.L.str27198, %r14
	leaq	.L.str24195, %r15
	leaq	.L.str25196, %r12
	leaq	.L.str22193, %r13
	leaq	.L.str23194, %rbp
	movq	%rax, 512(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	fprintf, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str20191, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str21192, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$92, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str17188, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str18189, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str19190, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 440(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 436(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	.L.str15186, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	leaq	.L.str16187, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	stderr, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	leaq	.L.str13184, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	leaq	.L.str14185, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str10181, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	leaq	.L.str11182, %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	leaq	.L.str12183, %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	#DEBUG_VALUE: usage:argv0 <- RDI
	.loc	3 92 0 prologue_end     # kmeans.c:92:0
.Ltmp55:
	movq	%rax, 344(%rsp)         # 8-byte Spill
	movq	472(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 336(%rsp)         # 8-byte Spill
.Ltmp56:
	#DEBUG_VALUE: usage:argv0 <- [RSP+336]
	movq	%rax, %rdi
	movq	368(%rsp), %rax         # 8-byte Reload
	movl	%esi, 332(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	360(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 320(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	344(%rsp), %rax         # 8-byte Reload
	movq	%r8, 304(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	436(%rsp), %eax         # 4-byte Reload
	movq	%r9, 296(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 288(%rsp)         # 8-byte Spill
	movq	%r15, 280(%rsp)         # 8-byte Spill
	movq	%r12, 272(%rsp)         # 8-byte Spill
	movq	%r13, 264(%rsp)         # 8-byte Spill
	movq	%r14, 256(%rsp)         # 8-byte Spill
	movq	%rbx, 248(%rsp)         # 8-byte Spill
	movq	%r10, 240(%rsp)         # 8-byte Spill
	movq	%r11, 232(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	392(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	296(%rsp), %r9          # 8-byte Reload
	movq	376(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	stderr, %rcx
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	296(%rsp), %r9          # 8-byte Reload
	movq	400(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	472(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movl	436(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	296(%rsp), %r9          # 8-byte Reload
	movq	480(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	296(%rsp), %r9          # 8-byte Reload
	movq	288(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	296(%rsp), %r9          # 8-byte Reload
	movq	272(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	296(%rsp), %r9          # 8-byte Reload
	movq	256(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	296(%rsp), %r9          # 8-byte Reload
	movq	240(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$.L.str171, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
                                        # kill: AL<def> AL<kill> EAX<kill>
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	callq	fprintf
.Ltmp57:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$32, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movabsq	$1, %rsi
	leaq	.L.str39210, %r8
	movabsq	$0, %r9
	leaq	.L.str40211, %r10
	leaq	.L.str37208, %r11
	leaq	.L.str38209, %rbx
	movabsq	$2, %r14
	movabsq	$64, %r15
	leaq	exit, %r12
	leaq	.L.str35206, %r13
	leaq	.L.str36207, %rbp
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	movabsq	$93, %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	leaq	.L.str32203, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	leaq	.L.str33204, %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	.L.str34205, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 180(%rsp)         # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 176(%rsp)         # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	leaq	.L.str30201, %rcx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	leaq	.L.str31202, %rcx
	.loc	3 93 0                  # kmeans.c:93:0
	movl	%eax, 148(%rsp)         # 4-byte Spill
	movl	180(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movq	160(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 128(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	216(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 120(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 80(%rsp)          # 8-byte Spill
	movq	%r15, 72(%rsp)          # 8-byte Spill
	movq	%r12, 64(%rsp)          # 8-byte Spill
	movq	%r13, 56(%rsp)          # 8-byte Spill
	movq	%r14, 48(%rsp)          # 8-byte Spill
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movq	%r10, 32(%rsp)          # 8-byte Spill
	movq	%r11, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	192(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movl	176(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$-1, %edi
	callq	exit
	movabsq	$93, %rdi
	leaq	.L.str41212, %rsi
	leaq	.L.str42213, %rdx
	leaq	.L.str43214, %rcx
	movabsq	$7, %r8
	movl	$0, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, 20(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
.Ltmp58:
.Ltmp59:
	.size	usage, .Ltmp59-usage
.Lfunc_end1:
	.cfi_endproc

	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI2_0:
	.long	981668463               # float 0.00100000005
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI2_1:
	.quad	4562254509136412672     # double 0.0010000000474974513
	.text
	.globl	main
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
.Lfunc_begin2:
	.loc	3 97 0                  # kmeans.c:97:0
# BB#0:
	pushq	%rbp
.Ltmp67:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp68:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp69:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp70:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp71:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp72:
	.cfi_def_cfa_offset 56
	subq	$25576, %rsp            # imm = 0x63E8
.Ltmp73:
	.cfi_def_cfa_offset 25632
.Ltmp74:
	.cfi_offset %rbx, -56
.Ltmp75:
	.cfi_offset %r12, -48
.Ltmp76:
	.cfi_offset %r13, -40
.Ltmp77:
	.cfi_offset %r14, -32
.Ltmp78:
	.cfi_offset %r15, -24
.Ltmp79:
	.cfi_offset %rbp, -16
	movl	$0, %eax
	vmovss	.LCPI2_0, %xmm0
	movabsq	$0, %rcx
	movl	$5, %edx
	movabsq	$1, %r8
	leaq	.L.str93264, %r9
	leaq	.L.str94265, %r10
	movabsq	$118, %r11
	leaq	.L.str90261, %rbx
	leaq	.L.str91262, %r14
	leaq	.L.str92263, %r15
	movabsq	$2, %r12
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 24520(%rsp)       # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 24512(%rsp)       # 8-byte Spill
	leaq	.L.str88259, %rcx
	movq	%rcx, 24504(%rsp)       # 8-byte Spill
	leaq	.L.str89260, %rcx
	movq	%rcx, 24496(%rsp)       # 8-byte Spill
	leaq	24528(%rsp), %rcx
	movq	%rcx, 24488(%rsp)       # 8-byte Spill
	leaq	.L.str86257, %rcx
	movq	%rcx, 24480(%rsp)       # 8-byte Spill
	leaq	.L.str87258, %rcx
	movq	%rcx, 24472(%rsp)       # 8-byte Spill
	leaq	.L.str84255, %rcx
	movq	%rcx, 24464(%rsp)       # 8-byte Spill
	leaq	.L.str85256, %rcx
	movq	%rcx, 24456(%rsp)       # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, 24448(%rsp)       # 8-byte Spill
	leaq	.L.str82253, %rcx
	movq	%rcx, 24440(%rsp)       # 8-byte Spill
	leaq	.L.str83254, %rcx
	movq	%rcx, 24432(%rsp)       # 8-byte Spill
	movabsq	$110, %rcx
	movq	%rcx, 24424(%rsp)       # 8-byte Spill
	leaq	.L.str79250, %rcx
	movq	%rcx, 24416(%rsp)       # 8-byte Spill
	leaq	.L.str80251, %rcx
	movq	%rcx, 24408(%rsp)       # 8-byte Spill
	leaq	.L.str81252, %rcx
	movq	%rcx, 24400(%rsp)       # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 24392(%rsp)       # 8-byte Spill
	leaq	.L.str77248, %rcx
	movq	%rcx, 24384(%rsp)       # 8-byte Spill
	leaq	.L.str78249, %rcx
	movq	%rcx, 24376(%rsp)       # 8-byte Spill
	leaq	.L.str75246, %rcx
	movq	%rcx, 24368(%rsp)       # 8-byte Spill
	leaq	.L.str76247, %rcx
	movq	%rcx, 24360(%rsp)       # 8-byte Spill
	leaq	25568(%rsp), %rcx
	movq	%rcx, 24352(%rsp)       # 8-byte Spill
	movabsq	$105, %rcx
	movq	%rcx, 24344(%rsp)       # 8-byte Spill
	leaq	.L.str72243, %rcx
	movq	%rcx, 24336(%rsp)       # 8-byte Spill
	leaq	.L.str73244, %rcx
	movq	%rcx, 24328(%rsp)       # 8-byte Spill
	leaq	.L.str74245, %rcx
	movq	%rcx, 24320(%rsp)       # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 24312(%rsp)       # 8-byte Spill
	leaq	.L.str70241, %rcx
	movq	%rcx, 24304(%rsp)       # 8-byte Spill
	leaq	.L.str71242, %rcx
	movq	%rcx, 24296(%rsp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 24288(%rsp)       # 8-byte Spill
	leaq	.L.str68239, %rcx
	movq	%rcx, 24280(%rsp)       # 8-byte Spill
	leaq	.L.str69240, %rcx
	movq	%rcx, 24272(%rsp)       # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 24264(%rsp)       # 8-byte Spill
	leaq	.L.str65236, %rcx
	movq	%rcx, 24256(%rsp)       # 8-byte Spill
	leaq	.L.str66237, %rcx
	movq	%rcx, 24248(%rsp)       # 8-byte Spill
	leaq	.L.str67238, %rcx
	movq	%rcx, 24240(%rsp)       # 8-byte Spill
	movabsq	$26, %rcx
	movq	%rcx, 24232(%rsp)       # 8-byte Spill
	leaq	.L.str63234, %rcx
	movq	%rcx, 24224(%rsp)       # 8-byte Spill
	leaq	.L.str64235, %rcx
	movq	%rcx, 24216(%rsp)       # 8-byte Spill
	leaq	25560(%rsp), %rcx
	movq	%rcx, 24208(%rsp)       # 8-byte Spill
	leaq	.L.str61232, %rcx
	movq	%rcx, 24200(%rsp)       # 8-byte Spill
	leaq	.L.str62233, %rcx
	movq	%rcx, 24192(%rsp)       # 8-byte Spill
	leaq	.L.str58229, %rcx
	movq	%rcx, 24184(%rsp)       # 8-byte Spill
	leaq	.L.str59230, %rcx
	movq	%rcx, 24176(%rsp)       # 8-byte Spill
	leaq	.L.str60231, %rcx
	movq	%rcx, 24168(%rsp)       # 8-byte Spill
	leaq	.L.str56227, %rcx
	movq	%rcx, 24160(%rsp)       # 8-byte Spill
	leaq	.L.str57228, %rcx
	movq	%rcx, 24152(%rsp)       # 8-byte Spill
	leaq	25564(%rsp), %rcx
	movq	%rcx, 24144(%rsp)       # 8-byte Spill
	leaq	.L.str54225, %rcx
	movq	%rcx, 24136(%rsp)       # 8-byte Spill
	leaq	.L.str55226, %rcx
	movq	%rcx, 24128(%rsp)       # 8-byte Spill
	leaq	.L.str51222, %rcx
	movq	%rcx, 24120(%rsp)       # 8-byte Spill
	leaq	.L.str52223, %rcx
	movq	%rcx, 24112(%rsp)       # 8-byte Spill
	leaq	.L.str53224, %rcx
	movq	%rcx, 24104(%rsp)       # 8-byte Spill
	leaq	.L.str49220, %rcx
	movq	%rcx, 24096(%rsp)       # 8-byte Spill
	leaq	.L.str50221, %rcx
	movq	%rcx, 24088(%rsp)       # 8-byte Spill
	leaq	.L.str47218, %rcx
	movq	%rcx, 24080(%rsp)       # 8-byte Spill
	leaq	.L.str48219, %rcx
	movq	%rcx, 24072(%rsp)       # 8-byte Spill
	leaq	.L.str44215, %rcx
	movq	%rcx, 24064(%rsp)       # 8-byte Spill
	leaq	.L.str45216, %rcx
	movq	%rcx, 24056(%rsp)       # 8-byte Spill
	leaq	.L.str46217, %rcx
	movq	%rcx, 24048(%rsp)       # 8-byte Spill
	movq	24264(%rsp), %rcx       # 8-byte Reload
	movl	%edi, 24044(%rsp)       # 4-byte Spill
	movq	%rcx, %rdi
	movq	24064(%rsp), %rcx       # 8-byte Reload
	movq	%rsi, 24032(%rsp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	24056(%rsp), %rcx       # 8-byte Reload
	movl	%edx, 24028(%rsp)       # 4-byte Spill
	movq	%rcx, %rdx
	movq	24048(%rsp), %rcx       # 8-byte Reload
	movq	%r8, 24016(%rsp)        # 8-byte Spill
	movq	24232(%rsp), %r8        # 8-byte Reload
	movq	%r9, 24008(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, 24000(%rsp)       # 8-byte Spill
	movl	%ebp, 23996(%rsp)       # 4-byte Spill
	movl	%eax, 23992(%rsp)       # 4-byte Spill
	vmovss	%xmm0, 23988(%rsp)      # 4-byte Spill
	movq	%r15, 23976(%rsp)       # 8-byte Spill
	movq	%r12, 23968(%rsp)       # 8-byte Spill
	movq	%r14, 23960(%rsp)       # 8-byte Spill
	movq	%rbx, 23952(%rsp)       # 8-byte Spill
	movq	%r10, 23944(%rsp)       # 8-byte Spill
	movq	%r11, 23936(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	24016(%rsp), %rdi       # 8-byte Reload
	movq	24288(%rsp), %rsi       # 8-byte Reload
	movq	24016(%rsp), %rdx       # 8-byte Reload
	movq	24520(%rsp), %rcx       # 8-byte Reload
	movq	24080(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24072(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24000(%rsp), %rdi       # 8-byte Reload
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	24352(%rsp), %rdx       # 8-byte Reload
	movq	24016(%rsp), %rcx       # 8-byte Reload
	movq	24096(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24088(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24264(%rsp), %rdi       # 8-byte Reload
	movq	24120(%rsp), %rsi       # 8-byte Reload
	movq	24112(%rsp), %rdx       # 8-byte Reload
	movq	24104(%rsp), %rcx       # 8-byte Reload
	movq	24232(%rsp), %r8        # 8-byte Reload
	movl	23992(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	24016(%rsp), %rdi       # 8-byte Reload
	movq	24288(%rsp), %rsi       # 8-byte Reload
	movq	24016(%rsp), %rdx       # 8-byte Reload
	movq	24520(%rsp), %rcx       # 8-byte Reload
	movq	24136(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24128(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24000(%rsp), %rdi       # 8-byte Reload
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	24144(%rsp), %rdx       # 8-byte Reload
	movq	24016(%rsp), %rcx       # 8-byte Reload
	movq	24160(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24152(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24264(%rsp), %rdi       # 8-byte Reload
	movq	24184(%rsp), %rsi       # 8-byte Reload
	movq	24176(%rsp), %rdx       # 8-byte Reload
	movq	24168(%rsp), %rcx       # 8-byte Reload
	movq	24232(%rsp), %r8        # 8-byte Reload
	movl	23992(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	24016(%rsp), %rdi       # 8-byte Reload
	movq	24288(%rsp), %rsi       # 8-byte Reload
	movq	24016(%rsp), %rdx       # 8-byte Reload
	movq	24520(%rsp), %rcx       # 8-byte Reload
	movq	24200(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24192(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24000(%rsp), %rdi       # 8-byte Reload
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	24208(%rsp), %rdx       # 8-byte Reload
	movq	24016(%rsp), %rcx       # 8-byte Reload
	movq	24224(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24216(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24264(%rsp), %rdi       # 8-byte Reload
	movq	24256(%rsp), %rsi       # 8-byte Reload
	movq	24248(%rsp), %rdx       # 8-byte Reload
	movq	24240(%rsp), %rcx       # 8-byte Reload
	movq	24232(%rsp), %r8        # 8-byte Reload
	movl	23992(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	24016(%rsp), %rdi       # 8-byte Reload
	movq	24288(%rsp), %rsi       # 8-byte Reload
	movq	24016(%rsp), %rdx       # 8-byte Reload
	movq	24520(%rsp), %rcx       # 8-byte Reload
	movq	24280(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24272(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	.loc	3 97 0 prologue_end     # kmeans.c:97:0
.Ltmp80:
	movq	24000(%rsp), %rdi       # 8-byte Reload
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	24016(%rsp), %rcx       # 8-byte Reload
	movq	24304(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24296(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: main:argc <- [RSP+24044]
	#DEBUG_VALUE: main:argv <- [RSP+24032]
.Ltmp81:
	#DEBUG_VALUE: main:nclusters <- 5
	#DEBUG_VALUE: main:filename <- [RSP+24520]
	#DEBUG_VALUE: main:cluster_centres <- [RSP+24352]
	.loc	3 105 0                 # kmeans.c:105:0
	movq	24344(%rsp), %rdi       # 8-byte Reload
	movq	24336(%rsp), %rsi       # 8-byte Reload
	movq	24328(%rsp), %rdx       # 8-byte Reload
	movq	24320(%rsp), %rcx       # 8-byte Reload
	movq	24312(%rsp), %r8        # 8-byte Reload
	movl	23992(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	23968(%rsp), %rdi       # 8-byte Reload
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	24352(%rsp), %rdx       # 8-byte Reload
	movq	24016(%rsp), %rcx       # 8-byte Reload
	movq	24368(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24360(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24016(%rsp), %rdi       # 8-byte Reload
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	24520(%rsp), %rdx       # 8-byte Reload
	movq	24520(%rsp), %rcx       # 8-byte Reload
	movq	24384(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24376(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	$0, 25568(%rsp)
	.loc	3 110 0                 # kmeans.c:110:0
	movq	24424(%rsp), %rdi       # 8-byte Reload
	movq	24416(%rsp), %rsi       # 8-byte Reload
	movq	24408(%rsp), %rdx       # 8-byte Reload
	movq	24400(%rsp), %rcx       # 8-byte Reload
	movq	24392(%rsp), %r8        # 8-byte Reload
	movl	23992(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	24448(%rsp), %rdi       # 8-byte Reload
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	24520(%rsp), %rdx       # 8-byte Reload
	movq	24520(%rsp), %rcx       # 8-byte Reload
	movq	24440(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24432(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23968(%rsp), %rdi       # 8-byte Reload
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	24520(%rsp), %rdx       # 8-byte Reload
	movq	24520(%rsp), %rcx       # 8-byte Reload
	movq	24464(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24456(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24016(%rsp), %rdi       # 8-byte Reload
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	24016(%rsp), %rcx       # 8-byte Reload
	movq	24480(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24472(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24000(%rsp), %rdi       # 8-byte Reload
	movq	24512(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	24016(%rsp), %rcx       # 8-byte Reload
	movq	24504(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	24496(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp82:
	#DEBUG_VALUE: main:isBinaryFile <- 0
	#DEBUG_VALUE: main:threshold <- 1.000000e-03
	.loc	3 118 0                 # kmeans.c:118:0
	movq	23936(%rsp), %rdi       # 8-byte Reload
	movq	23952(%rsp), %rsi       # 8-byte Reload
	movq	23960(%rsp), %rdx       # 8-byte Reload
	movq	23976(%rsp), %rcx       # 8-byte Reload
	movq	23968(%rsp), %r8        # 8-byte Reload
	movl	23992(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	24016(%rsp), %rdi       # 8-byte Reload
	movq	24520(%rsp), %rsi       # 8-byte Reload
	movq	24520(%rsp), %rdx       # 8-byte Reload
	movq	24016(%rsp), %rcx       # 8-byte Reload
	movq	24008(%rsp), %r8        # 8-byte Reload
	movq	24520(%rsp), %r9        # 8-byte Reload
	movq	23944(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	23992(%rsp), %eax       # 4-byte Reload
	vmovss	23988(%rsp), %xmm0      # 4-byte Reload
	movq	24520(%rsp), %rcx       # 8-byte Reload
	movl	24028(%rsp), %ebp       # 4-byte Reload
	movl	%eax, 23932(%rsp)       # 4-byte Spill
	vmovss	%xmm0, 23928(%rsp)      # 4-byte Spill
	movq	%rcx, 23920(%rsp)       # 8-byte Spill
	movl	%ebp, 23916(%rsp)       # 4-byte Spill
.Ltmp83:
.LBB2_1:                                # %.outer19
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_2 Depth 2
                                        #       Child Loop BB2_3 Depth 3
                                        #         Child Loop BB2_4 Depth 4
	movl	23916(%rsp), %eax       # 4-byte Reload
	movq	23920(%rsp), %rcx       # 8-byte Reload
	vmovss	23928(%rsp), %xmm0      # 4-byte Reload
	movl	23932(%rsp), %edx       # 4-byte Reload
	movabsq	$1, %rsi
	movabsq	$0, %rdi
	leaq	.L.str134305, %r8
	leaq	.L.str135306, %r9
	movabsq	$-1, %r10
	leaq	.L.str131302, %r11
	leaq	.L.str132303, %rbx
	leaq	.L.str133304, %r14
	movabsq	$2, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 23904(%rsp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 23896(%rsp)       # 8-byte Spill
	leaq	.L.str129300, %rcx
	movq	%rcx, 23888(%rsp)       # 8-byte Spill
	leaq	.L.str130301, %rcx
	movq	%rcx, 23880(%rsp)       # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 23872(%rsp)       # 8-byte Spill
	leaq	.L.str127298, %rcx
	movq	%rcx, 23864(%rsp)       # 8-byte Spill
	leaq	.L.str128299, %rcx
	movq	%rcx, 23856(%rsp)       # 8-byte Spill
	leaq	.L.str125296, %rcx
	movq	%rcx, 23848(%rsp)       # 8-byte Spill
	leaq	.L.str126297, %rcx
	movq	%rcx, 23840(%rsp)       # 8-byte Spill
	leaq	.L.str122293, %rcx
	movq	%rcx, 23832(%rsp)       # 8-byte Spill
	leaq	.L.str123294, %rcx
	movq	%rcx, 23824(%rsp)       # 8-byte Spill
	leaq	.L.str124295, %rcx
	movq	%rcx, 23816(%rsp)       # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 23808(%rsp)       # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 23800(%rsp)       # 8-byte Spill
	leaq	.L.str120291, %rcx
	movq	%rcx, 23792(%rsp)       # 8-byte Spill
	leaq	.L.str121292, %rcx
	movq	%rcx, 23784(%rsp)       # 8-byte Spill
	leaq	.L.str118289, %rcx
	movq	%rcx, 23776(%rsp)       # 8-byte Spill
	leaq	.L.str119290, %rcx
	movq	%rcx, 23768(%rsp)       # 8-byte Spill
	leaq	.L.str116287, %rcx
	movq	%rcx, 23760(%rsp)       # 8-byte Spill
	leaq	.L.str117288, %rcx
	movq	%rcx, 23752(%rsp)       # 8-byte Spill
	leaq	.L.str113284, %rcx
	movq	%rcx, 23744(%rsp)       # 8-byte Spill
	leaq	.L.str114285, %rcx
	movq	%rcx, 23736(%rsp)       # 8-byte Spill
	leaq	.L.str115286, %rcx
	movq	%rcx, 23728(%rsp)       # 8-byte Spill
	leaq	.L.str111282, %rcx
	movq	%rcx, 23720(%rsp)       # 8-byte Spill
	leaq	.L.str112283, %rcx
	vmovsd	.LCPI2_1, %xmm1
	movq	%rcx, 23712(%rsp)       # 8-byte Spill
	leaq	.L.str109280, %rcx
	movq	%rcx, 23704(%rsp)       # 8-byte Spill
	leaq	.L.str110281, %rcx
	movq	%rcx, 23696(%rsp)       # 8-byte Spill
	leaq	.L.str107278, %rcx
	movq	%rcx, 23688(%rsp)       # 8-byte Spill
	leaq	.L.str108279, %rcx
	movq	%rcx, 23680(%rsp)       # 8-byte Spill
	leaq	.L.str104275, %rcx
	movq	%rcx, 23672(%rsp)       # 8-byte Spill
	leaq	.L.str105276, %rcx
	movq	%rcx, 23664(%rsp)       # 8-byte Spill
	leaq	.L.str106277, %rcx
	movq	%rcx, 23656(%rsp)       # 8-byte Spill
	leaq	.L.str102273, %rcx
	movq	%rcx, 23648(%rsp)       # 8-byte Spill
	leaq	.L.str103274, %rcx
	movq	%rcx, 23640(%rsp)       # 8-byte Spill
	leaq	.L.str100271, %rcx
	movq	%rcx, 23632(%rsp)       # 8-byte Spill
	leaq	.L.str101272, %rcx
	movq	%rcx, 23624(%rsp)       # 8-byte Spill
	leaq	.L.str98269, %rcx
	movq	%rcx, 23616(%rsp)       # 8-byte Spill
	leaq	.L.str99270, %rcx
	movq	%rcx, 23608(%rsp)       # 8-byte Spill
	leaq	.L.str95266, %rcx
	movq	%rcx, 23600(%rsp)       # 8-byte Spill
	leaq	.L.str96267, %rcx
	movq	%rcx, 23592(%rsp)       # 8-byte Spill
	leaq	.L.str97268, %rcx
	movq	%rdi, 23584(%rsp)       # 8-byte Spill
	movq	%r10, %rdi
	movq	%rcx, 23576(%rsp)       # 8-byte Spill
	movq	23600(%rsp), %rcx       # 8-byte Reload
	movq	%rsi, 23568(%rsp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	23592(%rsp), %rcx       # 8-byte Reload
	movl	%edx, 23564(%rsp)       # 4-byte Spill
	movq	%rcx, %rdx
	movq	23576(%rsp), %rcx       # 8-byte Reload
	movq	%r8, 23552(%rsp)        # 8-byte Spill
	movq	23808(%rsp), %r8        # 8-byte Reload
	movq	%r9, 23544(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 23540(%rsp)       # 4-byte Spill
	movl	%ebp, 23536(%rsp)       # 4-byte Spill
	vmovss	%xmm0, 23532(%rsp)      # 4-byte Spill
	movl	%r12d, 23528(%rsp)      # 4-byte Spill
	movq	%r13, 23520(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 23512(%rsp)      # 8-byte Spill
	movq	%r15, 23504(%rsp)       # 8-byte Spill
	movq	%r14, 23496(%rsp)       # 8-byte Spill
	movq	%r10, 23488(%rsp)       # 8-byte Spill
	movq	%r11, 23480(%rsp)       # 8-byte Spill
	movq	%rbx, 23472(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	23504(%rsp), %rdi       # 8-byte Reload
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	23568(%rsp), %rdx       # 8-byte Reload
	movq	23584(%rsp), %rcx       # 8-byte Reload
	movq	23616(%rsp), %r8        # 8-byte Reload
	movq	23568(%rsp), %r9        # 8-byte Reload
	movq	23608(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23568(%rsp), %rdi       # 8-byte Reload
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	23584(%rsp), %rdx       # 8-byte Reload
	movq	23584(%rsp), %rcx       # 8-byte Reload
	movq	23632(%rsp), %r8        # 8-byte Reload
	movq	23568(%rsp), %r9        # 8-byte Reload
	movq	23624(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	23564(%rsp), %eax       # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	23520(%rsp), %rdi       # 8-byte Reload
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	23568(%rsp), %rcx       # 8-byte Reload
	movq	23648(%rsp), %r8        # 8-byte Reload
	movq	23584(%rsp), %r9        # 8-byte Reload
	movq	23640(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23488(%rsp), %rdi       # 8-byte Reload
	movq	23672(%rsp), %rsi       # 8-byte Reload
	movq	23664(%rsp), %rdx       # 8-byte Reload
	movq	23656(%rsp), %rcx       # 8-byte Reload
	movq	23808(%rsp), %r8        # 8-byte Reload
	movl	23536(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	23504(%rsp), %rdi       # 8-byte Reload
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	23584(%rsp), %rdx       # 8-byte Reload
	movq	23568(%rsp), %rcx       # 8-byte Reload
	movq	23688(%rsp), %r8        # 8-byte Reload
	movq	23568(%rsp), %r9        # 8-byte Reload
	movq	23680(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23568(%rsp), %rdi       # 8-byte Reload
	movq	23896(%rsp), %rsi       # 8-byte Reload
	vmovsd	23512(%rsp), %xmm0      # 8-byte Reload
	movq	23584(%rsp), %rdx       # 8-byte Reload
	movq	23704(%rsp), %rcx       # 8-byte Reload
	movq	23568(%rsp), %r8        # 8-byte Reload
	movq	23696(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	23532(%rsp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	23520(%rsp), %rdi       # 8-byte Reload
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	23568(%rsp), %rdx       # 8-byte Reload
	movq	23720(%rsp), %rcx       # 8-byte Reload
	movq	23584(%rsp), %r8        # 8-byte Reload
	movq	23712(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	23488(%rsp), %rdi       # 8-byte Reload
	movq	23744(%rsp), %rsi       # 8-byte Reload
	movq	23736(%rsp), %rdx       # 8-byte Reload
	movq	23728(%rsp), %rcx       # 8-byte Reload
	movq	23808(%rsp), %r8        # 8-byte Reload
	movl	23536(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	23504(%rsp), %rdi       # 8-byte Reload
	movq	23800(%rsp), %rsi       # 8-byte Reload
	movq	23584(%rsp), %rdx       # 8-byte Reload
	movq	23568(%rsp), %rcx       # 8-byte Reload
	movq	23760(%rsp), %r8        # 8-byte Reload
	movq	23568(%rsp), %r9        # 8-byte Reload
	movq	23752(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23568(%rsp), %rdi       # 8-byte Reload
	movq	23800(%rsp), %rsi       # 8-byte Reload
	movq	23584(%rsp), %rdx       # 8-byte Reload
	movq	23584(%rsp), %rcx       # 8-byte Reload
	movq	23776(%rsp), %r8        # 8-byte Reload
	movq	23568(%rsp), %r9        # 8-byte Reload
	movq	23768(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23520(%rsp), %rdi       # 8-byte Reload
	movq	23800(%rsp), %rsi       # 8-byte Reload
	movq	23904(%rsp), %rdx       # 8-byte Reload
	movq	23568(%rsp), %rcx       # 8-byte Reload
	movq	23792(%rsp), %r8        # 8-byte Reload
	movq	23584(%rsp), %r9        # 8-byte Reload
	movq	23784(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23488(%rsp), %rdi       # 8-byte Reload
	movq	23832(%rsp), %rsi       # 8-byte Reload
	movq	23824(%rsp), %rdx       # 8-byte Reload
	movq	23816(%rsp), %rcx       # 8-byte Reload
	movq	23808(%rsp), %r8        # 8-byte Reload
	movl	23536(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	23504(%rsp), %rdi       # 8-byte Reload
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	23584(%rsp), %rdx       # 8-byte Reload
	movq	23568(%rsp), %rcx       # 8-byte Reload
	movq	23848(%rsp), %r8        # 8-byte Reload
	movq	23568(%rsp), %r9        # 8-byte Reload
	movq	23840(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23568(%rsp), %rdi       # 8-byte Reload
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	23872(%rsp), %rdx       # 8-byte Reload
	movq	23584(%rsp), %rcx       # 8-byte Reload
	movq	23864(%rsp), %r8        # 8-byte Reload
	movq	23568(%rsp), %r9        # 8-byte Reload
	movq	23856(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	23540(%rsp), %eax       # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	23520(%rsp), %rdi       # 8-byte Reload
	movq	23896(%rsp), %rsi       # 8-byte Reload
	movq	23568(%rsp), %rcx       # 8-byte Reload
	movq	23888(%rsp), %r8        # 8-byte Reload
	movq	23584(%rsp), %r9        # 8-byte Reload
	movq	23880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23488(%rsp), %rdi       # 8-byte Reload
	movq	23480(%rsp), %rsi       # 8-byte Reload
	movq	23472(%rsp), %rdx       # 8-byte Reload
	movq	23496(%rsp), %rcx       # 8-byte Reload
	movq	23504(%rsp), %r8        # 8-byte Reload
	movl	23536(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	23568(%rsp), %rdi       # 8-byte Reload
	movq	23584(%rsp), %rsi       # 8-byte Reload
	movq	23584(%rsp), %rdx       # 8-byte Reload
	movq	23568(%rsp), %rcx       # 8-byte Reload
	movq	23552(%rsp), %r8        # 8-byte Reload
	movq	23584(%rsp), %r9        # 8-byte Reload
	movq	23544(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovss	23532(%rsp), %xmm0      # 4-byte Reload
	movq	23904(%rsp), %rcx       # 8-byte Reload
	movl	23540(%rsp), %eax       # 4-byte Reload
	vmovss	%xmm0, 23468(%rsp)      # 4-byte Spill
	movq	%rcx, 23456(%rsp)       # 8-byte Spill
	movl	%eax, 23452(%rsp)       # 4-byte Spill
.LBB2_2:                                # %.outer20
                                        #   Parent Loop BB2_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB2_3 Depth 3
                                        #         Child Loop BB2_4 Depth 4
	movl	23452(%rsp), %eax       # 4-byte Reload
	movq	23456(%rsp), %rcx       # 8-byte Reload
	vmovss	23468(%rsp), %xmm0      # 4-byte Reload
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str166337, %r8
	leaq	.L.str167338, %rdi
	movabsq	$-1, %r9
	leaq	.L.str163334, %r10
	leaq	.L.str164335, %r11
	leaq	.L.str165336, %rbx
	movabsq	$2, %r14
	movl	$0, %ebp
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$32, %r13
	movq	%rcx, 23440(%rsp)       # 8-byte Spill
	leaq	.L.str161332, %rcx
	movq	%rcx, 23432(%rsp)       # 8-byte Spill
	leaq	.L.str162333, %rcx
	movq	%rcx, 23424(%rsp)       # 8-byte Spill
	leaq	.L.str159330, %rcx
	movq	%rcx, 23416(%rsp)       # 8-byte Spill
	leaq	.L.str160331, %rcx
	movq	%rcx, 23408(%rsp)       # 8-byte Spill
	leaq	.L.str157328, %rcx
	movq	%rcx, 23400(%rsp)       # 8-byte Spill
	leaq	.L.str158329, %rcx
	movq	%rcx, 23392(%rsp)       # 8-byte Spill
	leaq	.L.str154325, %rcx
	movq	%rcx, 23384(%rsp)       # 8-byte Spill
	leaq	.L.str155326, %rcx
	movq	%rcx, 23376(%rsp)       # 8-byte Spill
	leaq	.L.str156327, %rcx
	movq	%rcx, 23368(%rsp)       # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 23360(%rsp)       # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 23352(%rsp)       # 8-byte Spill
	leaq	.L.str152323, %rcx
	movq	%rcx, 23344(%rsp)       # 8-byte Spill
	leaq	.L.str153324, %rcx
	movq	%rcx, 23336(%rsp)       # 8-byte Spill
	leaq	.L.str150321, %rcx
	movq	%rcx, 23328(%rsp)       # 8-byte Spill
	leaq	.L.str151322, %rcx
	movq	%rcx, 23320(%rsp)       # 8-byte Spill
	leaq	.L.str148319, %rcx
	movq	%rcx, 23312(%rsp)       # 8-byte Spill
	leaq	.L.str149320, %rcx
	movq	%rcx, 23304(%rsp)       # 8-byte Spill
	leaq	.L.str145316, %rcx
	movq	%rcx, 23296(%rsp)       # 8-byte Spill
	leaq	.L.str146317, %rcx
	movq	%rcx, 23288(%rsp)       # 8-byte Spill
	leaq	.L.str147318, %rcx
	movq	%rcx, 23280(%rsp)       # 8-byte Spill
	leaq	.L.str143314, %rcx
	movq	%rcx, 23272(%rsp)       # 8-byte Spill
	leaq	.L.str144315, %rcx
	movq	%rcx, 23264(%rsp)       # 8-byte Spill
	leaq	.L.str141312, %rcx
	movq	%rcx, 23256(%rsp)       # 8-byte Spill
	leaq	.L.str142313, %rcx
	movq	%rcx, 23248(%rsp)       # 8-byte Spill
	leaq	.L.str139310, %rcx
	movq	%rcx, 23240(%rsp)       # 8-byte Spill
	leaq	.L.str140311, %rcx
	movq	%rcx, 23232(%rsp)       # 8-byte Spill
	leaq	.L.str136307, %rcx
	movq	%rcx, 23224(%rsp)       # 8-byte Spill
	leaq	.L.str137308, %rcx
	movq	%rcx, 23216(%rsp)       # 8-byte Spill
	leaq	.L.str138309, %rcx
	movq	%rdi, 23208(%rsp)       # 8-byte Spill
	movq	%r9, %rdi
	movq	%rcx, 23200(%rsp)       # 8-byte Spill
	movq	23224(%rsp), %rcx       # 8-byte Reload
	movq	%rsi, 23192(%rsp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	23216(%rsp), %rcx       # 8-byte Reload
	movq	%rdx, 23184(%rsp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	23200(%rsp), %rcx       # 8-byte Reload
	movq	%r8, 23176(%rsp)        # 8-byte Spill
	movq	23360(%rsp), %r8        # 8-byte Reload
	movq	%r9, 23168(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 23164(%rsp)       # 4-byte Spill
	movl	%ebp, 23160(%rsp)       # 4-byte Spill
	vmovss	%xmm0, 23156(%rsp)      # 4-byte Spill
	movl	%r15d, 23152(%rsp)      # 4-byte Spill
	movq	%r12, 23144(%rsp)       # 8-byte Spill
	movq	%r14, 23136(%rsp)       # 8-byte Spill
	movq	%r13, 23128(%rsp)       # 8-byte Spill
	movq	%rbx, 23120(%rsp)       # 8-byte Spill
	movq	%r10, 23112(%rsp)       # 8-byte Spill
	movq	%r11, 23104(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	23136(%rsp), %rdi       # 8-byte Reload
	movq	23128(%rsp), %rsi       # 8-byte Reload
	movq	23192(%rsp), %rdx       # 8-byte Reload
	movq	23184(%rsp), %rcx       # 8-byte Reload
	movq	23240(%rsp), %r8        # 8-byte Reload
	movq	23184(%rsp), %r9        # 8-byte Reload
	movq	23232(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23184(%rsp), %rdi       # 8-byte Reload
	movq	23128(%rsp), %rsi       # 8-byte Reload
	movq	23192(%rsp), %rdx       # 8-byte Reload
	movq	23184(%rsp), %rcx       # 8-byte Reload
	movq	23256(%rsp), %r8        # 8-byte Reload
	movq	23184(%rsp), %r9        # 8-byte Reload
	movq	23248(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovss	23156(%rsp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	23144(%rsp), %rdi       # 8-byte Reload
	movq	23128(%rsp), %rsi       # 8-byte Reload
	movq	23184(%rsp), %rdx       # 8-byte Reload
	movq	23272(%rsp), %rcx       # 8-byte Reload
	movq	23192(%rsp), %r8        # 8-byte Reload
	movq	23264(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	23168(%rsp), %rdi       # 8-byte Reload
	movq	23296(%rsp), %rsi       # 8-byte Reload
	movq	23288(%rsp), %rdx       # 8-byte Reload
	movq	23280(%rsp), %rcx       # 8-byte Reload
	movq	23360(%rsp), %r8        # 8-byte Reload
	movl	23160(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	23136(%rsp), %rdi       # 8-byte Reload
	movq	23352(%rsp), %rsi       # 8-byte Reload
	movq	23192(%rsp), %rdx       # 8-byte Reload
	movq	23184(%rsp), %rcx       # 8-byte Reload
	movq	23312(%rsp), %r8        # 8-byte Reload
	movq	23184(%rsp), %r9        # 8-byte Reload
	movq	23304(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23184(%rsp), %rdi       # 8-byte Reload
	movq	23352(%rsp), %rsi       # 8-byte Reload
	movq	23192(%rsp), %rdx       # 8-byte Reload
	movq	23184(%rsp), %rcx       # 8-byte Reload
	movq	23328(%rsp), %r8        # 8-byte Reload
	movq	23184(%rsp), %r9        # 8-byte Reload
	movq	23320(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23144(%rsp), %rdi       # 8-byte Reload
	movq	23352(%rsp), %rsi       # 8-byte Reload
	movq	23440(%rsp), %rdx       # 8-byte Reload
	movq	23184(%rsp), %rcx       # 8-byte Reload
	movq	23344(%rsp), %r8        # 8-byte Reload
	movq	23192(%rsp), %r9        # 8-byte Reload
	movq	23336(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23168(%rsp), %rdi       # 8-byte Reload
	movq	23384(%rsp), %rsi       # 8-byte Reload
	movq	23376(%rsp), %rdx       # 8-byte Reload
	movq	23368(%rsp), %rcx       # 8-byte Reload
	movq	23360(%rsp), %r8        # 8-byte Reload
	movl	23160(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	23136(%rsp), %rdi       # 8-byte Reload
	movq	23128(%rsp), %rsi       # 8-byte Reload
	movq	23192(%rsp), %rdx       # 8-byte Reload
	movq	23184(%rsp), %rcx       # 8-byte Reload
	movq	23400(%rsp), %r8        # 8-byte Reload
	movq	23184(%rsp), %r9        # 8-byte Reload
	movq	23392(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23184(%rsp), %rdi       # 8-byte Reload
	movq	23128(%rsp), %rsi       # 8-byte Reload
	movq	23192(%rsp), %rdx       # 8-byte Reload
	movq	23184(%rsp), %rcx       # 8-byte Reload
	movq	23416(%rsp), %r8        # 8-byte Reload
	movq	23184(%rsp), %r9        # 8-byte Reload
	movq	23408(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	23164(%rsp), %eax       # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	23144(%rsp), %rdi       # 8-byte Reload
	movq	23128(%rsp), %rsi       # 8-byte Reload
	movq	23184(%rsp), %rcx       # 8-byte Reload
	movq	23432(%rsp), %r8        # 8-byte Reload
	movq	23192(%rsp), %r9        # 8-byte Reload
	movq	23424(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23168(%rsp), %rdi       # 8-byte Reload
	movq	23112(%rsp), %rsi       # 8-byte Reload
	movq	23104(%rsp), %rdx       # 8-byte Reload
	movq	23120(%rsp), %rcx       # 8-byte Reload
	movq	23136(%rsp), %r8        # 8-byte Reload
	movl	23160(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	23184(%rsp), %rdi       # 8-byte Reload
	movq	23192(%rsp), %rsi       # 8-byte Reload
	movq	23192(%rsp), %rdx       # 8-byte Reload
	movq	23184(%rsp), %rcx       # 8-byte Reload
	movq	23176(%rsp), %r8        # 8-byte Reload
	movq	23192(%rsp), %r9        # 8-byte Reload
	movq	23208(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23440(%rsp), %rcx       # 8-byte Reload
	movl	23164(%rsp), %eax       # 4-byte Reload
	movq	%rcx, 23096(%rsp)       # 8-byte Spill
	movl	%eax, 23092(%rsp)       # 4-byte Spill
.LBB2_3:                                # %.outer24
                                        #   Parent Loop BB2_1 Depth=1
                                        #     Parent Loop BB2_2 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB2_4 Depth 4
	movl	23092(%rsp), %eax       # 4-byte Reload
	movq	23096(%rsp), %rcx       # 8-byte Reload
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str189, %r8
	leaq	.L.str190, %rdi
	movabsq	$-1, %r9
	leaq	.L.str186, %r10
	leaq	.L.str187, %r11
	leaq	.L.str188, %rbx
	movabsq	$2, %r14
	movl	$0, %ebp
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$32, %r13
	movq	%rcx, 23080(%rsp)       # 8-byte Spill
	leaq	.L.str184, %rcx
	movq	%rcx, 23072(%rsp)       # 8-byte Spill
	leaq	.L.str185, %rcx
	movq	%rcx, 23064(%rsp)       # 8-byte Spill
	leaq	.L.str182, %rcx
	movq	%rcx, 23056(%rsp)       # 8-byte Spill
	leaq	.L.str183, %rcx
	movq	%rcx, 23048(%rsp)       # 8-byte Spill
	leaq	.L.str180, %rcx
	movq	%rcx, 23040(%rsp)       # 8-byte Spill
	leaq	.L.str181, %rcx
	movq	%rcx, 23032(%rsp)       # 8-byte Spill
	leaq	.L.str177, %rcx
	movq	%rcx, 23024(%rsp)       # 8-byte Spill
	leaq	.L.str178, %rcx
	movq	%rcx, 23016(%rsp)       # 8-byte Spill
	leaq	.L.str179, %rcx
	movq	%rcx, 23008(%rsp)       # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 23000(%rsp)       # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 22992(%rsp)       # 8-byte Spill
	leaq	.L.str175, %rcx
	movq	%rcx, 22984(%rsp)       # 8-byte Spill
	leaq	.L.str176, %rcx
	movq	%rcx, 22976(%rsp)       # 8-byte Spill
	leaq	.L.str173, %rcx
	movq	%rcx, 22968(%rsp)       # 8-byte Spill
	leaq	.L.str174, %rcx
	movq	%rcx, 22960(%rsp)       # 8-byte Spill
	leaq	.L.str171342, %rcx
	movq	%rcx, 22952(%rsp)       # 8-byte Spill
	leaq	.L.str172, %rcx
	movq	%rcx, 22944(%rsp)       # 8-byte Spill
	leaq	.L.str168339, %rcx
	movq	%rcx, 22936(%rsp)       # 8-byte Spill
	leaq	.L.str169340, %rcx
	movq	%rcx, 22928(%rsp)       # 8-byte Spill
	leaq	.L.str170341, %rcx
	movq	%rdi, 22920(%rsp)       # 8-byte Spill
	movq	%r9, %rdi
	movq	%rcx, 22912(%rsp)       # 8-byte Spill
	movq	22936(%rsp), %rcx       # 8-byte Reload
	movq	%rsi, 22904(%rsp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	22928(%rsp), %rcx       # 8-byte Reload
	movq	%rdx, 22896(%rsp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	22912(%rsp), %rcx       # 8-byte Reload
	movq	%r8, 22888(%rsp)        # 8-byte Spill
	movq	23000(%rsp), %r8        # 8-byte Reload
	movq	%r9, 22880(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 22876(%rsp)       # 4-byte Spill
	movl	%ebp, 22872(%rsp)       # 4-byte Spill
	movl	%r15d, 22868(%rsp)      # 4-byte Spill
	movq	%r12, 22856(%rsp)       # 8-byte Spill
	movq	%r14, 22848(%rsp)       # 8-byte Spill
	movq	%r13, 22840(%rsp)       # 8-byte Spill
	movq	%rbx, 22832(%rsp)       # 8-byte Spill
	movq	%r10, 22824(%rsp)       # 8-byte Spill
	movq	%r11, 22816(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	22848(%rsp), %rdi       # 8-byte Reload
	movq	22992(%rsp), %rsi       # 8-byte Reload
	movq	22904(%rsp), %rdx       # 8-byte Reload
	movq	22896(%rsp), %rcx       # 8-byte Reload
	movq	22952(%rsp), %r8        # 8-byte Reload
	movq	22896(%rsp), %r9        # 8-byte Reload
	movq	22944(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	22896(%rsp), %rdi       # 8-byte Reload
	movq	22992(%rsp), %rsi       # 8-byte Reload
	movq	22904(%rsp), %rdx       # 8-byte Reload
	movq	22896(%rsp), %rcx       # 8-byte Reload
	movq	22968(%rsp), %r8        # 8-byte Reload
	movq	22896(%rsp), %r9        # 8-byte Reload
	movq	22960(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	22856(%rsp), %rdi       # 8-byte Reload
	movq	22992(%rsp), %rsi       # 8-byte Reload
	movq	23080(%rsp), %rdx       # 8-byte Reload
	movq	22896(%rsp), %rcx       # 8-byte Reload
	movq	22984(%rsp), %r8        # 8-byte Reload
	movq	22904(%rsp), %r9        # 8-byte Reload
	movq	22976(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	22880(%rsp), %rdi       # 8-byte Reload
	movq	23024(%rsp), %rsi       # 8-byte Reload
	movq	23016(%rsp), %rdx       # 8-byte Reload
	movq	23008(%rsp), %rcx       # 8-byte Reload
	movq	23000(%rsp), %r8        # 8-byte Reload
	movl	22872(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	22848(%rsp), %rdi       # 8-byte Reload
	movq	22840(%rsp), %rsi       # 8-byte Reload
	movq	22904(%rsp), %rdx       # 8-byte Reload
	movq	22896(%rsp), %rcx       # 8-byte Reload
	movq	23040(%rsp), %r8        # 8-byte Reload
	movq	22896(%rsp), %r9        # 8-byte Reload
	movq	23032(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	22896(%rsp), %rdi       # 8-byte Reload
	movq	22840(%rsp), %rsi       # 8-byte Reload
	movq	22904(%rsp), %rdx       # 8-byte Reload
	movq	22896(%rsp), %rcx       # 8-byte Reload
	movq	23056(%rsp), %r8        # 8-byte Reload
	movq	22896(%rsp), %r9        # 8-byte Reload
	movq	23048(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	22876(%rsp), %eax       # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	22856(%rsp), %rdi       # 8-byte Reload
	movq	22840(%rsp), %rsi       # 8-byte Reload
	movq	22896(%rsp), %rcx       # 8-byte Reload
	movq	23072(%rsp), %r8        # 8-byte Reload
	movq	22904(%rsp), %r9        # 8-byte Reload
	movq	23064(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	22880(%rsp), %rdi       # 8-byte Reload
	movq	22824(%rsp), %rsi       # 8-byte Reload
	movq	22816(%rsp), %rdx       # 8-byte Reload
	movq	22832(%rsp), %rcx       # 8-byte Reload
	movq	22848(%rsp), %r8        # 8-byte Reload
	movl	22872(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	22896(%rsp), %rdi       # 8-byte Reload
	movq	22904(%rsp), %rsi       # 8-byte Reload
	movq	22904(%rsp), %rdx       # 8-byte Reload
	movq	22896(%rsp), %rcx       # 8-byte Reload
	movq	22888(%rsp), %r8        # 8-byte Reload
	movq	22904(%rsp), %r9        # 8-byte Reload
	movq	22920(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	22876(%rsp), %eax       # 4-byte Reload
	movl	%eax, 22812(%rsp)       # 4-byte Spill
.LBB2_4:                                #   Parent Loop BB2_1 Depth=1
                                        #     Parent Loop BB2_2 Depth=2
                                        #       Parent Loop BB2_3 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	22812(%rsp), %eax       # 4-byte Reload
	movl	$1, %ecx
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str191, %esi
                                        # kill: RSI<def> ESI<kill>
	movl	$.L.str192, %edi
	movl	%edi, %edx
	movl	$.L.str193, %edi
	movl	%edi, %r8d
	movl	$48, %edi
	movl	%edi, %r9d
	movq	$-1, %rdi
	xorl	%r10d, %r10d
	movl	%ecx, 22808(%rsp)       # 4-byte Spill
	movq	%r8, %rcx
	movq	%r9, %r8
	movl	%r10d, %r9d
	movl	%eax, 22804(%rsp)       # 4-byte Spill
	movl	%r10d, 22800(%rsp)      # 4-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str195, (%rcx)
	movl	$.L.str194, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %edx
	movl	22800(%rsp), %eax       # 4-byte Reload
	movl	%eax, %esi
	movl	$1, %r9d
	movl	%r9d, %edi
	movq	%rdi, 22792(%rsp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 22784(%rsp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	22784(%rsp), %r11       # 8-byte Reload
	movq	%rdx, 22776(%rsp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	22792(%rsp), %rbx       # 8-byte Reload
	movq	%rcx, 22768(%rsp)       # 8-byte Spill
	movq	%rbx, %rcx
	movq	%rbx, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str197, (%rcx)
	movl	$.L.str196, %eax
	movl	%eax, %r8d
	movq	22792(%rsp), %rdi       # 8-byte Reload
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22792(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movl	22804(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %edx
	movq	%rsp, %rcx
	movq	$.L.str199, (%rcx)
	movl	$.L.str198, %r10d
	movl	%r10d, %r8d
	movl	$19134, %r10d           # imm = 0x4ABE
	movl	%r10d, %ecx
	movq	%rcx, %rdi
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	22792(%rsp), %r9        # 8-byte Reload
	movq	%rcx, 22760(%rsp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str200, %eax
	movl	%eax, %esi
	movl	$.L.str201, %eax
	movl	%eax, %edx
	movl	$.L.str202, %eax
	movl	%eax, %ecx
	movl	$118, %eax
	movl	%eax, %edi
	movl	$49, %eax
	movl	%eax, %r8d
	movq	%rdi, 22752(%rsp)       # 8-byte Spill
	movl	22800(%rsp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str204, (%rcx)
	movl	$getopt, %eax
	movl	%eax, %edx
	movl	$.L.str203, %eax
	movl	%eax, %r8d
	movl	$4, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %esi
	movq	%rcx, %rdi
	movq	%rsi, 22744(%rsp)       # 8-byte Spill
	movq	22792(%rsp), %r11       # 8-byte Reload
	movq	%rcx, 22736(%rsp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movl	24044(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r10d
	movl	%r10d, %ecx
	movq	%rsp, %rdx
	movq	$.L.str206, (%rdx)
	movl	$.L.str205, %r10d
	movl	%r10d, %r8d
	movq	22792(%rsp), %rdi       # 8-byte Reload
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	22792(%rsp), %r9        # 8-byte Reload
	movq	%rcx, 22728(%rsp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str208, (%rcx)
	movl	$.L.str207, %eax
	movl	%eax, %r8d
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	22728(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %r9        # 8-byte Reload
	movq	%rcx, 22720(%rsp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str210, (%rcx)
	movl	$.L.str209, %eax
	movl	%eax, %r8d
	movq	22768(%rsp), %rdi       # 8-byte Reload
	movq	22744(%rsp), %rsi       # 8-byte Reload
	movq	24032(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str212, (%rcx)
	movl	$.L.str211, %eax
	movl	%eax, %r8d
	movq	22720(%rsp), %rdi       # 8-byte Reload
	movq	22744(%rsp), %rsi       # 8-byte Reload
	movq	24032(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str214, (%rcx)
	movl	$.L.str1172, %eax
	movl	%eax, %ecx
	movl	$.L.str213, %eax
	movl	%eax, %r8d
	movl	$3, %eax
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	22744(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 22712(%rsp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	22784(%rsp), %r9        # 8-byte Reload
	movq	%rcx, 22704(%rsp)       # 8-byte Spill
	movq	%r9, %rcx
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str216, (%rcx)
	movl	$.L.str215, %eax
	movl	%eax, %r8d
	movq	22720(%rsp), %rdi       # 8-byte Reload
	movq	22744(%rsp), %rsi       # 8-byte Reload
	movq	22704(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movl	24044(%rsp), %edi       # 4-byte Reload
	movq	24032(%rsp), %rsi       # 8-byte Reload
	movq	22704(%rsp), %rdx       # 8-byte Reload
	callq	getopt
.Ltmp84:
	#DEBUG_VALUE: main:opt <- EAX
	movl	%eax, %edi
	movl	%edi, %ecx
	movq	%rsp, %rdx
	movq	$.L.str218, (%rdx)
	movl	$.L.str217, %edi
	movl	%edi, %r8d
	movq	22760(%rsp), %rdi       # 8-byte Reload
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	22792(%rsp), %r9        # 8-byte Reload
	movq	%rcx, 22696(%rsp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	22784(%rsp), %r9        # 8-byte Reload
	movl	%eax, 22692(%rsp)       # 4-byte Spill
.Ltmp85:
	#DEBUG_VALUE: main:opt <- [RSP+22692]
	callq	trace_logger_log_int
.Ltmp86:
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str219, %eax
	movl	%eax, %esi
	movl	$.L.str220, %eax
	movl	%eax, %edx
	movl	$.L.str221, %eax
	movl	%eax, %ecx
	movq	22752(%rsp), %rdi       # 8-byte Reload
	movq	22712(%rsp), %r8        # 8-byte Reload
	movl	22800(%rsp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str223, (%rcx)
	movl	$.L.str222, %eax
	movl	%eax, %r8d
	movl	$14, %eax
	movl	%eax, %edi
	movq	22784(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str225, (%rcx)
	movl	$.L.str224, %eax
	movl	%eax, %r8d
	movl	$13, %eax
	movl	%eax, %edi
	movl	$63, %eax
	movl	%eax, %edx
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str227, (%rcx)
	movl	$.L.str226, %eax
	movl	%eax, %r8d
	movl	$12, %eax
	movl	%eax, %edi
	movq	22784(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str229, (%rcx)
	movl	$.L.str228, %eax
	movl	%eax, %r8d
	movl	$11, %eax
	movl	%eax, %edi
	movl	$107, %eax
	movl	%eax, %edx
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str231, (%rcx)
	movl	$.L.str230, %eax
	movl	%eax, %r8d
	movl	$10, %eax
	movl	%eax, %edi
	movq	22784(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str233, (%rcx)
	movl	$.L.str232, %eax
	movl	%eax, %r8d
	movl	$9, %eax
	movl	%eax, %edi
	movl	$116, %eax
	movl	%eax, %edx
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str235, (%rcx)
	movl	$.L.str234, %eax
	movl	%eax, %r8d
	movl	$8, %eax
	movl	%eax, %edi
	movq	22784(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str237, (%rcx)
	movl	$.L.str236, %eax
	movl	%eax, %r8d
	movl	$7, %eax
	movl	%eax, %edi
	movl	$98, %eax
	movl	%eax, %edx
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str239, (%rcx)
	movl	$.L.str238, %eax
	movl	%eax, %r8d
	movl	$6, %eax
	movl	%eax, %edi
	movq	22784(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str241, (%rcx)
	movl	$.L.str240, %eax
	movl	%eax, %r8d
	movl	$5, %eax
	movl	%eax, %edi
	movl	$105, %eax
	movl	%eax, %edx
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str243, (%rcx)
	movl	$.L.str242, %eax
	movl	%eax, %r8d
	movq	22736(%rsp), %rdi       # 8-byte Reload
	movq	22784(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str245, (%rcx)
	movl	$.L.str244, %eax
	movl	%eax, %r8d
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %edx
	movq	22712(%rsp), %rdi       # 8-byte Reload
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str247, (%rcx)
	movl	$.L.str246, %eax
	movl	%eax, %r8d
	movq	22768(%rsp), %rdi       # 8-byte Reload
	movq	22784(%rsp), %rsi       # 8-byte Reload
	movq	22784(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str249, (%rcx)
	movl	$.L.str248, %eax
	movl	%eax, %r8d
	movq	22792(%rsp), %rdi       # 8-byte Reload
	movq	22776(%rsp), %rsi       # 8-byte Reload
	movq	22696(%rsp), %rdx       # 8-byte Reload
	movq	22792(%rsp), %rcx       # 8-byte Reload
	movq	22784(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	movl	22692(%rsp), %eax       # 4-byte Reload
	subl	$62, %eax
	movl	$1, %r10d
	movl	22692(%rsp), %ebp       # 4-byte Reload
	movl	%eax, 22688(%rsp)       # 4-byte Spill
	movl	%r10d, 22684(%rsp)      # 4-byte Spill
	movl	%ebp, 22680(%rsp)       # 4-byte Spill
	jg	.LBB2_43
	jmp	.LBB2_42
.LBB2_42:
	movl	22680(%rsp), %eax       # 4-byte Reload
	subl	$-1, %eax
	movl	%eax, 22676(%rsp)       # 4-byte Spill
	je	.LBB2_10
	jmp	.LBB2_9
.LBB2_43:                               #   in Loop: Header=BB2_4 Depth=4
	movl	22680(%rsp), %eax       # 4-byte Reload
	subl	$97, %eax
	movl	%eax, 22672(%rsp)       # 4-byte Spill
	jg	.LBB2_45
	jmp	.LBB2_44
.LBB2_44:
	movl	22680(%rsp), %eax       # 4-byte Reload
	subl	$63, %eax
	movl	%eax, 22668(%rsp)       # 4-byte Spill
	je	.LBB2_8
	jmp	.LBB2_9
.LBB2_45:                               #   in Loop: Header=BB2_4 Depth=4
	movl	22680(%rsp), %eax       # 4-byte Reload
	subl	$115, %eax
	movl	%eax, 22664(%rsp)       # 4-byte Spill
	jg	.LBB2_47
	jmp	.LBB2_46
.LBB2_46:                               #   in Loop: Header=BB2_4 Depth=4
	movl	22680(%rsp), %eax       # 4-byte Reload
	subl	$98, %eax
	movl	22808(%rsp), %ecx       # 4-byte Reload
	vmovss	23156(%rsp), %xmm0      # 4-byte Reload
	movq	23080(%rsp), %rdx       # 8-byte Reload
	movl	22804(%rsp), %esi       # 4-byte Reload
	movl	%eax, 22660(%rsp)       # 4-byte Spill
	movl	%ecx, 23932(%rsp)       # 4-byte Spill
	vmovss	%xmm0, 23928(%rsp)      # 4-byte Spill
	movq	%rdx, 23920(%rsp)       # 8-byte Spill
	movl	%esi, 23916(%rsp)       # 4-byte Spill
	je	.LBB2_1
	jmp	.LBB2_48
.LBB2_48:                               #   in Loop: Header=BB2_4 Depth=4
	movl	22680(%rsp), %eax       # 4-byte Reload
	subl	$105, %eax
	movl	%eax, 22656(%rsp)       # 4-byte Spill
	je	.LBB2_5
	jmp	.LBB2_49
.LBB2_49:                               #   in Loop: Header=BB2_4 Depth=4
	movl	22680(%rsp), %eax       # 4-byte Reload
	subl	$107, %eax
	movl	%eax, 22652(%rsp)       # 4-byte Spill
	je	.LBB2_7
	jmp	.LBB2_9
.LBB2_47:                               #   in Loop: Header=BB2_2 Depth=2
	movl	22680(%rsp), %eax       # 4-byte Reload
	subl	$116, %eax
	movl	%eax, 22648(%rsp)       # 4-byte Spill
	je	.LBB2_6
	jmp	.LBB2_9
.LBB2_5:                                #   in Loop: Header=BB2_3 Depth=3
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str260, %r8
	leaq	.L.str261, %rdx
	movabsq	$121, %rdi
	leaq	.L.str257, %rsi
	leaq	.L.str258, %r9
	leaq	.L.str259, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str255, %r12
	leaq	.L.str256, %r13
	movq	%rax, 22640(%rsp)       # 8-byte Spill
	leaq	optarg, %rax
	movq	%rax, 22632(%rsp)       # 8-byte Spill
	leaq	.L.str253, %rax
	movq	%rax, 22624(%rsp)       # 8-byte Spill
	leaq	.L.str254, %rax
	movq	%rax, 22616(%rsp)       # 8-byte Spill
	movabsq	$120, %rax
	movq	%rax, 22608(%rsp)       # 8-byte Spill
	leaq	.L.str250, %rax
	movq	%rax, 22600(%rsp)       # 8-byte Spill
	leaq	.L.str251, %rax
	movq	%rax, 22592(%rsp)       # 8-byte Spill
	leaq	.L.str252, %rax
	movq	%rax, 22584(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	.loc	3 120 0                 # kmeans.c:120:0
.Ltmp87:
	movq	%rax, 22576(%rsp)       # 8-byte Spill
	movq	22608(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 22568(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	22600(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 22560(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	22592(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 22552(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	22584(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 22544(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	22576(%rsp), %rax       # 8-byte Reload
	movq	%r8, 22536(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 22528(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 22520(%rsp)       # 8-byte Spill
	movl	%ebp, 22516(%rsp)       # 4-byte Spill
	movq	%r15, 22504(%rsp)       # 8-byte Spill
	movq	%r13, 22496(%rsp)       # 8-byte Spill
	movq	%r12, 22488(%rsp)       # 8-byte Spill
	movl	%ebx, 22484(%rsp)       # 4-byte Spill
	movq	%r10, 22472(%rsp)       # 8-byte Spill
	movq	%r11, 22464(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	22640(%rsp), %rdi       # 8-byte Reload
	movq	22504(%rsp), %rsi       # 8-byte Reload
	movq	22632(%rsp), %rdx       # 8-byte Reload
	movq	22640(%rsp), %rcx       # 8-byte Reload
	movq	22624(%rsp), %r8        # 8-byte Reload
	movq	22544(%rsp), %r9        # 8-byte Reload
	movq	22616(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	optarg, %rax
	movq	22520(%rsp), %rdi       # 8-byte Reload
	movq	22504(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	22640(%rsp), %rcx       # 8-byte Reload
	movq	22488(%rsp), %r8        # 8-byte Reload
	movq	22544(%rsp), %r9        # 8-byte Reload
	movq	22496(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 22456(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp88:
	#DEBUG_VALUE: main:filename <- [RSP+22456]
	.loc	3 121 0                 # kmeans.c:121:0
	movq	22568(%rsp), %rdi       # 8-byte Reload
	movq	22560(%rsp), %rsi       # 8-byte Reload
	movq	22528(%rsp), %rdx       # 8-byte Reload
	movq	22472(%rsp), %rcx       # 8-byte Reload
	movq	22464(%rsp), %r8        # 8-byte Reload
	movl	22484(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	22640(%rsp), %rdi       # 8-byte Reload
	movq	22544(%rsp), %rsi       # 8-byte Reload
	movq	22544(%rsp), %rdx       # 8-byte Reload
	movq	22640(%rsp), %rcx       # 8-byte Reload
	movq	22536(%rsp), %r8        # 8-byte Reload
	movq	22544(%rsp), %r9        # 8-byte Reload
	movq	22552(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	22456(%rsp), %rax       # 8-byte Reload
	movl	22804(%rsp), %ebx       # 4-byte Reload
	movq	%rax, 23096(%rsp)       # 8-byte Spill
	movl	%ebx, 23092(%rsp)       # 4-byte Spill
	jmp	.LBB2_3
.Ltmp89:
.LBB2_6:                                #   in Loop: Header=BB2_2 Depth=2
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str276, %r8
	movabsq	$0, %rdx
	leaq	.L.str277, %rsi
	leaq	.L.str274, %r9
	leaq	.L.str275, %r10
	movabsq	$2, %r11
	leaq	atof, %rbx
	leaq	.L.str272, %r14
	leaq	.L.str273, %r15
	movabsq	$124, %r12
	leaq	.L.str269, %r13
	leaq	.L.str270, %rbp
	movq	%rax, 22448(%rsp)       # 8-byte Spill
	leaq	.L.str271, %rax
	movq	%rax, 22440(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 22432(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 22428(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 22416(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 22408(%rsp)       # 8-byte Spill
	leaq	.L.str267, %rax
	movq	%rax, 22400(%rsp)       # 8-byte Spill
	leaq	.L.str268, %rax
	movq	%rax, 22392(%rsp)       # 8-byte Spill
	leaq	optarg, %rax
	movq	%rax, 22384(%rsp)       # 8-byte Spill
	leaq	.L.str265, %rax
	movq	%rax, 22376(%rsp)       # 8-byte Spill
	leaq	.L.str266, %rax
	movq	%rax, 22368(%rsp)       # 8-byte Spill
	leaq	.L.str262, %rax
	movq	%rax, 22360(%rsp)       # 8-byte Spill
	leaq	.L.str263, %rax
	movq	%rax, 22352(%rsp)       # 8-byte Spill
	leaq	.L.str264, %rax
	movq	%rax, 22344(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	.loc	3 124 33                # kmeans.c:124:33
	movq	%rdi, 22336(%rsp)       # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 22328(%rsp)       # 8-byte Spill
	movq	22360(%rsp), %rax       # 8-byte Reload
	movl	%esi, 22324(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	22352(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 22312(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	22344(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 22304(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	22328(%rsp), %rax       # 8-byte Reload
	movq	%r8, 22296(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	22428(%rsp), %eax       # 4-byte Reload
	movq	%r9, 22288(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 22280(%rsp)       # 8-byte Spill
	movq	%r15, 22272(%rsp)       # 8-byte Spill
	movq	%r14, 22264(%rsp)       # 8-byte Spill
	movq	%r12, 22256(%rsp)       # 8-byte Spill
	movq	%r13, 22248(%rsp)       # 8-byte Spill
	movq	%rbx, 22240(%rsp)       # 8-byte Spill
	movq	%r10, 22232(%rsp)       # 8-byte Spill
	movq	%r11, 22224(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	22304(%rsp), %rdi       # 8-byte Reload
	movq	22448(%rsp), %rsi       # 8-byte Reload
	movq	22384(%rsp), %rdx       # 8-byte Reload
	movq	22304(%rsp), %rcx       # 8-byte Reload
	movq	22376(%rsp), %r8        # 8-byte Reload
	movq	22312(%rsp), %r9        # 8-byte Reload
	movq	22368(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	optarg, %rcx
	movq	22408(%rsp), %rdi       # 8-byte Reload
	movq	22448(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	22304(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 22216(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	22400(%rsp), %r8        # 8-byte Reload
	movq	22312(%rsp), %r9        # 8-byte Reload
	movq	22392(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	22256(%rsp), %rdi       # 8-byte Reload
	movq	22248(%rsp), %rsi       # 8-byte Reload
	movq	22280(%rsp), %rdx       # 8-byte Reload
	movq	22440(%rsp), %rcx       # 8-byte Reload
	movq	22416(%rsp), %r8        # 8-byte Reload
	movl	22428(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	22224(%rsp), %rdi       # 8-byte Reload
	movq	22448(%rsp), %rsi       # 8-byte Reload
	movq	22240(%rsp), %rdx       # 8-byte Reload
	movq	22304(%rsp), %rcx       # 8-byte Reload
	movq	22264(%rsp), %r8        # 8-byte Reload
	movq	22312(%rsp), %r9        # 8-byte Reload
	movq	22272(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	22304(%rsp), %rdi       # 8-byte Reload
	movq	22448(%rsp), %rsi       # 8-byte Reload
	movq	22216(%rsp), %rdx       # 8-byte Reload
	movq	22304(%rsp), %rcx       # 8-byte Reload
	movq	22288(%rsp), %r8        # 8-byte Reload
	movq	22312(%rsp), %r9        # 8-byte Reload
	movq	22232(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	22336(%rsp), %rdi       # 8-byte Reload
	movq	22448(%rsp), %rsi       # 8-byte Reload
	movq	22216(%rsp), %rdx       # 8-byte Reload
	movq	22304(%rsp), %rcx       # 8-byte Reload
	movq	22296(%rsp), %r8        # 8-byte Reload
	movq	22312(%rsp), %r9        # 8-byte Reload
	movq	22432(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	22216(%rsp), %rdi       # 8-byte Reload
	callq	atof
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str290, %r8
	leaq	.L.str291, %rsi
	movabsq	$125, %rdi
	leaq	.L.str287, %r9
	leaq	.L.str288, %r10
	leaq	.L.str289, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str285, %r12
	leaq	.L.str286, %r13
	movq	%rcx, 22208(%rsp)       # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 22200(%rsp)       # 8-byte Spill
	leaq	.L.str283, %rcx
	movq	%rcx, 22192(%rsp)       # 8-byte Spill
	leaq	.L.str284, %rcx
	movq	%rcx, 22184(%rsp)       # 8-byte Spill
	movabsq	$124, %rcx
	movq	%rcx, 22176(%rsp)       # 8-byte Spill
	leaq	.L.str280, %rcx
	movq	%rcx, 22168(%rsp)       # 8-byte Spill
	leaq	.L.str281, %rcx
	movq	%rcx, 22160(%rsp)       # 8-byte Spill
	leaq	.L.str282, %rcx
	movq	%rcx, 22152(%rsp)       # 8-byte Spill
	movabsq	$40, %rcx
	movq	%rcx, 22144(%rsp)       # 8-byte Spill
	leaq	.L.str278, %rcx
	movq	%rcx, 22136(%rsp)       # 8-byte Spill
	leaq	.L.str279, %rcx
	movq	%rdi, 22128(%rsp)       # 8-byte Spill
	movq	%r14, %rdi
	movq	%rcx, 22120(%rsp)       # 8-byte Spill
	movq	22200(%rsp), %rcx       # 8-byte Reload
	movq	%rsi, 22112(%rsp)       # 8-byte Spill
	movq	%rcx, %rsi
	vmovsd	%xmm0, 22104(%rsp)      # 8-byte Spill
	movq	22208(%rsp), %rcx       # 8-byte Reload
	movq	%rdx, 22096(%rsp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	22136(%rsp), %rcx       # 8-byte Reload
	movq	%r8, 22088(%rsp)        # 8-byte Spill
	movq	22096(%rsp), %r8        # 8-byte Reload
	movq	%r9, 22080(%rsp)        # 8-byte Spill
	movq	22120(%rsp), %r9        # 8-byte Reload
	movq	%r15, 22072(%rsp)       # 8-byte Spill
	movl	%ebp, 22068(%rsp)       # 4-byte Spill
	movq	%r14, 22056(%rsp)       # 8-byte Spill
	movl	%eax, 22052(%rsp)       # 4-byte Spill
	movq	%r12, 22040(%rsp)       # 8-byte Spill
	movq	%r13, 22032(%rsp)       # 8-byte Spill
	movq	%rbx, 22024(%rsp)       # 8-byte Spill
	movq	%r10, 22016(%rsp)       # 8-byte Spill
	movq	%r11, 22008(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	22176(%rsp), %rdi       # 8-byte Reload
	movq	22168(%rsp), %rsi       # 8-byte Reload
	movq	22160(%rsp), %rdx       # 8-byte Reload
	movq	22152(%rsp), %rcx       # 8-byte Reload
	movq	22144(%rsp), %r8        # 8-byte Reload
	movl	22052(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	22208(%rsp), %rdi       # 8-byte Reload
	movq	22200(%rsp), %rsi       # 8-byte Reload
	vmovsd	22104(%rsp), %xmm0      # 8-byte Reload
	movq	22208(%rsp), %rdx       # 8-byte Reload
	movq	22192(%rsp), %rcx       # 8-byte Reload
	movq	22096(%rsp), %r8        # 8-byte Reload
	movq	22184(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	22104(%rsp), %xmm0      # 8-byte Reload
	cvtsd2ss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	22056(%rsp), %rdi       # 8-byte Reload
	movq	22072(%rsp), %rsi       # 8-byte Reload
	movq	22208(%rsp), %rdx       # 8-byte Reload
	movq	22040(%rsp), %rcx       # 8-byte Reload
	movq	22096(%rsp), %r8        # 8-byte Reload
	movq	22032(%rsp), %r9        # 8-byte Reload
	vmovss	%xmm1, 22004(%rsp)      # 4-byte Spill
	callq	trace_logger_log_double
.Ltmp90:
	#DEBUG_VALUE: main:threshold <- [RSP+22004]
	.loc	3 125 0                 # kmeans.c:125:0
	movq	22128(%rsp), %rdi       # 8-byte Reload
	movq	22080(%rsp), %rsi       # 8-byte Reload
	movq	22016(%rsp), %rdx       # 8-byte Reload
	movq	22008(%rsp), %rcx       # 8-byte Reload
	movq	22024(%rsp), %r8        # 8-byte Reload
	movl	22052(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	22208(%rsp), %rdi       # 8-byte Reload
	movq	22096(%rsp), %rsi       # 8-byte Reload
	movq	22096(%rsp), %rdx       # 8-byte Reload
	movq	22208(%rsp), %rcx       # 8-byte Reload
	movq	22088(%rsp), %r8        # 8-byte Reload
	movq	22096(%rsp), %r9        # 8-byte Reload
	movq	22112(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovss	22004(%rsp), %xmm0      # 4-byte Reload
	movq	23080(%rsp), %rcx       # 8-byte Reload
	movl	22804(%rsp), %eax       # 4-byte Reload
	vmovss	%xmm0, 23468(%rsp)      # 4-byte Spill
	movq	%rcx, 23456(%rsp)       # 8-byte Spill
	movl	%eax, 23452(%rsp)       # 4-byte Spill
	jmp	.LBB2_2
.Ltmp91:
.LBB2_7:                                #   in Loop: Header=BB2_4 Depth=4
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str306, %r8
	movabsq	$0, %rdx
	leaq	.L.str307, %rsi
	leaq	.L.str304, %r9
	leaq	.L.str305, %r10
	movabsq	$2, %r11
	leaq	atoi, %rbx
	leaq	.L.str302, %r14
	leaq	.L.str303, %r15
	movabsq	$126, %r12
	leaq	.L.str299, %r13
	leaq	.L.str300, %rbp
	movq	%rax, 21992(%rsp)       # 8-byte Spill
	leaq	.L.str301, %rax
	movq	%rax, 21984(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 21976(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 21972(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 21960(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 21952(%rsp)       # 8-byte Spill
	leaq	.L.str297, %rax
	movq	%rax, 21944(%rsp)       # 8-byte Spill
	leaq	.L.str298, %rax
	movq	%rax, 21936(%rsp)       # 8-byte Spill
	leaq	optarg, %rax
	movq	%rax, 21928(%rsp)       # 8-byte Spill
	leaq	.L.str295, %rax
	movq	%rax, 21920(%rsp)       # 8-byte Spill
	leaq	.L.str296, %rax
	movq	%rax, 21912(%rsp)       # 8-byte Spill
	leaq	.L.str292, %rax
	movq	%rax, 21904(%rsp)       # 8-byte Spill
	leaq	.L.str293, %rax
	movq	%rax, 21896(%rsp)       # 8-byte Spill
	leaq	.L.str294, %rax
	movq	%rax, 21888(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	.loc	3 126 35                # kmeans.c:126:35
	movq	%rdi, 21880(%rsp)       # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 21872(%rsp)       # 8-byte Spill
	movq	21904(%rsp), %rax       # 8-byte Reload
	movl	%esi, 21868(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	21896(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 21856(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	21888(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 21848(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	21872(%rsp), %rax       # 8-byte Reload
	movq	%r8, 21840(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	21972(%rsp), %eax       # 4-byte Reload
	movq	%r9, 21832(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 21824(%rsp)       # 8-byte Spill
	movq	%r15, 21816(%rsp)       # 8-byte Spill
	movq	%r14, 21808(%rsp)       # 8-byte Spill
	movq	%r12, 21800(%rsp)       # 8-byte Spill
	movq	%r13, 21792(%rsp)       # 8-byte Spill
	movq	%rbx, 21784(%rsp)       # 8-byte Spill
	movq	%r10, 21776(%rsp)       # 8-byte Spill
	movq	%r11, 21768(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	21848(%rsp), %rdi       # 8-byte Reload
	movq	21992(%rsp), %rsi       # 8-byte Reload
	movq	21928(%rsp), %rdx       # 8-byte Reload
	movq	21848(%rsp), %rcx       # 8-byte Reload
	movq	21920(%rsp), %r8        # 8-byte Reload
	movq	21856(%rsp), %r9        # 8-byte Reload
	movq	21912(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	optarg, %rcx
	movq	21952(%rsp), %rdi       # 8-byte Reload
	movq	21992(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	21848(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 21760(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	21944(%rsp), %r8        # 8-byte Reload
	movq	21856(%rsp), %r9        # 8-byte Reload
	movq	21936(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21800(%rsp), %rdi       # 8-byte Reload
	movq	21792(%rsp), %rsi       # 8-byte Reload
	movq	21824(%rsp), %rdx       # 8-byte Reload
	movq	21984(%rsp), %rcx       # 8-byte Reload
	movq	21960(%rsp), %r8        # 8-byte Reload
	movl	21972(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	21768(%rsp), %rdi       # 8-byte Reload
	movq	21992(%rsp), %rsi       # 8-byte Reload
	movq	21784(%rsp), %rdx       # 8-byte Reload
	movq	21848(%rsp), %rcx       # 8-byte Reload
	movq	21808(%rsp), %r8        # 8-byte Reload
	movq	21856(%rsp), %r9        # 8-byte Reload
	movq	21816(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21848(%rsp), %rdi       # 8-byte Reload
	movq	21992(%rsp), %rsi       # 8-byte Reload
	movq	21760(%rsp), %rdx       # 8-byte Reload
	movq	21848(%rsp), %rcx       # 8-byte Reload
	movq	21832(%rsp), %r8        # 8-byte Reload
	movq	21856(%rsp), %r9        # 8-byte Reload
	movq	21776(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21880(%rsp), %rdi       # 8-byte Reload
	movq	21992(%rsp), %rsi       # 8-byte Reload
	movq	21760(%rsp), %rdx       # 8-byte Reload
	movq	21848(%rsp), %rcx       # 8-byte Reload
	movq	21840(%rsp), %r8        # 8-byte Reload
	movq	21856(%rsp), %r9        # 8-byte Reload
	movq	21976(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21760(%rsp), %rdi       # 8-byte Reload
	callq	atoi
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str313, %r8
	leaq	.L.str314, %rsi
	movabsq	$127, %rdi
	leaq	.L.str310, %r9
	leaq	.L.str311, %r10
	leaq	.L.str312, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$32, %r12
	leaq	.L.str308, %r13
	movq	%rcx, 21752(%rsp)       # 8-byte Spill
	leaq	.L.str309, %rcx
	movl	%eax, 21748(%rsp)       # 4-byte Spill
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rdi, 21736(%rsp)       # 8-byte Spill
	movq	%r15, %rdi
	movq	%rsi, 21728(%rsp)       # 8-byte Spill
	movq	%r12, %rsi
	movq	%rdx, 21720(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	21752(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 21712(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, 21704(%rsp)        # 8-byte Spill
	movq	%r13, %r8
	movq	21720(%rsp), %r15       # 8-byte Reload
	movq	%r9, 21696(%rsp)        # 8-byte Spill
	movq	%r15, %r9
	movq	21712(%rsp), %r12       # 8-byte Reload
	movq	%r12, (%rsp)
	movq	%r11, 21688(%rsp)       # 8-byte Spill
	movq	%rbx, 21680(%rsp)       # 8-byte Spill
	movq	%r10, 21672(%rsp)       # 8-byte Spill
	movl	%r14d, 21668(%rsp)      # 4-byte Spill
	movl	%ebp, 21664(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp92:
	#DEBUG_VALUE: main:nclusters <- [RSP+21748]
	.loc	3 127 0                 # kmeans.c:127:0
	movq	21736(%rsp), %rdi       # 8-byte Reload
	movq	21696(%rsp), %rsi       # 8-byte Reload
	movq	21672(%rsp), %rdx       # 8-byte Reload
	movq	21688(%rsp), %rcx       # 8-byte Reload
	movq	21680(%rsp), %r8        # 8-byte Reload
	movl	21664(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	21752(%rsp), %rdi       # 8-byte Reload
	movq	21720(%rsp), %rsi       # 8-byte Reload
	movq	21720(%rsp), %rdx       # 8-byte Reload
	movq	21752(%rsp), %rcx       # 8-byte Reload
	movq	21704(%rsp), %r8        # 8-byte Reload
	movq	21720(%rsp), %r9        # 8-byte Reload
	movq	21728(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	21748(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, 22812(%rsp)       # 4-byte Spill
	jmp	.LBB2_4
.Ltmp93:
.LBB2_8:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str329, %r8
	movabsq	$0, %rdx
	leaq	.L.str330, %rsi
	leaq	.L.str327, %r9
	leaq	.L.str328, %r10
	movabsq	$2, %r11
	leaq	usage, %rbx
	leaq	.L.str325, %r14
	leaq	.L.str326, %r15
	movabsq	$128, %r12
	leaq	.L.str322, %r13
	leaq	.L.str323, %rbp
	movq	%rax, 21656(%rsp)       # 8-byte Spill
	leaq	.L.str324, %rax
	movq	%rax, 21648(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 21640(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 21636(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 21624(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 21616(%rsp)       # 8-byte Spill
	leaq	.L.str320, %rax
	movq	%rax, 21608(%rsp)       # 8-byte Spill
	leaq	.L.str321, %rax
	movq	%rax, 21600(%rsp)       # 8-byte Spill
	leaq	.L.str318, %rax
	movq	%rax, 21592(%rsp)       # 8-byte Spill
	leaq	.L.str319, %rax
	movq	%rax, 21584(%rsp)       # 8-byte Spill
	leaq	.L.str315, %rax
	movq	%rax, 21576(%rsp)       # 8-byte Spill
	leaq	.L.str316, %rax
	movq	%rax, 21568(%rsp)       # 8-byte Spill
	leaq	.L.str317, %rax
	movq	%rax, 21560(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	.loc	3 128 0                 # kmeans.c:128:0
	movq	%rdi, 21552(%rsp)       # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 21544(%rsp)       # 8-byte Spill
	movq	21576(%rsp), %rax       # 8-byte Reload
	movl	%esi, 21540(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	21568(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 21528(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	21560(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 21520(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	21544(%rsp), %rax       # 8-byte Reload
	movq	%r8, 21512(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	21636(%rsp), %eax       # 4-byte Reload
	movq	%r9, 21504(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 21496(%rsp)       # 8-byte Spill
	movq	%r15, 21488(%rsp)       # 8-byte Spill
	movq	%r14, 21480(%rsp)       # 8-byte Spill
	movq	%r12, 21472(%rsp)       # 8-byte Spill
	movq	%r13, 21464(%rsp)       # 8-byte Spill
	movq	%rbx, 21456(%rsp)       # 8-byte Spill
	movq	%r10, 21448(%rsp)       # 8-byte Spill
	movq	%r11, 21440(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	21520(%rsp), %rdi       # 8-byte Reload
	movq	21656(%rsp), %rsi       # 8-byte Reload
	movq	24032(%rsp), %rdx       # 8-byte Reload
	movq	21520(%rsp), %rcx       # 8-byte Reload
	movq	21592(%rsp), %r8        # 8-byte Reload
	movq	21528(%rsp), %r9        # 8-byte Reload
	movq	21584(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24032(%rsp), %rcx       # 8-byte Reload
	movq	(%rcx), %rdx
	movq	21616(%rsp), %rdi       # 8-byte Reload
	movq	21656(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 21432(%rsp)       # 8-byte Spill
	movq	21520(%rsp), %rcx       # 8-byte Reload
	movq	21608(%rsp), %r8        # 8-byte Reload
	movq	21528(%rsp), %r9        # 8-byte Reload
	movq	21600(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21472(%rsp), %rdi       # 8-byte Reload
	movq	21464(%rsp), %rsi       # 8-byte Reload
	movq	21496(%rsp), %rdx       # 8-byte Reload
	movq	21648(%rsp), %rcx       # 8-byte Reload
	movq	21624(%rsp), %r8        # 8-byte Reload
	movl	21636(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	21440(%rsp), %rdi       # 8-byte Reload
	movq	21656(%rsp), %rsi       # 8-byte Reload
	movq	21456(%rsp), %rdx       # 8-byte Reload
	movq	21520(%rsp), %rcx       # 8-byte Reload
	movq	21480(%rsp), %r8        # 8-byte Reload
	movq	21528(%rsp), %r9        # 8-byte Reload
	movq	21488(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21520(%rsp), %rdi       # 8-byte Reload
	movq	21656(%rsp), %rsi       # 8-byte Reload
	movq	21432(%rsp), %rdx       # 8-byte Reload
	movq	21520(%rsp), %rcx       # 8-byte Reload
	movq	21504(%rsp), %r8        # 8-byte Reload
	movq	21528(%rsp), %r9        # 8-byte Reload
	movq	21448(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21552(%rsp), %rdi       # 8-byte Reload
	movq	21656(%rsp), %rsi       # 8-byte Reload
	movq	21432(%rsp), %rdx       # 8-byte Reload
	movq	21520(%rsp), %rcx       # 8-byte Reload
	movq	21512(%rsp), %r8        # 8-byte Reload
	movq	21528(%rsp), %r9        # 8-byte Reload
	movq	21640(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21432(%rsp), %rdi       # 8-byte Reload
	callq	usage
	movabsq	$-1, %rdi
	leaq	.L.str331, %rsi
	leaq	.L.str332, %rdx
	leaq	.L.str333, %rcx
	movabsq	$7, %r8
	movl	$0, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, 21428(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
.LBB2_9:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str348, %r8
	movabsq	$0, %rdx
	leaq	.L.str349, %rsi
	leaq	.L.str346, %r9
	leaq	.L.str347, %r10
	movabsq	$2, %r11
	leaq	usage, %rbx
	leaq	.L.str344, %r14
	leaq	.L.str345, %r15
	movabsq	$130, %r12
	leaq	.L.str341, %r13
	leaq	.L.str342, %rbp
	movq	%rax, 21416(%rsp)       # 8-byte Spill
	leaq	.L.str343, %rax
	movq	%rax, 21408(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 21400(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 21396(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 21384(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 21376(%rsp)       # 8-byte Spill
	leaq	.L.str339, %rax
	movq	%rax, 21368(%rsp)       # 8-byte Spill
	leaq	.L.str340, %rax
	movq	%rax, 21360(%rsp)       # 8-byte Spill
	leaq	.L.str337, %rax
	movq	%rax, 21352(%rsp)       # 8-byte Spill
	leaq	.L.str338, %rax
	movq	%rax, 21344(%rsp)       # 8-byte Spill
	leaq	.L.str334, %rax
	movq	%rax, 21336(%rsp)       # 8-byte Spill
	leaq	.L.str335, %rax
	movq	%rax, 21328(%rsp)       # 8-byte Spill
	leaq	.L.str336, %rax
	movq	%rax, 21320(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	.loc	3 130 0                 # kmeans.c:130:0
	movq	%rdi, 21312(%rsp)       # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 21304(%rsp)       # 8-byte Spill
	movq	21336(%rsp), %rax       # 8-byte Reload
	movl	%esi, 21300(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	21328(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 21288(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	21320(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 21280(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	21304(%rsp), %rax       # 8-byte Reload
	movq	%r8, 21272(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	21396(%rsp), %eax       # 4-byte Reload
	movq	%r9, 21264(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 21256(%rsp)       # 8-byte Spill
	movq	%r15, 21248(%rsp)       # 8-byte Spill
	movq	%r14, 21240(%rsp)       # 8-byte Spill
	movq	%r12, 21232(%rsp)       # 8-byte Spill
	movq	%r13, 21224(%rsp)       # 8-byte Spill
	movq	%rbx, 21216(%rsp)       # 8-byte Spill
	movq	%r10, 21208(%rsp)       # 8-byte Spill
	movq	%r11, 21200(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	21280(%rsp), %rdi       # 8-byte Reload
	movq	21416(%rsp), %rsi       # 8-byte Reload
	movq	24032(%rsp), %rdx       # 8-byte Reload
	movq	21280(%rsp), %rcx       # 8-byte Reload
	movq	21352(%rsp), %r8        # 8-byte Reload
	movq	21288(%rsp), %r9        # 8-byte Reload
	movq	21344(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24032(%rsp), %rcx       # 8-byte Reload
	movq	(%rcx), %rdx
	movq	21376(%rsp), %rdi       # 8-byte Reload
	movq	21416(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 21192(%rsp)       # 8-byte Spill
	movq	21280(%rsp), %rcx       # 8-byte Reload
	movq	21368(%rsp), %r8        # 8-byte Reload
	movq	21288(%rsp), %r9        # 8-byte Reload
	movq	21360(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21232(%rsp), %rdi       # 8-byte Reload
	movq	21224(%rsp), %rsi       # 8-byte Reload
	movq	21256(%rsp), %rdx       # 8-byte Reload
	movq	21408(%rsp), %rcx       # 8-byte Reload
	movq	21384(%rsp), %r8        # 8-byte Reload
	movl	21396(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	21200(%rsp), %rdi       # 8-byte Reload
	movq	21416(%rsp), %rsi       # 8-byte Reload
	movq	21216(%rsp), %rdx       # 8-byte Reload
	movq	21280(%rsp), %rcx       # 8-byte Reload
	movq	21240(%rsp), %r8        # 8-byte Reload
	movq	21288(%rsp), %r9        # 8-byte Reload
	movq	21248(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21280(%rsp), %rdi       # 8-byte Reload
	movq	21416(%rsp), %rsi       # 8-byte Reload
	movq	21192(%rsp), %rdx       # 8-byte Reload
	movq	21280(%rsp), %rcx       # 8-byte Reload
	movq	21264(%rsp), %r8        # 8-byte Reload
	movq	21288(%rsp), %r9        # 8-byte Reload
	movq	21208(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21312(%rsp), %rdi       # 8-byte Reload
	movq	21416(%rsp), %rsi       # 8-byte Reload
	movq	21192(%rsp), %rdx       # 8-byte Reload
	movq	21280(%rsp), %rcx       # 8-byte Reload
	movq	21272(%rsp), %r8        # 8-byte Reload
	movq	21288(%rsp), %r9        # 8-byte Reload
	movq	21400(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21192(%rsp), %rdi       # 8-byte Reload
	callq	usage
	movabsq	$-1, %rdi
	leaq	.L.str350, %rsi
	leaq	.L.str351, %rdx
	leaq	.L.str352, %rcx
	movabsq	$7, %r8
	movl	$0, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, 21188(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
.Ltmp94:
.LBB2_10:
	movabsq	$1, %rax
	leaq	.L.str369, %r8
	movabsq	$0, %rcx
	leaq	.L.str370, %rdx
	movabsq	$2, %rsi
	leaq	.L.str367, %rdi
	leaq	.L.str368, %r9
	movabsq	$3, %r10
	leaq	.L.str365, %r11
	leaq	.L.str366, %rbx
	movabsq	$135, %r14
	leaq	.L.str362, %r15
	leaq	.L.str363, %r12
	leaq	.L.str364, %r13
	movl	$0, %ebp
	movq	%rsi, 21176(%rsp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 21168(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 21160(%rsp)       # 8-byte Spill
	leaq	.L.str360, %rax
	movq	%rax, 21152(%rsp)       # 8-byte Spill
	leaq	.L.str361, %rax
	movq	%rax, 21144(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 21136(%rsp)       # 8-byte Spill
	leaq	.L.str358, %rax
	movq	%rax, 21128(%rsp)       # 8-byte Spill
	leaq	.L.str359, %rax
	movq	%rax, 21120(%rsp)       # 8-byte Spill
	leaq	.L.str356, %rax
	movq	%rax, 21112(%rsp)       # 8-byte Spill
	leaq	.L.str357, %rax
	movq	%rax, 21104(%rsp)       # 8-byte Spill
	leaq	.L.str353, %rax
	movq	%rax, 21096(%rsp)       # 8-byte Spill
	leaq	.L.str354, %rax
	movq	%rax, 21088(%rsp)       # 8-byte Spill
	leaq	.L.str355, %rax
	movq	%rax, 21080(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	.loc	3 135 0                 # kmeans.c:135:0
.Ltmp95:
	movq	%rdi, 21072(%rsp)       # 8-byte Spill
	movq	%r14, %rdi
	movq	%rax, 21064(%rsp)       # 8-byte Spill
	movq	21096(%rsp), %rax       # 8-byte Reload
	movl	%esi, 21060(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	21088(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 21048(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	21080(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 21040(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	21064(%rsp), %rax       # 8-byte Reload
	movq	%r8, 21032(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 21024(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 21016(%rsp)       # 8-byte Spill
	movq	%r15, 21008(%rsp)       # 8-byte Spill
	movq	%r12, 21000(%rsp)       # 8-byte Spill
	movq	%r13, 20992(%rsp)       # 8-byte Spill
	movl	%ebp, 20988(%rsp)       # 4-byte Spill
	movq	%rbx, 20976(%rsp)       # 8-byte Spill
	movq	%r10, 20968(%rsp)       # 8-byte Spill
	movq	%r11, 20960(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	21176(%rsp), %rdi       # 8-byte Reload
	movq	21136(%rsp), %rsi       # 8-byte Reload
	movq	21040(%rsp), %rdx       # 8-byte Reload
	movq	21040(%rsp), %rcx       # 8-byte Reload
	movq	21112(%rsp), %r8        # 8-byte Reload
	movq	21040(%rsp), %r9        # 8-byte Reload
	movq	21104(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	21168(%rsp), %rdi       # 8-byte Reload
	movq	21136(%rsp), %rsi       # 8-byte Reload
	movq	23080(%rsp), %rdx       # 8-byte Reload
	movq	21168(%rsp), %rcx       # 8-byte Reload
	movq	21128(%rsp), %r8        # 8-byte Reload
	movq	21040(%rsp), %r9        # 8-byte Reload
	movq	21120(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	23080(%rsp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	21160(%rsp), %rdi       # 8-byte Reload
	movq	21168(%rsp), %rsi       # 8-byte Reload
	movq	21168(%rsp), %rcx       # 8-byte Reload
	movq	21152(%rsp), %r8        # 8-byte Reload
	movq	21040(%rsp), %r9        # 8-byte Reload
	movq	21144(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 20959(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	21016(%rsp), %rdi       # 8-byte Reload
	movq	21008(%rsp), %rsi       # 8-byte Reload
	movq	21000(%rsp), %rdx       # 8-byte Reload
	movq	20992(%rsp), %rcx       # 8-byte Reload
	movq	21176(%rsp), %r8        # 8-byte Reload
	movl	20988(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	20968(%rsp), %rdi       # 8-byte Reload
	movq	21040(%rsp), %rsi       # 8-byte Reload
	movq	21040(%rsp), %rdx       # 8-byte Reload
	movq	21168(%rsp), %rcx       # 8-byte Reload
	movq	20960(%rsp), %r8        # 8-byte Reload
	movq	21040(%rsp), %r9        # 8-byte Reload
	movq	20976(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	21176(%rsp), %rdi       # 8-byte Reload
	movq	21040(%rsp), %rsi       # 8-byte Reload
	movq	21040(%rsp), %rdx       # 8-byte Reload
	movq	21168(%rsp), %rcx       # 8-byte Reload
	movq	21072(%rsp), %r8        # 8-byte Reload
	movq	21040(%rsp), %r9        # 8-byte Reload
	movq	21024(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	20959(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	21168(%rsp), %rdi       # 8-byte Reload
	movq	21168(%rsp), %rsi       # 8-byte Reload
	movq	21168(%rsp), %rcx       # 8-byte Reload
	movq	21032(%rsp), %r8        # 8-byte Reload
	movq	21040(%rsp), %r9        # 8-byte Reload
	movq	21048(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	20959(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_11
	jmp	.LBB2_12
.LBB2_11:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str385, %r8
	movabsq	$0, %rdx
	leaq	.L.str386, %rsi
	leaq	.L.str383, %r9
	leaq	.L.str384, %r10
	movabsq	$2, %r11
	leaq	usage, %rbx
	leaq	.L.str381, %r14
	leaq	.L.str382, %r15
	movabsq	$135, %r12
	leaq	.L.str378, %r13
	leaq	.L.str379, %rbp
	movq	%rax, 20944(%rsp)       # 8-byte Spill
	leaq	.L.str380, %rax
	movq	%rax, 20936(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 20928(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 20924(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 20912(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 20904(%rsp)       # 8-byte Spill
	leaq	.L.str376, %rax
	movq	%rax, 20896(%rsp)       # 8-byte Spill
	leaq	.L.str377, %rax
	movq	%rax, 20888(%rsp)       # 8-byte Spill
	leaq	.L.str374, %rax
	movq	%rax, 20880(%rsp)       # 8-byte Spill
	leaq	.L.str375, %rax
	movq	%rax, 20872(%rsp)       # 8-byte Spill
	leaq	.L.str371, %rax
	movq	%rax, 20864(%rsp)       # 8-byte Spill
	leaq	.L.str372, %rax
	movq	%rax, 20856(%rsp)       # 8-byte Spill
	leaq	.L.str373, %rax
	movq	%rax, 20848(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rdi, 20840(%rsp)       # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 20832(%rsp)       # 8-byte Spill
	movq	20864(%rsp), %rax       # 8-byte Reload
	movl	%esi, 20828(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	20856(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 20816(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	20848(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 20808(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	20832(%rsp), %rax       # 8-byte Reload
	movq	%r8, 20800(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	20924(%rsp), %eax       # 4-byte Reload
	movq	%r9, 20792(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 20784(%rsp)       # 8-byte Spill
	movq	%r15, 20776(%rsp)       # 8-byte Spill
	movq	%r14, 20768(%rsp)       # 8-byte Spill
	movq	%r12, 20760(%rsp)       # 8-byte Spill
	movq	%r13, 20752(%rsp)       # 8-byte Spill
	movq	%rbx, 20744(%rsp)       # 8-byte Spill
	movq	%r10, 20736(%rsp)       # 8-byte Spill
	movq	%r11, 20728(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	20808(%rsp), %rdi       # 8-byte Reload
	movq	20944(%rsp), %rsi       # 8-byte Reload
	movq	24032(%rsp), %rdx       # 8-byte Reload
	movq	20808(%rsp), %rcx       # 8-byte Reload
	movq	20880(%rsp), %r8        # 8-byte Reload
	movq	20816(%rsp), %r9        # 8-byte Reload
	movq	20872(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24032(%rsp), %rcx       # 8-byte Reload
	movq	(%rcx), %rdx
	movq	20904(%rsp), %rdi       # 8-byte Reload
	movq	20944(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 20720(%rsp)       # 8-byte Spill
	movq	20808(%rsp), %rcx       # 8-byte Reload
	movq	20896(%rsp), %r8        # 8-byte Reload
	movq	20816(%rsp), %r9        # 8-byte Reload
	movq	20888(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	20760(%rsp), %rdi       # 8-byte Reload
	movq	20752(%rsp), %rsi       # 8-byte Reload
	movq	20784(%rsp), %rdx       # 8-byte Reload
	movq	20936(%rsp), %rcx       # 8-byte Reload
	movq	20912(%rsp), %r8        # 8-byte Reload
	movl	20924(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	20728(%rsp), %rdi       # 8-byte Reload
	movq	20944(%rsp), %rsi       # 8-byte Reload
	movq	20744(%rsp), %rdx       # 8-byte Reload
	movq	20808(%rsp), %rcx       # 8-byte Reload
	movq	20768(%rsp), %r8        # 8-byte Reload
	movq	20816(%rsp), %r9        # 8-byte Reload
	movq	20776(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	20808(%rsp), %rdi       # 8-byte Reload
	movq	20944(%rsp), %rsi       # 8-byte Reload
	movq	20720(%rsp), %rdx       # 8-byte Reload
	movq	20808(%rsp), %rcx       # 8-byte Reload
	movq	20792(%rsp), %r8        # 8-byte Reload
	movq	20816(%rsp), %r9        # 8-byte Reload
	movq	20736(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	20840(%rsp), %rdi       # 8-byte Reload
	movq	20944(%rsp), %rsi       # 8-byte Reload
	movq	20720(%rsp), %rdx       # 8-byte Reload
	movq	20808(%rsp), %rcx       # 8-byte Reload
	movq	20800(%rsp), %r8        # 8-byte Reload
	movq	20816(%rsp), %r9        # 8-byte Reload
	movq	20928(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	20720(%rsp), %rdi       # 8-byte Reload
	callq	usage
	movabsq	$-1, %rdi
	leaq	.L.str387, %rsi
	leaq	.L.str388, %rdx
	leaq	.L.str389, %rcx
	movabsq	$7, %r8
	movl	$0, %r9d
	movl	$1, %eax
	movl	$1, (%rsp)
	movl	%eax, 20716(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
.Ltmp96:
.LBB2_12:
	movabsq	$1, %rax
	leaq	.L.str420, %r8
	movabsq	$0, %rcx
	leaq	.L.str421, %rdx
	movabsq	$2, %rsi
	leaq	.L.str418, %rdi
	leaq	.L.str419, %r9
	movabsq	$3, %r10
	leaq	.L.str416, %r11
	leaq	.L.str417, %rbx
	movabsq	$141, %r14
	leaq	.L.str413, %r15
	leaq	.L.str414, %r12
	leaq	.L.str415, %r13
	movl	$0, %ebp
	movq	%rsi, 20704(%rsp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 20696(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 20688(%rsp)       # 8-byte Spill
	leaq	.L.str411, %rax
	movq	%rax, 20680(%rsp)       # 8-byte Spill
	leaq	.L.str412, %rax
	movq	%rax, 20672(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 20664(%rsp)       # 8-byte Spill
	leaq	.L.str409, %rax
	movq	%rax, 20656(%rsp)       # 8-byte Spill
	leaq	.L.str410, %rax
	movq	%rax, 20648(%rsp)       # 8-byte Spill
	leaq	.L.str407, %rax
	movq	%rax, 20640(%rsp)       # 8-byte Spill
	leaq	.L.str408, %rax
	movq	%rax, 20632(%rsp)       # 8-byte Spill
	leaq	.L.str404, %rax
	movq	%rax, 20624(%rsp)       # 8-byte Spill
	leaq	.L.str405, %rax
	movq	%rax, 20616(%rsp)       # 8-byte Spill
	leaq	.L.str406, %rax
	movq	%rax, 20608(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 20600(%rsp)       # 8-byte Spill
	leaq	.L.str402, %rax
	movq	%rax, 20592(%rsp)       # 8-byte Spill
	leaq	.L.str403, %rax
	movq	%rax, 20584(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 20576(%rsp)       # 8-byte Spill
	leaq	.L.str400, %rax
	movq	%rax, 20568(%rsp)       # 8-byte Spill
	leaq	.L.str401, %rax
	movq	%rax, 20560(%rsp)       # 8-byte Spill
	leaq	25564(%rsp), %rax
	movq	%rax, 20552(%rsp)       # 8-byte Spill
	movabsq	$137, %rax
	movq	%rax, 20544(%rsp)       # 8-byte Spill
	leaq	.L.str397, %rax
	movq	%rax, 20536(%rsp)       # 8-byte Spill
	leaq	.L.str398, %rax
	movq	%rax, 20528(%rsp)       # 8-byte Spill
	leaq	.L.str399, %rax
	movq	%rax, 20520(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 20512(%rsp)       # 8-byte Spill
	leaq	.L.str395, %rax
	movq	%rax, 20504(%rsp)       # 8-byte Spill
	leaq	.L.str396, %rax
	movq	%rax, 20496(%rsp)       # 8-byte Spill
	leaq	.L.str393, %rax
	movq	%rax, 20488(%rsp)       # 8-byte Spill
	leaq	.L.str394, %rax
	movq	%rax, 20480(%rsp)       # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 20472(%rsp)       # 8-byte Spill
	leaq	.L.str390, %rax
	movq	%rax, 20464(%rsp)       # 8-byte Spill
	leaq	.L.str391, %rax
	movq	%rax, 20456(%rsp)       # 8-byte Spill
	leaq	.L.str392, %rax
.Ltmp97:
	#DEBUG_VALUE: main:numObjects <- 0
	.loc	3 137 0                 # kmeans.c:137:0
	movq	%rax, 20448(%rsp)       # 8-byte Spill
	movq	20544(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 20440(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	20464(%rsp), %rax       # 8-byte Reload
	movl	%esi, 20436(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	20456(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 20424(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	20448(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 20416(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	20512(%rsp), %rax       # 8-byte Reload
	movq	%r8, 20408(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 20400(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 20392(%rsp)       # 8-byte Spill
	movq	%r15, 20384(%rsp)       # 8-byte Spill
	movq	%r12, 20376(%rsp)       # 8-byte Spill
	movq	%r13, 20368(%rsp)       # 8-byte Spill
	movl	%ebp, 20364(%rsp)       # 4-byte Spill
	movq	%rbx, 20352(%rsp)       # 8-byte Spill
	movq	%r10, 20344(%rsp)       # 8-byte Spill
	movq	%r11, 20336(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	20704(%rsp), %rdi       # 8-byte Reload
	movq	20576(%rsp), %rsi       # 8-byte Reload
	movq	20472(%rsp), %rdx       # 8-byte Reload
	movq	20696(%rsp), %rcx       # 8-byte Reload
	movq	20488(%rsp), %r8        # 8-byte Reload
	movq	20416(%rsp), %r9        # 8-byte Reload
	movq	20480(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	20696(%rsp), %rdi       # 8-byte Reload
	movq	20664(%rsp), %rsi       # 8-byte Reload
	movq	20416(%rsp), %rdx       # 8-byte Reload
	movq	20416(%rsp), %rcx       # 8-byte Reload
	movq	20504(%rsp), %r8        # 8-byte Reload
	movq	20416(%rsp), %r9        # 8-byte Reload
	movq	20496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$0, 25560(%rsp)
.Ltmp98:
	#DEBUG_VALUE: main:numAttributes <- 0
	movq	20544(%rsp), %rdi       # 8-byte Reload
	movq	20536(%rsp), %rsi       # 8-byte Reload
	movq	20528(%rsp), %rdx       # 8-byte Reload
	movq	20520(%rsp), %rcx       # 8-byte Reload
	movq	20512(%rsp), %r8        # 8-byte Reload
	movl	20364(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	20704(%rsp), %rdi       # 8-byte Reload
	movq	20576(%rsp), %rsi       # 8-byte Reload
	movq	20552(%rsp), %rdx       # 8-byte Reload
	movq	20696(%rsp), %rcx       # 8-byte Reload
	movq	20568(%rsp), %r8        # 8-byte Reload
	movq	20416(%rsp), %r9        # 8-byte Reload
	movq	20560(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	20696(%rsp), %rdi       # 8-byte Reload
	movq	20664(%rsp), %rsi       # 8-byte Reload
	movq	20416(%rsp), %rdx       # 8-byte Reload
	movq	20416(%rsp), %rcx       # 8-byte Reload
	movq	20592(%rsp), %r8        # 8-byte Reload
	movq	20416(%rsp), %r9        # 8-byte Reload
	movq	20584(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$0, 25564(%rsp)
	.loc	3 141 0                 # kmeans.c:141:0
.Ltmp99:
	movq	20392(%rsp), %rdi       # 8-byte Reload
	movq	20624(%rsp), %rsi       # 8-byte Reload
	movq	20616(%rsp), %rdx       # 8-byte Reload
	movq	20608(%rsp), %rcx       # 8-byte Reload
	movq	20600(%rsp), %r8        # 8-byte Reload
	movl	20364(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	20704(%rsp), %rdi       # 8-byte Reload
	movq	20664(%rsp), %rsi       # 8-byte Reload
	movq	20416(%rsp), %rdx       # 8-byte Reload
	movq	20416(%rsp), %rcx       # 8-byte Reload
	movq	20640(%rsp), %r8        # 8-byte Reload
	movq	20416(%rsp), %r9        # 8-byte Reload
	movq	20632(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	23564(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	20696(%rsp), %rdi       # 8-byte Reload
	movq	20664(%rsp), %rsi       # 8-byte Reload
	movq	20696(%rsp), %rcx       # 8-byte Reload
	movq	20656(%rsp), %r8        # 8-byte Reload
	movq	20416(%rsp), %r9        # 8-byte Reload
	movq	20648(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	23564(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	20688(%rsp), %rdi       # 8-byte Reload
	movq	20696(%rsp), %rsi       # 8-byte Reload
	movq	20696(%rsp), %rcx       # 8-byte Reload
	movq	20680(%rsp), %r8        # 8-byte Reload
	movq	20416(%rsp), %r9        # 8-byte Reload
	movq	20672(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 20335(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	20392(%rsp), %rdi       # 8-byte Reload
	movq	20384(%rsp), %rsi       # 8-byte Reload
	movq	20376(%rsp), %rdx       # 8-byte Reload
	movq	20368(%rsp), %rcx       # 8-byte Reload
	movq	20704(%rsp), %r8        # 8-byte Reload
	movl	20364(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	20344(%rsp), %rdi       # 8-byte Reload
	movq	20416(%rsp), %rsi       # 8-byte Reload
	movq	20416(%rsp), %rdx       # 8-byte Reload
	movq	20696(%rsp), %rcx       # 8-byte Reload
	movq	20336(%rsp), %r8        # 8-byte Reload
	movq	20416(%rsp), %r9        # 8-byte Reload
	movq	20352(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	20704(%rsp), %rdi       # 8-byte Reload
	movq	20416(%rsp), %rsi       # 8-byte Reload
	movq	20416(%rsp), %rdx       # 8-byte Reload
	movq	20696(%rsp), %rcx       # 8-byte Reload
	movq	20440(%rsp), %r8        # 8-byte Reload
	movq	20416(%rsp), %r9        # 8-byte Reload
	movq	20400(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	20335(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	20696(%rsp), %rdi       # 8-byte Reload
	movq	20696(%rsp), %rsi       # 8-byte Reload
	movq	20696(%rsp), %rcx       # 8-byte Reload
	movq	20408(%rsp), %r8        # 8-byte Reload
	movq	20416(%rsp), %r9        # 8-byte Reload
	movq	20424(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	20335(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_19
# BB#13:
	movl	$0, %eax
	leaq	.L.str2173, %rdx
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$32, %rsi
	movabsq	$0, %rdi
	movabsq	$1, %r8
	leaq	.L.str433, %r9
	leaq	.L.str434, %r10
	movabsq	$2, %r11
	leaq	.L.str431, %rbx
	leaq	.L.str432, %r14
	movabsq	$64, %r15
	leaq	.L.str429, %r12
	leaq	.L.str430, %r13
	leaq	.L.str427, %rbp
	movq	%rcx, 20320(%rsp)       # 8-byte Spill
	leaq	.L.str428, %rcx
	movq	%rcx, 20312(%rsp)       # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 20304(%rsp)       # 8-byte Spill
	leaq	open, %rcx
	movq	%rcx, 20296(%rsp)       # 8-byte Spill
	leaq	.L.str425, %rcx
	movq	%rcx, 20288(%rsp)       # 8-byte Spill
	leaq	.L.str426, %rcx
	movq	%rcx, 20280(%rsp)       # 8-byte Spill
	movabsq	$143, %rcx
	movq	%rcx, 20272(%rsp)       # 8-byte Spill
	leaq	.L.str422, %rcx
	movq	%rcx, 20264(%rsp)       # 8-byte Spill
	leaq	.L.str423, %rcx
	movq	%rcx, 20256(%rsp)       # 8-byte Spill
	leaq	.L.str424, %rcx
	movq	%rcx, 20248(%rsp)       # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 20244(%rsp)       # 4-byte Spill
	movl	$1, %eax
	.loc	3 143 0                 # kmeans.c:143:0
.Ltmp100:
	movq	%rcx, 20232(%rsp)       # 8-byte Spill
	movq	20272(%rsp), %rcx       # 8-byte Reload
	movq	%rdi, 20224(%rsp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	20264(%rsp), %rcx       # 8-byte Reload
	movq	%rsi, 20216(%rsp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	20256(%rsp), %rcx       # 8-byte Reload
	movq	%rdx, 20208(%rsp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	20248(%rsp), %rcx       # 8-byte Reload
	movq	%r8, 20200(%rsp)        # 8-byte Spill
	movq	20232(%rsp), %r8        # 8-byte Reload
	movl	%eax, 20196(%rsp)       # 4-byte Spill
	movl	20244(%rsp), %eax       # 4-byte Reload
	movq	%r9, 20184(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 20176(%rsp)       # 8-byte Spill
	movq	%r15, 20168(%rsp)       # 8-byte Spill
	movq	%r13, 20160(%rsp)       # 8-byte Spill
	movq	%rbp, 20152(%rsp)       # 8-byte Spill
	movq	%r14, 20144(%rsp)       # 8-byte Spill
	movq	%rbx, 20136(%rsp)       # 8-byte Spill
	movq	%r10, 20128(%rsp)       # 8-byte Spill
	movq	%r11, 20120(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	20304(%rsp), %rdi       # 8-byte Reload
	movq	20168(%rsp), %rsi       # 8-byte Reload
	movq	20296(%rsp), %rdx       # 8-byte Reload
	movq	20200(%rsp), %rcx       # 8-byte Reload
	movq	20288(%rsp), %r8        # 8-byte Reload
	movq	20224(%rsp), %r9        # 8-byte Reload
	movq	20280(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	20200(%rsp), %rdi       # 8-byte Reload
	movq	20168(%rsp), %rsi       # 8-byte Reload
	movq	23080(%rsp), %rdx       # 8-byte Reload
	movq	20200(%rsp), %rcx       # 8-byte Reload
	movq	20152(%rsp), %r8        # 8-byte Reload
	movq	20224(%rsp), %r9        # 8-byte Reload
	movq	20312(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	20320(%rsp), %rdi       # 8-byte Reload
	movq	20168(%rsp), %rsi       # 8-byte Reload
	movq	23080(%rsp), %rdx       # 8-byte Reload
	movq	20200(%rsp), %rcx       # 8-byte Reload
	movq	20176(%rsp), %r8        # 8-byte Reload
	movq	20224(%rsp), %r9        # 8-byte Reload
	movq	20160(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	20120(%rsp), %rdi       # 8-byte Reload
	movq	20216(%rsp), %rsi       # 8-byte Reload
	movq	20224(%rsp), %rdx       # 8-byte Reload
	movq	20224(%rsp), %rcx       # 8-byte Reload
	movq	20136(%rsp), %r8        # 8-byte Reload
	movq	20224(%rsp), %r9        # 8-byte Reload
	movq	20144(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	20320(%rsp), %rdi       # 8-byte Reload
	movq	20216(%rsp), %rsi       # 8-byte Reload
	movq	20224(%rsp), %rdx       # 8-byte Reload
	movq	20200(%rsp), %rcx       # 8-byte Reload
	movq	20184(%rsp), %r8        # 8-byte Reload
	movq	20224(%rsp), %r9        # 8-byte Reload
	movq	20128(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23080(%rsp), %rdi       # 8-byte Reload
	movl	20244(%rsp), %esi       # 4-byte Reload
	movq	20208(%rsp), %rdx       # 8-byte Reload
	movb	$0, %al
	callq	open
	movabsq	$1, %rcx
	leaq	.L.str453, %r8
	movabsq	$0, %rdx
	leaq	.L.str454, %rdi
	movabsq	$2, %r9
	leaq	.L.str451, %r10
	leaq	.L.str452, %r11
	movabsq	$3, %rbx
	leaq	.L.str449, %r14
	leaq	.L.str450, %r15
	movabsq	$143, %r12
	leaq	.L.str446, %rsi
	leaq	.L.str447, %r13
	leaq	.L.str448, %rbp
	movl	%eax, 20116(%rsp)       # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 20112(%rsp)       # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 20104(%rsp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 20096(%rsp)       # 8-byte Spill
	leaq	.L.str444, %rcx
	movq	%rcx, 20088(%rsp)       # 8-byte Spill
	leaq	.L.str445, %rcx
	movq	%rcx, 20080(%rsp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 20072(%rsp)       # 8-byte Spill
	leaq	.L.str442, %rcx
	movq	%rcx, 20064(%rsp)       # 8-byte Spill
	leaq	.L.str443, %rcx
	movq	%rcx, 20056(%rsp)       # 8-byte Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, 20048(%rsp)       # 8-byte Spill
	leaq	.L.str440, %rcx
	movq	%rcx, 20040(%rsp)       # 8-byte Spill
	leaq	.L.str441, %rcx
	movq	%rcx, 20032(%rsp)       # 8-byte Spill
	leaq	.L.str437, %rcx
	movq	%rcx, 20024(%rsp)       # 8-byte Spill
	leaq	.L.str438, %rcx
	movq	%rcx, 20016(%rsp)       # 8-byte Spill
	leaq	.L.str439, %rcx
	movq	%rcx, 20008(%rsp)       # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 20000(%rsp)       # 8-byte Spill
	leaq	.L.str435, %rcx
	movq	%rcx, 19992(%rsp)       # 8-byte Spill
	leaq	.L.str436, %rcx
	movl	%eax, 19988(%rsp)       # 4-byte Spill
	movl	20116(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 19976(%rsp)       # 8-byte Spill
	movq	20096(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 19968(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	20072(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 19960(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	19976(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 19952(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	20104(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 19944(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	19992(%rsp), %rax       # 8-byte Reload
	movq	%r8, 19936(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	19952(%rsp), %rax       # 8-byte Reload
	movq	%r9, 19928(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	19944(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 19920(%rsp)       # 8-byte Spill
	movq	%r12, 19912(%rsp)       # 8-byte Spill
	movq	%r15, 19904(%rsp)       # 8-byte Spill
	movq	%r13, 19896(%rsp)       # 8-byte Spill
	movq	%r14, 19888(%rsp)       # 8-byte Spill
	movq	%r10, 19880(%rsp)       # 8-byte Spill
	movq	%r11, 19872(%rsp)       # 8-byte Spill
	movq	%rbx, 19864(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp101:
	#DEBUG_VALUE: infile <- [RSP+20116]
	movq	19912(%rsp), %rdi       # 8-byte Reload
	movq	20024(%rsp), %rsi       # 8-byte Reload
	movq	20016(%rsp), %rdx       # 8-byte Reload
	movq	20008(%rsp), %rcx       # 8-byte Reload
	movq	20000(%rsp), %r8        # 8-byte Reload
	movl	20112(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	19928(%rsp), %rdi       # 8-byte Reload
	movq	20072(%rsp), %rsi       # 8-byte Reload
	movq	20048(%rsp), %rdx       # 8-byte Reload
	movq	19952(%rsp), %rcx       # 8-byte Reload
	movq	20040(%rsp), %r8        # 8-byte Reload
	movq	19952(%rsp), %r9        # 8-byte Reload
	movq	20032(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	20116(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	20104(%rsp), %rdi       # 8-byte Reload
	movq	20072(%rsp), %rsi       # 8-byte Reload
	movq	20104(%rsp), %rcx       # 8-byte Reload
	movq	20064(%rsp), %r8        # 8-byte Reload
	movq	19952(%rsp), %r9        # 8-byte Reload
	movq	20056(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	20116(%rsp), %esi       # 4-byte Reload
	cmpl	$-1, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	20096(%rsp), %rdi       # 8-byte Reload
	movq	20104(%rsp), %rsi       # 8-byte Reload
	movq	20104(%rsp), %rcx       # 8-byte Reload
	movq	20088(%rsp), %r8        # 8-byte Reload
	movq	19952(%rsp), %r9        # 8-byte Reload
	movq	20080(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 19863(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	19912(%rsp), %rdi       # 8-byte Reload
	movq	19960(%rsp), %rsi       # 8-byte Reload
	movq	19896(%rsp), %rdx       # 8-byte Reload
	movq	19920(%rsp), %rcx       # 8-byte Reload
	movq	19928(%rsp), %r8        # 8-byte Reload
	movl	20112(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	19864(%rsp), %rdi       # 8-byte Reload
	movq	19952(%rsp), %rsi       # 8-byte Reload
	movq	19952(%rsp), %rdx       # 8-byte Reload
	movq	20104(%rsp), %rcx       # 8-byte Reload
	movq	19888(%rsp), %r8        # 8-byte Reload
	movq	19952(%rsp), %r9        # 8-byte Reload
	movq	19904(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	19928(%rsp), %rdi       # 8-byte Reload
	movq	19952(%rsp), %rsi       # 8-byte Reload
	movq	19952(%rsp), %rdx       # 8-byte Reload
	movq	20104(%rsp), %rcx       # 8-byte Reload
	movq	19880(%rsp), %r8        # 8-byte Reload
	movq	19952(%rsp), %r9        # 8-byte Reload
	movq	19872(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19863(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	20104(%rsp), %rdi       # 8-byte Reload
	movq	20104(%rsp), %rsi       # 8-byte Reload
	movq	20104(%rsp), %rcx       # 8-byte Reload
	movq	19936(%rsp), %r8        # 8-byte Reload
	movq	19952(%rsp), %r9        # 8-byte Reload
	movq	19968(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19863(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_14
	jmp	.LBB2_15
.Ltmp102:
.LBB2_14:
	leaq	.L.str3174, %rax
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$64, %rdx
	movabsq	$1, %rsi
	leaq	.L.str473, %r8
	movabsq	$0, %rdi
	leaq	.L.str474, %r9
	movabsq	$2, %r10
	leaq	.L.str471, %r11
	leaq	.L.str472, %rbx
	leaq	.L.str469, %r14
	leaq	.L.str470, %r15
	leaq	.L.str467, %r12
	leaq	.L.str468, %r13
	movabsq	$4, %rbp
	movq	%rax, 19848(%rsp)       # 8-byte Spill
	leaq	fprintf, %rax
	movq	%rax, 19840(%rsp)       # 8-byte Spill
	leaq	.L.str465, %rax
	movq	%rax, 19832(%rsp)       # 8-byte Spill
	leaq	.L.str466, %rax
	movq	%rax, 19824(%rsp)       # 8-byte Spill
	movabsq	$144, %rax
	movq	%rax, 19816(%rsp)       # 8-byte Spill
	leaq	.L.str462, %rax
	movq	%rax, 19808(%rsp)       # 8-byte Spill
	leaq	.L.str463, %rax
	movq	%rax, 19800(%rsp)       # 8-byte Spill
	leaq	.L.str464, %rax
	movq	%rax, 19792(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 19784(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 19780(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 19768(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 19760(%rsp)       # 8-byte Spill
	leaq	.L.str460, %rax
	movq	%rax, 19752(%rsp)       # 8-byte Spill
	leaq	.L.str461, %rax
	movq	%rax, 19744(%rsp)       # 8-byte Spill
	leaq	stderr, %rax
	movq	%rax, 19736(%rsp)       # 8-byte Spill
	leaq	.L.str458, %rax
	movq	%rax, 19728(%rsp)       # 8-byte Spill
	leaq	.L.str459, %rax
	movq	%rax, 19720(%rsp)       # 8-byte Spill
	leaq	.L.str455, %rax
	movq	%rax, 19712(%rsp)       # 8-byte Spill
	leaq	.L.str456, %rax
	movq	%rax, 19704(%rsp)       # 8-byte Spill
	leaq	.L.str457, %rax
	movq	%rax, 19696(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	.loc	3 144 0                 # kmeans.c:144:0
.Ltmp103:
	movq	%rax, 19688(%rsp)       # 8-byte Spill
	movq	19816(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 19680(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	19712(%rsp), %rax       # 8-byte Reload
	movl	%esi, 19676(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	19704(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 19664(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	19696(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 19656(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	19688(%rsp), %rax       # 8-byte Reload
	movq	%r8, 19648(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	19780(%rsp), %eax       # 4-byte Reload
	movq	%r9, 19640(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 19632(%rsp)       # 8-byte Spill
	movq	%r12, 19624(%rsp)       # 8-byte Spill
	movq	%r13, 19616(%rsp)       # 8-byte Spill
	movq	%r14, 19608(%rsp)       # 8-byte Spill
	movq	%rbp, 19600(%rsp)       # 8-byte Spill
	movq	%rbx, 19592(%rsp)       # 8-byte Spill
	movq	%r10, 19584(%rsp)       # 8-byte Spill
	movq	%r11, 19576(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	19784(%rsp), %rdi       # 8-byte Reload
	movq	19664(%rsp), %rsi       # 8-byte Reload
	movq	19736(%rsp), %rdx       # 8-byte Reload
	movq	19784(%rsp), %rcx       # 8-byte Reload
	movq	19728(%rsp), %r8        # 8-byte Reload
	movq	19680(%rsp), %r9        # 8-byte Reload
	movq	19720(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	stderr, %rcx
	movq	19760(%rsp), %rdi       # 8-byte Reload
	movq	19664(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	19784(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 19568(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	19752(%rsp), %r8        # 8-byte Reload
	movq	19680(%rsp), %r9        # 8-byte Reload
	movq	19744(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	19816(%rsp), %rdi       # 8-byte Reload
	movq	19808(%rsp), %rsi       # 8-byte Reload
	movq	19800(%rsp), %rdx       # 8-byte Reload
	movq	19792(%rsp), %rcx       # 8-byte Reload
	movq	19768(%rsp), %r8        # 8-byte Reload
	movl	19780(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	19600(%rsp), %rdi       # 8-byte Reload
	movq	19664(%rsp), %rsi       # 8-byte Reload
	movq	19840(%rsp), %rdx       # 8-byte Reload
	movq	19784(%rsp), %rcx       # 8-byte Reload
	movq	19832(%rsp), %r8        # 8-byte Reload
	movq	19680(%rsp), %r9        # 8-byte Reload
	movq	19824(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	19784(%rsp), %rdi       # 8-byte Reload
	movq	19664(%rsp), %rsi       # 8-byte Reload
	movq	19568(%rsp), %rdx       # 8-byte Reload
	movq	19784(%rsp), %rcx       # 8-byte Reload
	movq	19624(%rsp), %r8        # 8-byte Reload
	movq	19680(%rsp), %r9        # 8-byte Reload
	movq	19616(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	19656(%rsp), %rdi       # 8-byte Reload
	movq	19664(%rsp), %rsi       # 8-byte Reload
	movq	19568(%rsp), %rdx       # 8-byte Reload
	movq	19784(%rsp), %rcx       # 8-byte Reload
	movq	19608(%rsp), %r8        # 8-byte Reload
	movq	19680(%rsp), %r9        # 8-byte Reload
	movq	19632(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	19584(%rsp), %rdi       # 8-byte Reload
	movq	19664(%rsp), %rsi       # 8-byte Reload
	movq	19848(%rsp), %rdx       # 8-byte Reload
	movq	19680(%rsp), %rcx       # 8-byte Reload
	movq	19576(%rsp), %r8        # 8-byte Reload
	movq	19680(%rsp), %r9        # 8-byte Reload
	movq	19592(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	19656(%rsp), %rdi       # 8-byte Reload
	movq	19664(%rsp), %rsi       # 8-byte Reload
	movq	19848(%rsp), %rdx       # 8-byte Reload
	movq	19784(%rsp), %rcx       # 8-byte Reload
	movq	19648(%rsp), %r8        # 8-byte Reload
	movq	19680(%rsp), %r9        # 8-byte Reload
	movq	19640(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	19568(%rsp), %rdi       # 8-byte Reload
	movq	19848(%rsp), %rsi       # 8-byte Reload
	movq	23080(%rsp), %rdx       # 8-byte Reload
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$32, %rdx
	movabsq	$1, %rsi
	leaq	.L.str484, %r8
	movabsq	$0, %r9
	leaq	.L.str485, %r10
	leaq	.L.str482, %r11
	leaq	.L.str483, %rbx
	movabsq	$2, %r14
	movabsq	$64, %r15
	leaq	exit, %r12
	leaq	.L.str480, %r13
	leaq	.L.str481, %rbp
	movq	%rcx, 19560(%rsp)       # 8-byte Spill
	movabsq	$145, %rcx
	movq	%rcx, 19552(%rsp)       # 8-byte Spill
	leaq	.L.str477, %rcx
	movq	%rcx, 19544(%rsp)       # 8-byte Spill
	leaq	.L.str478, %rcx
	movq	%rcx, 19536(%rsp)       # 8-byte Spill
	leaq	.L.str479, %rcx
	movq	%rcx, 19528(%rsp)       # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 19524(%rsp)       # 4-byte Spill
	movl	$0, %eax
	movq	%rcx, 19512(%rsp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 19504(%rsp)       # 8-byte Spill
	leaq	.L.str475, %rcx
	movq	%rcx, 19496(%rsp)       # 8-byte Spill
	leaq	.L.str476, %rcx
	.loc	3 145 0                 # kmeans.c:145:0
	movl	%eax, 19492(%rsp)       # 4-byte Spill
	movl	19524(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 19480(%rsp)       # 8-byte Spill
	movq	19504(%rsp), %rax       # 8-byte Reload
	movl	%edi, 19476(%rsp)       # 4-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 19464(%rsp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	19480(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 19456(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	19464(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 19448(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	19496(%rsp), %rax       # 8-byte Reload
	movq	%r8, 19440(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 19432(%rsp)        # 8-byte Spill
	movq	19448(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 19424(%rsp)       # 8-byte Spill
	movq	%r15, 19416(%rsp)       # 8-byte Spill
	movq	%r12, 19408(%rsp)       # 8-byte Spill
	movq	%r13, 19400(%rsp)       # 8-byte Spill
	movq	%r14, 19392(%rsp)       # 8-byte Spill
	movq	%rbx, 19384(%rsp)       # 8-byte Spill
	movq	%r10, 19376(%rsp)       # 8-byte Spill
	movq	%r11, 19368(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	19552(%rsp), %rdi       # 8-byte Reload
	movq	19544(%rsp), %rsi       # 8-byte Reload
	movq	19536(%rsp), %rdx       # 8-byte Reload
	movq	19528(%rsp), %rcx       # 8-byte Reload
	movq	19512(%rsp), %r8        # 8-byte Reload
	movl	19492(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	19392(%rsp), %rdi       # 8-byte Reload
	movq	19416(%rsp), %rsi       # 8-byte Reload
	movq	19408(%rsp), %rdx       # 8-byte Reload
	movq	19464(%rsp), %rcx       # 8-byte Reload
	movq	19400(%rsp), %r8        # 8-byte Reload
	movq	19432(%rsp), %r9        # 8-byte Reload
	movq	19424(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	19464(%rsp), %rdi       # 8-byte Reload
	movq	19456(%rsp), %rsi       # 8-byte Reload
	movq	19464(%rsp), %rdx       # 8-byte Reload
	movq	19432(%rsp), %rcx       # 8-byte Reload
	movq	19368(%rsp), %r8        # 8-byte Reload
	movq	19432(%rsp), %r9        # 8-byte Reload
	movq	19384(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	19560(%rsp), %rdi       # 8-byte Reload
	movq	19456(%rsp), %rsi       # 8-byte Reload
	movq	19464(%rsp), %rdx       # 8-byte Reload
	movq	19464(%rsp), %rcx       # 8-byte Reload
	movq	19440(%rsp), %r8        # 8-byte Reload
	movq	19432(%rsp), %r9        # 8-byte Reload
	movq	19376(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	19476(%rsp), %edi       # 4-byte Reload
	callq	exit
	movabsq	$145, %rdi
	leaq	.L.str486, %rsi
	leaq	.L.str487, %rdx
	leaq	.L.str488, %rcx
	movabsq	$7, %r8
	movl	$0, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, 19364(%rsp)      # 4-byte Spill
	callq	trace_logger_log0
.Ltmp104:
.LBB2_15:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str535, %r8
	movabsq	$0, %rdx
	leaq	.L.str536, %rsi
	leaq	.L.str533, %r9
	leaq	.L.str534, %r10
	movabsq	$2, %r11
	leaq	malloc, %rbx
	leaq	.L.str531, %r14
	leaq	.L.str532, %r15
	movabsq	$152, %r12
	leaq	.L.str528, %r13
	leaq	.L.str529, %rbp
	movq	%rax, 19352(%rsp)       # 8-byte Spill
	leaq	.L.str530, %rax
	movq	%rax, 19344(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 19336(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 19332(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 19320(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 19312(%rsp)       # 8-byte Spill
	leaq	.L.str526, %rax
	movq	%rax, 19304(%rsp)       # 8-byte Spill
	leaq	.L.str527, %rax
	movq	%rax, 19296(%rsp)       # 8-byte Spill
	leaq	.L.str524, %rax
	movq	%rax, 19288(%rsp)       # 8-byte Spill
	leaq	.L.str525, %rax
	movq	%rax, 19280(%rsp)       # 8-byte Spill
	leaq	.L.str522, %rax
	movq	%rax, 19272(%rsp)       # 8-byte Spill
	leaq	.L.str523, %rax
	movq	%rax, 19264(%rsp)       # 8-byte Spill
	leaq	.L.str519, %rax
	movq	%rax, 19256(%rsp)       # 8-byte Spill
	leaq	.L.str520, %rax
	movq	%rax, 19248(%rsp)       # 8-byte Spill
	leaq	.L.str521, %rax
	movq	%rax, 19240(%rsp)       # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 19232(%rsp)       # 8-byte Spill
	leaq	.L.str517, %rax
	movq	%rax, 19224(%rsp)       # 8-byte Spill
	leaq	.L.str518, %rax
	movq	%rax, 19216(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 19208(%rsp)       # 8-byte Spill
	leaq	.L.str515, %rax
	movq	%rax, 19200(%rsp)       # 8-byte Spill
	leaq	.L.str516, %rax
	movq	%rax, 19192(%rsp)       # 8-byte Spill
	leaq	.L.str512, %rax
	movq	%rax, 19184(%rsp)       # 8-byte Spill
	leaq	.L.str513, %rax
	movq	%rax, 19176(%rsp)       # 8-byte Spill
	leaq	.L.str514, %rax
	movq	%rax, 19168(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 19160(%rsp)       # 8-byte Spill
	leaq	.L.str510, %rax
	movq	%rax, 19152(%rsp)       # 8-byte Spill
	leaq	.L.str511, %rax
	movq	%rax, 19144(%rsp)       # 8-byte Spill
	leaq	.L.str508, %rax
	movq	%rax, 19136(%rsp)       # 8-byte Spill
	leaq	.L.str509, %rax
	movq	%rax, 19128(%rsp)       # 8-byte Spill
	leaq	.L.str506, %rax
	movq	%rax, 19120(%rsp)       # 8-byte Spill
	leaq	.L.str507, %rax
	movq	%rax, 19112(%rsp)       # 8-byte Spill
	leaq	.L.str503, %rax
	movq	%rax, 19104(%rsp)       # 8-byte Spill
	leaq	.L.str504, %rax
	movq	%rax, 19096(%rsp)       # 8-byte Spill
	leaq	.L.str505, %rax
	movq	%rax, 19088(%rsp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 19080(%rsp)       # 8-byte Spill
	leaq	.L.str501, %rax
	movq	%rax, 19072(%rsp)       # 8-byte Spill
	leaq	.L.str502, %rax
	movq	%rax, 19064(%rsp)       # 8-byte Spill
	leaq	.L.str499, %rax
	movq	%rax, 19056(%rsp)       # 8-byte Spill
	leaq	.L.str500, %rax
	movq	%rax, 19048(%rsp)       # 8-byte Spill
	leaq	25564(%rsp), %rax
	movq	%rax, 19040(%rsp)       # 8-byte Spill
	leaq	.L.str496, %rax
	movq	%rax, 19032(%rsp)       # 8-byte Spill
	leaq	.L.str497, %rax
	movq	%rax, 19024(%rsp)       # 8-byte Spill
	leaq	.L.str498, %rax
	movq	%rax, 19016(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 19008(%rsp)       # 8-byte Spill
	leaq	.L.str494, %rax
	movq	%rax, 19000(%rsp)       # 8-byte Spill
	leaq	.L.str495, %rax
	movq	%rax, 18992(%rsp)       # 8-byte Spill
	leaq	.L.str492, %rax
	movq	%rax, 18984(%rsp)       # 8-byte Spill
	leaq	.L.str493, %rax
	movq	%rax, 18976(%rsp)       # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 18968(%rsp)       # 8-byte Spill
	leaq	.L.str489, %rax
	movq	%rax, 18960(%rsp)       # 8-byte Spill
	leaq	.L.str490, %rax
	movq	%rax, 18952(%rsp)       # 8-byte Spill
	leaq	.L.str491, %rax
	movq	%rax, 18944(%rsp)       # 8-byte Spill
	movabsq	$4, %rax
	.loc	3 147 0                 # kmeans.c:147:0
	movl	%esi, 18940(%rsp)       # 4-byte Spill
	movl	20116(%rsp), %esi       # 4-byte Reload
	movq	%rdi, 18928(%rsp)       # 8-byte Spill
	movl	%esi, %edi
	movq	18968(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 18920(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rax, 18912(%rsp)       # 8-byte Spill
	movb	$0, %al
	movq	%rbp, 18904(%rsp)       # 8-byte Spill
	movq	%r15, 18896(%rsp)       # 8-byte Spill
	movq	%rcx, 18888(%rsp)       # 8-byte Spill
	movq	%r8, 18880(%rsp)        # 8-byte Spill
	movq	%r12, 18872(%rsp)       # 8-byte Spill
	movq	%r13, 18864(%rsp)       # 8-byte Spill
	movq	%r9, 18856(%rsp)        # 8-byte Spill
	movq	%r10, 18848(%rsp)       # 8-byte Spill
	movq	%r11, 18840(%rsp)       # 8-byte Spill
	movq	%rbx, 18832(%rsp)       # 8-byte Spill
	movq	%r14, 18824(%rsp)       # 8-byte Spill
	callq	read
	.loc	3 148 0                 # kmeans.c:148:0
	movl	20116(%rsp), %edi       # 4-byte Reload
	movq	19040(%rsp), %rsi       # 8-byte Reload
	movq	18912(%rsp), %rdx       # 8-byte Reload
	movl	%eax, 18820(%rsp)       # 4-byte Spill
	movb	$0, %al
	callq	read
.Ltmp105:
	#DEBUG_VALUE: main:numObjects <- [RSP+18968]
	.loc	3 152 0                 # kmeans.c:152:0
	movq	18872(%rsp), %rdi       # 8-byte Reload
	movq	18960(%rsp), %rsi       # 8-byte Reload
	movq	18952(%rsp), %rdx       # 8-byte Reload
	movq	18944(%rsp), %rcx       # 8-byte Reload
	movq	19008(%rsp), %r8        # 8-byte Reload
	movl	19332(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	movl	%eax, 18816(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	18888(%rsp), %rdi       # 8-byte Reload
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	18968(%rsp), %rdx       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	18984(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	18976(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	19312(%rsp), %rdi       # 8-byte Reload
	movq	19208(%rsp), %rsi       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	19000(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	18992(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 18812(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp106:
	#DEBUG_VALUE: main:numAttributes <- [RSP+19040]
	movq	18872(%rsp), %rdi       # 8-byte Reload
	movq	19032(%rsp), %rsi       # 8-byte Reload
	movq	19024(%rsp), %rdx       # 8-byte Reload
	movq	19016(%rsp), %rcx       # 8-byte Reload
	movq	19008(%rsp), %r8        # 8-byte Reload
	movl	19332(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	18888(%rsp), %rdi       # 8-byte Reload
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	19040(%rsp), %rdx       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	19056(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19048(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	19312(%rsp), %rdi       # 8-byte Reload
	movq	19208(%rsp), %rsi       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	19072(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19064(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 18808(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	18872(%rsp), %rdi       # 8-byte Reload
	movq	19104(%rsp), %rsi       # 8-byte Reload
	movq	19096(%rsp), %rdx       # 8-byte Reload
	movq	19088(%rsp), %rcx       # 8-byte Reload
	movq	19080(%rsp), %r8        # 8-byte Reload
	movl	19332(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	18812(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	18840(%rsp), %rdi       # 8-byte Reload
	movq	19208(%rsp), %rsi       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	19120(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19112(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	18808(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	18888(%rsp), %rdi       # 8-byte Reload
	movq	19208(%rsp), %rsi       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	19136(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19128(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	18808(%rsp), %eax       # 4-byte Reload
	movl	18812(%rsp), %esi       # 4-byte Reload
	imull	%esi, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	19312(%rsp), %rdi       # 8-byte Reload
	movq	19208(%rsp), %rsi       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	19152(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19144(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 18804(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	18872(%rsp), %rdi       # 8-byte Reload
	movq	19184(%rsp), %rsi       # 8-byte Reload
	movq	19176(%rsp), %rdx       # 8-byte Reload
	movq	19168(%rsp), %rcx       # 8-byte Reload
	movq	19160(%rsp), %r8        # 8-byte Reload
	movl	19332(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	18804(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	18888(%rsp), %rdi       # 8-byte Reload
	movq	19208(%rsp), %rsi       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	19200(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19192(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	18804(%rsp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	movq	19312(%rsp), %rdi       # 8-byte Reload
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	18888(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 18792(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	19224(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19216(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	18872(%rsp), %rdi       # 8-byte Reload
	movq	19256(%rsp), %rsi       # 8-byte Reload
	movq	19248(%rsp), %rdx       # 8-byte Reload
	movq	19240(%rsp), %rcx       # 8-byte Reload
	movq	19232(%rsp), %r8        # 8-byte Reload
	movl	19332(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	18840(%rsp), %rdi       # 8-byte Reload
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	18840(%rsp), %rdx       # 8-byte Reload
	movq	18920(%rsp), %rcx       # 8-byte Reload
	movq	19272(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19264(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	18888(%rsp), %rdi       # 8-byte Reload
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	18792(%rsp), %rdx       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	19288(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19280(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	18792(%rsp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	19312(%rsp), %rdi       # 8-byte Reload
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	18888(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 18784(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	19304(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19296(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	18872(%rsp), %rdi       # 8-byte Reload
	movq	18864(%rsp), %rsi       # 8-byte Reload
	movq	18904(%rsp), %rdx       # 8-byte Reload
	movq	19344(%rsp), %rcx       # 8-byte Reload
	movq	19320(%rsp), %r8        # 8-byte Reload
	movl	19332(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	18840(%rsp), %rdi       # 8-byte Reload
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	18832(%rsp), %rdx       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	18824(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	18896(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	18888(%rsp), %rdi       # 8-byte Reload
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	18784(%rsp), %rdx       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	18856(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	18848(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	18928(%rsp), %rdi       # 8-byte Reload
	movq	19352(%rsp), %rsi       # 8-byte Reload
	movq	18784(%rsp), %rdx       # 8-byte Reload
	movq	18888(%rsp), %rcx       # 8-byte Reload
	movq	18880(%rsp), %r8        # 8-byte Reload
	movq	18920(%rsp), %r9        # 8-byte Reload
	movq	19336(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	18784(%rsp), %rdi       # 8-byte Reload
	callq	malloc
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str576, %r8
	movabsq	$0, %rsi
	leaq	.L.str577, %r9
	leaq	.L.str574, %r10
	leaq	.L.str575, %r11
	movabsq	$2, %rbx
	leaq	malloc, %r14
	leaq	.L.str572, %r15
	leaq	.L.str573, %r12
	movabsq	$153, %r13
	leaq	.L.str569, %rbp
	movq	%rax, 18776(%rsp)       # 8-byte Spill
	leaq	.L.str570, %rax
	movq	%rax, 18768(%rsp)       # 8-byte Spill
	leaq	.L.str571, %rax
	movq	%rax, 18760(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 18752(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 18748(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 18736(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 18728(%rsp)       # 8-byte Spill
	leaq	.L.str567, %rax
	movq	%rax, 18720(%rsp)       # 8-byte Spill
	leaq	.L.str568, %rax
	movq	%rax, 18712(%rsp)       # 8-byte Spill
	leaq	.L.str565, %rax
	movq	%rax, 18704(%rsp)       # 8-byte Spill
	leaq	.L.str566, %rax
	movq	%rax, 18696(%rsp)       # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 18688(%rsp)       # 8-byte Spill
	leaq	.L.str563, %rax
	movq	%rax, 18680(%rsp)       # 8-byte Spill
	leaq	.L.str564, %rax
	movq	%rax, 18672(%rsp)       # 8-byte Spill
	leaq	.L.str560, %rax
	movq	%rax, 18664(%rsp)       # 8-byte Spill
	leaq	.L.str561, %rax
	movq	%rax, 18656(%rsp)       # 8-byte Spill
	leaq	.L.str562, %rax
	movq	%rax, 18648(%rsp)       # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 18640(%rsp)       # 8-byte Spill
	leaq	.L.str558, %rax
	movq	%rax, 18632(%rsp)       # 8-byte Spill
	leaq	.L.str559, %rax
	movq	%rax, 18624(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 18616(%rsp)       # 8-byte Spill
	leaq	.L.str556, %rax
	movq	%rax, 18608(%rsp)       # 8-byte Spill
	leaq	.L.str557, %rax
	movq	%rax, 18600(%rsp)       # 8-byte Spill
	leaq	.L.str553, %rax
	movq	%rax, 18592(%rsp)       # 8-byte Spill
	leaq	.L.str554, %rax
	movq	%rax, 18584(%rsp)       # 8-byte Spill
	leaq	.L.str555, %rax
	movq	%rax, 18576(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 18568(%rsp)       # 8-byte Spill
	leaq	.L.str551, %rax
	movq	%rax, 18560(%rsp)       # 8-byte Spill
	leaq	.L.str552, %rax
	movq	%rax, 18552(%rsp)       # 8-byte Spill
	leaq	.L.str549, %rax
	movq	%rax, 18544(%rsp)       # 8-byte Spill
	leaq	.L.str550, %rax
	movq	%rax, 18536(%rsp)       # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 18528(%rsp)       # 8-byte Spill
	leaq	.L.str546, %rax
	movq	%rax, 18520(%rsp)       # 8-byte Spill
	leaq	.L.str547, %rax
	movq	%rax, 18512(%rsp)       # 8-byte Spill
	leaq	.L.str548, %rax
	movq	%rax, 18504(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 18496(%rsp)       # 8-byte Spill
	leaq	.L.str544, %rax
	movq	%rax, 18488(%rsp)       # 8-byte Spill
	leaq	.L.str545, %rax
	movq	%rax, 18480(%rsp)       # 8-byte Spill
	leaq	.L.str542, %rax
	movq	%rax, 18472(%rsp)       # 8-byte Spill
	leaq	.L.str543, %rax
	movq	%rax, 18464(%rsp)       # 8-byte Spill
	movabsq	$152, %rax
	movq	%rax, 18456(%rsp)       # 8-byte Spill
	leaq	.L.str539, %rax
	movq	%rax, 18448(%rsp)       # 8-byte Spill
	leaq	.L.str540, %rax
	movq	%rax, 18440(%rsp)       # 8-byte Spill
	leaq	.L.str541, %rax
	movq	%rax, 18432(%rsp)       # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 18424(%rsp)       # 8-byte Spill
	leaq	.L.str537, %rax
	movq	%rax, 18416(%rsp)       # 8-byte Spill
	leaq	.L.str538, %rax
	movq	%rax, 18408(%rsp)       # 8-byte Spill
	movq	18728(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 18400(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 18396(%rsp)       # 4-byte Spill
	movq	%rcx, %rsi
	movq	18776(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 18384(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	18384(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 18376(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	18416(%rsp), %rax       # 8-byte Reload
	movq	%r8, 18368(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	18752(%rsp), %rax       # 8-byte Reload
	movq	%r9, 18360(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	18408(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 18352(%rsp)       # 8-byte Spill
	movq	%r15, 18344(%rsp)       # 8-byte Spill
	movq	%r12, 18336(%rsp)       # 8-byte Spill
	movq	%r14, 18328(%rsp)       # 8-byte Spill
	movq	%r13, 18320(%rsp)       # 8-byte Spill
	movq	%rbx, 18312(%rsp)       # 8-byte Spill
	movq	%r10, 18304(%rsp)       # 8-byte Spill
	movq	%r11, 18296(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	18456(%rsp), %rdi       # 8-byte Reload
	movq	18448(%rsp), %rsi       # 8-byte Reload
	movq	18440(%rsp), %rdx       # 8-byte Reload
	movq	18432(%rsp), %rcx       # 8-byte Reload
	movq	18424(%rsp), %r8        # 8-byte Reload
	movl	18748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	18384(%rsp), %rdi       # 8-byte Reload
	movq	18376(%rsp), %rsi       # 8-byte Reload
	movq	18776(%rsp), %rdx       # 8-byte Reload
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18472(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18464(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	18776(%rsp), %rax       # 8-byte Reload
	movq	18728(%rsp), %rdi       # 8-byte Reload
	movq	18376(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18488(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18480(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 18288(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp107:
	#DEBUG_VALUE: main:buf <- [RSP+18288]
	#DEBUG_VALUE: main:numObjects <- [RSP+18528]
	.loc	3 153 0                 # kmeans.c:153:0
	movq	18320(%rsp), %rdi       # 8-byte Reload
	movq	18520(%rsp), %rsi       # 8-byte Reload
	movq	18512(%rsp), %rdx       # 8-byte Reload
	movq	18504(%rsp), %rcx       # 8-byte Reload
	movq	18496(%rsp), %r8        # 8-byte Reload
	movl	18748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	18384(%rsp), %rdi       # 8-byte Reload
	movq	18376(%rsp), %rsi       # 8-byte Reload
	movq	18528(%rsp), %rdx       # 8-byte Reload
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18544(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18536(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	18728(%rsp), %rdi       # 8-byte Reload
	movq	18616(%rsp), %rax       # 8-byte Reload
	movl	%esi, 18284(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18560(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18552(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	18320(%rsp), %rdi       # 8-byte Reload
	movq	18592(%rsp), %rsi       # 8-byte Reload
	movq	18584(%rsp), %rdx       # 8-byte Reload
	movq	18576(%rsp), %rcx       # 8-byte Reload
	movq	18568(%rsp), %r8        # 8-byte Reload
	movl	18748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	18284(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	18384(%rsp), %rdi       # 8-byte Reload
	movq	18616(%rsp), %rsi       # 8-byte Reload
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18608(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18600(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	18284(%rsp), %esi       # 4-byte Reload
	movslq	%esi, %rax
	movq	18728(%rsp), %rdi       # 8-byte Reload
	movq	18376(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18632(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18624(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 18272(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	18320(%rsp), %rdi       # 8-byte Reload
	movq	18664(%rsp), %rsi       # 8-byte Reload
	movq	18656(%rsp), %rdx       # 8-byte Reload
	movq	18648(%rsp), %rcx       # 8-byte Reload
	movq	18640(%rsp), %r8        # 8-byte Reload
	movl	18748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	18312(%rsp), %rdi       # 8-byte Reload
	movq	18376(%rsp), %rsi       # 8-byte Reload
	movq	18688(%rsp), %rdx       # 8-byte Reload
	movq	18752(%rsp), %rcx       # 8-byte Reload
	movq	18680(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18672(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	18384(%rsp), %rdi       # 8-byte Reload
	movq	18376(%rsp), %rsi       # 8-byte Reload
	movq	18272(%rsp), %rdx       # 8-byte Reload
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18704(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18696(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	18272(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	18728(%rsp), %rdi       # 8-byte Reload
	movq	18376(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18720(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18712(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 18264(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	18320(%rsp), %rdi       # 8-byte Reload
	movq	18352(%rsp), %rsi       # 8-byte Reload
	movq	18768(%rsp), %rdx       # 8-byte Reload
	movq	18760(%rsp), %rcx       # 8-byte Reload
	movq	18736(%rsp), %r8        # 8-byte Reload
	movl	18748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	18312(%rsp), %rdi       # 8-byte Reload
	movq	18376(%rsp), %rsi       # 8-byte Reload
	movq	18328(%rsp), %rdx       # 8-byte Reload
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18344(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18336(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	18384(%rsp), %rdi       # 8-byte Reload
	movq	18376(%rsp), %rsi       # 8-byte Reload
	movq	18264(%rsp), %rdx       # 8-byte Reload
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18304(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18296(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	18400(%rsp), %rdi       # 8-byte Reload
	movq	18376(%rsp), %rsi       # 8-byte Reload
	movq	18264(%rsp), %rdx       # 8-byte Reload
	movq	18384(%rsp), %rcx       # 8-byte Reload
	movq	18368(%rsp), %r8        # 8-byte Reload
	movq	18752(%rsp), %r9        # 8-byte Reload
	movq	18360(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	18264(%rsp), %rdi       # 8-byte Reload
	callq	malloc
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str633, %r8
	movabsq	$0, %rsi
	leaq	.L.str634, %r9
	leaq	.L.str631, %r10
	leaq	.L.str632, %r11
	movabsq	$2, %rbx
	leaq	malloc, %r14
	leaq	.L.str629, %r15
	leaq	.L.str630, %r12
	movabsq	$154, %r13
	leaq	.L.str626, %rbp
	movq	%rax, 18256(%rsp)       # 8-byte Spill
	leaq	.L.str627, %rax
	movq	%rax, 18248(%rsp)       # 8-byte Spill
	leaq	.L.str628, %rax
	movq	%rax, 18240(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 18232(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 18228(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 18216(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 18208(%rsp)       # 8-byte Spill
	leaq	.L.str624, %rax
	movq	%rax, 18200(%rsp)       # 8-byte Spill
	leaq	.L.str625, %rax
	movq	%rax, 18192(%rsp)       # 8-byte Spill
	leaq	.L.str622, %rax
	movq	%rax, 18184(%rsp)       # 8-byte Spill
	leaq	.L.str623, %rax
	movq	%rax, 18176(%rsp)       # 8-byte Spill
	leaq	.L.str620, %rax
	movq	%rax, 18168(%rsp)       # 8-byte Spill
	leaq	.L.str621, %rax
	movq	%rax, 18160(%rsp)       # 8-byte Spill
	leaq	.L.str617, %rax
	movq	%rax, 18152(%rsp)       # 8-byte Spill
	leaq	.L.str618, %rax
	movq	%rax, 18144(%rsp)       # 8-byte Spill
	leaq	.L.str619, %rax
	movq	%rax, 18136(%rsp)       # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 18128(%rsp)       # 8-byte Spill
	leaq	.L.str615, %rax
	movq	%rax, 18120(%rsp)       # 8-byte Spill
	leaq	.L.str616, %rax
	movq	%rax, 18112(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 18104(%rsp)       # 8-byte Spill
	leaq	.L.str613, %rax
	movq	%rax, 18096(%rsp)       # 8-byte Spill
	leaq	.L.str614, %rax
	movq	%rax, 18088(%rsp)       # 8-byte Spill
	leaq	.L.str610, %rax
	movq	%rax, 18080(%rsp)       # 8-byte Spill
	leaq	.L.str611, %rax
	movq	%rax, 18072(%rsp)       # 8-byte Spill
	leaq	.L.str612, %rax
	movq	%rax, 18064(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 18056(%rsp)       # 8-byte Spill
	leaq	.L.str608, %rax
	movq	%rax, 18048(%rsp)       # 8-byte Spill
	leaq	.L.str609, %rax
	movq	%rax, 18040(%rsp)       # 8-byte Spill
	leaq	.L.str606, %rax
	movq	%rax, 18032(%rsp)       # 8-byte Spill
	leaq	.L.str607, %rax
	movq	%rax, 18024(%rsp)       # 8-byte Spill
	leaq	.L.str604, %rax
	movq	%rax, 18016(%rsp)       # 8-byte Spill
	leaq	.L.str605, %rax
	movq	%rax, 18008(%rsp)       # 8-byte Spill
	leaq	.L.str601, %rax
	movq	%rax, 18000(%rsp)       # 8-byte Spill
	leaq	.L.str602, %rax
	movq	%rax, 17992(%rsp)       # 8-byte Spill
	leaq	.L.str603, %rax
	movq	%rax, 17984(%rsp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 17976(%rsp)       # 8-byte Spill
	leaq	.L.str599, %rax
	movq	%rax, 17968(%rsp)       # 8-byte Spill
	leaq	.L.str600, %rax
	movq	%rax, 17960(%rsp)       # 8-byte Spill
	leaq	.L.str597, %rax
	movq	%rax, 17952(%rsp)       # 8-byte Spill
	leaq	.L.str598, %rax
	movq	%rax, 17944(%rsp)       # 8-byte Spill
	leaq	25564(%rsp), %rax
	movq	%rax, 17936(%rsp)       # 8-byte Spill
	leaq	.L.str594, %rax
	movq	%rax, 17928(%rsp)       # 8-byte Spill
	leaq	.L.str595, %rax
	movq	%rax, 17920(%rsp)       # 8-byte Spill
	leaq	.L.str596, %rax
	movq	%rax, 17912(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 17904(%rsp)       # 8-byte Spill
	leaq	.L.str592, %rax
	movq	%rax, 17896(%rsp)       # 8-byte Spill
	leaq	.L.str593, %rax
	movq	%rax, 17888(%rsp)       # 8-byte Spill
	leaq	.L.str590, %rax
	movq	%rax, 17880(%rsp)       # 8-byte Spill
	leaq	.L.str591, %rax
	movq	%rax, 17872(%rsp)       # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 17864(%rsp)       # 8-byte Spill
	leaq	.L.str587, %rax
	movq	%rax, 17856(%rsp)       # 8-byte Spill
	leaq	.L.str588, %rax
	movq	%rax, 17848(%rsp)       # 8-byte Spill
	leaq	.L.str589, %rax
	movq	%rax, 17840(%rsp)       # 8-byte Spill
	leaq	.L.str585, %rax
	movq	%rax, 17832(%rsp)       # 8-byte Spill
	leaq	.L.str586, %rax
	movq	%rax, 17824(%rsp)       # 8-byte Spill
	leaq	.L.str583, %rax
	movq	%rax, 17816(%rsp)       # 8-byte Spill
	leaq	.L.str584, %rax
	movq	%rax, 17808(%rsp)       # 8-byte Spill
	movabsq	$153, %rax
	movq	%rax, 17800(%rsp)       # 8-byte Spill
	leaq	.L.str580, %rax
	movq	%rax, 17792(%rsp)       # 8-byte Spill
	leaq	.L.str581, %rax
	movq	%rax, 17784(%rsp)       # 8-byte Spill
	leaq	.L.str582, %rax
	movq	%rax, 17776(%rsp)       # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 17768(%rsp)       # 8-byte Spill
	leaq	.L.str578, %rax
	movq	%rax, 17760(%rsp)       # 8-byte Spill
	leaq	.L.str579, %rax
	movq	%rax, 17752(%rsp)       # 8-byte Spill
	movq	18208(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 17744(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 17740(%rsp)       # 4-byte Spill
	movq	%rcx, %rsi
	movq	18256(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 17728(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	17728(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 17720(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	17760(%rsp), %rax       # 8-byte Reload
	movq	%r8, 17712(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	18232(%rsp), %rax       # 8-byte Reload
	movq	%r9, 17704(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	17752(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 17696(%rsp)       # 8-byte Spill
	movq	%r15, 17688(%rsp)       # 8-byte Spill
	movq	%r12, 17680(%rsp)       # 8-byte Spill
	movq	%r14, 17672(%rsp)       # 8-byte Spill
	movq	%r13, 17664(%rsp)       # 8-byte Spill
	movq	%rbx, 17656(%rsp)       # 8-byte Spill
	movq	%r10, 17648(%rsp)       # 8-byte Spill
	movq	%r11, 17640(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	17800(%rsp), %rdi       # 8-byte Reload
	movq	17792(%rsp), %rsi       # 8-byte Reload
	movq	17784(%rsp), %rdx       # 8-byte Reload
	movq	17776(%rsp), %rcx       # 8-byte Reload
	movq	17768(%rsp), %r8        # 8-byte Reload
	movl	18228(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17728(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	18256(%rsp), %rdx       # 8-byte Reload
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	17816(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	17808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	18256(%rsp), %rax       # 8-byte Reload
	movq	18208(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	17832(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	17824(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 17632(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp108:
	#DEBUG_VALUE: main:attributes <- [RSP+17632]
	#DEBUG_VALUE: main:numObjects <- [RSP+17864]
	.loc	3 154 0                 # kmeans.c:154:0
	movq	17664(%rsp), %rdi       # 8-byte Reload
	movq	17856(%rsp), %rsi       # 8-byte Reload
	movq	17848(%rsp), %rdx       # 8-byte Reload
	movq	17840(%rsp), %rcx       # 8-byte Reload
	movq	17904(%rsp), %r8        # 8-byte Reload
	movl	18228(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17728(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	17864(%rsp), %rdx       # 8-byte Reload
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	17880(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	17872(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	18208(%rsp), %rdi       # 8-byte Reload
	movq	18104(%rsp), %rax       # 8-byte Reload
	movl	%esi, 17628(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	17896(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	17888(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp109:
	#DEBUG_VALUE: main:numAttributes <- [RSP+17936]
	movq	17664(%rsp), %rdi       # 8-byte Reload
	movq	17928(%rsp), %rsi       # 8-byte Reload
	movq	17920(%rsp), %rdx       # 8-byte Reload
	movq	17912(%rsp), %rcx       # 8-byte Reload
	movq	17904(%rsp), %r8        # 8-byte Reload
	movl	18228(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17728(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	17936(%rsp), %rdx       # 8-byte Reload
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	17952(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	17944(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	18208(%rsp), %rdi       # 8-byte Reload
	movq	18104(%rsp), %rax       # 8-byte Reload
	movl	%esi, 17624(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	17968(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	17960(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	17664(%rsp), %rdi       # 8-byte Reload
	movq	18000(%rsp), %rsi       # 8-byte Reload
	movq	17992(%rsp), %rdx       # 8-byte Reload
	movq	17984(%rsp), %rcx       # 8-byte Reload
	movq	17976(%rsp), %r8        # 8-byte Reload
	movl	18228(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	17628(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	17656(%rsp), %rdi       # 8-byte Reload
	movq	18104(%rsp), %rsi       # 8-byte Reload
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	18016(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	18008(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	17624(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	17728(%rsp), %rdi       # 8-byte Reload
	movq	18104(%rsp), %rsi       # 8-byte Reload
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	18032(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	18024(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	17624(%rsp), %esi       # 4-byte Reload
	movl	17628(%rsp), %edi       # 4-byte Reload
	imull	%edi, %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	18208(%rsp), %rdi       # 8-byte Reload
	movq	18104(%rsp), %rax       # 8-byte Reload
	movl	%esi, 17620(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	18048(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	18040(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	17664(%rsp), %rdi       # 8-byte Reload
	movq	18080(%rsp), %rsi       # 8-byte Reload
	movq	18072(%rsp), %rdx       # 8-byte Reload
	movq	18064(%rsp), %rcx       # 8-byte Reload
	movq	18056(%rsp), %r8        # 8-byte Reload
	movl	18228(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	17620(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	17728(%rsp), %rdi       # 8-byte Reload
	movq	18104(%rsp), %rsi       # 8-byte Reload
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	18096(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	18088(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	17620(%rsp), %esi       # 4-byte Reload
	movslq	%esi, %rax
	movq	18208(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	18120(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	18112(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 17608(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	17664(%rsp), %rdi       # 8-byte Reload
	movq	18152(%rsp), %rsi       # 8-byte Reload
	movq	18144(%rsp), %rdx       # 8-byte Reload
	movq	18136(%rsp), %rcx       # 8-byte Reload
	movq	18128(%rsp), %r8        # 8-byte Reload
	movl	18228(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17656(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	17656(%rsp), %rdx       # 8-byte Reload
	movq	18232(%rsp), %rcx       # 8-byte Reload
	movq	18168(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	18160(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	17728(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	17608(%rsp), %rdx       # 8-byte Reload
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	18184(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	18176(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	17608(%rsp), %rax       # 8-byte Reload
	shlq	$2, %rax
	movq	18208(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	18200(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	18192(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 17600(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	17664(%rsp), %rdi       # 8-byte Reload
	movq	17696(%rsp), %rsi       # 8-byte Reload
	movq	18248(%rsp), %rdx       # 8-byte Reload
	movq	18240(%rsp), %rcx       # 8-byte Reload
	movq	18216(%rsp), %r8        # 8-byte Reload
	movl	18228(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17656(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	17672(%rsp), %rdx       # 8-byte Reload
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	17688(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	17680(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	17728(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	17600(%rsp), %rdx       # 8-byte Reload
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	17648(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	17640(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	17744(%rsp), %rdi       # 8-byte Reload
	movq	17720(%rsp), %rsi       # 8-byte Reload
	movq	17600(%rsp), %rdx       # 8-byte Reload
	movq	17728(%rsp), %rcx       # 8-byte Reload
	movq	17712(%rsp), %r8        # 8-byte Reload
	movq	18232(%rsp), %r9        # 8-byte Reload
	movq	17704(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	17600(%rsp), %rdi       # 8-byte Reload
	callq	malloc
	movabsq	$1, %rcx
	leaq	.L.str674, %r8
	movabsq	$0, %rdx
	leaq	.L.str675, %rsi
	movabsq	$2, %rdi
	leaq	.L.str672, %r9
	leaq	.L.str673, %r10
	movabsq	$3, %r11
	leaq	.L.str670, %rbx
	leaq	.L.str671, %r14
	movabsq	$155, %r15
	leaq	.L.str667, %r12
	leaq	.L.str668, %r13
	leaq	.L.str669, %rbp
	movq	%rsi, 17592(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 17588(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 17576(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 17568(%rsp)       # 8-byte Spill
	leaq	.L.str665, %rax
	movq	%rax, 17560(%rsp)       # 8-byte Spill
	leaq	.L.str666, %rax
	movq	%rax, 17552(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 17544(%rsp)       # 8-byte Spill
	leaq	.L.str663, %rax
	movq	%rax, 17536(%rsp)       # 8-byte Spill
	leaq	.L.str664, %rax
	movq	%rax, 17528(%rsp)       # 8-byte Spill
	leaq	.L.str661, %rax
	movq	%rax, 17520(%rsp)       # 8-byte Spill
	leaq	.L.str662, %rax
	movq	%rax, 17512(%rsp)       # 8-byte Spill
	leaq	.L.str658, %rax
	movq	%rax, 17504(%rsp)       # 8-byte Spill
	leaq	.L.str659, %rax
	movq	%rax, 17496(%rsp)       # 8-byte Spill
	leaq	.L.str660, %rax
	movq	%rax, 17488(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 17480(%rsp)       # 8-byte Spill
	leaq	.L.str656, %rax
	movq	%rax, 17472(%rsp)       # 8-byte Spill
	leaq	.L.str657, %rax
	movq	%rax, 17464(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 17456(%rsp)       # 8-byte Spill
	leaq	.L.str654, %rax
	movq	%rax, 17448(%rsp)       # 8-byte Spill
	leaq	.L.str655, %rax
	movq	%rax, 17440(%rsp)       # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 17432(%rsp)       # 8-byte Spill
	leaq	.L.str651, %rax
	movq	%rax, 17424(%rsp)       # 8-byte Spill
	leaq	.L.str652, %rax
	movq	%rax, 17416(%rsp)       # 8-byte Spill
	leaq	.L.str653, %rax
	movq	%rax, 17408(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 17400(%rsp)       # 8-byte Spill
	leaq	.L.str649, %rax
	movq	%rax, 17392(%rsp)       # 8-byte Spill
	leaq	.L.str650, %rax
	movq	%rax, 17384(%rsp)       # 8-byte Spill
	leaq	.L.str647, %rax
	movq	%rax, 17376(%rsp)       # 8-byte Spill
	leaq	.L.str648, %rax
	movq	%rax, 17368(%rsp)       # 8-byte Spill
	movabsq	$154, %rax
	movq	%rax, 17360(%rsp)       # 8-byte Spill
	leaq	.L.str644, %rax
	movq	%rax, 17352(%rsp)       # 8-byte Spill
	leaq	.L.str645, %rax
	movq	%rax, 17344(%rsp)       # 8-byte Spill
	leaq	.L.str646, %rax
	movq	%rax, 17336(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 17328(%rsp)       # 8-byte Spill
	leaq	.L.str642, %rax
	movq	%rax, 17320(%rsp)       # 8-byte Spill
	leaq	.L.str643, %rax
	movq	%rax, 17312(%rsp)       # 8-byte Spill
	leaq	.L.str640, %rax
	movq	%rax, 17304(%rsp)       # 8-byte Spill
	leaq	.L.str641, %rax
	movq	%rax, 17296(%rsp)       # 8-byte Spill
	leaq	.L.str637, %rax
	movq	%rax, 17288(%rsp)       # 8-byte Spill
	leaq	.L.str638, %rax
	movq	%rax, 17280(%rsp)       # 8-byte Spill
	leaq	.L.str639, %rax
	movq	%rax, 17272(%rsp)       # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 17264(%rsp)       # 8-byte Spill
	leaq	.L.str635, %rax
	movq	%rax, 17256(%rsp)       # 8-byte Spill
	leaq	.L.str636, %rax
	movq	%rax, 17248(%rsp)       # 8-byte Spill
	movq	17568(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 17240(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	17456(%rsp), %rax       # 8-byte Reload
	movl	%esi, 17236(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	17576(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 17224(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 17216(%rsp)       # 8-byte Spill
	movq	17256(%rsp), %rax       # 8-byte Reload
	movq	%r8, 17208(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	17224(%rsp), %rax       # 8-byte Reload
	movq	%r9, 17200(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	17248(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 17192(%rsp)       # 8-byte Spill
	movq	%r14, 17184(%rsp)       # 8-byte Spill
	movq	%r12, 17176(%rsp)       # 8-byte Spill
	movq	%r13, 17168(%rsp)       # 8-byte Spill
	movq	%rbp, 17160(%rsp)       # 8-byte Spill
	movq	%rbx, 17152(%rsp)       # 8-byte Spill
	movq	%r10, 17144(%rsp)       # 8-byte Spill
	movq	%r11, 17136(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	17360(%rsp), %rdi       # 8-byte Reload
	movq	17288(%rsp), %rsi       # 8-byte Reload
	movq	17280(%rsp), %rdx       # 8-byte Reload
	movq	17272(%rsp), %rcx       # 8-byte Reload
	movq	17264(%rsp), %r8        # 8-byte Reload
	movl	17588(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17216(%rsp), %rdi       # 8-byte Reload
	movq	17456(%rsp), %rsi       # 8-byte Reload
	movq	17576(%rsp), %rdx       # 8-byte Reload
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17304(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17296(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	17576(%rsp), %rax       # 8-byte Reload
	movq	17568(%rsp), %rdi       # 8-byte Reload
	movq	17456(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17320(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17312(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 17128(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	17360(%rsp), %rdi       # 8-byte Reload
	movq	17352(%rsp), %rsi       # 8-byte Reload
	movq	17344(%rsp), %rdx       # 8-byte Reload
	movq	17336(%rsp), %rcx       # 8-byte Reload
	movq	17328(%rsp), %r8        # 8-byte Reload
	movl	17588(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17240(%rsp), %rdi       # 8-byte Reload
	movq	17456(%rsp), %rsi       # 8-byte Reload
	movq	17632(%rsp), %rdx       # 8-byte Reload
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17376(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17368(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	17216(%rsp), %rdi       # 8-byte Reload
	movq	17456(%rsp), %rsi       # 8-byte Reload
	movq	17128(%rsp), %rdx       # 8-byte Reload
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17392(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17384(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	18256(%rsp), %rax       # 8-byte Reload
	movq	17128(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, (%rax)
.Ltmp110:
	#DEBUG_VALUE: main:i <- 1
	#DEBUG_VALUE: main:numObjects <- [RSP+17432]
	.loc	3 155 0                 # kmeans.c:155:0
	movq	17192(%rsp), %rdi       # 8-byte Reload
	movq	17424(%rsp), %rsi       # 8-byte Reload
	movq	17416(%rsp), %rdx       # 8-byte Reload
	movq	17408(%rsp), %rcx       # 8-byte Reload
	movq	17400(%rsp), %r8        # 8-byte Reload
	movl	17588(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17216(%rsp), %rdi       # 8-byte Reload
	movq	17456(%rsp), %rsi       # 8-byte Reload
	movq	17432(%rsp), %rdx       # 8-byte Reload
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17448(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17440(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	17568(%rsp), %rdi       # 8-byte Reload
	movq	17544(%rsp), %rax       # 8-byte Reload
	movl	%esi, 17124(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17472(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17464(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	17192(%rsp), %rdi       # 8-byte Reload
	movq	17504(%rsp), %rsi       # 8-byte Reload
	movq	17496(%rsp), %rdx       # 8-byte Reload
	movq	17488(%rsp), %rcx       # 8-byte Reload
	movq	17480(%rsp), %r8        # 8-byte Reload
	movl	17588(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17240(%rsp), %rdi       # 8-byte Reload
	movq	17544(%rsp), %rsi       # 8-byte Reload
	movq	17216(%rsp), %rdx       # 8-byte Reload
	movq	17224(%rsp), %rcx       # 8-byte Reload
	movq	17520(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17512(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	17124(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	17216(%rsp), %rdi       # 8-byte Reload
	movq	17544(%rsp), %rsi       # 8-byte Reload
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17536(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17528(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	17124(%rsp), %esi       # 4-byte Reload
	cmpl	$1, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	17568(%rsp), %rdi       # 8-byte Reload
	movq	17216(%rsp), %rsi       # 8-byte Reload
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17560(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17552(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 17123(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	17192(%rsp), %rdi       # 8-byte Reload
	movq	17176(%rsp), %rsi       # 8-byte Reload
	movq	17168(%rsp), %rdx       # 8-byte Reload
	movq	17160(%rsp), %rcx       # 8-byte Reload
	movq	17240(%rsp), %r8        # 8-byte Reload
	movl	17588(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17136(%rsp), %rdi       # 8-byte Reload
	movq	17224(%rsp), %rsi       # 8-byte Reload
	movq	17224(%rsp), %rdx       # 8-byte Reload
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17152(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17184(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	17240(%rsp), %rdi       # 8-byte Reload
	movq	17224(%rsp), %rsi       # 8-byte Reload
	movq	17224(%rsp), %rdx       # 8-byte Reload
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17200(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17144(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	17123(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	17216(%rsp), %rdi       # 8-byte Reload
	movq	17216(%rsp), %rsi       # 8-byte Reload
	movq	17216(%rsp), %rcx       # 8-byte Reload
	movq	17208(%rsp), %r8        # 8-byte Reload
	movq	17224(%rsp), %r9        # 8-byte Reload
	movq	17592(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	17123(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	movl	17124(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17116(%rsp)       # 4-byte Spill
	jne	.LBB2_16
	jmp	.LBB2_18
.Ltmp111:
.LBB2_16:                               # %.lr.ph16
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str700, %r8
	leaq	.L.str701, %rdx
	movabsq	$155, %rsi
	leaq	.L.str697, %rdi
	leaq	.L.str698, %r9
	leaq	.L.str699, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str695, %r12
	leaq	.L.str696, %r13
	movq	%rax, 17104(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 17096(%rsp)       # 8-byte Spill
	leaq	.L.str693, %rax
	movq	%rax, 17088(%rsp)       # 8-byte Spill
	leaq	.L.str694, %rax
	movq	%rax, 17080(%rsp)       # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 17072(%rsp)       # 8-byte Spill
	leaq	.L.str690, %rax
	movq	%rax, 17064(%rsp)       # 8-byte Spill
	leaq	.L.str691, %rax
	movq	%rax, 17056(%rsp)       # 8-byte Spill
	leaq	.L.str692, %rax
	movq	%rax, 17048(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 17040(%rsp)       # 8-byte Spill
	leaq	.L.str688, %rax
	movq	%rax, 17032(%rsp)       # 8-byte Spill
	leaq	.L.str689, %rax
	movq	%rax, 17024(%rsp)       # 8-byte Spill
	leaq	.L.str686, %rax
	movq	%rax, 17016(%rsp)       # 8-byte Spill
	leaq	.L.str687, %rax
	movq	%rax, 17008(%rsp)       # 8-byte Spill
	movabsq	$156, %rax
	movq	%rax, 17000(%rsp)       # 8-byte Spill
	leaq	.L.str683, %rax
	movq	%rax, 16992(%rsp)       # 8-byte Spill
	leaq	.L.str684, %rax
	movq	%rax, 16984(%rsp)       # 8-byte Spill
	leaq	.L.str685, %rax
	movq	%rax, 16976(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 16968(%rsp)       # 8-byte Spill
	leaq	.L.str681, %rax
	movq	%rax, 16960(%rsp)       # 8-byte Spill
	leaq	.L.str682, %rax
	movq	%rax, 16952(%rsp)       # 8-byte Spill
	leaq	.L.str679, %rax
	movq	%rax, 16944(%rsp)       # 8-byte Spill
	leaq	.L.str680, %rax
	movq	%rax, 16936(%rsp)       # 8-byte Spill
	leaq	25564(%rsp), %rax
	movq	%rax, 16928(%rsp)       # 8-byte Spill
	leaq	.L.str676, %rax
	movq	%rax, 16920(%rsp)       # 8-byte Spill
	leaq	.L.str677, %rax
	movq	%rax, 16912(%rsp)       # 8-byte Spill
	leaq	.L.str678, %rax
.Ltmp112:
	#DEBUG_VALUE: main:numAttributes <- [RSP+16928]
	.loc	3 156 0                 # kmeans.c:156:0
	movq	%rax, 16904(%rsp)       # 8-byte Spill
	movq	17000(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 16896(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	16920(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 16888(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	16912(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 16880(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	16904(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 16872(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	17040(%rsp), %rax       # 8-byte Reload
	movq	%r8, 16864(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 16856(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 16848(%rsp)       # 8-byte Spill
	movl	%ebp, 16844(%rsp)       # 4-byte Spill
	movq	%r15, 16832(%rsp)       # 8-byte Spill
	movq	%r12, 16824(%rsp)       # 8-byte Spill
	movq	%r13, 16816(%rsp)       # 8-byte Spill
	movl	%ebx, 16812(%rsp)       # 4-byte Spill
	movq	%r10, 16800(%rsp)       # 8-byte Spill
	movq	%r11, 16792(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	17104(%rsp), %rdi       # 8-byte Reload
	movq	17096(%rsp), %rsi       # 8-byte Reload
	movq	16928(%rsp), %rdx       # 8-byte Reload
	movq	17104(%rsp), %rcx       # 8-byte Reload
	movq	16944(%rsp), %r8        # 8-byte Reload
	movq	16872(%rsp), %r9        # 8-byte Reload
	movq	16936(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	16848(%rsp), %rdi       # 8-byte Reload
	movq	16832(%rsp), %rsi       # 8-byte Reload
	movq	17104(%rsp), %rcx       # 8-byte Reload
	movq	16960(%rsp), %r8        # 8-byte Reload
	movq	16872(%rsp), %r9        # 8-byte Reload
	movq	16952(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 16788(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	17000(%rsp), %rdi       # 8-byte Reload
	movq	16992(%rsp), %rsi       # 8-byte Reload
	movq	16984(%rsp), %rdx       # 8-byte Reload
	movq	16976(%rsp), %rcx       # 8-byte Reload
	movq	16968(%rsp), %r8        # 8-byte Reload
	movl	16812(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	16788(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	17104(%rsp), %rdi       # 8-byte Reload
	movq	16832(%rsp), %rsi       # 8-byte Reload
	movq	17104(%rsp), %rcx       # 8-byte Reload
	movq	17016(%rsp), %r8        # 8-byte Reload
	movq	16872(%rsp), %r9        # 8-byte Reload
	movq	17008(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	16788(%rsp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	.loc	3 155 0                 # kmeans.c:155:0
	movq	16848(%rsp), %rdi       # 8-byte Reload
	movq	17096(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	17104(%rsp), %rcx       # 8-byte Reload
	movq	17032(%rsp), %r8        # 8-byte Reload
	movq	16872(%rsp), %r9        # 8-byte Reload
	movq	17024(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 16776(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp113:
	#DEBUG_VALUE: main:numObjects <- [RSP+17072]
	movq	16888(%rsp), %rdi       # 8-byte Reload
	movq	17064(%rsp), %rsi       # 8-byte Reload
	movq	17056(%rsp), %rdx       # 8-byte Reload
	movq	17048(%rsp), %rcx       # 8-byte Reload
	movq	17040(%rsp), %r8        # 8-byte Reload
	movl	16812(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17104(%rsp), %rdi       # 8-byte Reload
	movq	17096(%rsp), %rsi       # 8-byte Reload
	movq	17072(%rsp), %rdx       # 8-byte Reload
	movq	17104(%rsp), %rcx       # 8-byte Reload
	movq	17088(%rsp), %r8        # 8-byte Reload
	movq	16872(%rsp), %r9        # 8-byte Reload
	movq	17080(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	16848(%rsp), %rdi       # 8-byte Reload
	movq	16832(%rsp), %rsi       # 8-byte Reload
	movq	17104(%rsp), %rcx       # 8-byte Reload
	movq	16824(%rsp), %r8        # 8-byte Reload
	movq	16872(%rsp), %r9        # 8-byte Reload
	movq	16816(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 16772(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	16888(%rsp), %rdi       # 8-byte Reload
	movq	16896(%rsp), %rsi       # 8-byte Reload
	movq	16856(%rsp), %rdx       # 8-byte Reload
	movq	16800(%rsp), %rcx       # 8-byte Reload
	movq	16792(%rsp), %r8        # 8-byte Reload
	movl	16812(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	17104(%rsp), %rdi       # 8-byte Reload
	movq	16872(%rsp), %rsi       # 8-byte Reload
	movq	16872(%rsp), %rdx       # 8-byte Reload
	movq	17104(%rsp), %rcx       # 8-byte Reload
	movq	16864(%rsp), %r8        # 8-byte Reload
	movq	16872(%rsp), %r9        # 8-byte Reload
	movq	16880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	17104(%rsp), %rax       # 8-byte Reload
	movq	%rax, 16760(%rsp)       # 8-byte Spill
.Ltmp114:
.LBB2_17:                               # =>This Inner Loop Header: Depth=1
	movq	16760(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str793, %r8
	movabsq	$0, %rdx
	leaq	.L.str794, %rsi
	movabsq	$2, %rdi
	leaq	.L.str791, %r9
	leaq	.L.str792, %r10
	movabsq	$3, %r11
	leaq	.L.str789, %rbx
	leaq	.L.str790, %r14
	movabsq	$155, %r15
	leaq	.L.str786, %r12
	leaq	.L.str787, %r13
	leaq	.L.str788, %rbp
	movq	%rsi, 16752(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 16748(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 16736(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 16728(%rsp)       # 8-byte Spill
	leaq	.L.str784, %rax
	movq	%rax, 16720(%rsp)       # 8-byte Spill
	leaq	.L.str785, %rax
	movq	%rax, 16712(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 16704(%rsp)       # 8-byte Spill
	leaq	.L.str782, %rax
	movq	%rax, 16696(%rsp)       # 8-byte Spill
	leaq	.L.str783, %rax
	movq	%rax, 16688(%rsp)       # 8-byte Spill
	leaq	.L.str780, %rax
	movq	%rax, 16680(%rsp)       # 8-byte Spill
	leaq	.L.str781, %rax
	movq	%rax, 16672(%rsp)       # 8-byte Spill
	leaq	.L.str777, %rax
	movq	%rax, 16664(%rsp)       # 8-byte Spill
	leaq	.L.str778, %rax
	movq	%rax, 16656(%rsp)       # 8-byte Spill
	leaq	.L.str779, %rax
	movq	%rax, 16648(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 16640(%rsp)       # 8-byte Spill
	leaq	.L.str775, %rax
	movq	%rax, 16632(%rsp)       # 8-byte Spill
	leaq	.L.str776, %rax
	movq	%rax, 16624(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 16616(%rsp)       # 8-byte Spill
	leaq	.L.str773, %rax
	movq	%rax, 16608(%rsp)       # 8-byte Spill
	leaq	.L.str774, %rax
	movq	%rax, 16600(%rsp)       # 8-byte Spill
	leaq	.L.str770, %rax
	movq	%rax, 16592(%rsp)       # 8-byte Spill
	leaq	.L.str771, %rax
	movq	%rax, 16584(%rsp)       # 8-byte Spill
	leaq	.L.str772, %rax
	movq	%rax, 16576(%rsp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 16568(%rsp)       # 8-byte Spill
	leaq	.L.str768, %rax
	movq	%rax, 16560(%rsp)       # 8-byte Spill
	leaq	.L.str769, %rax
	movq	%rax, 16552(%rsp)       # 8-byte Spill
	leaq	.L.str766, %rax
	movq	%rax, 16544(%rsp)       # 8-byte Spill
	leaq	.L.str767, %rax
	movq	%rax, 16536(%rsp)       # 8-byte Spill
	leaq	.L.str764, %rax
	movq	%rax, 16528(%rsp)       # 8-byte Spill
	leaq	.L.str765, %rax
	movq	%rax, 16520(%rsp)       # 8-byte Spill
	leaq	.L.str761, %rax
	movq	%rax, 16512(%rsp)       # 8-byte Spill
	leaq	.L.str762, %rax
	movq	%rax, 16504(%rsp)       # 8-byte Spill
	leaq	.L.str763, %rax
	movq	%rax, 16496(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 16488(%rsp)       # 8-byte Spill
	leaq	.L.str759, %rax
	movq	%rax, 16480(%rsp)       # 8-byte Spill
	leaq	.L.str760, %rax
	movq	%rax, 16472(%rsp)       # 8-byte Spill
	leaq	.L.str757, %rax
	movq	%rax, 16464(%rsp)       # 8-byte Spill
	leaq	.L.str758, %rax
	movq	%rax, 16456(%rsp)       # 8-byte Spill
	movabsq	$156, %rax
	movq	%rax, 16448(%rsp)       # 8-byte Spill
	leaq	.L.str754, %rax
	movq	%rax, 16440(%rsp)       # 8-byte Spill
	leaq	.L.str755, %rax
	movq	%rax, 16432(%rsp)       # 8-byte Spill
	leaq	.L.str756, %rax
	movq	%rax, 16424(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 16416(%rsp)       # 8-byte Spill
	leaq	.L.str752, %rax
	movq	%rax, 16408(%rsp)       # 8-byte Spill
	leaq	.L.str753, %rax
	movq	%rax, 16400(%rsp)       # 8-byte Spill
	leaq	.L.str750, %rax
	movq	%rax, 16392(%rsp)       # 8-byte Spill
	leaq	.L.str751, %rax
	movq	%rax, 16384(%rsp)       # 8-byte Spill
	leaq	.L.str748, %rax
	movq	%rax, 16376(%rsp)       # 8-byte Spill
	leaq	.L.str749, %rax
	movq	%rax, 16368(%rsp)       # 8-byte Spill
	leaq	.L.str745, %rax
	movq	%rax, 16360(%rsp)       # 8-byte Spill
	leaq	.L.str746, %rax
	movq	%rax, 16352(%rsp)       # 8-byte Spill
	leaq	.L.str747, %rax
	movq	%rax, 16344(%rsp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 16336(%rsp)       # 8-byte Spill
	leaq	.L.str743, %rax
	movq	%rax, 16328(%rsp)       # 8-byte Spill
	leaq	.L.str744, %rax
	movq	%rax, 16320(%rsp)       # 8-byte Spill
	leaq	.L.str741, %rax
	movq	%rax, 16312(%rsp)       # 8-byte Spill
	leaq	.L.str742, %rax
	movq	%rax, 16304(%rsp)       # 8-byte Spill
	leaq	.L.str739, %rax
	movq	%rax, 16296(%rsp)       # 8-byte Spill
	leaq	.L.str740, %rax
	movq	%rax, 16288(%rsp)       # 8-byte Spill
	leaq	.L.str736, %rax
	movq	%rax, 16280(%rsp)       # 8-byte Spill
	leaq	.L.str737, %rax
	movq	%rax, 16272(%rsp)       # 8-byte Spill
	leaq	.L.str738, %rax
	movq	%rax, 16264(%rsp)       # 8-byte Spill
	leaq	.L.str734, %rax
	movq	%rax, 16256(%rsp)       # 8-byte Spill
	leaq	.L.str735, %rax
	movq	%rax, 16248(%rsp)       # 8-byte Spill
	leaq	.L.str732, %rax
	movq	%rax, 16240(%rsp)       # 8-byte Spill
	leaq	.L.str733, %rax
	movq	%rax, 16232(%rsp)       # 8-byte Spill
	leaq	.L.str729, %rax
	movq	%rax, 16224(%rsp)       # 8-byte Spill
	leaq	.L.str730, %rax
	movq	%rax, 16216(%rsp)       # 8-byte Spill
	leaq	.L.str731, %rax
	movq	%rax, 16208(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 16200(%rsp)       # 8-byte Spill
	leaq	.L.str727, %rax
	movq	%rax, 16192(%rsp)       # 8-byte Spill
	leaq	.L.str728, %rax
	movq	%rax, 16184(%rsp)       # 8-byte Spill
	leaq	.L.str725, %rax
	movq	%rax, 16176(%rsp)       # 8-byte Spill
	leaq	.L.str726, %rax
	movq	%rax, 16168(%rsp)       # 8-byte Spill
	leaq	.L.str723, %rax
	movq	%rax, 16160(%rsp)       # 8-byte Spill
	leaq	.L.str724, %rax
	movq	%rax, 16152(%rsp)       # 8-byte Spill
	leaq	.L.str720, %rax
	movq	%rax, 16144(%rsp)       # 8-byte Spill
	leaq	.L.str721, %rax
	movq	%rax, 16136(%rsp)       # 8-byte Spill
	leaq	.L.str722, %rax
	movq	%rax, 16128(%rsp)       # 8-byte Spill
	leaq	.L.str718, %rax
	movq	%rax, 16120(%rsp)       # 8-byte Spill
	leaq	.L.str719, %rax
	movq	%rax, 16112(%rsp)       # 8-byte Spill
	leaq	.L.str716, %rax
	movq	%rax, 16104(%rsp)       # 8-byte Spill
	leaq	.L.str717, %rax
	movq	%rax, 16096(%rsp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 16088(%rsp)       # 8-byte Spill
	leaq	.L.str714, %rax
	movq	%rax, 16080(%rsp)       # 8-byte Spill
	leaq	.L.str715, %rax
	movq	%rax, 16072(%rsp)       # 8-byte Spill
	leaq	.L.str711, %rax
	movq	%rax, 16064(%rsp)       # 8-byte Spill
	leaq	.L.str712, %rax
	movq	%rax, 16056(%rsp)       # 8-byte Spill
	leaq	.L.str713, %rax
	movq	%rax, 16048(%rsp)       # 8-byte Spill
	leaq	.L.str709, %rax
	movq	%rax, 16040(%rsp)       # 8-byte Spill
	leaq	.L.str710, %rax
	movq	%rax, 16032(%rsp)       # 8-byte Spill
	leaq	.L.str707, %rax
	movq	%rax, 16024(%rsp)       # 8-byte Spill
	leaq	.L.str708, %rax
	movq	%rax, 16016(%rsp)       # 8-byte Spill
	leaq	.L.str705, %rax
	movq	%rax, 16008(%rsp)       # 8-byte Spill
	leaq	.L.str706, %rax
	movq	%rax, 16000(%rsp)       # 8-byte Spill
	leaq	.L.str702, %rax
	movq	%rax, 15992(%rsp)       # 8-byte Spill
	leaq	.L.str703, %rax
	movq	%rax, 15984(%rsp)       # 8-byte Spill
	leaq	.L.str704, %rax
	movq	%rax, 15976(%rsp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	3 156 0                 # kmeans.c:156:0
	movq	%rax, 15968(%rsp)       # 8-byte Spill
	movq	16088(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 15960(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	15992(%rsp), %rax       # 8-byte Reload
	movl	%esi, 15956(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	15984(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 15944(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	15976(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 15936(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	15968(%rsp), %rax       # 8-byte Reload
	movq	%r8, 15928(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	16748(%rsp), %eax       # 4-byte Reload
	movq	%r9, 15920(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 15912(%rsp)       # 8-byte Spill
	movq	%r14, 15904(%rsp)       # 8-byte Spill
	movq	%r12, 15896(%rsp)       # 8-byte Spill
	movq	%r13, 15888(%rsp)       # 8-byte Spill
	movq	%rbp, 15880(%rsp)       # 8-byte Spill
	movq	%rbx, 15872(%rsp)       # 8-byte Spill
	movq	%r10, 15864(%rsp)       # 8-byte Spill
	movq	%r11, 15856(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	15960(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	15944(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16008(%rsp), %r8        # 8-byte Reload
	movq	15936(%rsp), %r9        # 8-byte Reload
	movq	16000(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	15936(%rsp), %rdx       # 8-byte Reload
	movq	15944(%rsp), %rcx       # 8-byte Reload
	movq	16024(%rsp), %r8        # 8-byte Reload
	movq	15936(%rsp), %r9        # 8-byte Reload
	movq	16016(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16728(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	16736(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16040(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16032(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16448(%rsp), %rdi       # 8-byte Reload
	movq	16064(%rsp), %rsi       # 8-byte Reload
	movq	16056(%rsp), %rdx       # 8-byte Reload
	movq	16048(%rsp), %rcx       # 8-byte Reload
	movq	16488(%rsp), %r8        # 8-byte Reload
	movl	16748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15960(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	16088(%rsp), %rdx       # 8-byte Reload
	movq	15944(%rsp), %rcx       # 8-byte Reload
	movq	16080(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16072(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	16736(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16104(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16096(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16736(%rsp), %rcx       # 8-byte Reload
	addq	$-1, %rcx
	movq	16728(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	15936(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 15848(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	16120(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16112(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16448(%rsp), %rdi       # 8-byte Reload
	movq	16144(%rsp), %rsi       # 8-byte Reload
	movq	16136(%rsp), %rdx       # 8-byte Reload
	movq	16128(%rsp), %rcx       # 8-byte Reload
	movq	16336(%rsp), %r8        # 8-byte Reload
	movl	16748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15960(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	15848(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16160(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16152(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	17632(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16176(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16168(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15848(%rsp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	17632(%rsp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	movq	16728(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 15840(%rsp)       # 8-byte Spill
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16192(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16184(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16448(%rsp), %rdi       # 8-byte Reload
	movq	16224(%rsp), %rsi       # 8-byte Reload
	movq	16216(%rsp), %rdx       # 8-byte Reload
	movq	16208(%rsp), %rcx       # 8-byte Reload
	movq	16200(%rsp), %r8        # 8-byte Reload
	movl	16748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	15840(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16240(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16232(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	17632(%rsp), %rcx       # 8-byte Reload
	movq	16736(%rsp), %rdx       # 8-byte Reload
	movq	-8(%rcx,%rdx,8), %rsi
	movq	16728(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %r8        # 8-byte Reload
	movq	%rsi, 15832(%rsp)       # 8-byte Spill
	movq	%r8, %rsi
	movq	15832(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16256(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16248(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16448(%rsp), %rdi       # 8-byte Reload
	movq	16280(%rsp), %rsi       # 8-byte Reload
	movq	16272(%rsp), %rdx       # 8-byte Reload
	movq	16264(%rsp), %rcx       # 8-byte Reload
	movq	16336(%rsp), %r8        # 8-byte Reload
	movl	16748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15960(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	16776(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16296(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16288(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	15832(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16312(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16304(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16776(%rsp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	15832(%rsp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	movq	16728(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 15824(%rsp)       # 8-byte Spill
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16328(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16320(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16448(%rsp), %rdi       # 8-byte Reload
	movq	16360(%rsp), %rsi       # 8-byte Reload
	movq	16352(%rsp), %rdx       # 8-byte Reload
	movq	16344(%rsp), %rcx       # 8-byte Reload
	movq	16336(%rsp), %r8        # 8-byte Reload
	movl	16748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15960(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	16736(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16376(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16368(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	17632(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16392(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16384(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16736(%rsp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	17632(%rsp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	movq	16728(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 15816(%rsp)       # 8-byte Spill
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16408(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16400(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16448(%rsp), %rdi       # 8-byte Reload
	movq	16440(%rsp), %rsi       # 8-byte Reload
	movq	16432(%rsp), %rdx       # 8-byte Reload
	movq	16424(%rsp), %rcx       # 8-byte Reload
	movq	16416(%rsp), %r8        # 8-byte Reload
	movl	16748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15960(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	15816(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16464(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16456(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	15824(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16480(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16472(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	17632(%rsp), %rcx       # 8-byte Reload
	movq	16736(%rsp), %rdx       # 8-byte Reload
	movq	15824(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, (%rcx,%rdx,8)
	.loc	3 155 0                 # kmeans.c:155:0
	movq	15912(%rsp), %rdi       # 8-byte Reload
	movq	16512(%rsp), %rsi       # 8-byte Reload
	movq	16504(%rsp), %rdx       # 8-byte Reload
	movq	16496(%rsp), %rcx       # 8-byte Reload
	movq	16488(%rsp), %r8        # 8-byte Reload
	movl	16748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15960(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	15936(%rsp), %rdx       # 8-byte Reload
	movq	15944(%rsp), %rcx       # 8-byte Reload
	movq	16528(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16520(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	16736(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16544(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16536(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16736(%rsp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	movq	16728(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	15936(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 15808(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	16560(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16552(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15912(%rsp), %rdi       # 8-byte Reload
	movq	16592(%rsp), %rsi       # 8-byte Reload
	movq	16584(%rsp), %rdx       # 8-byte Reload
	movq	16576(%rsp), %rcx       # 8-byte Reload
	movq	16568(%rsp), %r8        # 8-byte Reload
	movl	16748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	16616(%rsp), %rsi       # 8-byte Reload
	movq	15808(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16608(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16600(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15808(%rsp), %rcx       # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	16728(%rsp), %rdi       # 8-byte Reload
	movq	16704(%rsp), %rsi       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16632(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16624(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 15804(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	15912(%rsp), %rdi       # 8-byte Reload
	movq	16664(%rsp), %rsi       # 8-byte Reload
	movq	16656(%rsp), %rdx       # 8-byte Reload
	movq	16648(%rsp), %rcx       # 8-byte Reload
	movq	16640(%rsp), %r8        # 8-byte Reload
	movl	16748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	16772(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	15960(%rsp), %rdi       # 8-byte Reload
	movq	16704(%rsp), %rsi       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16680(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16672(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15804(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	16704(%rsp), %rsi       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16696(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16688(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15804(%rsp), %eax       # 4-byte Reload
	movl	16772(%rsp), %esi       # 4-byte Reload
	cmpl	%esi, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	16728(%rsp), %rdi       # 8-byte Reload
	movq	15936(%rsp), %rsi       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	16720(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16712(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15803(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	15912(%rsp), %rdi       # 8-byte Reload
	movq	15896(%rsp), %rsi       # 8-byte Reload
	movq	15888(%rsp), %rdx       # 8-byte Reload
	movq	15880(%rsp), %rcx       # 8-byte Reload
	movq	15960(%rsp), %r8        # 8-byte Reload
	movl	16748(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15856(%rsp), %rdi       # 8-byte Reload
	movq	15944(%rsp), %rsi       # 8-byte Reload
	movq	15944(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	15872(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	15904(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15960(%rsp), %rdi       # 8-byte Reload
	movq	15944(%rsp), %rsi       # 8-byte Reload
	movq	15944(%rsp), %rdx       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	15920(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	15864(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15803(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	15936(%rsp), %rdi       # 8-byte Reload
	movq	15936(%rsp), %rsi       # 8-byte Reload
	movq	15936(%rsp), %rcx       # 8-byte Reload
	movq	15928(%rsp), %r8        # 8-byte Reload
	movq	15944(%rsp), %r9        # 8-byte Reload
	movq	16752(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15803(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	movq	15808(%rsp), %rcx       # 8-byte Reload
	movl	16772(%rsp), %eax       # 4-byte Reload
	movl	%eax, 17116(%rsp)       # 4-byte Spill
	movq	%rcx, 16760(%rsp)       # 8-byte Spill
	jne	.LBB2_17
.Ltmp115:
.LBB2_18:                               # %._crit_edge17
	movl	17116(%rsp), %eax       # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str839, %r8
	leaq	.L.str840, %rsi
	movabsq	$161, %rdi
	leaq	.L.str836, %r9
	leaq	.L.str837, %r10
	leaq	.L.str838, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str834, %r13
	movq	%rcx, 15792(%rsp)       # 8-byte Spill
	leaq	.L.str835, %rcx
	movq	%rcx, 15784(%rsp)       # 8-byte Spill
	leaq	.L.str832, %rcx
	movq	%rcx, 15776(%rsp)       # 8-byte Spill
	leaq	.L.str833, %rcx
	movq	%rcx, 15768(%rsp)       # 8-byte Spill
	leaq	.L.str830, %rcx
	movq	%rcx, 15760(%rsp)       # 8-byte Spill
	leaq	.L.str831, %rcx
	movq	%rcx, 15752(%rsp)       # 8-byte Spill
	movabsq	$158, %rcx
	movq	%rcx, 15744(%rsp)       # 8-byte Spill
	leaq	.L.str827, %rcx
	movq	%rcx, 15736(%rsp)       # 8-byte Spill
	leaq	.L.str828, %rcx
	movq	%rcx, 15728(%rsp)       # 8-byte Spill
	leaq	.L.str829, %rcx
	movq	%rcx, 15720(%rsp)       # 8-byte Spill
	movabsq	$20, %rcx
	movq	%rcx, 15712(%rsp)       # 8-byte Spill
	leaq	.L.str825, %rcx
	movq	%rcx, 15704(%rsp)       # 8-byte Spill
	leaq	.L.str826, %rcx
	movq	%rcx, 15696(%rsp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 15688(%rsp)       # 8-byte Spill
	leaq	.L.str823, %rcx
	movq	%rcx, 15680(%rsp)       # 8-byte Spill
	leaq	.L.str824, %rcx
	movq	%rcx, 15672(%rsp)       # 8-byte Spill
	leaq	.L.str820, %rcx
	movq	%rcx, 15664(%rsp)       # 8-byte Spill
	leaq	.L.str821, %rcx
	movq	%rcx, 15656(%rsp)       # 8-byte Spill
	leaq	.L.str822, %rcx
	movq	%rcx, 15648(%rsp)       # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 15640(%rsp)       # 8-byte Spill
	leaq	.L.str818, %rcx
	movq	%rcx, 15632(%rsp)       # 8-byte Spill
	leaq	.L.str819, %rcx
	movq	%rcx, 15624(%rsp)       # 8-byte Spill
	leaq	.L.str816, %rcx
	movq	%rcx, 15616(%rsp)       # 8-byte Spill
	leaq	.L.str817, %rcx
	movq	%rcx, 15608(%rsp)       # 8-byte Spill
	leaq	.L.str814, %rcx
	movq	%rcx, 15600(%rsp)       # 8-byte Spill
	leaq	.L.str815, %rcx
	movq	%rcx, 15592(%rsp)       # 8-byte Spill
	leaq	.L.str811, %rcx
	movq	%rcx, 15584(%rsp)       # 8-byte Spill
	leaq	.L.str812, %rcx
	movq	%rcx, 15576(%rsp)       # 8-byte Spill
	leaq	.L.str813, %rcx
	movq	%rcx, 15568(%rsp)       # 8-byte Spill
	movabsq	$12, %rcx
	movq	%rcx, 15560(%rsp)       # 8-byte Spill
	leaq	.L.str809, %rcx
	movq	%rcx, 15552(%rsp)       # 8-byte Spill
	leaq	.L.str810, %rcx
	movq	%rcx, 15544(%rsp)       # 8-byte Spill
	leaq	.L.str807, %rcx
	movq	%rcx, 15536(%rsp)       # 8-byte Spill
	leaq	.L.str808, %rcx
	movq	%rcx, 15528(%rsp)       # 8-byte Spill
	leaq	25564(%rsp), %rcx
	movq	%rcx, 15520(%rsp)       # 8-byte Spill
	leaq	.L.str804, %rcx
	movq	%rcx, 15512(%rsp)       # 8-byte Spill
	leaq	.L.str805, %rcx
	movq	%rcx, 15504(%rsp)       # 8-byte Spill
	leaq	.L.str806, %rcx
	movq	%rcx, 15496(%rsp)       # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 15488(%rsp)       # 8-byte Spill
	leaq	.L.str802, %rcx
	movq	%rcx, 15480(%rsp)       # 8-byte Spill
	leaq	.L.str803, %rcx
	movq	%rcx, 15472(%rsp)       # 8-byte Spill
	leaq	.L.str800, %rcx
	movq	%rcx, 15464(%rsp)       # 8-byte Spill
	leaq	.L.str801, %rcx
	movq	%rcx, 15456(%rsp)       # 8-byte Spill
	leaq	.L.str798, %rcx
	movq	%rcx, 15448(%rsp)       # 8-byte Spill
	leaq	.L.str799, %rcx
	movq	%rcx, 15440(%rsp)       # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 15432(%rsp)       # 8-byte Spill
	leaq	.L.str795, %rcx
	movq	%rcx, 15424(%rsp)       # 8-byte Spill
	leaq	.L.str796, %rcx
	movq	%rcx, 15416(%rsp)       # 8-byte Spill
	leaq	.L.str797, %rcx
	movq	%rcx, 15408(%rsp)       # 8-byte Spill
	movabsq	$48, %rcx
	.loc	3 158 0                 # kmeans.c:158:0
	movq	%rcx, 15400(%rsp)       # 8-byte Spill
	movq	15432(%rsp), %rcx       # 8-byte Reload
	movq	%rdi, 15392(%rsp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	15424(%rsp), %rcx       # 8-byte Reload
	movq	%rsi, 15384(%rsp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	15416(%rsp), %rcx       # 8-byte Reload
	movq	%rdx, 15376(%rsp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	15408(%rsp), %rcx       # 8-byte Reload
	movq	%r8, 15368(%rsp)        # 8-byte Spill
	movq	15400(%rsp), %r8        # 8-byte Reload
	movq	%r9, 15360(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 15356(%rsp)       # 4-byte Spill
	movl	%r14d, 15352(%rsp)      # 4-byte Spill
	movq	%r15, 15344(%rsp)       # 8-byte Spill
	movl	%ebp, 15340(%rsp)       # 4-byte Spill
	movq	%r12, 15328(%rsp)       # 8-byte Spill
	movq	%r13, 15320(%rsp)       # 8-byte Spill
	movq	%rbx, 15312(%rsp)       # 8-byte Spill
	movq	%r10, 15304(%rsp)       # 8-byte Spill
	movq	%r11, 15296(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	15312(%rsp), %rdi       # 8-byte Reload
	movq	15688(%rsp), %rsi       # 8-byte Reload
	movq	15376(%rsp), %rdx       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15448(%rsp), %r8        # 8-byte Reload
	movq	15792(%rsp), %r9        # 8-byte Reload
	movq	15440(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15792(%rsp), %rdi       # 8-byte Reload
	movq	15688(%rsp), %rsi       # 8-byte Reload
	movq	15376(%rsp), %rdx       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15464(%rsp), %r8        # 8-byte Reload
	movq	15792(%rsp), %r9        # 8-byte Reload
	movq	15456(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15356(%rsp), %eax       # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	15344(%rsp), %rdi       # 8-byte Reload
	movq	15688(%rsp), %rsi       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15480(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15472(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp116:
	#DEBUG_VALUE: main:numAttributes <- [RSP+15520]
	movq	15744(%rsp), %rdi       # 8-byte Reload
	movq	15512(%rsp), %rsi       # 8-byte Reload
	movq	15504(%rsp), %rdx       # 8-byte Reload
	movq	15496(%rsp), %rcx       # 8-byte Reload
	movq	15488(%rsp), %r8        # 8-byte Reload
	movl	15340(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15792(%rsp), %rdi       # 8-byte Reload
	movq	15328(%rsp), %rsi       # 8-byte Reload
	movq	15520(%rsp), %rdx       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15536(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15528(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	15344(%rsp), %rdi       # 8-byte Reload
	movq	15688(%rsp), %rsi       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15552(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15544(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 15292(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	15744(%rsp), %rdi       # 8-byte Reload
	movq	15584(%rsp), %rsi       # 8-byte Reload
	movq	15576(%rsp), %rdx       # 8-byte Reload
	movq	15568(%rsp), %rcx       # 8-byte Reload
	movq	15560(%rsp), %r8        # 8-byte Reload
	movl	15340(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15356(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	15312(%rsp), %rdi       # 8-byte Reload
	movq	15688(%rsp), %rsi       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15600(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15592(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15292(%rsp), %eax       # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	15792(%rsp), %rdi       # 8-byte Reload
	movq	15688(%rsp), %rsi       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15616(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15608(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15292(%rsp), %eax       # 4-byte Reload
	movl	15356(%rsp), %ebp       # 4-byte Reload
	imull	%ebp, %eax
	movl	%eax, %r14d
	movl	%r14d, %edx
	movq	15344(%rsp), %rdi       # 8-byte Reload
	movq	15688(%rsp), %rsi       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15632(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15624(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 15288(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	15744(%rsp), %rdi       # 8-byte Reload
	movq	15664(%rsp), %rsi       # 8-byte Reload
	movq	15656(%rsp), %rdx       # 8-byte Reload
	movq	15648(%rsp), %rcx       # 8-byte Reload
	movq	15640(%rsp), %r8        # 8-byte Reload
	movl	15340(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15288(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	15792(%rsp), %rdi       # 8-byte Reload
	movq	15688(%rsp), %rsi       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15680(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15672(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15288(%rsp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	movq	15344(%rsp), %rdi       # 8-byte Reload
	movq	15328(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	15792(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 15280(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	15704(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15696(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15744(%rsp), %rdi       # 8-byte Reload
	movq	15736(%rsp), %rsi       # 8-byte Reload
	movq	15728(%rsp), %rdx       # 8-byte Reload
	movq	15720(%rsp), %rcx       # 8-byte Reload
	movq	15712(%rsp), %r8        # 8-byte Reload
	movl	15340(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15312(%rsp), %rdi       # 8-byte Reload
	movq	15328(%rsp), %rsi       # 8-byte Reload
	movq	15312(%rsp), %rdx       # 8-byte Reload
	movq	15376(%rsp), %rcx       # 8-byte Reload
	movq	15760(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15752(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15792(%rsp), %rdi       # 8-byte Reload
	movq	15328(%rsp), %rsi       # 8-byte Reload
	movq	15280(%rsp), %rdx       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15776(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15768(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15280(%rsp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	15344(%rsp), %rdi       # 8-byte Reload
	movq	15328(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	15792(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 15272(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	15320(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15784(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20116(%rsp), %edi       # 4-byte Reload
	movq	18288(%rsp), %rsi       # 8-byte Reload
	movq	15272(%rsp), %rdx       # 8-byte Reload
	movb	$0, %al
	callq	read
	.loc	3 160 0                 # kmeans.c:160:0
	movl	20116(%rsp), %edi       # 4-byte Reload
	movl	%eax, 15268(%rsp)       # 4-byte Spill
	movb	$0, %al
	callq	close
	.loc	3 161 0                 # kmeans.c:161:0
	movq	15392(%rsp), %rdi       # 8-byte Reload
	movq	15360(%rsp), %rsi       # 8-byte Reload
	movq	15304(%rsp), %rdx       # 8-byte Reload
	movq	15296(%rsp), %rcx       # 8-byte Reload
	movq	15312(%rsp), %r8        # 8-byte Reload
	movl	15340(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	movl	%eax, 15264(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	15792(%rsp), %rdi       # 8-byte Reload
	movq	15376(%rsp), %rsi       # 8-byte Reload
	movq	15376(%rsp), %rdx       # 8-byte Reload
	movq	15792(%rsp), %rcx       # 8-byte Reload
	movq	15368(%rsp), %r8        # 8-byte Reload
	movq	15376(%rsp), %r9        # 8-byte Reload
	movq	15384(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	17632(%rsp), %rcx       # 8-byte Reload
	movq	18288(%rsp), %rdx       # 8-byte Reload
	movq	%rcx, 15256(%rsp)       # 8-byte Spill
	movq	%rdx, 15248(%rsp)       # 8-byte Spill
	jmp	.LBB2_41
.Ltmp117:
.LBB2_19:
	leaq	.L.str4175, %rax
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$64, %rdx
	movabsq	$1, %rsi
	leaq	.L.str852, %r8
	movabsq	$0, %rdi
	leaq	.L.str853, %r9
	movabsq	$2, %r10
	leaq	.L.str850, %r11
	leaq	.L.str851, %rbx
	leaq	.L.str848, %r14
	leaq	.L.str849, %r15
	leaq	.L.str846, %r12
	leaq	.L.str847, %r13
	movabsq	$3, %rbp
	movq	%rax, 15240(%rsp)       # 8-byte Spill
	leaq	fopen, %rax
	movq	%rax, 15232(%rsp)       # 8-byte Spill
	leaq	.L.str844, %rax
	movq	%rax, 15224(%rsp)       # 8-byte Spill
	leaq	.L.str845, %rax
	movq	%rax, 15216(%rsp)       # 8-byte Spill
	movabsq	$164, %rax
	movq	%rax, 15208(%rsp)       # 8-byte Spill
	leaq	.L.str841, %rax
	movq	%rax, 15200(%rsp)       # 8-byte Spill
	leaq	.L.str842, %rax
	movq	%rax, 15192(%rsp)       # 8-byte Spill
	leaq	.L.str843, %rax
	movq	%rax, 15184(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 15176(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 15172(%rsp)       # 4-byte Spill
	movl	$1, %esi
	.loc	3 164 0                 # kmeans.c:164:0
.Ltmp118:
	movq	%rax, 15160(%rsp)       # 8-byte Spill
	movq	15208(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 15152(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	15200(%rsp), %rax       # 8-byte Reload
	movl	%esi, 15148(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	15192(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 15136(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	15184(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 15128(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	15160(%rsp), %rax       # 8-byte Reload
	movq	%r8, 15120(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	15172(%rsp), %eax       # 4-byte Reload
	movq	%r9, 15112(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 15104(%rsp)       # 8-byte Spill
	movq	%r12, 15096(%rsp)       # 8-byte Spill
	movq	%r13, 15088(%rsp)       # 8-byte Spill
	movq	%r14, 15080(%rsp)       # 8-byte Spill
	movq	%rbp, 15072(%rsp)       # 8-byte Spill
	movq	%rbx, 15064(%rsp)       # 8-byte Spill
	movq	%r10, 15056(%rsp)       # 8-byte Spill
	movq	%r11, 15048(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	15072(%rsp), %rdi       # 8-byte Reload
	movq	15136(%rsp), %rsi       # 8-byte Reload
	movq	15232(%rsp), %rdx       # 8-byte Reload
	movq	15176(%rsp), %rcx       # 8-byte Reload
	movq	15224(%rsp), %r8        # 8-byte Reload
	movq	15152(%rsp), %r9        # 8-byte Reload
	movq	15216(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15176(%rsp), %rdi       # 8-byte Reload
	movq	15136(%rsp), %rsi       # 8-byte Reload
	movq	23080(%rsp), %rdx       # 8-byte Reload
	movq	15176(%rsp), %rcx       # 8-byte Reload
	movq	15096(%rsp), %r8        # 8-byte Reload
	movq	15152(%rsp), %r9        # 8-byte Reload
	movq	15088(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15128(%rsp), %rdi       # 8-byte Reload
	movq	15136(%rsp), %rsi       # 8-byte Reload
	movq	23080(%rsp), %rdx       # 8-byte Reload
	movq	15176(%rsp), %rcx       # 8-byte Reload
	movq	15080(%rsp), %r8        # 8-byte Reload
	movq	15152(%rsp), %r9        # 8-byte Reload
	movq	15104(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15056(%rsp), %rdi       # 8-byte Reload
	movq	15136(%rsp), %rsi       # 8-byte Reload
	movq	15240(%rsp), %rdx       # 8-byte Reload
	movq	15152(%rsp), %rcx       # 8-byte Reload
	movq	15048(%rsp), %r8        # 8-byte Reload
	movq	15152(%rsp), %r9        # 8-byte Reload
	movq	15064(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15128(%rsp), %rdi       # 8-byte Reload
	movq	15136(%rsp), %rsi       # 8-byte Reload
	movq	15240(%rsp), %rdx       # 8-byte Reload
	movq	15176(%rsp), %rcx       # 8-byte Reload
	movq	15120(%rsp), %r8        # 8-byte Reload
	movq	15152(%rsp), %r9        # 8-byte Reload
	movq	15112(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	23080(%rsp), %rdi       # 8-byte Reload
	movq	15240(%rsp), %rsi       # 8-byte Reload
	callq	fopen
	movabsq	$1, %rcx
	leaq	.L.str872, %r8
	movabsq	$0, %rdx
	leaq	.L.str873, %rsi
	movabsq	$2, %rdi
	leaq	.L.str870, %r9
	leaq	.L.str871, %r10
	movabsq	$3, %r11
	leaq	.L.str868, %rbx
	leaq	.L.str869, %r14
	movabsq	$164, %r15
	leaq	.L.str865, %r12
	leaq	.L.str866, %r13
	leaq	.L.str867, %rbp
	movq	%rsi, 15040(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 15036(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 15024(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 15016(%rsp)       # 8-byte Spill
	leaq	.L.str863, %rax
	movq	%rax, 15008(%rsp)       # 8-byte Spill
	leaq	.L.str864, %rax
	movq	%rax, 15000(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 14992(%rsp)       # 8-byte Spill
	leaq	.L.str861, %rax
	movq	%rax, 14984(%rsp)       # 8-byte Spill
	leaq	.L.str862, %rax
	movq	%rax, 14976(%rsp)       # 8-byte Spill
	leaq	.L.str859, %rax
	movq	%rax, 14968(%rsp)       # 8-byte Spill
	leaq	.L.str860, %rax
	movq	%rax, 14960(%rsp)       # 8-byte Spill
	leaq	.L.str856, %rax
	movq	%rax, 14952(%rsp)       # 8-byte Spill
	leaq	.L.str857, %rax
	movq	%rax, 14944(%rsp)       # 8-byte Spill
	leaq	.L.str858, %rax
	movq	%rax, 14936(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 14928(%rsp)       # 8-byte Spill
	leaq	.L.str854, %rax
	movq	%rax, 14920(%rsp)       # 8-byte Spill
	leaq	.L.str855, %rax
	movq	%rax, 14912(%rsp)       # 8-byte Spill
	movq	15016(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 14904(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	14992(%rsp), %rax       # 8-byte Reload
	movl	%esi, 14900(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	15024(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 14888(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 14880(%rsp)       # 8-byte Spill
	movq	14920(%rsp), %rax       # 8-byte Reload
	movq	%r8, 14872(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	14888(%rsp), %rax       # 8-byte Reload
	movq	%r9, 14864(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	14912(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 14856(%rsp)       # 8-byte Spill
	movq	%r14, 14848(%rsp)       # 8-byte Spill
	movq	%r12, 14840(%rsp)       # 8-byte Spill
	movq	%r13, 14832(%rsp)       # 8-byte Spill
	movq	%rbp, 14824(%rsp)       # 8-byte Spill
	movq	%rbx, 14816(%rsp)       # 8-byte Spill
	movq	%r10, 14808(%rsp)       # 8-byte Spill
	movq	%r11, 14800(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp119:
	#DEBUG_VALUE: infile <- [RSP+15024]
	movq	14856(%rsp), %rdi       # 8-byte Reload
	movq	14952(%rsp), %rsi       # 8-byte Reload
	movq	14944(%rsp), %rdx       # 8-byte Reload
	movq	14936(%rsp), %rcx       # 8-byte Reload
	movq	14928(%rsp), %r8        # 8-byte Reload
	movl	15036(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14904(%rsp), %rdi       # 8-byte Reload
	movq	14992(%rsp), %rsi       # 8-byte Reload
	movq	14888(%rsp), %rdx       # 8-byte Reload
	movq	14888(%rsp), %rcx       # 8-byte Reload
	movq	14968(%rsp), %r8        # 8-byte Reload
	movq	14888(%rsp), %r9        # 8-byte Reload
	movq	14960(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14880(%rsp), %rdi       # 8-byte Reload
	movq	14992(%rsp), %rsi       # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	14880(%rsp), %rcx       # 8-byte Reload
	movq	14984(%rsp), %r8        # 8-byte Reload
	movq	14888(%rsp), %r9        # 8-byte Reload
	movq	14976(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15024(%rsp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	15016(%rsp), %rdi       # 8-byte Reload
	movq	14880(%rsp), %rsi       # 8-byte Reload
	movq	14880(%rsp), %rcx       # 8-byte Reload
	movq	15008(%rsp), %r8        # 8-byte Reload
	movq	14888(%rsp), %r9        # 8-byte Reload
	movq	15000(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 14799(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	14856(%rsp), %rdi       # 8-byte Reload
	movq	14840(%rsp), %rsi       # 8-byte Reload
	movq	14832(%rsp), %rdx       # 8-byte Reload
	movq	14824(%rsp), %rcx       # 8-byte Reload
	movq	14904(%rsp), %r8        # 8-byte Reload
	movl	15036(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14800(%rsp), %rdi       # 8-byte Reload
	movq	14888(%rsp), %rsi       # 8-byte Reload
	movq	14888(%rsp), %rdx       # 8-byte Reload
	movq	14880(%rsp), %rcx       # 8-byte Reload
	movq	14816(%rsp), %r8        # 8-byte Reload
	movq	14888(%rsp), %r9        # 8-byte Reload
	movq	14848(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14904(%rsp), %rdi       # 8-byte Reload
	movq	14888(%rsp), %rsi       # 8-byte Reload
	movq	14888(%rsp), %rdx       # 8-byte Reload
	movq	14880(%rsp), %rcx       # 8-byte Reload
	movq	14864(%rsp), %r8        # 8-byte Reload
	movq	14888(%rsp), %r9        # 8-byte Reload
	movq	14808(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	14799(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	14880(%rsp), %rdi       # 8-byte Reload
	movq	14880(%rsp), %rsi       # 8-byte Reload
	movq	14880(%rsp), %rcx       # 8-byte Reload
	movq	14872(%rsp), %r8        # 8-byte Reload
	movq	14888(%rsp), %r9        # 8-byte Reload
	movq	15040(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	14799(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_21
.Ltmp120:
# BB#20:                                # %.preheader11
	movl	$1024, %esi             # imm = 0x400
	movabsq	$24601, %rax            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str889, %r8
	movabsq	$0, %rdi
	leaq	.L.str890, %r9
	movabsq	$3, %r10
	leaq	.L.str887, %r11
	leaq	.L.str888, %rbx
	movabsq	$32, %r14
	movabsq	$1024, %r15             # imm = 0x400
	leaq	.L.str885, %r12
	leaq	.L.str886, %r13
	movabsq	$2, %rbp
	movq	%rax, 14784(%rsp)       # 8-byte Spill
	leaq	.L.str883, %rax
	movq	%rax, 14776(%rsp)       # 8-byte Spill
	leaq	.L.str884, %rax
	movq	%rax, 14768(%rsp)       # 8-byte Spill
	leaq	.L.str881, %rax
	movq	%rax, 14760(%rsp)       # 8-byte Spill
	leaq	.L.str882, %rax
	movq	%rax, 14752(%rsp)       # 8-byte Spill
	leaq	.L.str879, %rax
	movq	%rax, 14744(%rsp)       # 8-byte Spill
	leaq	.L.str880, %rax
	movq	%rax, 14736(%rsp)       # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 14728(%rsp)       # 8-byte Spill
	leaq	fgets, %rax
	movq	%rax, 14720(%rsp)       # 8-byte Spill
	leaq	.L.str877, %rax
	movq	%rax, 14712(%rsp)       # 8-byte Spill
	leaq	.L.str878, %rax
	movq	%rax, 14704(%rsp)       # 8-byte Spill
	movabsq	$168, %rax
	movq	%rax, 14696(%rsp)       # 8-byte Spill
	leaq	.L.str874, %rax
	movq	%rax, 14688(%rsp)       # 8-byte Spill
	leaq	.L.str875, %rax
	movq	%rax, 14680(%rsp)       # 8-byte Spill
	leaq	.L.str876, %rax
	movq	%rax, 14672(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movl	%esi, 14668(%rsp)       # 4-byte Spill
	movl	$0, %esi
	movl	%esi, 14664(%rsp)       # 4-byte Spill
	movl	$1, %esi
	.loc	3 168 0                 # kmeans.c:168:0
	movq	%rax, 14656(%rsp)       # 8-byte Spill
	movq	14696(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 14648(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	14688(%rsp), %rax       # 8-byte Reload
	movl	%esi, 14644(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	14680(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 14632(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	14672(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 14624(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	14656(%rsp), %rax       # 8-byte Reload
	movq	%r8, 14616(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	14664(%rsp), %eax       # 4-byte Reload
	movq	%r9, 14608(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, 14600(%rsp)       # 8-byte Spill
	movq	%r15, 14592(%rsp)       # 8-byte Spill
	movq	%r12, 14584(%rsp)       # 8-byte Spill
	movq	%r14, 14576(%rsp)       # 8-byte Spill
	movq	%rbp, 14568(%rsp)       # 8-byte Spill
	movq	%rbx, 14560(%rsp)       # 8-byte Spill
	movq	%r10, 14552(%rsp)       # 8-byte Spill
	movq	%r11, 14544(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	14728(%rsp), %rdi       # 8-byte Reload
	movq	14624(%rsp), %rsi       # 8-byte Reload
	movq	14720(%rsp), %rdx       # 8-byte Reload
	movq	14632(%rsp), %rcx       # 8-byte Reload
	movq	14712(%rsp), %r8        # 8-byte Reload
	movq	14648(%rsp), %r9        # 8-byte Reload
	movq	14704(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14632(%rsp), %rdi       # 8-byte Reload
	movq	14624(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	14632(%rsp), %rcx       # 8-byte Reload
	movq	14744(%rsp), %r8        # 8-byte Reload
	movq	14648(%rsp), %r9        # 8-byte Reload
	movq	14736(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14784(%rsp), %rdi       # 8-byte Reload
	movq	14624(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	14632(%rsp), %rcx       # 8-byte Reload
	movq	14760(%rsp), %r8        # 8-byte Reload
	movq	14648(%rsp), %r9        # 8-byte Reload
	movq	14752(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14568(%rsp), %rdi       # 8-byte Reload
	movq	14576(%rsp), %rsi       # 8-byte Reload
	movq	14592(%rsp), %rdx       # 8-byte Reload
	movq	14648(%rsp), %rcx       # 8-byte Reload
	movq	14776(%rsp), %r8        # 8-byte Reload
	movq	14648(%rsp), %r9        # 8-byte Reload
	movq	14768(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14784(%rsp), %rdi       # 8-byte Reload
	movq	14576(%rsp), %rsi       # 8-byte Reload
	movq	14592(%rsp), %rdx       # 8-byte Reload
	movq	14632(%rsp), %rcx       # 8-byte Reload
	movq	14584(%rsp), %r8        # 8-byte Reload
	movq	14648(%rsp), %r9        # 8-byte Reload
	movq	14600(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14552(%rsp), %rdi       # 8-byte Reload
	movq	14624(%rsp), %rsi       # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	14632(%rsp), %rcx       # 8-byte Reload
	movq	14544(%rsp), %r8        # 8-byte Reload
	movq	14648(%rsp), %r9        # 8-byte Reload
	movq	14560(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14784(%rsp), %rdi       # 8-byte Reload
	movq	14624(%rsp), %rsi       # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	14632(%rsp), %rcx       # 8-byte Reload
	movq	14616(%rsp), %r8        # 8-byte Reload
	movq	14648(%rsp), %r9        # 8-byte Reload
	movq	14608(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24488(%rsp), %rdi       # 8-byte Reload
	movl	14668(%rsp), %esi       # 4-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	callq	fgets
	movabsq	$1, %rcx
	leaq	.L.str909, %r8
	movabsq	$0, %rdx
	leaq	.L.str910, %rdi
	movabsq	$2, %r9
	leaq	.L.str907, %r10
	leaq	.L.str908, %r11
	movabsq	$3, %rbx
	leaq	.L.str905, %r14
	leaq	.L.str906, %r15
	movabsq	$168, %r12
	leaq	.L.str902, %rsi
	leaq	.L.str903, %r13
	leaq	.L.str904, %rbp
	movq	%rsi, 14536(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 14532(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 14520(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 14512(%rsp)       # 8-byte Spill
	leaq	.L.str900, %rax
	movq	%rax, 14504(%rsp)       # 8-byte Spill
	leaq	.L.str901, %rax
	movq	%rax, 14496(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 14488(%rsp)       # 8-byte Spill
	leaq	.L.str898, %rax
	movq	%rax, 14480(%rsp)       # 8-byte Spill
	leaq	.L.str899, %rax
	movq	%rax, 14472(%rsp)       # 8-byte Spill
	leaq	.L.str896, %rax
	movq	%rax, 14464(%rsp)       # 8-byte Spill
	leaq	.L.str897, %rax
	movq	%rax, 14456(%rsp)       # 8-byte Spill
	leaq	.L.str893, %rax
	movq	%rax, 14448(%rsp)       # 8-byte Spill
	leaq	.L.str894, %rax
	movq	%rax, 14440(%rsp)       # 8-byte Spill
	leaq	.L.str895, %rax
	movq	%rax, 14432(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 14424(%rsp)       # 8-byte Spill
	leaq	.L.str891, %rax
	movq	%rax, 14416(%rsp)       # 8-byte Spill
	leaq	.L.str892, %rax
	movq	%rax, 14408(%rsp)       # 8-byte Spill
	movq	14512(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 14400(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	14488(%rsp), %rax       # 8-byte Reload
	movl	%esi, 14396(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	14520(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 14384(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 14376(%rsp)       # 8-byte Spill
	movq	14416(%rsp), %rax       # 8-byte Reload
	movq	%r8, 14368(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	14384(%rsp), %rax       # 8-byte Reload
	movq	%r9, 14360(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	14408(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r12, 14352(%rsp)       # 8-byte Spill
	movq	%r15, 14344(%rsp)       # 8-byte Spill
	movq	%r13, 14336(%rsp)       # 8-byte Spill
	movq	%rbp, 14328(%rsp)       # 8-byte Spill
	movq	%r14, 14320(%rsp)       # 8-byte Spill
	movq	%r10, 14312(%rsp)       # 8-byte Spill
	movq	%r11, 14304(%rsp)       # 8-byte Spill
	movq	%rbx, 14296(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	14352(%rsp), %rdi       # 8-byte Reload
	movq	14448(%rsp), %rsi       # 8-byte Reload
	movq	14440(%rsp), %rdx       # 8-byte Reload
	movq	14432(%rsp), %rcx       # 8-byte Reload
	movq	14424(%rsp), %r8        # 8-byte Reload
	movl	14532(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14360(%rsp), %rdi       # 8-byte Reload
	movq	14488(%rsp), %rsi       # 8-byte Reload
	movq	14384(%rsp), %rdx       # 8-byte Reload
	movq	14384(%rsp), %rcx       # 8-byte Reload
	movq	14464(%rsp), %r8        # 8-byte Reload
	movq	14384(%rsp), %r9        # 8-byte Reload
	movq	14456(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14376(%rsp), %rdi       # 8-byte Reload
	movq	14488(%rsp), %rsi       # 8-byte Reload
	movq	14520(%rsp), %rdx       # 8-byte Reload
	movq	14376(%rsp), %rcx       # 8-byte Reload
	movq	14480(%rsp), %r8        # 8-byte Reload
	movq	14384(%rsp), %r9        # 8-byte Reload
	movq	14472(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14520(%rsp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	14512(%rsp), %rdi       # 8-byte Reload
	movq	14376(%rsp), %rsi       # 8-byte Reload
	movq	14376(%rsp), %rcx       # 8-byte Reload
	movq	14504(%rsp), %r8        # 8-byte Reload
	movq	14384(%rsp), %r9        # 8-byte Reload
	movq	14496(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 14295(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	14352(%rsp), %rdi       # 8-byte Reload
	movq	14536(%rsp), %rsi       # 8-byte Reload
	movq	14336(%rsp), %rdx       # 8-byte Reload
	movq	14328(%rsp), %rcx       # 8-byte Reload
	movq	14360(%rsp), %r8        # 8-byte Reload
	movl	14532(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14296(%rsp), %rdi       # 8-byte Reload
	movq	14384(%rsp), %rsi       # 8-byte Reload
	movq	14384(%rsp), %rdx       # 8-byte Reload
	movq	14376(%rsp), %rcx       # 8-byte Reload
	movq	14320(%rsp), %r8        # 8-byte Reload
	movq	14384(%rsp), %r9        # 8-byte Reload
	movq	14344(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14360(%rsp), %rdi       # 8-byte Reload
	movq	14384(%rsp), %rsi       # 8-byte Reload
	movq	14384(%rsp), %rdx       # 8-byte Reload
	movq	14376(%rsp), %rcx       # 8-byte Reload
	movq	14312(%rsp), %r8        # 8-byte Reload
	movq	14384(%rsp), %r9        # 8-byte Reload
	movq	14304(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	14295(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	14376(%rsp), %rdi       # 8-byte Reload
	movq	14376(%rsp), %rsi       # 8-byte Reload
	movq	14376(%rsp), %rcx       # 8-byte Reload
	movq	14368(%rsp), %r8        # 8-byte Reload
	movq	14384(%rsp), %r9        # 8-byte Reload
	movq	14400(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	14295(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_25
	jmp	.LBB2_22
.LBB2_21:
	leaq	.L.str3174, %rax
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$64, %rdx
	movabsq	$1, %rsi
	leaq	.L.str929, %r8
	movabsq	$0, %rdi
	leaq	.L.str930, %r9
	movabsq	$2, %r10
	leaq	.L.str927, %r11
	leaq	.L.str928, %rbx
	leaq	.L.str925, %r14
	leaq	.L.str926, %r15
	leaq	.L.str923, %r12
	leaq	.L.str924, %r13
	movabsq	$4, %rbp
	movq	%rax, 14280(%rsp)       # 8-byte Spill
	leaq	fprintf, %rax
	movq	%rax, 14272(%rsp)       # 8-byte Spill
	leaq	.L.str921, %rax
	movq	%rax, 14264(%rsp)       # 8-byte Spill
	leaq	.L.str922, %rax
	movq	%rax, 14256(%rsp)       # 8-byte Spill
	movabsq	$165, %rax
	movq	%rax, 14248(%rsp)       # 8-byte Spill
	leaq	.L.str918, %rax
	movq	%rax, 14240(%rsp)       # 8-byte Spill
	leaq	.L.str919, %rax
	movq	%rax, 14232(%rsp)       # 8-byte Spill
	leaq	.L.str920, %rax
	movq	%rax, 14224(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 14216(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 14212(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 14200(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 14192(%rsp)       # 8-byte Spill
	leaq	.L.str916, %rax
	movq	%rax, 14184(%rsp)       # 8-byte Spill
	leaq	.L.str917, %rax
	movq	%rax, 14176(%rsp)       # 8-byte Spill
	leaq	stderr, %rax
	movq	%rax, 14168(%rsp)       # 8-byte Spill
	leaq	.L.str914, %rax
	movq	%rax, 14160(%rsp)       # 8-byte Spill
	leaq	.L.str915, %rax
	movq	%rax, 14152(%rsp)       # 8-byte Spill
	leaq	.L.str911, %rax
	movq	%rax, 14144(%rsp)       # 8-byte Spill
	leaq	.L.str912, %rax
	movq	%rax, 14136(%rsp)       # 8-byte Spill
	leaq	.L.str913, %rax
	movq	%rax, 14128(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	.loc	3 165 0                 # kmeans.c:165:0
.Ltmp121:
	movq	%rax, 14120(%rsp)       # 8-byte Spill
	movq	14248(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 14112(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	14144(%rsp), %rax       # 8-byte Reload
	movl	%esi, 14108(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	14136(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 14096(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	14128(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 14088(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	14120(%rsp), %rax       # 8-byte Reload
	movq	%r8, 14080(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	14212(%rsp), %eax       # 4-byte Reload
	movq	%r9, 14072(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 14064(%rsp)       # 8-byte Spill
	movq	%r12, 14056(%rsp)       # 8-byte Spill
	movq	%r13, 14048(%rsp)       # 8-byte Spill
	movq	%r14, 14040(%rsp)       # 8-byte Spill
	movq	%rbp, 14032(%rsp)       # 8-byte Spill
	movq	%rbx, 14024(%rsp)       # 8-byte Spill
	movq	%r10, 14016(%rsp)       # 8-byte Spill
	movq	%r11, 14008(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	14216(%rsp), %rdi       # 8-byte Reload
	movq	14096(%rsp), %rsi       # 8-byte Reload
	movq	14168(%rsp), %rdx       # 8-byte Reload
	movq	14216(%rsp), %rcx       # 8-byte Reload
	movq	14160(%rsp), %r8        # 8-byte Reload
	movq	14112(%rsp), %r9        # 8-byte Reload
	movq	14152(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	stderr, %rcx
	movq	14192(%rsp), %rdi       # 8-byte Reload
	movq	14096(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	14216(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 14000(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	14184(%rsp), %r8        # 8-byte Reload
	movq	14112(%rsp), %r9        # 8-byte Reload
	movq	14176(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14248(%rsp), %rdi       # 8-byte Reload
	movq	14240(%rsp), %rsi       # 8-byte Reload
	movq	14232(%rsp), %rdx       # 8-byte Reload
	movq	14224(%rsp), %rcx       # 8-byte Reload
	movq	14200(%rsp), %r8        # 8-byte Reload
	movl	14212(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14032(%rsp), %rdi       # 8-byte Reload
	movq	14096(%rsp), %rsi       # 8-byte Reload
	movq	14272(%rsp), %rdx       # 8-byte Reload
	movq	14216(%rsp), %rcx       # 8-byte Reload
	movq	14264(%rsp), %r8        # 8-byte Reload
	movq	14112(%rsp), %r9        # 8-byte Reload
	movq	14256(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14216(%rsp), %rdi       # 8-byte Reload
	movq	14096(%rsp), %rsi       # 8-byte Reload
	movq	14000(%rsp), %rdx       # 8-byte Reload
	movq	14216(%rsp), %rcx       # 8-byte Reload
	movq	14056(%rsp), %r8        # 8-byte Reload
	movq	14112(%rsp), %r9        # 8-byte Reload
	movq	14048(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14088(%rsp), %rdi       # 8-byte Reload
	movq	14096(%rsp), %rsi       # 8-byte Reload
	movq	14000(%rsp), %rdx       # 8-byte Reload
	movq	14216(%rsp), %rcx       # 8-byte Reload
	movq	14040(%rsp), %r8        # 8-byte Reload
	movq	14112(%rsp), %r9        # 8-byte Reload
	movq	14064(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14016(%rsp), %rdi       # 8-byte Reload
	movq	14096(%rsp), %rsi       # 8-byte Reload
	movq	14280(%rsp), %rdx       # 8-byte Reload
	movq	14112(%rsp), %rcx       # 8-byte Reload
	movq	14008(%rsp), %r8        # 8-byte Reload
	movq	14112(%rsp), %r9        # 8-byte Reload
	movq	14024(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14088(%rsp), %rdi       # 8-byte Reload
	movq	14096(%rsp), %rsi       # 8-byte Reload
	movq	14280(%rsp), %rdx       # 8-byte Reload
	movq	14216(%rsp), %rcx       # 8-byte Reload
	movq	14080(%rsp), %r8        # 8-byte Reload
	movq	14112(%rsp), %r9        # 8-byte Reload
	movq	14072(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14000(%rsp), %rdi       # 8-byte Reload
	movq	14280(%rsp), %rsi       # 8-byte Reload
	movq	23080(%rsp), %rdx       # 8-byte Reload
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$32, %rdx
	movabsq	$1, %rsi
	leaq	.L.str940, %r8
	movabsq	$0, %r9
	leaq	.L.str941, %r10
	leaq	.L.str938, %r11
	leaq	.L.str939, %rbx
	movabsq	$2, %r14
	movabsq	$64, %r15
	leaq	exit, %r12
	leaq	.L.str936, %r13
	leaq	.L.str937, %rbp
	movq	%rcx, 13992(%rsp)       # 8-byte Spill
	movabsq	$166, %rcx
	movq	%rcx, 13984(%rsp)       # 8-byte Spill
	leaq	.L.str933, %rcx
	movq	%rcx, 13976(%rsp)       # 8-byte Spill
	leaq	.L.str934, %rcx
	movq	%rcx, 13968(%rsp)       # 8-byte Spill
	leaq	.L.str935, %rcx
	movq	%rcx, 13960(%rsp)       # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 13956(%rsp)       # 4-byte Spill
	movl	$0, %eax
	movq	%rcx, 13944(%rsp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 13936(%rsp)       # 8-byte Spill
	leaq	.L.str931, %rcx
	movq	%rcx, 13928(%rsp)       # 8-byte Spill
	leaq	.L.str932, %rcx
	.loc	3 166 0                 # kmeans.c:166:0
	movl	%eax, 13924(%rsp)       # 4-byte Spill
	movl	13956(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 13912(%rsp)       # 8-byte Spill
	movq	13936(%rsp), %rax       # 8-byte Reload
	movl	%edi, 13908(%rsp)       # 4-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 13896(%rsp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	13912(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 13888(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	13896(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 13880(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	13928(%rsp), %rax       # 8-byte Reload
	movq	%r8, 13872(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 13864(%rsp)        # 8-byte Spill
	movq	13880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 13856(%rsp)       # 8-byte Spill
	movq	%r15, 13848(%rsp)       # 8-byte Spill
	movq	%r12, 13840(%rsp)       # 8-byte Spill
	movq	%r13, 13832(%rsp)       # 8-byte Spill
	movq	%r14, 13824(%rsp)       # 8-byte Spill
	movq	%rbx, 13816(%rsp)       # 8-byte Spill
	movq	%r10, 13808(%rsp)       # 8-byte Spill
	movq	%r11, 13800(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	13984(%rsp), %rdi       # 8-byte Reload
	movq	13976(%rsp), %rsi       # 8-byte Reload
	movq	13968(%rsp), %rdx       # 8-byte Reload
	movq	13960(%rsp), %rcx       # 8-byte Reload
	movq	13944(%rsp), %r8        # 8-byte Reload
	movl	13924(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	13824(%rsp), %rdi       # 8-byte Reload
	movq	13848(%rsp), %rsi       # 8-byte Reload
	movq	13840(%rsp), %rdx       # 8-byte Reload
	movq	13896(%rsp), %rcx       # 8-byte Reload
	movq	13832(%rsp), %r8        # 8-byte Reload
	movq	13864(%rsp), %r9        # 8-byte Reload
	movq	13856(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	13896(%rsp), %rdi       # 8-byte Reload
	movq	13888(%rsp), %rsi       # 8-byte Reload
	movq	13896(%rsp), %rdx       # 8-byte Reload
	movq	13864(%rsp), %rcx       # 8-byte Reload
	movq	13800(%rsp), %r8        # 8-byte Reload
	movq	13864(%rsp), %r9        # 8-byte Reload
	movq	13816(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	13992(%rsp), %rdi       # 8-byte Reload
	movq	13888(%rsp), %rsi       # 8-byte Reload
	movq	13896(%rsp), %rdx       # 8-byte Reload
	movq	13896(%rsp), %rcx       # 8-byte Reload
	movq	13872(%rsp), %r8        # 8-byte Reload
	movq	13864(%rsp), %r9        # 8-byte Reload
	movq	13808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	13908(%rsp), %edi       # 4-byte Reload
	callq	exit
	movabsq	$166, %rdi
	leaq	.L.str942, %rsi
	leaq	.L.str943, %rdx
	leaq	.L.str944, %rcx
	movabsq	$7, %r8
	movl	$0, %r9d
	movl	$1, %r10d
	movl	$1, (%rsp)
	movl	%r10d, 13796(%rsp)      # 4-byte Spill
	callq	trace_logger_log0
.Ltmp122:
.LBB2_22:                               # %.lr.ph12
                                        # =>This Inner Loop Header: Depth=1
	leaq	.L.str5176, %rax
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$64, %rdx
	movabsq	$1, %rsi
	leaq	.L.str956, %r8
	movabsq	$0, %rdi
	leaq	.L.str957, %r9
	movabsq	$2, %r10
	leaq	.L.str954, %r11
	leaq	.L.str955, %rbx
	leaq	.L.str952, %r14
	leaq	.L.str953, %r15
	leaq	.L.str950, %r12
	leaq	.L.str951, %r13
	movabsq	$3, %rbp
	movq	%rax, 13784(%rsp)       # 8-byte Spill
	leaq	strtok, %rax
	movq	%rax, 13776(%rsp)       # 8-byte Spill
	leaq	.L.str948, %rax
	movq	%rax, 13768(%rsp)       # 8-byte Spill
	leaq	.L.str949, %rax
	movq	%rax, 13760(%rsp)       # 8-byte Spill
	movabsq	$169, %rax
	movq	%rax, 13752(%rsp)       # 8-byte Spill
	leaq	.L.str945, %rax
	movq	%rax, 13744(%rsp)       # 8-byte Spill
	leaq	.L.str946, %rax
	movq	%rax, 13736(%rsp)       # 8-byte Spill
	leaq	.L.str947, %rax
	movq	%rax, 13728(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 13720(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 13716(%rsp)       # 4-byte Spill
	movl	$1, %esi
	.loc	3 169 0                 # kmeans.c:169:0
.Ltmp123:
	movq	%rax, 13704(%rsp)       # 8-byte Spill
	movq	13752(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 13696(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	13744(%rsp), %rax       # 8-byte Reload
	movl	%esi, 13692(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	13736(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 13680(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	13728(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 13672(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	13704(%rsp), %rax       # 8-byte Reload
	movq	%r8, 13664(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	13716(%rsp), %eax       # 4-byte Reload
	movq	%r9, 13656(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 13648(%rsp)       # 8-byte Spill
	movq	%r12, 13640(%rsp)       # 8-byte Spill
	movq	%r13, 13632(%rsp)       # 8-byte Spill
	movq	%r14, 13624(%rsp)       # 8-byte Spill
	movq	%rbp, 13616(%rsp)       # 8-byte Spill
	movq	%rbx, 13608(%rsp)       # 8-byte Spill
	movq	%r10, 13600(%rsp)       # 8-byte Spill
	movq	%r11, 13592(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	13616(%rsp), %rdi       # 8-byte Reload
	movq	13680(%rsp), %rsi       # 8-byte Reload
	movq	13776(%rsp), %rdx       # 8-byte Reload
	movq	13720(%rsp), %rcx       # 8-byte Reload
	movq	13768(%rsp), %r8        # 8-byte Reload
	movq	13696(%rsp), %r9        # 8-byte Reload
	movq	13760(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13720(%rsp), %rdi       # 8-byte Reload
	movq	13680(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	13720(%rsp), %rcx       # 8-byte Reload
	movq	13640(%rsp), %r8        # 8-byte Reload
	movq	13696(%rsp), %r9        # 8-byte Reload
	movq	13632(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13672(%rsp), %rdi       # 8-byte Reload
	movq	13680(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	13720(%rsp), %rcx       # 8-byte Reload
	movq	13624(%rsp), %r8        # 8-byte Reload
	movq	13696(%rsp), %r9        # 8-byte Reload
	movq	13648(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13600(%rsp), %rdi       # 8-byte Reload
	movq	13680(%rsp), %rsi       # 8-byte Reload
	movq	13784(%rsp), %rdx       # 8-byte Reload
	movq	13696(%rsp), %rcx       # 8-byte Reload
	movq	13592(%rsp), %r8        # 8-byte Reload
	movq	13696(%rsp), %r9        # 8-byte Reload
	movq	13608(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13672(%rsp), %rdi       # 8-byte Reload
	movq	13680(%rsp), %rsi       # 8-byte Reload
	movq	13784(%rsp), %rdx       # 8-byte Reload
	movq	13720(%rsp), %rcx       # 8-byte Reload
	movq	13664(%rsp), %r8        # 8-byte Reload
	movq	13696(%rsp), %r9        # 8-byte Reload
	movq	13656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24488(%rsp), %rdi       # 8-byte Reload
	movq	13784(%rsp), %rsi       # 8-byte Reload
	callq	strtok
	movabsq	$1, %rcx
	leaq	.L.str976, %r8
	movabsq	$0, %rdx
	leaq	.L.str977, %rsi
	movabsq	$2, %rdi
	leaq	.L.str974, %r9
	leaq	.L.str975, %r10
	movabsq	$3, %r11
	leaq	.L.str972, %rbx
	leaq	.L.str973, %r14
	movabsq	$169, %r15
	leaq	.L.str969, %r12
	leaq	.L.str970, %r13
	leaq	.L.str971, %rbp
	movq	%rsi, 13584(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 13580(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 13568(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 13560(%rsp)       # 8-byte Spill
	leaq	.L.str967, %rax
	movq	%rax, 13552(%rsp)       # 8-byte Spill
	leaq	.L.str968, %rax
	movq	%rax, 13544(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 13536(%rsp)       # 8-byte Spill
	leaq	.L.str965, %rax
	movq	%rax, 13528(%rsp)       # 8-byte Spill
	leaq	.L.str966, %rax
	movq	%rax, 13520(%rsp)       # 8-byte Spill
	leaq	.L.str963, %rax
	movq	%rax, 13512(%rsp)       # 8-byte Spill
	leaq	.L.str964, %rax
	movq	%rax, 13504(%rsp)       # 8-byte Spill
	leaq	.L.str960, %rax
	movq	%rax, 13496(%rsp)       # 8-byte Spill
	leaq	.L.str961, %rax
	movq	%rax, 13488(%rsp)       # 8-byte Spill
	leaq	.L.str962, %rax
	movq	%rax, 13480(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 13472(%rsp)       # 8-byte Spill
	leaq	.L.str958, %rax
	movq	%rax, 13464(%rsp)       # 8-byte Spill
	leaq	.L.str959, %rax
	movq	%rax, 13456(%rsp)       # 8-byte Spill
	movq	13560(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 13448(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	13536(%rsp), %rax       # 8-byte Reload
	movl	%esi, 13444(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	13568(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 13432(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 13424(%rsp)       # 8-byte Spill
	movq	13464(%rsp), %rax       # 8-byte Reload
	movq	%r8, 13416(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	13432(%rsp), %rax       # 8-byte Reload
	movq	%r9, 13408(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	13456(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 13400(%rsp)       # 8-byte Spill
	movq	%r14, 13392(%rsp)       # 8-byte Spill
	movq	%r12, 13384(%rsp)       # 8-byte Spill
	movq	%r13, 13376(%rsp)       # 8-byte Spill
	movq	%rbp, 13368(%rsp)       # 8-byte Spill
	movq	%rbx, 13360(%rsp)       # 8-byte Spill
	movq	%r10, 13352(%rsp)       # 8-byte Spill
	movq	%r11, 13344(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	13400(%rsp), %rdi       # 8-byte Reload
	movq	13496(%rsp), %rsi       # 8-byte Reload
	movq	13488(%rsp), %rdx       # 8-byte Reload
	movq	13480(%rsp), %rcx       # 8-byte Reload
	movq	13472(%rsp), %r8        # 8-byte Reload
	movl	13580(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	13448(%rsp), %rdi       # 8-byte Reload
	movq	13536(%rsp), %rsi       # 8-byte Reload
	movq	13432(%rsp), %rdx       # 8-byte Reload
	movq	13432(%rsp), %rcx       # 8-byte Reload
	movq	13512(%rsp), %r8        # 8-byte Reload
	movq	13432(%rsp), %r9        # 8-byte Reload
	movq	13504(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	13424(%rsp), %rdi       # 8-byte Reload
	movq	13536(%rsp), %rsi       # 8-byte Reload
	movq	13568(%rsp), %rdx       # 8-byte Reload
	movq	13424(%rsp), %rcx       # 8-byte Reload
	movq	13528(%rsp), %r8        # 8-byte Reload
	movq	13432(%rsp), %r9        # 8-byte Reload
	movq	13520(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	13568(%rsp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	13560(%rsp), %rdi       # 8-byte Reload
	movq	13424(%rsp), %rsi       # 8-byte Reload
	movq	13424(%rsp), %rcx       # 8-byte Reload
	movq	13552(%rsp), %r8        # 8-byte Reload
	movq	13432(%rsp), %r9        # 8-byte Reload
	movq	13544(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 13343(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	13400(%rsp), %rdi       # 8-byte Reload
	movq	13384(%rsp), %rsi       # 8-byte Reload
	movq	13376(%rsp), %rdx       # 8-byte Reload
	movq	13368(%rsp), %rcx       # 8-byte Reload
	movq	13448(%rsp), %r8        # 8-byte Reload
	movl	13580(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	13344(%rsp), %rdi       # 8-byte Reload
	movq	13432(%rsp), %rsi       # 8-byte Reload
	movq	13432(%rsp), %rdx       # 8-byte Reload
	movq	13424(%rsp), %rcx       # 8-byte Reload
	movq	13360(%rsp), %r8        # 8-byte Reload
	movq	13432(%rsp), %r9        # 8-byte Reload
	movq	13392(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13448(%rsp), %rdi       # 8-byte Reload
	movq	13432(%rsp), %rsi       # 8-byte Reload
	movq	13432(%rsp), %rdx       # 8-byte Reload
	movq	13424(%rsp), %rcx       # 8-byte Reload
	movq	13408(%rsp), %r8        # 8-byte Reload
	movq	13432(%rsp), %r9        # 8-byte Reload
	movq	13352(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	13343(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	13424(%rsp), %rdi       # 8-byte Reload
	movq	13424(%rsp), %rsi       # 8-byte Reload
	movq	13424(%rsp), %rcx       # 8-byte Reload
	movq	13416(%rsp), %r8        # 8-byte Reload
	movq	13432(%rsp), %r9        # 8-byte Reload
	movq	13584(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	13343(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_24
# BB#23:                                #   in Loop: Header=BB2_22 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str1004, %r8
	leaq	.L.str1005, %rdx
	movabsq	$170, %rsi
	leaq	.L.str1001, %rdi
	leaq	.L.str1002, %r9
	leaq	.L.str1003, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$32, %r14
	leaq	.L.str999, %r15
	leaq	.L.str1000, %r12
	movabsq	$64, %r13
	movq	%rax, 13328(%rsp)       # 8-byte Spill
	leaq	.L.str997, %rax
	movq	%rax, 13320(%rsp)       # 8-byte Spill
	leaq	.L.str998, %rax
	movq	%rax, 13312(%rsp)       # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 13304(%rsp)       # 8-byte Spill
	leaq	.L.str994, %rax
	movq	%rax, 13296(%rsp)       # 8-byte Spill
	leaq	.L.str995, %rax
	movq	%rax, 13288(%rsp)       # 8-byte Spill
	leaq	.L.str996, %rax
	movq	%rax, 13280(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 13272(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 13264(%rsp)       # 8-byte Spill
	leaq	.L.str992, %rax
	movq	%rax, 13256(%rsp)       # 8-byte Spill
	leaq	.L.str993, %rax
	movq	%rax, 13248(%rsp)       # 8-byte Spill
	leaq	.L.str990, %rax
	movq	%rax, 13240(%rsp)       # 8-byte Spill
	leaq	.L.str991, %rax
	movq	%rax, 13232(%rsp)       # 8-byte Spill
	leaq	.L.str988, %rax
	movq	%rax, 13224(%rsp)       # 8-byte Spill
	leaq	.L.str989, %rax
	movq	%rax, 13216(%rsp)       # 8-byte Spill
	leaq	.L.str985, %rax
	movq	%rax, 13208(%rsp)       # 8-byte Spill
	leaq	.L.str986, %rax
	movq	%rax, 13200(%rsp)       # 8-byte Spill
	leaq	.L.str987, %rax
	movq	%rax, 13192(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 13184(%rsp)       # 8-byte Spill
	leaq	.L.str983, %rax
	movq	%rax, 13176(%rsp)       # 8-byte Spill
	leaq	.L.str984, %rax
	movq	%rax, 13168(%rsp)       # 8-byte Spill
	leaq	.L.str981, %rax
	movq	%rax, 13160(%rsp)       # 8-byte Spill
	leaq	.L.str982, %rax
	movq	%rax, 13152(%rsp)       # 8-byte Spill
	leaq	.L.str978, %rax
	movq	%rax, 13144(%rsp)       # 8-byte Spill
	leaq	.L.str979, %rax
	movq	%rax, 13136(%rsp)       # 8-byte Spill
	leaq	.L.str980, %rax
	movq	%rax, 13128(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
.Ltmp124:
	#DEBUG_VALUE: main:numObjects <- [RSP+13304]
	.loc	3 170 0                 # kmeans.c:170:0
	movq	%rdi, 13120(%rsp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 13112(%rsp)       # 8-byte Spill
	movq	13144(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 13104(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	13136(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 13096(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	13128(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 13088(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	13112(%rsp), %rax       # 8-byte Reload
	movq	%r8, 13080(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 13072(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 13064(%rsp)       # 8-byte Spill
	movl	%ebp, 13060(%rsp)       # 4-byte Spill
	movq	%r15, 13048(%rsp)       # 8-byte Spill
	movq	%r12, 13040(%rsp)       # 8-byte Spill
	movq	%r13, 13032(%rsp)       # 8-byte Spill
	movl	%ebx, 13028(%rsp)       # 4-byte Spill
	movq	%r10, 13016(%rsp)       # 8-byte Spill
	movq	%r11, 13008(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	13328(%rsp), %rdi       # 8-byte Reload
	movq	13032(%rsp), %rsi       # 8-byte Reload
	movq	13304(%rsp), %rdx       # 8-byte Reload
	movq	13328(%rsp), %rcx       # 8-byte Reload
	movq	13160(%rsp), %r8        # 8-byte Reload
	movq	13088(%rsp), %r9        # 8-byte Reload
	movq	13152(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	13264(%rsp), %rdi       # 8-byte Reload
	movq	13064(%rsp), %rsi       # 8-byte Reload
	movq	13328(%rsp), %rcx       # 8-byte Reload
	movq	13176(%rsp), %r8        # 8-byte Reload
	movq	13088(%rsp), %r9        # 8-byte Reload
	movq	13168(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 13004(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	13104(%rsp), %rdi       # 8-byte Reload
	movq	13208(%rsp), %rsi       # 8-byte Reload
	movq	13200(%rsp), %rdx       # 8-byte Reload
	movq	13192(%rsp), %rcx       # 8-byte Reload
	movq	13184(%rsp), %r8        # 8-byte Reload
	movl	13028(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	13008(%rsp), %rdi       # 8-byte Reload
	movq	13064(%rsp), %rsi       # 8-byte Reload
	movq	13328(%rsp), %rdx       # 8-byte Reload
	movq	13088(%rsp), %rcx       # 8-byte Reload
	movq	13224(%rsp), %r8        # 8-byte Reload
	movq	13088(%rsp), %r9        # 8-byte Reload
	movq	13216(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	13004(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	13328(%rsp), %rdi       # 8-byte Reload
	movq	13064(%rsp), %rsi       # 8-byte Reload
	movq	13328(%rsp), %rcx       # 8-byte Reload
	movq	13240(%rsp), %r8        # 8-byte Reload
	movq	13088(%rsp), %r9        # 8-byte Reload
	movq	13232(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	13004(%rsp), %ebx       # 4-byte Reload
	addl	$1, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	13264(%rsp), %rdi       # 8-byte Reload
	movq	13064(%rsp), %rsi       # 8-byte Reload
	movq	13328(%rsp), %rcx       # 8-byte Reload
	movq	13256(%rsp), %r8        # 8-byte Reload
	movq	13088(%rsp), %r9        # 8-byte Reload
	movq	13248(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 13000(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp125:
	#DEBUG_VALUE: main:numObjects <- [RSP+13000]
	movq	13104(%rsp), %rdi       # 8-byte Reload
	movq	13296(%rsp), %rsi       # 8-byte Reload
	movq	13288(%rsp), %rdx       # 8-byte Reload
	movq	13280(%rsp), %rcx       # 8-byte Reload
	movq	13272(%rsp), %r8        # 8-byte Reload
	movl	13028(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	13008(%rsp), %rdi       # 8-byte Reload
	movq	13032(%rsp), %rsi       # 8-byte Reload
	movq	13304(%rsp), %rdx       # 8-byte Reload
	movq	13328(%rsp), %rcx       # 8-byte Reload
	movq	13320(%rsp), %r8        # 8-byte Reload
	movq	13088(%rsp), %r9        # 8-byte Reload
	movq	13312(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	13000(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	13328(%rsp), %rdi       # 8-byte Reload
	movq	13064(%rsp), %rsi       # 8-byte Reload
	movq	13328(%rsp), %rcx       # 8-byte Reload
	movq	13048(%rsp), %r8        # 8-byte Reload
	movq	13088(%rsp), %r9        # 8-byte Reload
	movq	13040(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	13000(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, 25560(%rsp)
	movq	13104(%rsp), %rdi       # 8-byte Reload
	movq	13120(%rsp), %rsi       # 8-byte Reload
	movq	13072(%rsp), %rdx       # 8-byte Reload
	movq	13016(%rsp), %rcx       # 8-byte Reload
	movq	13008(%rsp), %r8        # 8-byte Reload
	movl	13028(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	13328(%rsp), %rdi       # 8-byte Reload
	movq	13088(%rsp), %rsi       # 8-byte Reload
	movq	13088(%rsp), %rdx       # 8-byte Reload
	movq	13328(%rsp), %rcx       # 8-byte Reload
	movq	13080(%rsp), %r8        # 8-byte Reload
	movq	13088(%rsp), %r9        # 8-byte Reload
	movq	13096(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.Ltmp126:
.LBB2_24:                               # %.backedge
                                        #   in Loop: Header=BB2_22 Depth=1
	movl	$1024, %esi             # imm = 0x400
	movabsq	$24601, %rax            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str1021, %r8
	movabsq	$0, %rdi
	leaq	.L.str1022, %r9
	movabsq	$3, %r10
	leaq	.L.str1019, %r11
	leaq	.L.str1020, %rbx
	movabsq	$32, %r14
	movabsq	$1024, %r15             # imm = 0x400
	leaq	.L.str1017, %r12
	leaq	.L.str1018, %r13
	movabsq	$2, %rbp
	movq	%rax, 12992(%rsp)       # 8-byte Spill
	leaq	.L.str1015, %rax
	movq	%rax, 12984(%rsp)       # 8-byte Spill
	leaq	.L.str1016, %rax
	movq	%rax, 12976(%rsp)       # 8-byte Spill
	leaq	.L.str1013, %rax
	movq	%rax, 12968(%rsp)       # 8-byte Spill
	leaq	.L.str1014, %rax
	movq	%rax, 12960(%rsp)       # 8-byte Spill
	leaq	.L.str1011, %rax
	movq	%rax, 12952(%rsp)       # 8-byte Spill
	leaq	.L.str1012, %rax
	movq	%rax, 12944(%rsp)       # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 12936(%rsp)       # 8-byte Spill
	leaq	fgets, %rax
	movq	%rax, 12928(%rsp)       # 8-byte Spill
	leaq	.L.str1009, %rax
	movq	%rax, 12920(%rsp)       # 8-byte Spill
	leaq	.L.str1010, %rax
	movq	%rax, 12912(%rsp)       # 8-byte Spill
	movabsq	$168, %rax
	movq	%rax, 12904(%rsp)       # 8-byte Spill
	leaq	.L.str1006, %rax
	movq	%rax, 12896(%rsp)       # 8-byte Spill
	leaq	.L.str1007, %rax
	movq	%rax, 12888(%rsp)       # 8-byte Spill
	leaq	.L.str1008, %rax
	movq	%rax, 12880(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movl	%esi, 12876(%rsp)       # 4-byte Spill
	movl	$0, %esi
	movl	%esi, 12872(%rsp)       # 4-byte Spill
	movl	$1, %esi
	.loc	3 168 0                 # kmeans.c:168:0
	movq	%rax, 12864(%rsp)       # 8-byte Spill
	movq	12904(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 12856(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	12896(%rsp), %rax       # 8-byte Reload
	movl	%esi, 12852(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	12888(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 12840(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	12880(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 12832(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	12864(%rsp), %rax       # 8-byte Reload
	movq	%r8, 12824(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	12872(%rsp), %eax       # 4-byte Reload
	movq	%r9, 12816(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, 12808(%rsp)       # 8-byte Spill
	movq	%r15, 12800(%rsp)       # 8-byte Spill
	movq	%r12, 12792(%rsp)       # 8-byte Spill
	movq	%r14, 12784(%rsp)       # 8-byte Spill
	movq	%rbp, 12776(%rsp)       # 8-byte Spill
	movq	%rbx, 12768(%rsp)       # 8-byte Spill
	movq	%r10, 12760(%rsp)       # 8-byte Spill
	movq	%r11, 12752(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	12936(%rsp), %rdi       # 8-byte Reload
	movq	12832(%rsp), %rsi       # 8-byte Reload
	movq	12928(%rsp), %rdx       # 8-byte Reload
	movq	12840(%rsp), %rcx       # 8-byte Reload
	movq	12920(%rsp), %r8        # 8-byte Reload
	movq	12856(%rsp), %r9        # 8-byte Reload
	movq	12912(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12840(%rsp), %rdi       # 8-byte Reload
	movq	12832(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	12840(%rsp), %rcx       # 8-byte Reload
	movq	12952(%rsp), %r8        # 8-byte Reload
	movq	12856(%rsp), %r9        # 8-byte Reload
	movq	12944(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12992(%rsp), %rdi       # 8-byte Reload
	movq	12832(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	12840(%rsp), %rcx       # 8-byte Reload
	movq	12968(%rsp), %r8        # 8-byte Reload
	movq	12856(%rsp), %r9        # 8-byte Reload
	movq	12960(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12776(%rsp), %rdi       # 8-byte Reload
	movq	12784(%rsp), %rsi       # 8-byte Reload
	movq	12800(%rsp), %rdx       # 8-byte Reload
	movq	12856(%rsp), %rcx       # 8-byte Reload
	movq	12984(%rsp), %r8        # 8-byte Reload
	movq	12856(%rsp), %r9        # 8-byte Reload
	movq	12976(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12992(%rsp), %rdi       # 8-byte Reload
	movq	12784(%rsp), %rsi       # 8-byte Reload
	movq	12800(%rsp), %rdx       # 8-byte Reload
	movq	12840(%rsp), %rcx       # 8-byte Reload
	movq	12792(%rsp), %r8        # 8-byte Reload
	movq	12856(%rsp), %r9        # 8-byte Reload
	movq	12808(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12760(%rsp), %rdi       # 8-byte Reload
	movq	12832(%rsp), %rsi       # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	12840(%rsp), %rcx       # 8-byte Reload
	movq	12752(%rsp), %r8        # 8-byte Reload
	movq	12856(%rsp), %r9        # 8-byte Reload
	movq	12768(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12992(%rsp), %rdi       # 8-byte Reload
	movq	12832(%rsp), %rsi       # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	12840(%rsp), %rcx       # 8-byte Reload
	movq	12824(%rsp), %r8        # 8-byte Reload
	movq	12856(%rsp), %r9        # 8-byte Reload
	movq	12816(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24488(%rsp), %rdi       # 8-byte Reload
	movl	12876(%rsp), %esi       # 4-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	callq	fgets
	movabsq	$1, %rcx
	leaq	.L.str1041, %r8
	movabsq	$0, %rdx
	leaq	.L.str1042, %rdi
	movabsq	$2, %r9
	leaq	.L.str1039, %r10
	leaq	.L.str1040, %r11
	movabsq	$3, %rbx
	leaq	.L.str1037, %r14
	leaq	.L.str1038, %r15
	movabsq	$168, %r12
	leaq	.L.str1034, %rsi
	leaq	.L.str1035, %r13
	leaq	.L.str1036, %rbp
	movq	%rsi, 12744(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 12740(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 12728(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 12720(%rsp)       # 8-byte Spill
	leaq	.L.str1032, %rax
	movq	%rax, 12712(%rsp)       # 8-byte Spill
	leaq	.L.str1033, %rax
	movq	%rax, 12704(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 12696(%rsp)       # 8-byte Spill
	leaq	.L.str1030, %rax
	movq	%rax, 12688(%rsp)       # 8-byte Spill
	leaq	.L.str1031, %rax
	movq	%rax, 12680(%rsp)       # 8-byte Spill
	leaq	.L.str1028, %rax
	movq	%rax, 12672(%rsp)       # 8-byte Spill
	leaq	.L.str1029, %rax
	movq	%rax, 12664(%rsp)       # 8-byte Spill
	leaq	.L.str1025, %rax
	movq	%rax, 12656(%rsp)       # 8-byte Spill
	leaq	.L.str1026, %rax
	movq	%rax, 12648(%rsp)       # 8-byte Spill
	leaq	.L.str1027, %rax
	movq	%rax, 12640(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 12632(%rsp)       # 8-byte Spill
	leaq	.L.str1023, %rax
	movq	%rax, 12624(%rsp)       # 8-byte Spill
	leaq	.L.str1024, %rax
	movq	%rax, 12616(%rsp)       # 8-byte Spill
	movq	12720(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 12608(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	12696(%rsp), %rax       # 8-byte Reload
	movl	%esi, 12604(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	12728(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 12592(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 12584(%rsp)       # 8-byte Spill
	movq	12624(%rsp), %rax       # 8-byte Reload
	movq	%r8, 12576(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	12592(%rsp), %rax       # 8-byte Reload
	movq	%r9, 12568(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	12616(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r12, 12560(%rsp)       # 8-byte Spill
	movq	%r15, 12552(%rsp)       # 8-byte Spill
	movq	%r13, 12544(%rsp)       # 8-byte Spill
	movq	%rbp, 12536(%rsp)       # 8-byte Spill
	movq	%r14, 12528(%rsp)       # 8-byte Spill
	movq	%r10, 12520(%rsp)       # 8-byte Spill
	movq	%r11, 12512(%rsp)       # 8-byte Spill
	movq	%rbx, 12504(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	12560(%rsp), %rdi       # 8-byte Reload
	movq	12656(%rsp), %rsi       # 8-byte Reload
	movq	12648(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12632(%rsp), %r8        # 8-byte Reload
	movl	12740(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12568(%rsp), %rdi       # 8-byte Reload
	movq	12696(%rsp), %rsi       # 8-byte Reload
	movq	12592(%rsp), %rdx       # 8-byte Reload
	movq	12592(%rsp), %rcx       # 8-byte Reload
	movq	12672(%rsp), %r8        # 8-byte Reload
	movq	12592(%rsp), %r9        # 8-byte Reload
	movq	12664(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	12584(%rsp), %rdi       # 8-byte Reload
	movq	12696(%rsp), %rsi       # 8-byte Reload
	movq	12728(%rsp), %rdx       # 8-byte Reload
	movq	12584(%rsp), %rcx       # 8-byte Reload
	movq	12688(%rsp), %r8        # 8-byte Reload
	movq	12592(%rsp), %r9        # 8-byte Reload
	movq	12680(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	12728(%rsp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	12720(%rsp), %rdi       # 8-byte Reload
	movq	12584(%rsp), %rsi       # 8-byte Reload
	movq	12584(%rsp), %rcx       # 8-byte Reload
	movq	12712(%rsp), %r8        # 8-byte Reload
	movq	12592(%rsp), %r9        # 8-byte Reload
	movq	12704(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 12503(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	12560(%rsp), %rdi       # 8-byte Reload
	movq	12744(%rsp), %rsi       # 8-byte Reload
	movq	12544(%rsp), %rdx       # 8-byte Reload
	movq	12536(%rsp), %rcx       # 8-byte Reload
	movq	12568(%rsp), %r8        # 8-byte Reload
	movl	12740(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12504(%rsp), %rdi       # 8-byte Reload
	movq	12592(%rsp), %rsi       # 8-byte Reload
	movq	12592(%rsp), %rdx       # 8-byte Reload
	movq	12584(%rsp), %rcx       # 8-byte Reload
	movq	12528(%rsp), %r8        # 8-byte Reload
	movq	12592(%rsp), %r9        # 8-byte Reload
	movq	12552(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12568(%rsp), %rdi       # 8-byte Reload
	movq	12592(%rsp), %rsi       # 8-byte Reload
	movq	12592(%rsp), %rdx       # 8-byte Reload
	movq	12584(%rsp), %rcx       # 8-byte Reload
	movq	12520(%rsp), %r8        # 8-byte Reload
	movq	12592(%rsp), %r9        # 8-byte Reload
	movq	12512(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	12503(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	12584(%rsp), %rdi       # 8-byte Reload
	movq	12584(%rsp), %rsi       # 8-byte Reload
	movq	12584(%rsp), %rcx       # 8-byte Reload
	movq	12576(%rsp), %r8        # 8-byte Reload
	movq	12592(%rsp), %r9        # 8-byte Reload
	movq	12608(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	12503(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_25
	jmp	.LBB2_22
.LBB2_25:                               # %._crit_edge13
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str1050, %r8
	movabsq	$0, %rdx
	leaq	.L.str1051, %rsi
	leaq	.L.str1048, %r9
	leaq	.L.str1049, %r10
	movabsq	$2, %r11
	leaq	rewind, %rbx
	leaq	.L.str1046, %r14
	leaq	.L.str1047, %r15
	movabsq	$171, %r12
	leaq	.L.str1043, %r13
	leaq	.L.str1044, %rbp
	movq	%rax, 12488(%rsp)       # 8-byte Spill
	leaq	.L.str1045, %rax
	movq	%rax, 12480(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 12472(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 12468(%rsp)       # 4-byte Spill
	movl	$1, %esi
	.loc	3 171 0                 # kmeans.c:171:0
	movq	%rdi, 12456(%rsp)       # 8-byte Spill
	movq	%r12, %rdi
	movl	%esi, 12452(%rsp)       # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 12440(%rsp)       # 8-byte Spill
	movq	%rbp, %rdx
	movq	12480(%rsp), %r12       # 8-byte Reload
	movq	%rcx, 12432(%rsp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 12424(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	12468(%rsp), %ebp       # 4-byte Reload
	movq	%r9, 12416(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 12408(%rsp)       # 8-byte Spill
	movq	%r11, 12400(%rsp)       # 8-byte Spill
	movq	%r10, 12392(%rsp)       # 8-byte Spill
	movq	%rbx, 12384(%rsp)       # 8-byte Spill
	movq	%r15, 12376(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	12400(%rsp), %rdi       # 8-byte Reload
	movq	12488(%rsp), %rsi       # 8-byte Reload
	movq	12384(%rsp), %rdx       # 8-byte Reload
	movq	12432(%rsp), %rcx       # 8-byte Reload
	movq	12408(%rsp), %r8        # 8-byte Reload
	movq	12440(%rsp), %r9        # 8-byte Reload
	movq	12376(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	12432(%rsp), %rdi       # 8-byte Reload
	movq	12488(%rsp), %rsi       # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	12432(%rsp), %rcx       # 8-byte Reload
	movq	12416(%rsp), %r8        # 8-byte Reload
	movq	12440(%rsp), %r9        # 8-byte Reload
	movq	12392(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	12456(%rsp), %rdi       # 8-byte Reload
	movq	12488(%rsp), %rsi       # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	12432(%rsp), %rcx       # 8-byte Reload
	movq	12424(%rsp), %r8        # 8-byte Reload
	movq	12440(%rsp), %r9        # 8-byte Reload
	movq	12472(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15024(%rsp), %rdi       # 8-byte Reload
	callq	rewind
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str1055, %r8
	leaq	.L.str1056, %rdx
	movabsq	$172, %rdi
	leaq	.L.str1052, %rsi
	leaq	.L.str1053, %r9
	leaq	.L.str1054, %r10
	movabsq	$2, %r11
	movl	$0, %ebp
	movl	$1, %r14d
	.loc	3 172 0                 # kmeans.c:172:0
	movq	%rdx, 12368(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 12360(%rsp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	%r8, 12352(%rsp)        # 8-byte Spill
	movq	%r11, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 12344(%rsp)       # 8-byte Spill
	movl	%r14d, 12340(%rsp)      # 4-byte Spill
	callq	trace_logger_log0
	movq	12344(%rsp), %rdi       # 8-byte Reload
	movq	12360(%rsp), %rsi       # 8-byte Reload
	movq	12360(%rsp), %rdx       # 8-byte Reload
	movq	12344(%rsp), %rcx       # 8-byte Reload
	movq	12352(%rsp), %r8        # 8-byte Reload
	movq	12360(%rsp), %r9        # 8-byte Reload
	movq	12368(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.LBB2_26:                               # =>This Inner Loop Header: Depth=1
	movl	$1024, %esi             # imm = 0x400
	movabsq	$24601, %rax            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str1072, %r8
	movabsq	$0, %rdi
	leaq	.L.str1073, %r9
	movabsq	$3, %r10
	leaq	.L.str1070, %r11
	leaq	.L.str1071, %rbx
	movabsq	$32, %r14
	movabsq	$1024, %r15             # imm = 0x400
	leaq	.L.str1068, %r12
	leaq	.L.str1069, %r13
	movabsq	$2, %rbp
	movq	%rax, 12328(%rsp)       # 8-byte Spill
	leaq	.L.str1066, %rax
	movq	%rax, 12320(%rsp)       # 8-byte Spill
	leaq	.L.str1067, %rax
	movq	%rax, 12312(%rsp)       # 8-byte Spill
	leaq	.L.str1064, %rax
	movq	%rax, 12304(%rsp)       # 8-byte Spill
	leaq	.L.str1065, %rax
	movq	%rax, 12296(%rsp)       # 8-byte Spill
	leaq	.L.str1062, %rax
	movq	%rax, 12288(%rsp)       # 8-byte Spill
	leaq	.L.str1063, %rax
	movq	%rax, 12280(%rsp)       # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 12272(%rsp)       # 8-byte Spill
	leaq	fgets, %rax
	movq	%rax, 12264(%rsp)       # 8-byte Spill
	leaq	.L.str1060, %rax
	movq	%rax, 12256(%rsp)       # 8-byte Spill
	leaq	.L.str1061, %rax
	movq	%rax, 12248(%rsp)       # 8-byte Spill
	movabsq	$172, %rax
	movq	%rax, 12240(%rsp)       # 8-byte Spill
	leaq	.L.str1057, %rax
	movq	%rax, 12232(%rsp)       # 8-byte Spill
	leaq	.L.str1058, %rax
	movq	%rax, 12224(%rsp)       # 8-byte Spill
	leaq	.L.str1059, %rax
	movq	%rax, 12216(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movl	%esi, 12212(%rsp)       # 4-byte Spill
	movl	$0, %esi
	movl	%esi, 12208(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 12200(%rsp)       # 8-byte Spill
	movq	12240(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 12192(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	12232(%rsp), %rax       # 8-byte Reload
	movl	%esi, 12188(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	12224(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 12176(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	12216(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 12168(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	12200(%rsp), %rax       # 8-byte Reload
	movq	%r8, 12160(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	12208(%rsp), %eax       # 4-byte Reload
	movq	%r9, 12152(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, 12144(%rsp)       # 8-byte Spill
	movq	%r15, 12136(%rsp)       # 8-byte Spill
	movq	%r12, 12128(%rsp)       # 8-byte Spill
	movq	%r14, 12120(%rsp)       # 8-byte Spill
	movq	%rbp, 12112(%rsp)       # 8-byte Spill
	movq	%rbx, 12104(%rsp)       # 8-byte Spill
	movq	%r10, 12096(%rsp)       # 8-byte Spill
	movq	%r11, 12088(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	12272(%rsp), %rdi       # 8-byte Reload
	movq	12168(%rsp), %rsi       # 8-byte Reload
	movq	12264(%rsp), %rdx       # 8-byte Reload
	movq	12176(%rsp), %rcx       # 8-byte Reload
	movq	12256(%rsp), %r8        # 8-byte Reload
	movq	12192(%rsp), %r9        # 8-byte Reload
	movq	12248(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12176(%rsp), %rdi       # 8-byte Reload
	movq	12168(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	12176(%rsp), %rcx       # 8-byte Reload
	movq	12288(%rsp), %r8        # 8-byte Reload
	movq	12192(%rsp), %r9        # 8-byte Reload
	movq	12280(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12328(%rsp), %rdi       # 8-byte Reload
	movq	12168(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	12176(%rsp), %rcx       # 8-byte Reload
	movq	12304(%rsp), %r8        # 8-byte Reload
	movq	12192(%rsp), %r9        # 8-byte Reload
	movq	12296(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12112(%rsp), %rdi       # 8-byte Reload
	movq	12120(%rsp), %rsi       # 8-byte Reload
	movq	12136(%rsp), %rdx       # 8-byte Reload
	movq	12192(%rsp), %rcx       # 8-byte Reload
	movq	12320(%rsp), %r8        # 8-byte Reload
	movq	12192(%rsp), %r9        # 8-byte Reload
	movq	12312(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12328(%rsp), %rdi       # 8-byte Reload
	movq	12120(%rsp), %rsi       # 8-byte Reload
	movq	12136(%rsp), %rdx       # 8-byte Reload
	movq	12176(%rsp), %rcx       # 8-byte Reload
	movq	12128(%rsp), %r8        # 8-byte Reload
	movq	12192(%rsp), %r9        # 8-byte Reload
	movq	12144(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12096(%rsp), %rdi       # 8-byte Reload
	movq	12168(%rsp), %rsi       # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	12176(%rsp), %rcx       # 8-byte Reload
	movq	12088(%rsp), %r8        # 8-byte Reload
	movq	12192(%rsp), %r9        # 8-byte Reload
	movq	12104(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12328(%rsp), %rdi       # 8-byte Reload
	movq	12168(%rsp), %rsi       # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	12176(%rsp), %rcx       # 8-byte Reload
	movq	12160(%rsp), %r8        # 8-byte Reload
	movq	12192(%rsp), %r9        # 8-byte Reload
	movq	12152(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24488(%rsp), %rdi       # 8-byte Reload
	movl	12212(%rsp), %esi       # 4-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	callq	fgets
	movabsq	$1, %rcx
	leaq	.L.str1092, %r8
	movabsq	$0, %rdx
	leaq	.L.str1093, %rdi
	movabsq	$2, %r9
	leaq	.L.str1090, %r10
	leaq	.L.str1091, %r11
	movabsq	$3, %rbx
	leaq	.L.str1088, %r14
	leaq	.L.str1089, %r15
	movabsq	$172, %r12
	leaq	.L.str1085, %rsi
	leaq	.L.str1086, %r13
	leaq	.L.str1087, %rbp
	movq	%rsi, 12080(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 12076(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 12064(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 12056(%rsp)       # 8-byte Spill
	leaq	.L.str1083, %rax
	movq	%rax, 12048(%rsp)       # 8-byte Spill
	leaq	.L.str1084, %rax
	movq	%rax, 12040(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 12032(%rsp)       # 8-byte Spill
	leaq	.L.str1081, %rax
	movq	%rax, 12024(%rsp)       # 8-byte Spill
	leaq	.L.str1082, %rax
	movq	%rax, 12016(%rsp)       # 8-byte Spill
	leaq	.L.str1079, %rax
	movq	%rax, 12008(%rsp)       # 8-byte Spill
	leaq	.L.str1080, %rax
	movq	%rax, 12000(%rsp)       # 8-byte Spill
	leaq	.L.str1076, %rax
	movq	%rax, 11992(%rsp)       # 8-byte Spill
	leaq	.L.str1077, %rax
	movq	%rax, 11984(%rsp)       # 8-byte Spill
	leaq	.L.str1078, %rax
	movq	%rax, 11976(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 11968(%rsp)       # 8-byte Spill
	leaq	.L.str1074, %rax
	movq	%rax, 11960(%rsp)       # 8-byte Spill
	leaq	.L.str1075, %rax
	movq	%rax, 11952(%rsp)       # 8-byte Spill
	movq	12056(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 11944(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	12032(%rsp), %rax       # 8-byte Reload
	movl	%esi, 11940(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	12064(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 11928(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 11920(%rsp)       # 8-byte Spill
	movq	11960(%rsp), %rax       # 8-byte Reload
	movq	%r8, 11912(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	11928(%rsp), %rax       # 8-byte Reload
	movq	%r9, 11904(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	11952(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r12, 11896(%rsp)       # 8-byte Spill
	movq	%r15, 11888(%rsp)       # 8-byte Spill
	movq	%r13, 11880(%rsp)       # 8-byte Spill
	movq	%rbp, 11872(%rsp)       # 8-byte Spill
	movq	%r14, 11864(%rsp)       # 8-byte Spill
	movq	%r10, 11856(%rsp)       # 8-byte Spill
	movq	%r11, 11848(%rsp)       # 8-byte Spill
	movq	%rbx, 11840(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	11896(%rsp), %rdi       # 8-byte Reload
	movq	11992(%rsp), %rsi       # 8-byte Reload
	movq	11984(%rsp), %rdx       # 8-byte Reload
	movq	11976(%rsp), %rcx       # 8-byte Reload
	movq	11968(%rsp), %r8        # 8-byte Reload
	movl	12076(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	11904(%rsp), %rdi       # 8-byte Reload
	movq	12032(%rsp), %rsi       # 8-byte Reload
	movq	11928(%rsp), %rdx       # 8-byte Reload
	movq	11928(%rsp), %rcx       # 8-byte Reload
	movq	12008(%rsp), %r8        # 8-byte Reload
	movq	11928(%rsp), %r9        # 8-byte Reload
	movq	12000(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	11920(%rsp), %rdi       # 8-byte Reload
	movq	12032(%rsp), %rsi       # 8-byte Reload
	movq	12064(%rsp), %rdx       # 8-byte Reload
	movq	11920(%rsp), %rcx       # 8-byte Reload
	movq	12024(%rsp), %r8        # 8-byte Reload
	movq	11928(%rsp), %r9        # 8-byte Reload
	movq	12016(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	12064(%rsp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	12056(%rsp), %rdi       # 8-byte Reload
	movq	11920(%rsp), %rsi       # 8-byte Reload
	movq	11920(%rsp), %rcx       # 8-byte Reload
	movq	12048(%rsp), %r8        # 8-byte Reload
	movq	11928(%rsp), %r9        # 8-byte Reload
	movq	12040(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 11839(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	11896(%rsp), %rdi       # 8-byte Reload
	movq	12080(%rsp), %rsi       # 8-byte Reload
	movq	11880(%rsp), %rdx       # 8-byte Reload
	movq	11872(%rsp), %rcx       # 8-byte Reload
	movq	11904(%rsp), %r8        # 8-byte Reload
	movl	12076(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	11840(%rsp), %rdi       # 8-byte Reload
	movq	11928(%rsp), %rsi       # 8-byte Reload
	movq	11928(%rsp), %rdx       # 8-byte Reload
	movq	11920(%rsp), %rcx       # 8-byte Reload
	movq	11864(%rsp), %r8        # 8-byte Reload
	movq	11928(%rsp), %r9        # 8-byte Reload
	movq	11888(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11904(%rsp), %rdi       # 8-byte Reload
	movq	11928(%rsp), %rsi       # 8-byte Reload
	movq	11928(%rsp), %rdx       # 8-byte Reload
	movq	11920(%rsp), %rcx       # 8-byte Reload
	movq	11856(%rsp), %r8        # 8-byte Reload
	movq	11928(%rsp), %r9        # 8-byte Reload
	movq	11848(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	11839(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	11920(%rsp), %rdi       # 8-byte Reload
	movq	11920(%rsp), %rsi       # 8-byte Reload
	movq	11920(%rsp), %rcx       # 8-byte Reload
	movq	11912(%rsp), %r8        # 8-byte Reload
	movq	11928(%rsp), %r9        # 8-byte Reload
	movq	11944(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	11839(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_30
# BB#27:                                #   in Loop: Header=BB2_26 Depth=1
	leaq	.L.str5176, %rax
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$64, %rdx
	movabsq	$1, %rsi
	leaq	.L.str1105, %r8
	movabsq	$0, %rdi
	leaq	.L.str1106, %r9
	movabsq	$2, %r10
	leaq	.L.str1103, %r11
	leaq	.L.str1104, %rbx
	leaq	.L.str1101, %r14
	leaq	.L.str1102, %r15
	leaq	.L.str1099, %r12
	leaq	.L.str1100, %r13
	movabsq	$3, %rbp
	movq	%rax, 11824(%rsp)       # 8-byte Spill
	leaq	strtok, %rax
	movq	%rax, 11816(%rsp)       # 8-byte Spill
	leaq	.L.str1097, %rax
	movq	%rax, 11808(%rsp)       # 8-byte Spill
	leaq	.L.str1098, %rax
	movq	%rax, 11800(%rsp)       # 8-byte Spill
	movabsq	$173, %rax
	movq	%rax, 11792(%rsp)       # 8-byte Spill
	leaq	.L.str1094, %rax
	movq	%rax, 11784(%rsp)       # 8-byte Spill
	leaq	.L.str1095, %rax
	movq	%rax, 11776(%rsp)       # 8-byte Spill
	leaq	.L.str1096, %rax
	movq	%rax, 11768(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 11760(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 11756(%rsp)       # 4-byte Spill
	movl	$1, %esi
	.loc	3 173 0                 # kmeans.c:173:0
.Ltmp127:
	movq	%rax, 11744(%rsp)       # 8-byte Spill
	movq	11792(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 11736(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	11784(%rsp), %rax       # 8-byte Reload
	movl	%esi, 11732(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	11776(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 11720(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	11768(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 11712(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	11744(%rsp), %rax       # 8-byte Reload
	movq	%r8, 11704(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	11756(%rsp), %eax       # 4-byte Reload
	movq	%r9, 11696(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 11688(%rsp)       # 8-byte Spill
	movq	%r12, 11680(%rsp)       # 8-byte Spill
	movq	%r13, 11672(%rsp)       # 8-byte Spill
	movq	%r14, 11664(%rsp)       # 8-byte Spill
	movq	%rbp, 11656(%rsp)       # 8-byte Spill
	movq	%rbx, 11648(%rsp)       # 8-byte Spill
	movq	%r10, 11640(%rsp)       # 8-byte Spill
	movq	%r11, 11632(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	11656(%rsp), %rdi       # 8-byte Reload
	movq	11720(%rsp), %rsi       # 8-byte Reload
	movq	11816(%rsp), %rdx       # 8-byte Reload
	movq	11760(%rsp), %rcx       # 8-byte Reload
	movq	11808(%rsp), %r8        # 8-byte Reload
	movq	11736(%rsp), %r9        # 8-byte Reload
	movq	11800(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11760(%rsp), %rdi       # 8-byte Reload
	movq	11720(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	11760(%rsp), %rcx       # 8-byte Reload
	movq	11680(%rsp), %r8        # 8-byte Reload
	movq	11736(%rsp), %r9        # 8-byte Reload
	movq	11672(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11712(%rsp), %rdi       # 8-byte Reload
	movq	11720(%rsp), %rsi       # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	11760(%rsp), %rcx       # 8-byte Reload
	movq	11664(%rsp), %r8        # 8-byte Reload
	movq	11736(%rsp), %r9        # 8-byte Reload
	movq	11688(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11640(%rsp), %rdi       # 8-byte Reload
	movq	11720(%rsp), %rsi       # 8-byte Reload
	movq	11824(%rsp), %rdx       # 8-byte Reload
	movq	11736(%rsp), %rcx       # 8-byte Reload
	movq	11632(%rsp), %r8        # 8-byte Reload
	movq	11736(%rsp), %r9        # 8-byte Reload
	movq	11648(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11712(%rsp), %rdi       # 8-byte Reload
	movq	11720(%rsp), %rsi       # 8-byte Reload
	movq	11824(%rsp), %rdx       # 8-byte Reload
	movq	11760(%rsp), %rcx       # 8-byte Reload
	movq	11704(%rsp), %r8        # 8-byte Reload
	movq	11736(%rsp), %r9        # 8-byte Reload
	movq	11696(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24488(%rsp), %rdi       # 8-byte Reload
	movq	11824(%rsp), %rsi       # 8-byte Reload
	callq	strtok
	movabsq	$1, %rcx
	leaq	.L.str1125, %r8
	movabsq	$0, %rdx
	leaq	.L.str1126, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1123, %r9
	leaq	.L.str1124, %r10
	movabsq	$3, %r11
	leaq	.L.str1121, %rbx
	leaq	.L.str1122, %r14
	movabsq	$173, %r15
	leaq	.L.str1118, %r12
	leaq	.L.str1119, %r13
	leaq	.L.str1120, %rbp
	movq	%rsi, 11624(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 11620(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 11608(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 11600(%rsp)       # 8-byte Spill
	leaq	.L.str1116, %rax
	movq	%rax, 11592(%rsp)       # 8-byte Spill
	leaq	.L.str1117, %rax
	movq	%rax, 11584(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 11576(%rsp)       # 8-byte Spill
	leaq	.L.str1114, %rax
	movq	%rax, 11568(%rsp)       # 8-byte Spill
	leaq	.L.str1115, %rax
	movq	%rax, 11560(%rsp)       # 8-byte Spill
	leaq	.L.str1112, %rax
	movq	%rax, 11552(%rsp)       # 8-byte Spill
	leaq	.L.str1113, %rax
	movq	%rax, 11544(%rsp)       # 8-byte Spill
	leaq	.L.str1109, %rax
	movq	%rax, 11536(%rsp)       # 8-byte Spill
	leaq	.L.str1110, %rax
	movq	%rax, 11528(%rsp)       # 8-byte Spill
	leaq	.L.str1111, %rax
	movq	%rax, 11520(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 11512(%rsp)       # 8-byte Spill
	leaq	.L.str1107, %rax
	movq	%rax, 11504(%rsp)       # 8-byte Spill
	leaq	.L.str1108, %rax
	movq	%rax, 11496(%rsp)       # 8-byte Spill
	movq	11600(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 11488(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	11576(%rsp), %rax       # 8-byte Reload
	movl	%esi, 11484(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	11608(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 11472(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 11464(%rsp)       # 8-byte Spill
	movq	11504(%rsp), %rax       # 8-byte Reload
	movq	%r8, 11456(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	11472(%rsp), %rax       # 8-byte Reload
	movq	%r9, 11448(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	11496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 11440(%rsp)       # 8-byte Spill
	movq	%r14, 11432(%rsp)       # 8-byte Spill
	movq	%r12, 11424(%rsp)       # 8-byte Spill
	movq	%r13, 11416(%rsp)       # 8-byte Spill
	movq	%rbp, 11408(%rsp)       # 8-byte Spill
	movq	%rbx, 11400(%rsp)       # 8-byte Spill
	movq	%r10, 11392(%rsp)       # 8-byte Spill
	movq	%r11, 11384(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	11440(%rsp), %rdi       # 8-byte Reload
	movq	11536(%rsp), %rsi       # 8-byte Reload
	movq	11528(%rsp), %rdx       # 8-byte Reload
	movq	11520(%rsp), %rcx       # 8-byte Reload
	movq	11512(%rsp), %r8        # 8-byte Reload
	movl	11620(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	11488(%rsp), %rdi       # 8-byte Reload
	movq	11576(%rsp), %rsi       # 8-byte Reload
	movq	11472(%rsp), %rdx       # 8-byte Reload
	movq	11472(%rsp), %rcx       # 8-byte Reload
	movq	11552(%rsp), %r8        # 8-byte Reload
	movq	11472(%rsp), %r9        # 8-byte Reload
	movq	11544(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	11464(%rsp), %rdi       # 8-byte Reload
	movq	11576(%rsp), %rsi       # 8-byte Reload
	movq	11608(%rsp), %rdx       # 8-byte Reload
	movq	11464(%rsp), %rcx       # 8-byte Reload
	movq	11568(%rsp), %r8        # 8-byte Reload
	movq	11472(%rsp), %r9        # 8-byte Reload
	movq	11560(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	11608(%rsp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	11600(%rsp), %rdi       # 8-byte Reload
	movq	11464(%rsp), %rsi       # 8-byte Reload
	movq	11464(%rsp), %rcx       # 8-byte Reload
	movq	11592(%rsp), %r8        # 8-byte Reload
	movq	11472(%rsp), %r9        # 8-byte Reload
	movq	11584(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 11383(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	11440(%rsp), %rdi       # 8-byte Reload
	movq	11424(%rsp), %rsi       # 8-byte Reload
	movq	11416(%rsp), %rdx       # 8-byte Reload
	movq	11408(%rsp), %rcx       # 8-byte Reload
	movq	11488(%rsp), %r8        # 8-byte Reload
	movl	11620(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	11384(%rsp), %rdi       # 8-byte Reload
	movq	11472(%rsp), %rsi       # 8-byte Reload
	movq	11472(%rsp), %rdx       # 8-byte Reload
	movq	11464(%rsp), %rcx       # 8-byte Reload
	movq	11400(%rsp), %r8        # 8-byte Reload
	movq	11472(%rsp), %r9        # 8-byte Reload
	movq	11432(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11488(%rsp), %rdi       # 8-byte Reload
	movq	11472(%rsp), %rsi       # 8-byte Reload
	movq	11472(%rsp), %rdx       # 8-byte Reload
	movq	11464(%rsp), %rcx       # 8-byte Reload
	movq	11448(%rsp), %r8        # 8-byte Reload
	movq	11472(%rsp), %r9        # 8-byte Reload
	movq	11392(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	11383(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	11464(%rsp), %rdi       # 8-byte Reload
	movq	11464(%rsp), %rsi       # 8-byte Reload
	movq	11464(%rsp), %rcx       # 8-byte Reload
	movq	11456(%rsp), %r8        # 8-byte Reload
	movq	11472(%rsp), %r9        # 8-byte Reload
	movq	11624(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	11383(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_26
# BB#28:                                # %.preheader7
	movabsq	$0, %rax
	leaq	.L.str6177, %rcx
	movabsq	$24601, %rdx            # imm = 0x6019
	movabsq	$64, %rsi
	movabsq	$1, %rdi
	leaq	.L.str1138, %r8
	leaq	.L.str1139, %r9
	movabsq	$2, %r10
	leaq	.L.str1136, %r11
	leaq	.L.str1137, %rbx
	leaq	.L.str1134, %r14
	leaq	.L.str1135, %r15
	leaq	.L.str1132, %r12
	leaq	.L.str1133, %r13
	movabsq	$3, %rbp
	movq	%rax, 11368(%rsp)       # 8-byte Spill
	leaq	strtok, %rax
	movq	%rax, 11360(%rsp)       # 8-byte Spill
	leaq	.L.str1130, %rax
	movq	%rax, 11352(%rsp)       # 8-byte Spill
	leaq	.L.str1131, %rax
	movq	%rax, 11344(%rsp)       # 8-byte Spill
	movabsq	$175, %rax
	movq	%rax, 11336(%rsp)       # 8-byte Spill
	leaq	.L.str1127, %rax
	movq	%rax, 11328(%rsp)       # 8-byte Spill
	leaq	.L.str1128, %rax
	movq	%rax, 11320(%rsp)       # 8-byte Spill
	leaq	.L.str1129, %rax
	movq	%rax, 11312(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 11304(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 11300(%rsp)       # 4-byte Spill
	movl	$1, %esi
	.loc	3 175 0                 # kmeans.c:175:0
.Ltmp128:
	movq	%rax, 11288(%rsp)       # 8-byte Spill
	movq	11336(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 11280(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	11328(%rsp), %rax       # 8-byte Reload
	movl	%esi, 11276(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	11320(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 11264(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	11312(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 11256(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	11288(%rsp), %rax       # 8-byte Reload
	movq	%r8, 11248(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	11300(%rsp), %eax       # 4-byte Reload
	movq	%r9, 11240(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 11232(%rsp)       # 8-byte Spill
	movq	%r12, 11224(%rsp)       # 8-byte Spill
	movq	%r13, 11216(%rsp)       # 8-byte Spill
	movq	%rbp, 11208(%rsp)       # 8-byte Spill
	movq	%r14, 11200(%rsp)       # 8-byte Spill
	movq	%rbx, 11192(%rsp)       # 8-byte Spill
	movq	%r10, 11184(%rsp)       # 8-byte Spill
	movq	%r11, 11176(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	11208(%rsp), %rdi       # 8-byte Reload
	movq	11304(%rsp), %rsi       # 8-byte Reload
	movq	11360(%rsp), %rdx       # 8-byte Reload
	movq	11280(%rsp), %rcx       # 8-byte Reload
	movq	11352(%rsp), %r8        # 8-byte Reload
	movq	11368(%rsp), %r9        # 8-byte Reload
	movq	11344(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11280(%rsp), %rdi       # 8-byte Reload
	movq	11304(%rsp), %rsi       # 8-byte Reload
	movq	11368(%rsp), %rdx       # 8-byte Reload
	movq	11368(%rsp), %rcx       # 8-byte Reload
	movq	11224(%rsp), %r8        # 8-byte Reload
	movq	11368(%rsp), %r9        # 8-byte Reload
	movq	11216(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11264(%rsp), %rdi       # 8-byte Reload
	movq	11304(%rsp), %rsi       # 8-byte Reload
	movq	11368(%rsp), %rdx       # 8-byte Reload
	movq	11280(%rsp), %rcx       # 8-byte Reload
	movq	11200(%rsp), %r8        # 8-byte Reload
	movq	11368(%rsp), %r9        # 8-byte Reload
	movq	11232(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11184(%rsp), %rdi       # 8-byte Reload
	movq	11304(%rsp), %rsi       # 8-byte Reload
	movq	11256(%rsp), %rdx       # 8-byte Reload
	movq	11368(%rsp), %rcx       # 8-byte Reload
	movq	11176(%rsp), %r8        # 8-byte Reload
	movq	11368(%rsp), %r9        # 8-byte Reload
	movq	11192(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11264(%rsp), %rdi       # 8-byte Reload
	movq	11304(%rsp), %rsi       # 8-byte Reload
	movq	11256(%rsp), %rdx       # 8-byte Reload
	movq	11280(%rsp), %rcx       # 8-byte Reload
	movq	11248(%rsp), %r8        # 8-byte Reload
	movq	11368(%rsp), %r9        # 8-byte Reload
	movq	11240(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11368(%rsp), %rdi       # 8-byte Reload
	movq	11256(%rsp), %rsi       # 8-byte Reload
	callq	strtok
	movabsq	$1, %rcx
	leaq	.L.str1158, %r8
	movabsq	$0, %rdx
	leaq	.L.str1159, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1156, %r9
	leaq	.L.str1157, %r10
	movabsq	$3, %r11
	leaq	.L.str1154, %rbx
	leaq	.L.str1155, %r14
	movabsq	$175, %r15
	leaq	.L.str1151, %r12
	leaq	.L.str1152, %r13
	leaq	.L.str1153, %rbp
	movq	%rsi, 11168(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 11164(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 11152(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 11144(%rsp)       # 8-byte Spill
	leaq	.L.str1149, %rax
	movq	%rax, 11136(%rsp)       # 8-byte Spill
	leaq	.L.str1150, %rax
	movq	%rax, 11128(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 11120(%rsp)       # 8-byte Spill
	leaq	.L.str1147, %rax
	movq	%rax, 11112(%rsp)       # 8-byte Spill
	leaq	.L.str1148, %rax
	movq	%rax, 11104(%rsp)       # 8-byte Spill
	leaq	.L.str1145, %rax
	movq	%rax, 11096(%rsp)       # 8-byte Spill
	leaq	.L.str1146, %rax
	movq	%rax, 11088(%rsp)       # 8-byte Spill
	leaq	.L.str1142, %rax
	movq	%rax, 11080(%rsp)       # 8-byte Spill
	leaq	.L.str1143, %rax
	movq	%rax, 11072(%rsp)       # 8-byte Spill
	leaq	.L.str1144, %rax
	movq	%rax, 11064(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 11056(%rsp)       # 8-byte Spill
	leaq	.L.str1140, %rax
	movq	%rax, 11048(%rsp)       # 8-byte Spill
	leaq	.L.str1141, %rax
	movq	%rax, 11040(%rsp)       # 8-byte Spill
	movq	11144(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 11032(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	11120(%rsp), %rax       # 8-byte Reload
	movl	%esi, 11028(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	11152(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 11016(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 11008(%rsp)       # 8-byte Spill
	movq	11048(%rsp), %rax       # 8-byte Reload
	movq	%r8, 11000(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	11016(%rsp), %rax       # 8-byte Reload
	movq	%r9, 10992(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	11040(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 10984(%rsp)       # 8-byte Spill
	movq	%r14, 10976(%rsp)       # 8-byte Spill
	movq	%r12, 10968(%rsp)       # 8-byte Spill
	movq	%r13, 10960(%rsp)       # 8-byte Spill
	movq	%rbp, 10952(%rsp)       # 8-byte Spill
	movq	%rbx, 10944(%rsp)       # 8-byte Spill
	movq	%r10, 10936(%rsp)       # 8-byte Spill
	movq	%r11, 10928(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	10984(%rsp), %rdi       # 8-byte Reload
	movq	11080(%rsp), %rsi       # 8-byte Reload
	movq	11072(%rsp), %rdx       # 8-byte Reload
	movq	11064(%rsp), %rcx       # 8-byte Reload
	movq	11056(%rsp), %r8        # 8-byte Reload
	movl	11164(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	11032(%rsp), %rdi       # 8-byte Reload
	movq	11120(%rsp), %rsi       # 8-byte Reload
	movq	11016(%rsp), %rdx       # 8-byte Reload
	movq	11016(%rsp), %rcx       # 8-byte Reload
	movq	11096(%rsp), %r8        # 8-byte Reload
	movq	11016(%rsp), %r9        # 8-byte Reload
	movq	11088(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	11008(%rsp), %rdi       # 8-byte Reload
	movq	11120(%rsp), %rsi       # 8-byte Reload
	movq	11152(%rsp), %rdx       # 8-byte Reload
	movq	11008(%rsp), %rcx       # 8-byte Reload
	movq	11112(%rsp), %r8        # 8-byte Reload
	movq	11016(%rsp), %r9        # 8-byte Reload
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	11152(%rsp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	11144(%rsp), %rdi       # 8-byte Reload
	movq	11008(%rsp), %rsi       # 8-byte Reload
	movq	11008(%rsp), %rcx       # 8-byte Reload
	movq	11136(%rsp), %r8        # 8-byte Reload
	movq	11016(%rsp), %r9        # 8-byte Reload
	movq	11128(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10927(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10984(%rsp), %rdi       # 8-byte Reload
	movq	10968(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	10952(%rsp), %rcx       # 8-byte Reload
	movq	11032(%rsp), %r8        # 8-byte Reload
	movl	11164(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10928(%rsp), %rdi       # 8-byte Reload
	movq	11016(%rsp), %rsi       # 8-byte Reload
	movq	11016(%rsp), %rdx       # 8-byte Reload
	movq	11008(%rsp), %rcx       # 8-byte Reload
	movq	10944(%rsp), %r8        # 8-byte Reload
	movq	11016(%rsp), %r9        # 8-byte Reload
	movq	10976(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11032(%rsp), %rdi       # 8-byte Reload
	movq	11016(%rsp), %rsi       # 8-byte Reload
	movq	11016(%rsp), %rdx       # 8-byte Reload
	movq	11008(%rsp), %rcx       # 8-byte Reload
	movq	10992(%rsp), %r8        # 8-byte Reload
	movq	11016(%rsp), %r9        # 8-byte Reload
	movq	10936(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10927(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	11008(%rsp), %rdi       # 8-byte Reload
	movq	11008(%rsp), %rsi       # 8-byte Reload
	movq	11008(%rsp), %rcx       # 8-byte Reload
	movq	11000(%rsp), %r8        # 8-byte Reload
	movq	11016(%rsp), %r9        # 8-byte Reload
	movq	11168(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10927(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_30
.LBB2_29:                               # %.lr.ph9
                                        # =>This Inner Loop Header: Depth=1
	movabsq	$0, %rax
	leaq	.L.str6177, %rcx
	movabsq	$24601, %rdx            # imm = 0x6019
	movabsq	$64, %rsi
	movabsq	$1, %rdi
	leaq	.L.str1194, %r8
	leaq	.L.str1195, %r9
	movabsq	$2, %r10
	leaq	.L.str1192, %r11
	leaq	.L.str1193, %rbx
	leaq	.L.str1190, %r14
	leaq	.L.str1191, %r15
	leaq	.L.str1188, %r12
	leaq	.L.str1189, %r13
	movabsq	$3, %rbp
	movq	%rax, 10912(%rsp)       # 8-byte Spill
	leaq	strtok, %rax
	movq	%rax, 10904(%rsp)       # 8-byte Spill
	leaq	.L.str1186, %rax
	movq	%rax, 10896(%rsp)       # 8-byte Spill
	leaq	.L.str1187, %rax
	movq	%rax, 10888(%rsp)       # 8-byte Spill
	movabsq	$175, %rax
	movq	%rax, 10880(%rsp)       # 8-byte Spill
	leaq	.L.str1183, %rax
	movq	%rax, 10872(%rsp)       # 8-byte Spill
	leaq	.L.str1184, %rax
	movq	%rax, 10864(%rsp)       # 8-byte Spill
	leaq	.L.str1185, %rax
	movq	%rax, 10856(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 10848(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 10844(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 10832(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10824(%rsp)       # 8-byte Spill
	leaq	.L.str1181, %rax
	movq	%rax, 10816(%rsp)       # 8-byte Spill
	leaq	.L.str1182, %rax
	movq	%rax, 10808(%rsp)       # 8-byte Spill
	leaq	.L.str1179, %rax
	movq	%rax, 10800(%rsp)       # 8-byte Spill
	leaq	.L.str1180, %rax
	movq	%rax, 10792(%rsp)       # 8-byte Spill
	leaq	25564(%rsp), %rax
	movq	%rax, 10784(%rsp)       # 8-byte Spill
	leaq	.L.str1176, %rax
	movq	%rax, 10776(%rsp)       # 8-byte Spill
	leaq	.L.str1177, %rax
	movq	%rax, 10768(%rsp)       # 8-byte Spill
	leaq	.L.str1178, %rax
	movq	%rax, 10760(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 10752(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 10744(%rsp)       # 8-byte Spill
	leaq	.L.str1174, %rax
	movq	%rax, 10736(%rsp)       # 8-byte Spill
	leaq	.L.str1175, %rax
	movq	%rax, 10728(%rsp)       # 8-byte Spill
	leaq	.L.str1172343, %rax
	movq	%rax, 10720(%rsp)       # 8-byte Spill
	leaq	.L.str1173, %rax
	movq	%rax, 10712(%rsp)       # 8-byte Spill
	leaq	.L.str1170, %rax
	movq	%rax, 10704(%rsp)       # 8-byte Spill
	leaq	.L.str1171, %rax
	movq	%rax, 10696(%rsp)       # 8-byte Spill
	leaq	.L.str1167, %rax
	movq	%rax, 10688(%rsp)       # 8-byte Spill
	leaq	.L.str1168, %rax
	movq	%rax, 10680(%rsp)       # 8-byte Spill
	leaq	.L.str1169, %rax
	movq	%rax, 10672(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 10664(%rsp)       # 8-byte Spill
	leaq	.L.str1165, %rax
	movq	%rax, 10656(%rsp)       # 8-byte Spill
	leaq	.L.str1166, %rax
	movq	%rax, 10648(%rsp)       # 8-byte Spill
	leaq	.L.str1163, %rax
	movq	%rax, 10640(%rsp)       # 8-byte Spill
	leaq	.L.str1164, %rax
	movq	%rax, 10632(%rsp)       # 8-byte Spill
	leaq	.L.str1160, %rax
	movq	%rax, 10624(%rsp)       # 8-byte Spill
	leaq	.L.str1161, %rax
	movq	%rax, 10616(%rsp)       # 8-byte Spill
	leaq	.L.str1162, %rax
	movq	%rax, 10608(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
.Ltmp129:
	#DEBUG_VALUE: main:numAttributes <- [RSP+10784]
	movq	%rax, 10600(%rsp)       # 8-byte Spill
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10592(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	10624(%rsp), %rax       # 8-byte Reload
	movl	%esi, 10588(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	10616(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 10576(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	10608(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10568(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10600(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10560(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	10844(%rsp), %eax       # 4-byte Reload
	movq	%r9, 10552(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 10544(%rsp)       # 8-byte Spill
	movq	%r12, 10536(%rsp)       # 8-byte Spill
	movq	%r13, 10528(%rsp)       # 8-byte Spill
	movq	%rbp, 10520(%rsp)       # 8-byte Spill
	movq	%r14, 10512(%rsp)       # 8-byte Spill
	movq	%rbx, 10504(%rsp)       # 8-byte Spill
	movq	%r10, 10496(%rsp)       # 8-byte Spill
	movq	%r11, 10488(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10592(%rsp), %rdi       # 8-byte Reload
	movq	10848(%rsp), %rsi       # 8-byte Reload
	movq	10784(%rsp), %rdx       # 8-byte Reload
	movq	10592(%rsp), %rcx       # 8-byte Reload
	movq	10640(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10632(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	10744(%rsp), %rdi       # 8-byte Reload
	movq	10824(%rsp), %rsi       # 8-byte Reload
	movq	10592(%rsp), %rcx       # 8-byte Reload
	movq	10656(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10648(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 10484(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10880(%rsp), %rdi       # 8-byte Reload
	movq	10688(%rsp), %rsi       # 8-byte Reload
	movq	10680(%rsp), %rdx       # 8-byte Reload
	movq	10672(%rsp), %rcx       # 8-byte Reload
	movq	10664(%rsp), %r8        # 8-byte Reload
	movl	10844(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10496(%rsp), %rdi       # 8-byte Reload
	movq	10824(%rsp), %rsi       # 8-byte Reload
	movq	10592(%rsp), %rdx       # 8-byte Reload
	movq	10912(%rsp), %rcx       # 8-byte Reload
	movq	10704(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10696(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10484(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	10592(%rsp), %rdi       # 8-byte Reload
	movq	10824(%rsp), %rsi       # 8-byte Reload
	movq	10592(%rsp), %rcx       # 8-byte Reload
	movq	10720(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10712(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10484(%rsp), %eax       # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	10744(%rsp), %rdi       # 8-byte Reload
	movq	10824(%rsp), %rsi       # 8-byte Reload
	movq	10592(%rsp), %rcx       # 8-byte Reload
	movq	10736(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10728(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 10480(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp130:
	#DEBUG_VALUE: main:numAttributes <- [RSP+10480]
	movq	10880(%rsp), %rdi       # 8-byte Reload
	movq	10776(%rsp), %rsi       # 8-byte Reload
	movq	10768(%rsp), %rdx       # 8-byte Reload
	movq	10760(%rsp), %rcx       # 8-byte Reload
	movq	10752(%rsp), %r8        # 8-byte Reload
	movl	10844(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10496(%rsp), %rdi       # 8-byte Reload
	movq	10848(%rsp), %rsi       # 8-byte Reload
	movq	10784(%rsp), %rdx       # 8-byte Reload
	movq	10592(%rsp), %rcx       # 8-byte Reload
	movq	10800(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10792(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10480(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	10592(%rsp), %rdi       # 8-byte Reload
	movq	10824(%rsp), %rsi       # 8-byte Reload
	movq	10592(%rsp), %rcx       # 8-byte Reload
	movq	10816(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10480(%rsp), %eax       # 4-byte Reload
	movl	%eax, 25564(%rsp)
	movq	10880(%rsp), %rdi       # 8-byte Reload
	movq	10872(%rsp), %rsi       # 8-byte Reload
	movq	10864(%rsp), %rdx       # 8-byte Reload
	movq	10856(%rsp), %rcx       # 8-byte Reload
	movq	10832(%rsp), %r8        # 8-byte Reload
	movl	10844(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10520(%rsp), %rdi       # 8-byte Reload
	movq	10848(%rsp), %rsi       # 8-byte Reload
	movq	10904(%rsp), %rdx       # 8-byte Reload
	movq	10592(%rsp), %rcx       # 8-byte Reload
	movq	10896(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10888(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10592(%rsp), %rdi       # 8-byte Reload
	movq	10848(%rsp), %rsi       # 8-byte Reload
	movq	10912(%rsp), %rdx       # 8-byte Reload
	movq	10912(%rsp), %rcx       # 8-byte Reload
	movq	10536(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10528(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10576(%rsp), %rdi       # 8-byte Reload
	movq	10848(%rsp), %rsi       # 8-byte Reload
	movq	10912(%rsp), %rdx       # 8-byte Reload
	movq	10592(%rsp), %rcx       # 8-byte Reload
	movq	10512(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10544(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10496(%rsp), %rdi       # 8-byte Reload
	movq	10848(%rsp), %rsi       # 8-byte Reload
	movq	10568(%rsp), %rdx       # 8-byte Reload
	movq	10912(%rsp), %rcx       # 8-byte Reload
	movq	10488(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10504(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10576(%rsp), %rdi       # 8-byte Reload
	movq	10848(%rsp), %rsi       # 8-byte Reload
	movq	10568(%rsp), %rdx       # 8-byte Reload
	movq	10592(%rsp), %rcx       # 8-byte Reload
	movq	10560(%rsp), %r8        # 8-byte Reload
	movq	10912(%rsp), %r9        # 8-byte Reload
	movq	10552(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10912(%rsp), %rdi       # 8-byte Reload
	movq	10568(%rsp), %rsi       # 8-byte Reload
	callq	strtok
	movabsq	$1, %rcx
	leaq	.L.str1214, %r8
	movabsq	$0, %rdx
	leaq	.L.str1215, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1212, %r9
	leaq	.L.str1213, %r10
	movabsq	$3, %r11
	leaq	.L.str1210, %rbx
	leaq	.L.str1211, %r14
	movabsq	$175, %r15
	leaq	.L.str1207, %r12
	leaq	.L.str1208, %r13
	leaq	.L.str1209, %rbp
	movq	%rsi, 10472(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 10468(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 10456(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 10448(%rsp)       # 8-byte Spill
	leaq	.L.str1205, %rax
	movq	%rax, 10440(%rsp)       # 8-byte Spill
	leaq	.L.str1206, %rax
	movq	%rax, 10432(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 10424(%rsp)       # 8-byte Spill
	leaq	.L.str1203, %rax
	movq	%rax, 10416(%rsp)       # 8-byte Spill
	leaq	.L.str1204, %rax
	movq	%rax, 10408(%rsp)       # 8-byte Spill
	leaq	.L.str1201, %rax
	movq	%rax, 10400(%rsp)       # 8-byte Spill
	leaq	.L.str1202, %rax
	movq	%rax, 10392(%rsp)       # 8-byte Spill
	leaq	.L.str1198, %rax
	movq	%rax, 10384(%rsp)       # 8-byte Spill
	leaq	.L.str1199, %rax
	movq	%rax, 10376(%rsp)       # 8-byte Spill
	leaq	.L.str1200, %rax
	movq	%rax, 10368(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 10360(%rsp)       # 8-byte Spill
	leaq	.L.str1196, %rax
	movq	%rax, 10352(%rsp)       # 8-byte Spill
	leaq	.L.str1197, %rax
	movq	%rax, 10344(%rsp)       # 8-byte Spill
	movq	10448(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10336(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	10424(%rsp), %rax       # 8-byte Reload
	movl	%esi, 10332(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	10456(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 10320(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 10312(%rsp)       # 8-byte Spill
	movq	10352(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10304(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	10320(%rsp), %rax       # 8-byte Reload
	movq	%r9, 10296(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	10344(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 10288(%rsp)       # 8-byte Spill
	movq	%r14, 10280(%rsp)       # 8-byte Spill
	movq	%r12, 10272(%rsp)       # 8-byte Spill
	movq	%r13, 10264(%rsp)       # 8-byte Spill
	movq	%rbp, 10256(%rsp)       # 8-byte Spill
	movq	%rbx, 10248(%rsp)       # 8-byte Spill
	movq	%r10, 10240(%rsp)       # 8-byte Spill
	movq	%r11, 10232(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	10288(%rsp), %rdi       # 8-byte Reload
	movq	10384(%rsp), %rsi       # 8-byte Reload
	movq	10376(%rsp), %rdx       # 8-byte Reload
	movq	10368(%rsp), %rcx       # 8-byte Reload
	movq	10360(%rsp), %r8        # 8-byte Reload
	movl	10468(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10336(%rsp), %rdi       # 8-byte Reload
	movq	10424(%rsp), %rsi       # 8-byte Reload
	movq	10320(%rsp), %rdx       # 8-byte Reload
	movq	10320(%rsp), %rcx       # 8-byte Reload
	movq	10400(%rsp), %r8        # 8-byte Reload
	movq	10320(%rsp), %r9        # 8-byte Reload
	movq	10392(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10312(%rsp), %rdi       # 8-byte Reload
	movq	10424(%rsp), %rsi       # 8-byte Reload
	movq	10456(%rsp), %rdx       # 8-byte Reload
	movq	10312(%rsp), %rcx       # 8-byte Reload
	movq	10416(%rsp), %r8        # 8-byte Reload
	movq	10320(%rsp), %r9        # 8-byte Reload
	movq	10408(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10456(%rsp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	10448(%rsp), %rdi       # 8-byte Reload
	movq	10312(%rsp), %rsi       # 8-byte Reload
	movq	10312(%rsp), %rcx       # 8-byte Reload
	movq	10440(%rsp), %r8        # 8-byte Reload
	movq	10320(%rsp), %r9        # 8-byte Reload
	movq	10432(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10231(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10288(%rsp), %rdi       # 8-byte Reload
	movq	10272(%rsp), %rsi       # 8-byte Reload
	movq	10264(%rsp), %rdx       # 8-byte Reload
	movq	10256(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movl	10468(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10232(%rsp), %rdi       # 8-byte Reload
	movq	10320(%rsp), %rsi       # 8-byte Reload
	movq	10320(%rsp), %rdx       # 8-byte Reload
	movq	10312(%rsp), %rcx       # 8-byte Reload
	movq	10248(%rsp), %r8        # 8-byte Reload
	movq	10320(%rsp), %r9        # 8-byte Reload
	movq	10280(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10336(%rsp), %rdi       # 8-byte Reload
	movq	10320(%rsp), %rsi       # 8-byte Reload
	movq	10320(%rsp), %rdx       # 8-byte Reload
	movq	10312(%rsp), %rcx       # 8-byte Reload
	movq	10296(%rsp), %r8        # 8-byte Reload
	movq	10320(%rsp), %r9        # 8-byte Reload
	movq	10240(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10231(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	10312(%rsp), %rdi       # 8-byte Reload
	movq	10312(%rsp), %rsi       # 8-byte Reload
	movq	10312(%rsp), %rcx       # 8-byte Reload
	movq	10304(%rsp), %r8        # 8-byte Reload
	movq	10320(%rsp), %r9        # 8-byte Reload
	movq	10472(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10231(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_30
	jmp	.LBB2_29
.Ltmp131:
.LBB2_30:                               # %.loopexit8
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str1262, %r8
	movabsq	$0, %rdx
	leaq	.L.str1263, %rsi
	leaq	.L.str1260, %r9
	leaq	.L.str1261, %r10
	movabsq	$2, %r11
	leaq	malloc, %rbx
	leaq	.L.str1258, %r14
	leaq	.L.str1259, %r15
	movabsq	$182, %r12
	leaq	.L.str1255, %r13
	leaq	.L.str1256, %rbp
	movq	%rax, 10216(%rsp)       # 8-byte Spill
	leaq	.L.str1257, %rax
	movq	%rax, 10208(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 10200(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 10196(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 10184(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 10176(%rsp)       # 8-byte Spill
	leaq	.L.str1253, %rax
	movq	%rax, 10168(%rsp)       # 8-byte Spill
	leaq	.L.str1254, %rax
	movq	%rax, 10160(%rsp)       # 8-byte Spill
	leaq	.L.str1251, %rax
	movq	%rax, 10152(%rsp)       # 8-byte Spill
	leaq	.L.str1252, %rax
	movq	%rax, 10144(%rsp)       # 8-byte Spill
	leaq	.L.str1249, %rax
	movq	%rax, 10136(%rsp)       # 8-byte Spill
	leaq	.L.str1250, %rax
	movq	%rax, 10128(%rsp)       # 8-byte Spill
	leaq	.L.str1246, %rax
	movq	%rax, 10120(%rsp)       # 8-byte Spill
	leaq	.L.str1247, %rax
	movq	%rax, 10112(%rsp)       # 8-byte Spill
	leaq	.L.str1248, %rax
	movq	%rax, 10104(%rsp)       # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 10096(%rsp)       # 8-byte Spill
	leaq	.L.str1244, %rax
	movq	%rax, 10088(%rsp)       # 8-byte Spill
	leaq	.L.str1245, %rax
	movq	%rax, 10080(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10072(%rsp)       # 8-byte Spill
	leaq	.L.str1242, %rax
	movq	%rax, 10064(%rsp)       # 8-byte Spill
	leaq	.L.str1243, %rax
	movq	%rax, 10056(%rsp)       # 8-byte Spill
	leaq	.L.str1239, %rax
	movq	%rax, 10048(%rsp)       # 8-byte Spill
	leaq	.L.str1240, %rax
	movq	%rax, 10040(%rsp)       # 8-byte Spill
	leaq	.L.str1241, %rax
	movq	%rax, 10032(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 10024(%rsp)       # 8-byte Spill
	leaq	.L.str1237, %rax
	movq	%rax, 10016(%rsp)       # 8-byte Spill
	leaq	.L.str1238, %rax
	movq	%rax, 10008(%rsp)       # 8-byte Spill
	leaq	.L.str1235, %rax
	movq	%rax, 10000(%rsp)       # 8-byte Spill
	leaq	.L.str1236, %rax
	movq	%rax, 9992(%rsp)        # 8-byte Spill
	leaq	.L.str1233, %rax
	movq	%rax, 9984(%rsp)        # 8-byte Spill
	leaq	.L.str1234, %rax
	movq	%rax, 9976(%rsp)        # 8-byte Spill
	leaq	.L.str1230, %rax
	movq	%rax, 9968(%rsp)        # 8-byte Spill
	leaq	.L.str1231, %rax
	movq	%rax, 9960(%rsp)        # 8-byte Spill
	leaq	.L.str1232, %rax
	movq	%rax, 9952(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 9944(%rsp)        # 8-byte Spill
	leaq	.L.str1228, %rax
	movq	%rax, 9936(%rsp)        # 8-byte Spill
	leaq	.L.str1229, %rax
	movq	%rax, 9928(%rsp)        # 8-byte Spill
	leaq	.L.str1226, %rax
	movq	%rax, 9920(%rsp)        # 8-byte Spill
	leaq	.L.str1227, %rax
	movq	%rax, 9912(%rsp)        # 8-byte Spill
	leaq	25564(%rsp), %rax
	movq	%rax, 9904(%rsp)        # 8-byte Spill
	leaq	.L.str1223, %rax
	movq	%rax, 9896(%rsp)        # 8-byte Spill
	leaq	.L.str1224, %rax
	movq	%rax, 9888(%rsp)        # 8-byte Spill
	leaq	.L.str1225, %rax
	movq	%rax, 9880(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 9872(%rsp)        # 8-byte Spill
	leaq	.L.str1221, %rax
	movq	%rax, 9864(%rsp)        # 8-byte Spill
	leaq	.L.str1222, %rax
	movq	%rax, 9856(%rsp)        # 8-byte Spill
	leaq	.L.str1219, %rax
	movq	%rax, 9848(%rsp)        # 8-byte Spill
	leaq	.L.str1220, %rax
	movq	%rax, 9840(%rsp)        # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 9832(%rsp)        # 8-byte Spill
	leaq	.L.str1216, %rax
	movq	%rax, 9824(%rsp)        # 8-byte Spill
	leaq	.L.str1217, %rax
	movq	%rax, 9816(%rsp)        # 8-byte Spill
	leaq	.L.str1218, %rax
.Ltmp132:
	#DEBUG_VALUE: main:numObjects <- [RSP+9832]
	.loc	3 182 0                 # kmeans.c:182:0
	movq	%rdi, 9808(%rsp)        # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 9800(%rsp)        # 8-byte Spill
	movq	9824(%rsp), %rax        # 8-byte Reload
	movl	%esi, 9796(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	9816(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 9784(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	9800(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9776(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9872(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9768(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	10196(%rsp), %eax       # 4-byte Reload
	movq	%r9, 9760(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 9752(%rsp)        # 8-byte Spill
	movq	%r15, 9744(%rsp)        # 8-byte Spill
	movq	%r14, 9736(%rsp)        # 8-byte Spill
	movq	%r12, 9728(%rsp)        # 8-byte Spill
	movq	%r13, 9720(%rsp)        # 8-byte Spill
	movq	%rbx, 9712(%rsp)        # 8-byte Spill
	movq	%r10, 9704(%rsp)        # 8-byte Spill
	movq	%r11, 9696(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9776(%rsp), %rdi        # 8-byte Reload
	movq	10216(%rsp), %rsi       # 8-byte Reload
	movq	9832(%rsp), %rdx        # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	9848(%rsp), %r8         # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	9840(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	10176(%rsp), %rdi       # 8-byte Reload
	movq	10072(%rsp), %rsi       # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	9864(%rsp), %r8         # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	9856(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 9692(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp133:
	#DEBUG_VALUE: main:numAttributes <- [RSP+9904]
	movq	9728(%rsp), %rdi        # 8-byte Reload
	movq	9896(%rsp), %rsi        # 8-byte Reload
	movq	9888(%rsp), %rdx        # 8-byte Reload
	movq	9880(%rsp), %rcx        # 8-byte Reload
	movq	9872(%rsp), %r8         # 8-byte Reload
	movl	10196(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9776(%rsp), %rdi        # 8-byte Reload
	movq	10216(%rsp), %rsi       # 8-byte Reload
	movq	9904(%rsp), %rdx        # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	9920(%rsp), %r8         # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	9912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	10176(%rsp), %rdi       # 8-byte Reload
	movq	10072(%rsp), %rsi       # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	9936(%rsp), %r8         # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 9688(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9728(%rsp), %rdi        # 8-byte Reload
	movq	9968(%rsp), %rsi        # 8-byte Reload
	movq	9960(%rsp), %rdx        # 8-byte Reload
	movq	9952(%rsp), %rcx        # 8-byte Reload
	movq	9944(%rsp), %r8         # 8-byte Reload
	movl	10196(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9692(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	9696(%rsp), %rdi        # 8-byte Reload
	movq	10072(%rsp), %rsi       # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	9984(%rsp), %r8         # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	9976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9688(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9776(%rsp), %rdi        # 8-byte Reload
	movq	10072(%rsp), %rsi       # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	10000(%rsp), %r8        # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	9992(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9688(%rsp), %eax        # 4-byte Reload
	movl	9692(%rsp), %esi        # 4-byte Reload
	imull	%esi, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	10176(%rsp), %rdi       # 8-byte Reload
	movq	10072(%rsp), %rsi       # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	10016(%rsp), %r8        # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	10008(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 9684(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9728(%rsp), %rdi        # 8-byte Reload
	movq	10048(%rsp), %rsi       # 8-byte Reload
	movq	10040(%rsp), %rdx       # 8-byte Reload
	movq	10032(%rsp), %rcx       # 8-byte Reload
	movq	10024(%rsp), %r8        # 8-byte Reload
	movl	10196(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9684(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	9776(%rsp), %rdi        # 8-byte Reload
	movq	10072(%rsp), %rsi       # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	10064(%rsp), %r8        # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	10056(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9684(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	10176(%rsp), %rdi       # 8-byte Reload
	movq	10216(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	9776(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 9672(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	10088(%rsp), %r8        # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	10080(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9728(%rsp), %rdi        # 8-byte Reload
	movq	10120(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10104(%rsp), %rcx       # 8-byte Reload
	movq	10096(%rsp), %r8        # 8-byte Reload
	movl	10196(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9696(%rsp), %rdi        # 8-byte Reload
	movq	10216(%rsp), %rsi       # 8-byte Reload
	movq	9696(%rsp), %rdx        # 8-byte Reload
	movq	9784(%rsp), %rcx        # 8-byte Reload
	movq	10136(%rsp), %r8        # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	10128(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9776(%rsp), %rdi        # 8-byte Reload
	movq	10216(%rsp), %rsi       # 8-byte Reload
	movq	9672(%rsp), %rdx        # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	10152(%rsp), %r8        # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	10144(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9672(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	10176(%rsp), %rdi       # 8-byte Reload
	movq	10216(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	9776(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 9664(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	10168(%rsp), %r8        # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	10160(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9728(%rsp), %rdi        # 8-byte Reload
	movq	9720(%rsp), %rsi        # 8-byte Reload
	movq	9752(%rsp), %rdx        # 8-byte Reload
	movq	10208(%rsp), %rcx       # 8-byte Reload
	movq	10184(%rsp), %r8        # 8-byte Reload
	movl	10196(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9696(%rsp), %rdi        # 8-byte Reload
	movq	10216(%rsp), %rsi       # 8-byte Reload
	movq	9712(%rsp), %rdx        # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	9736(%rsp), %r8         # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	9744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9776(%rsp), %rdi        # 8-byte Reload
	movq	10216(%rsp), %rsi       # 8-byte Reload
	movq	9664(%rsp), %rdx        # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	9760(%rsp), %r8         # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	9704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9808(%rsp), %rdi        # 8-byte Reload
	movq	10216(%rsp), %rsi       # 8-byte Reload
	movq	9664(%rsp), %rdx        # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	9768(%rsp), %r8         # 8-byte Reload
	movq	9784(%rsp), %r9         # 8-byte Reload
	movq	10200(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9664(%rsp), %rdi        # 8-byte Reload
	callq	malloc
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str1303, %r8
	movabsq	$0, %rsi
	leaq	.L.str1304, %r9
	leaq	.L.str1301, %r10
	leaq	.L.str1302, %r11
	movabsq	$2, %rbx
	leaq	malloc, %r14
	leaq	.L.str1299, %r15
	leaq	.L.str1300, %r12
	movabsq	$183, %r13
	leaq	.L.str1296, %rbp
	movq	%rax, 9656(%rsp)        # 8-byte Spill
	leaq	.L.str1297, %rax
	movq	%rax, 9648(%rsp)        # 8-byte Spill
	leaq	.L.str1298, %rax
	movq	%rax, 9640(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 9632(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 9628(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 9616(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 9608(%rsp)        # 8-byte Spill
	leaq	.L.str1294, %rax
	movq	%rax, 9600(%rsp)        # 8-byte Spill
	leaq	.L.str1295, %rax
	movq	%rax, 9592(%rsp)        # 8-byte Spill
	leaq	.L.str1292, %rax
	movq	%rax, 9584(%rsp)        # 8-byte Spill
	leaq	.L.str1293, %rax
	movq	%rax, 9576(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 9568(%rsp)        # 8-byte Spill
	leaq	.L.str1290, %rax
	movq	%rax, 9560(%rsp)        # 8-byte Spill
	leaq	.L.str1291, %rax
	movq	%rax, 9552(%rsp)        # 8-byte Spill
	leaq	.L.str1287, %rax
	movq	%rax, 9544(%rsp)        # 8-byte Spill
	leaq	.L.str1288, %rax
	movq	%rax, 9536(%rsp)        # 8-byte Spill
	leaq	.L.str1289, %rax
	movq	%rax, 9528(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 9520(%rsp)        # 8-byte Spill
	leaq	.L.str1285, %rax
	movq	%rax, 9512(%rsp)        # 8-byte Spill
	leaq	.L.str1286, %rax
	movq	%rax, 9504(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9496(%rsp)        # 8-byte Spill
	leaq	.L.str1283, %rax
	movq	%rax, 9488(%rsp)        # 8-byte Spill
	leaq	.L.str1284, %rax
	movq	%rax, 9480(%rsp)        # 8-byte Spill
	leaq	.L.str1280, %rax
	movq	%rax, 9472(%rsp)        # 8-byte Spill
	leaq	.L.str1281, %rax
	movq	%rax, 9464(%rsp)        # 8-byte Spill
	leaq	.L.str1282, %rax
	movq	%rax, 9456(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 9448(%rsp)        # 8-byte Spill
	leaq	.L.str1278, %rax
	movq	%rax, 9440(%rsp)        # 8-byte Spill
	leaq	.L.str1279, %rax
	movq	%rax, 9432(%rsp)        # 8-byte Spill
	leaq	.L.str1276, %rax
	movq	%rax, 9424(%rsp)        # 8-byte Spill
	leaq	.L.str1277, %rax
	movq	%rax, 9416(%rsp)        # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 9408(%rsp)        # 8-byte Spill
	leaq	.L.str1273, %rax
	movq	%rax, 9400(%rsp)        # 8-byte Spill
	leaq	.L.str1274, %rax
	movq	%rax, 9392(%rsp)        # 8-byte Spill
	leaq	.L.str1275, %rax
	movq	%rax, 9384(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 9376(%rsp)        # 8-byte Spill
	leaq	.L.str1271, %rax
	movq	%rax, 9368(%rsp)        # 8-byte Spill
	leaq	.L.str1272, %rax
	movq	%rax, 9360(%rsp)        # 8-byte Spill
	leaq	.L.str1269, %rax
	movq	%rax, 9352(%rsp)        # 8-byte Spill
	leaq	.L.str1270, %rax
	movq	%rax, 9344(%rsp)        # 8-byte Spill
	movabsq	$182, %rax
	movq	%rax, 9336(%rsp)        # 8-byte Spill
	leaq	.L.str1266, %rax
	movq	%rax, 9328(%rsp)        # 8-byte Spill
	leaq	.L.str1267, %rax
	movq	%rax, 9320(%rsp)        # 8-byte Spill
	leaq	.L.str1268, %rax
	movq	%rax, 9312(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 9304(%rsp)        # 8-byte Spill
	leaq	.L.str1264, %rax
	movq	%rax, 9296(%rsp)        # 8-byte Spill
	leaq	.L.str1265, %rax
	movq	%rax, 9288(%rsp)        # 8-byte Spill
	movq	9608(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9280(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 9276(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	9656(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 9264(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	9264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9256(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9296(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9248(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	9632(%rsp), %rax        # 8-byte Reload
	movq	%r9, 9240(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	9288(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 9232(%rsp)        # 8-byte Spill
	movq	%r15, 9224(%rsp)        # 8-byte Spill
	movq	%r12, 9216(%rsp)        # 8-byte Spill
	movq	%r14, 9208(%rsp)        # 8-byte Spill
	movq	%r13, 9200(%rsp)        # 8-byte Spill
	movq	%rbx, 9192(%rsp)        # 8-byte Spill
	movq	%r10, 9184(%rsp)        # 8-byte Spill
	movq	%r11, 9176(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9336(%rsp), %rdi        # 8-byte Reload
	movq	9328(%rsp), %rsi        # 8-byte Reload
	movq	9320(%rsp), %rdx        # 8-byte Reload
	movq	9312(%rsp), %rcx        # 8-byte Reload
	movq	9304(%rsp), %r8         # 8-byte Reload
	movl	9628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9352(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	movq	9608(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9368(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9360(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9168(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp134:
	#DEBUG_VALUE: main:buf <- [RSP+9168]
	#DEBUG_VALUE: main:numObjects <- [RSP+9408]
	.loc	3 183 0                 # kmeans.c:183:0
	movq	9200(%rsp), %rdi        # 8-byte Reload
	movq	9400(%rsp), %rsi        # 8-byte Reload
	movq	9392(%rsp), %rdx        # 8-byte Reload
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	9376(%rsp), %r8         # 8-byte Reload
	movl	9628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9408(%rsp), %rdx        # 8-byte Reload
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9424(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9416(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	9608(%rsp), %rdi        # 8-byte Reload
	movq	9496(%rsp), %rax        # 8-byte Reload
	movl	%esi, 9164(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9440(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9200(%rsp), %rdi        # 8-byte Reload
	movq	9472(%rsp), %rsi        # 8-byte Reload
	movq	9464(%rsp), %rdx        # 8-byte Reload
	movq	9456(%rsp), %rcx        # 8-byte Reload
	movq	9448(%rsp), %r8         # 8-byte Reload
	movl	9628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9164(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9496(%rsp), %rsi        # 8-byte Reload
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9488(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9480(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9164(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	9608(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9512(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9152(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9200(%rsp), %rdi        # 8-byte Reload
	movq	9544(%rsp), %rsi        # 8-byte Reload
	movq	9536(%rsp), %rdx        # 8-byte Reload
	movq	9528(%rsp), %rcx        # 8-byte Reload
	movq	9520(%rsp), %r8         # 8-byte Reload
	movl	9628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9568(%rsp), %rdx        # 8-byte Reload
	movq	9632(%rsp), %rcx        # 8-byte Reload
	movq	9560(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9152(%rsp), %rdx        # 8-byte Reload
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9584(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9576(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9152(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9608(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9200(%rsp), %rdi        # 8-byte Reload
	movq	9232(%rsp), %rsi        # 8-byte Reload
	movq	9648(%rsp), %rdx        # 8-byte Reload
	movq	9640(%rsp), %rcx        # 8-byte Reload
	movq	9616(%rsp), %r8         # 8-byte Reload
	movl	9628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9224(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9144(%rsp), %rdx        # 8-byte Reload
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9184(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9280(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9144(%rsp), %rdx        # 8-byte Reload
	movq	9264(%rsp), %rcx        # 8-byte Reload
	movq	9248(%rsp), %r8         # 8-byte Reload
	movq	9632(%rsp), %r9         # 8-byte Reload
	movq	9240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9144(%rsp), %rdi        # 8-byte Reload
	callq	malloc
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str1360, %r8
	movabsq	$0, %rsi
	leaq	.L.str1361, %r9
	leaq	.L.str1358, %r10
	leaq	.L.str1359, %r11
	movabsq	$2, %rbx
	leaq	malloc, %r14
	leaq	.L.str1356, %r15
	leaq	.L.str1357, %r12
	movabsq	$184, %r13
	leaq	.L.str1353, %rbp
	movq	%rax, 9136(%rsp)        # 8-byte Spill
	leaq	.L.str1354, %rax
	movq	%rax, 9128(%rsp)        # 8-byte Spill
	leaq	.L.str1355, %rax
	movq	%rax, 9120(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 9112(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 9108(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 9096(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 9088(%rsp)        # 8-byte Spill
	leaq	.L.str1351, %rax
	movq	%rax, 9080(%rsp)        # 8-byte Spill
	leaq	.L.str1352, %rax
	movq	%rax, 9072(%rsp)        # 8-byte Spill
	leaq	.L.str1349, %rax
	movq	%rax, 9064(%rsp)        # 8-byte Spill
	leaq	.L.str1350, %rax
	movq	%rax, 9056(%rsp)        # 8-byte Spill
	leaq	.L.str1347, %rax
	movq	%rax, 9048(%rsp)        # 8-byte Spill
	leaq	.L.str1348, %rax
	movq	%rax, 9040(%rsp)        # 8-byte Spill
	leaq	.L.str1344, %rax
	movq	%rax, 9032(%rsp)        # 8-byte Spill
	leaq	.L.str1345, %rax
	movq	%rax, 9024(%rsp)        # 8-byte Spill
	leaq	.L.str1346, %rax
	movq	%rax, 9016(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 9008(%rsp)        # 8-byte Spill
	leaq	.L.str1342, %rax
	movq	%rax, 9000(%rsp)        # 8-byte Spill
	leaq	.L.str1343, %rax
	movq	%rax, 8992(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8984(%rsp)        # 8-byte Spill
	leaq	.L.str1340, %rax
	movq	%rax, 8976(%rsp)        # 8-byte Spill
	leaq	.L.str1341, %rax
	movq	%rax, 8968(%rsp)        # 8-byte Spill
	leaq	.L.str1337, %rax
	movq	%rax, 8960(%rsp)        # 8-byte Spill
	leaq	.L.str1338, %rax
	movq	%rax, 8952(%rsp)        # 8-byte Spill
	leaq	.L.str1339, %rax
	movq	%rax, 8944(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 8936(%rsp)        # 8-byte Spill
	leaq	.L.str1335, %rax
	movq	%rax, 8928(%rsp)        # 8-byte Spill
	leaq	.L.str1336, %rax
	movq	%rax, 8920(%rsp)        # 8-byte Spill
	leaq	.L.str1333, %rax
	movq	%rax, 8912(%rsp)        # 8-byte Spill
	leaq	.L.str1334, %rax
	movq	%rax, 8904(%rsp)        # 8-byte Spill
	leaq	.L.str1331, %rax
	movq	%rax, 8896(%rsp)        # 8-byte Spill
	leaq	.L.str1332, %rax
	movq	%rax, 8888(%rsp)        # 8-byte Spill
	leaq	.L.str1328, %rax
	movq	%rax, 8880(%rsp)        # 8-byte Spill
	leaq	.L.str1329, %rax
	movq	%rax, 8872(%rsp)        # 8-byte Spill
	leaq	.L.str1330, %rax
	movq	%rax, 8864(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 8856(%rsp)        # 8-byte Spill
	leaq	.L.str1326, %rax
	movq	%rax, 8848(%rsp)        # 8-byte Spill
	leaq	.L.str1327, %rax
	movq	%rax, 8840(%rsp)        # 8-byte Spill
	leaq	.L.str1324, %rax
	movq	%rax, 8832(%rsp)        # 8-byte Spill
	leaq	.L.str1325, %rax
	movq	%rax, 8824(%rsp)        # 8-byte Spill
	leaq	25564(%rsp), %rax
	movq	%rax, 8816(%rsp)        # 8-byte Spill
	leaq	.L.str1321, %rax
	movq	%rax, 8808(%rsp)        # 8-byte Spill
	leaq	.L.str1322, %rax
	movq	%rax, 8800(%rsp)        # 8-byte Spill
	leaq	.L.str1323, %rax
	movq	%rax, 8792(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 8784(%rsp)        # 8-byte Spill
	leaq	.L.str1319, %rax
	movq	%rax, 8776(%rsp)        # 8-byte Spill
	leaq	.L.str1320, %rax
	movq	%rax, 8768(%rsp)        # 8-byte Spill
	leaq	.L.str1317, %rax
	movq	%rax, 8760(%rsp)        # 8-byte Spill
	leaq	.L.str1318, %rax
	movq	%rax, 8752(%rsp)        # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 8744(%rsp)        # 8-byte Spill
	leaq	.L.str1314, %rax
	movq	%rax, 8736(%rsp)        # 8-byte Spill
	leaq	.L.str1315, %rax
	movq	%rax, 8728(%rsp)        # 8-byte Spill
	leaq	.L.str1316, %rax
	movq	%rax, 8720(%rsp)        # 8-byte Spill
	leaq	.L.str1312, %rax
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	leaq	.L.str1313, %rax
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	leaq	.L.str1310, %rax
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	leaq	.L.str1311, %rax
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movabsq	$183, %rax
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	leaq	.L.str1307, %rax
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	leaq	.L.str1308, %rax
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	leaq	.L.str1309, %rax
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	leaq	.L.str1305, %rax
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	leaq	.L.str1306, %rax
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movq	9088(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8624(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 8620(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	9136(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 8608(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	8608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8600(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8640(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8592(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	9112(%rsp), %rax        # 8-byte Reload
	movq	%r9, 8584(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 8576(%rsp)        # 8-byte Spill
	movq	%r15, 8568(%rsp)        # 8-byte Spill
	movq	%r12, 8560(%rsp)        # 8-byte Spill
	movq	%r14, 8552(%rsp)        # 8-byte Spill
	movq	%r13, 8544(%rsp)        # 8-byte Spill
	movq	%rbx, 8536(%rsp)        # 8-byte Spill
	movq	%r10, 8528(%rsp)        # 8-byte Spill
	movq	%r11, 8520(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8680(%rsp), %rdi        # 8-byte Reload
	movq	8672(%rsp), %rsi        # 8-byte Reload
	movq	8664(%rsp), %rdx        # 8-byte Reload
	movq	8656(%rsp), %rcx        # 8-byte Reload
	movq	8648(%rsp), %r8         # 8-byte Reload
	movl	9108(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	9136(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8696(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8688(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9136(%rsp), %rax        # 8-byte Reload
	movq	9088(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8712(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8512(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp135:
	#DEBUG_VALUE: main:attributes <- [RSP+8512]
	#DEBUG_VALUE: main:numObjects <- [RSP+8744]
	.loc	3 184 0                 # kmeans.c:184:0
	movq	8544(%rsp), %rdi        # 8-byte Reload
	movq	8736(%rsp), %rsi        # 8-byte Reload
	movq	8728(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movl	9108(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	8744(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8760(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	9088(%rsp), %rdi        # 8-byte Reload
	movq	8984(%rsp), %rax        # 8-byte Reload
	movl	%esi, 8508(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp136:
	#DEBUG_VALUE: main:numAttributes <- [RSP+8816]
	movq	8544(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8800(%rsp), %rdx        # 8-byte Reload
	movq	8792(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movl	9108(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	8816(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	9088(%rsp), %rdi        # 8-byte Reload
	movq	8984(%rsp), %rax        # 8-byte Reload
	movl	%esi, 8504(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8848(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8840(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8544(%rsp), %rdi        # 8-byte Reload
	movq	8880(%rsp), %rsi        # 8-byte Reload
	movq	8872(%rsp), %rdx        # 8-byte Reload
	movq	8864(%rsp), %rcx        # 8-byte Reload
	movq	8856(%rsp), %r8         # 8-byte Reload
	movl	9108(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8508(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	8536(%rsp), %rdi        # 8-byte Reload
	movq	8984(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8896(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8888(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8504(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8984(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8912(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8904(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8504(%rsp), %esi        # 4-byte Reload
	movl	8508(%rsp), %edi        # 4-byte Reload
	imull	%edi, %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	9088(%rsp), %rdi        # 8-byte Reload
	movq	8984(%rsp), %rax        # 8-byte Reload
	movl	%esi, 8500(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8928(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8920(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8544(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	8944(%rsp), %rcx        # 8-byte Reload
	movq	8936(%rsp), %r8         # 8-byte Reload
	movl	9108(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8500(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8984(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8976(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8968(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8500(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	9088(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	9000(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8992(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8488(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8544(%rsp), %rdi        # 8-byte Reload
	movq	9032(%rsp), %rsi        # 8-byte Reload
	movq	9024(%rsp), %rdx        # 8-byte Reload
	movq	9016(%rsp), %rcx        # 8-byte Reload
	movq	9008(%rsp), %r8         # 8-byte Reload
	movl	9108(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8536(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	8536(%rsp), %rdx        # 8-byte Reload
	movq	9112(%rsp), %rcx        # 8-byte Reload
	movq	9048(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	9040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	9064(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	9056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	9088(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	9072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8480(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8544(%rsp), %rdi        # 8-byte Reload
	movq	8576(%rsp), %rsi        # 8-byte Reload
	movq	9128(%rsp), %rdx        # 8-byte Reload
	movq	9120(%rsp), %rcx        # 8-byte Reload
	movq	9096(%rsp), %r8         # 8-byte Reload
	movl	9108(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8536(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	8552(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	8480(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8528(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8520(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8624(%rsp), %rdi        # 8-byte Reload
	movq	8600(%rsp), %rsi        # 8-byte Reload
	movq	8480(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8592(%rsp), %r8         # 8-byte Reload
	movq	9112(%rsp), %r9         # 8-byte Reload
	movq	8584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8480(%rsp), %rdi        # 8-byte Reload
	callq	malloc
	movabsq	$1, %rcx
	leaq	.L.str1401, %r8
	movabsq	$0, %rdx
	leaq	.L.str1402, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1399, %r9
	leaq	.L.str1400, %r10
	movabsq	$3, %r11
	leaq	.L.str1397, %rbx
	leaq	.L.str1398, %r14
	movabsq	$185, %r15
	leaq	.L.str1394, %r12
	leaq	.L.str1395, %r13
	leaq	.L.str1396, %rbp
	movq	%rsi, 8472(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 8468(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 8456(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 8448(%rsp)        # 8-byte Spill
	leaq	.L.str1392, %rax
	movq	%rax, 8440(%rsp)        # 8-byte Spill
	leaq	.L.str1393, %rax
	movq	%rax, 8432(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8424(%rsp)        # 8-byte Spill
	leaq	.L.str1390, %rax
	movq	%rax, 8416(%rsp)        # 8-byte Spill
	leaq	.L.str1391, %rax
	movq	%rax, 8408(%rsp)        # 8-byte Spill
	leaq	.L.str1388, %rax
	movq	%rax, 8400(%rsp)        # 8-byte Spill
	leaq	.L.str1389, %rax
	movq	%rax, 8392(%rsp)        # 8-byte Spill
	leaq	.L.str1385, %rax
	movq	%rax, 8384(%rsp)        # 8-byte Spill
	leaq	.L.str1386, %rax
	movq	%rax, 8376(%rsp)        # 8-byte Spill
	leaq	.L.str1387, %rax
	movq	%rax, 8368(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8360(%rsp)        # 8-byte Spill
	leaq	.L.str1383, %rax
	movq	%rax, 8352(%rsp)        # 8-byte Spill
	leaq	.L.str1384, %rax
	movq	%rax, 8344(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8336(%rsp)        # 8-byte Spill
	leaq	.L.str1381, %rax
	movq	%rax, 8328(%rsp)        # 8-byte Spill
	leaq	.L.str1382, %rax
	movq	%rax, 8320(%rsp)        # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 8312(%rsp)        # 8-byte Spill
	leaq	.L.str1378, %rax
	movq	%rax, 8304(%rsp)        # 8-byte Spill
	leaq	.L.str1379, %rax
	movq	%rax, 8296(%rsp)        # 8-byte Spill
	leaq	.L.str1380, %rax
	movq	%rax, 8288(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 8280(%rsp)        # 8-byte Spill
	leaq	.L.str1376, %rax
	movq	%rax, 8272(%rsp)        # 8-byte Spill
	leaq	.L.str1377, %rax
	movq	%rax, 8264(%rsp)        # 8-byte Spill
	leaq	.L.str1374, %rax
	movq	%rax, 8256(%rsp)        # 8-byte Spill
	leaq	.L.str1375, %rax
	movq	%rax, 8248(%rsp)        # 8-byte Spill
	movabsq	$184, %rax
	movq	%rax, 8240(%rsp)        # 8-byte Spill
	leaq	.L.str1371, %rax
	movq	%rax, 8232(%rsp)        # 8-byte Spill
	leaq	.L.str1372, %rax
	movq	%rax, 8224(%rsp)        # 8-byte Spill
	leaq	.L.str1373, %rax
	movq	%rax, 8216(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 8208(%rsp)        # 8-byte Spill
	leaq	.L.str1369, %rax
	movq	%rax, 8200(%rsp)        # 8-byte Spill
	leaq	.L.str1370, %rax
	movq	%rax, 8192(%rsp)        # 8-byte Spill
	leaq	.L.str1367, %rax
	movq	%rax, 8184(%rsp)        # 8-byte Spill
	leaq	.L.str1368, %rax
	movq	%rax, 8176(%rsp)        # 8-byte Spill
	leaq	.L.str1364, %rax
	movq	%rax, 8168(%rsp)        # 8-byte Spill
	leaq	.L.str1365, %rax
	movq	%rax, 8160(%rsp)        # 8-byte Spill
	leaq	.L.str1366, %rax
	movq	%rax, 8152(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 8144(%rsp)        # 8-byte Spill
	leaq	.L.str1362, %rax
	movq	%rax, 8136(%rsp)        # 8-byte Spill
	leaq	.L.str1363, %rax
	movq	%rax, 8128(%rsp)        # 8-byte Spill
	movq	8448(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8120(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	8336(%rsp), %rax        # 8-byte Reload
	movl	%esi, 8116(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	8456(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 8104(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 8096(%rsp)        # 8-byte Spill
	movq	8136(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8088(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	8104(%rsp), %rax        # 8-byte Reload
	movq	%r9, 8080(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	8128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 8072(%rsp)        # 8-byte Spill
	movq	%r14, 8064(%rsp)        # 8-byte Spill
	movq	%r12, 8056(%rsp)        # 8-byte Spill
	movq	%r13, 8048(%rsp)        # 8-byte Spill
	movq	%rbp, 8040(%rsp)        # 8-byte Spill
	movq	%rbx, 8032(%rsp)        # 8-byte Spill
	movq	%r10, 8024(%rsp)        # 8-byte Spill
	movq	%r11, 8016(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8240(%rsp), %rdi        # 8-byte Reload
	movq	8168(%rsp), %rsi        # 8-byte Reload
	movq	8160(%rsp), %rdx        # 8-byte Reload
	movq	8152(%rsp), %rcx        # 8-byte Reload
	movq	8144(%rsp), %r8         # 8-byte Reload
	movl	8468(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8096(%rsp), %rdi        # 8-byte Reload
	movq	8336(%rsp), %rsi        # 8-byte Reload
	movq	8456(%rsp), %rdx        # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8184(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8456(%rsp), %rax        # 8-byte Reload
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8336(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8200(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8008(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8240(%rsp), %rdi        # 8-byte Reload
	movq	8232(%rsp), %rsi        # 8-byte Reload
	movq	8224(%rsp), %rdx        # 8-byte Reload
	movq	8216(%rsp), %rcx        # 8-byte Reload
	movq	8208(%rsp), %r8         # 8-byte Reload
	movl	8468(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8120(%rsp), %rdi        # 8-byte Reload
	movq	8336(%rsp), %rsi        # 8-byte Reload
	movq	8512(%rsp), %rdx        # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8256(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8248(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8096(%rsp), %rdi        # 8-byte Reload
	movq	8336(%rsp), %rsi        # 8-byte Reload
	movq	8008(%rsp), %rdx        # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9136(%rsp), %rax        # 8-byte Reload
	movq	8008(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
.Ltmp137:
	#DEBUG_VALUE: main:i <- 1
	#DEBUG_VALUE: main:numObjects <- [RSP+8312]
	.loc	3 185 0                 # kmeans.c:185:0
	movq	8072(%rsp), %rdi        # 8-byte Reload
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	8296(%rsp), %rdx        # 8-byte Reload
	movq	8288(%rsp), %rcx        # 8-byte Reload
	movq	8280(%rsp), %r8         # 8-byte Reload
	movl	8468(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8096(%rsp), %rdi        # 8-byte Reload
	movq	8336(%rsp), %rsi        # 8-byte Reload
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8328(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8320(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8424(%rsp), %rax        # 8-byte Reload
	movl	%esi, 8004(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8352(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8344(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8072(%rsp), %rdi        # 8-byte Reload
	movq	8384(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8368(%rsp), %rcx        # 8-byte Reload
	movq	8360(%rsp), %r8         # 8-byte Reload
	movl	8468(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8120(%rsp), %rdi        # 8-byte Reload
	movq	8424(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	8104(%rsp), %rcx        # 8-byte Reload
	movq	8400(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8004(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	8096(%rsp), %rdi        # 8-byte Reload
	movq	8424(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8416(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8004(%rsp), %esi        # 4-byte Reload
	cmpl	$1, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8096(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8440(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8003(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8072(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8048(%rsp), %rdx        # 8-byte Reload
	movq	8040(%rsp), %rcx        # 8-byte Reload
	movq	8120(%rsp), %r8         # 8-byte Reload
	movl	8468(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8016(%rsp), %rdi        # 8-byte Reload
	movq	8104(%rsp), %rsi        # 8-byte Reload
	movq	8104(%rsp), %rdx        # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8120(%rsp), %rdi        # 8-byte Reload
	movq	8104(%rsp), %rsi        # 8-byte Reload
	movq	8104(%rsp), %rdx        # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8080(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8003(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	8096(%rsp), %rdi        # 8-byte Reload
	movq	8096(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	movq	8088(%rsp), %r8         # 8-byte Reload
	movq	8104(%rsp), %r9         # 8-byte Reload
	movq	8472(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8003(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_31
	jmp	.LBB2_33
.Ltmp138:
.LBB2_31:                               # %.lr.ph6
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str1427, %r8
	leaq	.L.str1428, %rdx
	movabsq	$185, %rsi
	leaq	.L.str1424, %rdi
	leaq	.L.str1425, %r9
	leaq	.L.str1426, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str1422, %r12
	leaq	.L.str1423, %r13
	movq	%rax, 7992(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 7984(%rsp)        # 8-byte Spill
	leaq	.L.str1420, %rax
	movq	%rax, 7976(%rsp)        # 8-byte Spill
	leaq	.L.str1421, %rax
	movq	%rax, 7968(%rsp)        # 8-byte Spill
	leaq	25560(%rsp), %rax
	movq	%rax, 7960(%rsp)        # 8-byte Spill
	leaq	.L.str1417, %rax
	movq	%rax, 7952(%rsp)        # 8-byte Spill
	leaq	.L.str1418, %rax
	movq	%rax, 7944(%rsp)        # 8-byte Spill
	leaq	.L.str1419, %rax
	movq	%rax, 7936(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7928(%rsp)        # 8-byte Spill
	leaq	.L.str1415, %rax
	movq	%rax, 7920(%rsp)        # 8-byte Spill
	leaq	.L.str1416, %rax
	movq	%rax, 7912(%rsp)        # 8-byte Spill
	leaq	.L.str1413, %rax
	movq	%rax, 7904(%rsp)        # 8-byte Spill
	leaq	.L.str1414, %rax
	movq	%rax, 7896(%rsp)        # 8-byte Spill
	movabsq	$186, %rax
	movq	%rax, 7888(%rsp)        # 8-byte Spill
	leaq	.L.str1410, %rax
	movq	%rax, 7880(%rsp)        # 8-byte Spill
	leaq	.L.str1411, %rax
	movq	%rax, 7872(%rsp)        # 8-byte Spill
	leaq	.L.str1412, %rax
	movq	%rax, 7864(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 7856(%rsp)        # 8-byte Spill
	leaq	.L.str1408, %rax
	movq	%rax, 7848(%rsp)        # 8-byte Spill
	leaq	.L.str1409, %rax
	movq	%rax, 7840(%rsp)        # 8-byte Spill
	leaq	.L.str1406, %rax
	movq	%rax, 7832(%rsp)        # 8-byte Spill
	leaq	.L.str1407, %rax
	movq	%rax, 7824(%rsp)        # 8-byte Spill
	leaq	25564(%rsp), %rax
	movq	%rax, 7816(%rsp)        # 8-byte Spill
	leaq	.L.str1403, %rax
	movq	%rax, 7808(%rsp)        # 8-byte Spill
	leaq	.L.str1404, %rax
	movq	%rax, 7800(%rsp)        # 8-byte Spill
	leaq	.L.str1405, %rax
.Ltmp139:
	#DEBUG_VALUE: main:numAttributes <- [RSP+7816]
	.loc	3 186 0                 # kmeans.c:186:0
	movq	%rax, 7792(%rsp)        # 8-byte Spill
	movq	7888(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7784(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	7808(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 7776(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	7800(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 7768(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	7792(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7760(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7928(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7752(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7744(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 7736(%rsp)        # 8-byte Spill
	movl	%ebp, 7732(%rsp)        # 4-byte Spill
	movq	%r15, 7720(%rsp)        # 8-byte Spill
	movq	%r12, 7712(%rsp)        # 8-byte Spill
	movq	%r13, 7704(%rsp)        # 8-byte Spill
	movl	%ebx, 7700(%rsp)        # 4-byte Spill
	movq	%r10, 7688(%rsp)        # 8-byte Spill
	movq	%r11, 7680(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7816(%rsp), %rdx        # 8-byte Reload
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	movq	7824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	7720(%rsp), %rsi        # 8-byte Reload
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7848(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	movq	7840(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 7676(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7888(%rsp), %rdi        # 8-byte Reload
	movq	7880(%rsp), %rsi        # 8-byte Reload
	movq	7872(%rsp), %rdx        # 8-byte Reload
	movq	7864(%rsp), %rcx        # 8-byte Reload
	movq	7856(%rsp), %r8         # 8-byte Reload
	movl	7700(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7676(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7720(%rsp), %rsi        # 8-byte Reload
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	movq	7896(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7676(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	3 185 0                 # kmeans.c:185:0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	movq	7912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7664(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp140:
	#DEBUG_VALUE: main:numObjects <- [RSP+7960]
	movq	7776(%rsp), %rdi        # 8-byte Reload
	movq	7952(%rsp), %rsi        # 8-byte Reload
	movq	7944(%rsp), %rdx        # 8-byte Reload
	movq	7936(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movl	7700(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7960(%rsp), %rdx        # 8-byte Reload
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7976(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	movq	7968(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	7720(%rsp), %rsi        # 8-byte Reload
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7712(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	movq	7704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 7660(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7776(%rsp), %rdi        # 8-byte Reload
	movq	7784(%rsp), %rsi        # 8-byte Reload
	movq	7744(%rsp), %rdx        # 8-byte Reload
	movq	7688(%rsp), %rcx        # 8-byte Reload
	movq	7680(%rsp), %r8         # 8-byte Reload
	movl	7700(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7760(%rsp), %rsi        # 8-byte Reload
	movq	7760(%rsp), %rdx        # 8-byte Reload
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	movq	7768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rax        # 8-byte Reload
	movq	%rax, 7648(%rsp)        # 8-byte Spill
.Ltmp141:
.LBB2_32:                               # =>This Inner Loop Header: Depth=1
	movq	7648(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1520, %r8
	movabsq	$0, %rdx
	leaq	.L.str1521, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1518, %r9
	leaq	.L.str1519, %r10
	movabsq	$3, %r11
	leaq	.L.str1516, %rbx
	leaq	.L.str1517, %r14
	movabsq	$185, %r15
	leaq	.L.str1513, %r12
	leaq	.L.str1514, %r13
	leaq	.L.str1515, %rbp
	movq	%rsi, 7640(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 7636(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 7624(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 7616(%rsp)        # 8-byte Spill
	leaq	.L.str1511, %rax
	movq	%rax, 7608(%rsp)        # 8-byte Spill
	leaq	.L.str1512, %rax
	movq	%rax, 7600(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 7592(%rsp)        # 8-byte Spill
	leaq	.L.str1509, %rax
	movq	%rax, 7584(%rsp)        # 8-byte Spill
	leaq	.L.str1510, %rax
	movq	%rax, 7576(%rsp)        # 8-byte Spill
	leaq	.L.str1507, %rax
	movq	%rax, 7568(%rsp)        # 8-byte Spill
	leaq	.L.str1508, %rax
	movq	%rax, 7560(%rsp)        # 8-byte Spill
	leaq	.L.str1504, %rax
	movq	%rax, 7552(%rsp)        # 8-byte Spill
	leaq	.L.str1505, %rax
	movq	%rax, 7544(%rsp)        # 8-byte Spill
	leaq	.L.str1506, %rax
	movq	%rax, 7536(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 7528(%rsp)        # 8-byte Spill
	leaq	.L.str1502, %rax
	movq	%rax, 7520(%rsp)        # 8-byte Spill
	leaq	.L.str1503, %rax
	movq	%rax, 7512(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 7504(%rsp)        # 8-byte Spill
	leaq	.L.str1500, %rax
	movq	%rax, 7496(%rsp)        # 8-byte Spill
	leaq	.L.str1501, %rax
	movq	%rax, 7488(%rsp)        # 8-byte Spill
	leaq	.L.str1497, %rax
	movq	%rax, 7480(%rsp)        # 8-byte Spill
	leaq	.L.str1498, %rax
	movq	%rax, 7472(%rsp)        # 8-byte Spill
	leaq	.L.str1499, %rax
	movq	%rax, 7464(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 7456(%rsp)        # 8-byte Spill
	leaq	.L.str1495, %rax
	movq	%rax, 7448(%rsp)        # 8-byte Spill
	leaq	.L.str1496, %rax
	movq	%rax, 7440(%rsp)        # 8-byte Spill
	leaq	.L.str1493, %rax
	movq	%rax, 7432(%rsp)        # 8-byte Spill
	leaq	.L.str1494, %rax
	movq	%rax, 7424(%rsp)        # 8-byte Spill
	leaq	.L.str1491, %rax
	movq	%rax, 7416(%rsp)        # 8-byte Spill
	leaq	.L.str1492, %rax
	movq	%rax, 7408(%rsp)        # 8-byte Spill
	leaq	.L.str1488, %rax
	movq	%rax, 7400(%rsp)        # 8-byte Spill
	leaq	.L.str1489, %rax
	movq	%rax, 7392(%rsp)        # 8-byte Spill
	leaq	.L.str1490, %rax
	movq	%rax, 7384(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 7376(%rsp)        # 8-byte Spill
	leaq	.L.str1486, %rax
	movq	%rax, 7368(%rsp)        # 8-byte Spill
	leaq	.L.str1487, %rax
	movq	%rax, 7360(%rsp)        # 8-byte Spill
	leaq	.L.str1484, %rax
	movq	%rax, 7352(%rsp)        # 8-byte Spill
	leaq	.L.str1485, %rax
	movq	%rax, 7344(%rsp)        # 8-byte Spill
	movabsq	$186, %rax
	movq	%rax, 7336(%rsp)        # 8-byte Spill
	leaq	.L.str1481, %rax
	movq	%rax, 7328(%rsp)        # 8-byte Spill
	leaq	.L.str1482, %rax
	movq	%rax, 7320(%rsp)        # 8-byte Spill
	leaq	.L.str1483, %rax
	movq	%rax, 7312(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7304(%rsp)        # 8-byte Spill
	leaq	.L.str1479, %rax
	movq	%rax, 7296(%rsp)        # 8-byte Spill
	leaq	.L.str1480, %rax
	movq	%rax, 7288(%rsp)        # 8-byte Spill
	leaq	.L.str1477, %rax
	movq	%rax, 7280(%rsp)        # 8-byte Spill
	leaq	.L.str1478, %rax
	movq	%rax, 7272(%rsp)        # 8-byte Spill
	leaq	.L.str1475, %rax
	movq	%rax, 7264(%rsp)        # 8-byte Spill
	leaq	.L.str1476, %rax
	movq	%rax, 7256(%rsp)        # 8-byte Spill
	leaq	.L.str1472, %rax
	movq	%rax, 7248(%rsp)        # 8-byte Spill
	leaq	.L.str1473, %rax
	movq	%rax, 7240(%rsp)        # 8-byte Spill
	leaq	.L.str1474, %rax
	movq	%rax, 7232(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 7224(%rsp)        # 8-byte Spill
	leaq	.L.str1470, %rax
	movq	%rax, 7216(%rsp)        # 8-byte Spill
	leaq	.L.str1471, %rax
	movq	%rax, 7208(%rsp)        # 8-byte Spill
	leaq	.L.str1468, %rax
	movq	%rax, 7200(%rsp)        # 8-byte Spill
	leaq	.L.str1469, %rax
	movq	%rax, 7192(%rsp)        # 8-byte Spill
	leaq	.L.str1466, %rax
	movq	%rax, 7184(%rsp)        # 8-byte Spill
	leaq	.L.str1467, %rax
	movq	%rax, 7176(%rsp)        # 8-byte Spill
	leaq	.L.str1463, %rax
	movq	%rax, 7168(%rsp)        # 8-byte Spill
	leaq	.L.str1464, %rax
	movq	%rax, 7160(%rsp)        # 8-byte Spill
	leaq	.L.str1465, %rax
	movq	%rax, 7152(%rsp)        # 8-byte Spill
	leaq	.L.str1461, %rax
	movq	%rax, 7144(%rsp)        # 8-byte Spill
	leaq	.L.str1462, %rax
	movq	%rax, 7136(%rsp)        # 8-byte Spill
	leaq	.L.str1459, %rax
	movq	%rax, 7128(%rsp)        # 8-byte Spill
	leaq	.L.str1460, %rax
	movq	%rax, 7120(%rsp)        # 8-byte Spill
	leaq	.L.str1456, %rax
	movq	%rax, 7112(%rsp)        # 8-byte Spill
	leaq	.L.str1457, %rax
	movq	%rax, 7104(%rsp)        # 8-byte Spill
	leaq	.L.str1458, %rax
	movq	%rax, 7096(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7088(%rsp)        # 8-byte Spill
	leaq	.L.str1454, %rax
	movq	%rax, 7080(%rsp)        # 8-byte Spill
	leaq	.L.str1455, %rax
	movq	%rax, 7072(%rsp)        # 8-byte Spill
	leaq	.L.str1452, %rax
	movq	%rax, 7064(%rsp)        # 8-byte Spill
	leaq	.L.str1453, %rax
	movq	%rax, 7056(%rsp)        # 8-byte Spill
	leaq	.L.str1450, %rax
	movq	%rax, 7048(%rsp)        # 8-byte Spill
	leaq	.L.str1451, %rax
	movq	%rax, 7040(%rsp)        # 8-byte Spill
	leaq	.L.str1447, %rax
	movq	%rax, 7032(%rsp)        # 8-byte Spill
	leaq	.L.str1448, %rax
	movq	%rax, 7024(%rsp)        # 8-byte Spill
	leaq	.L.str1449, %rax
	movq	%rax, 7016(%rsp)        # 8-byte Spill
	leaq	.L.str1445, %rax
	movq	%rax, 7008(%rsp)        # 8-byte Spill
	leaq	.L.str1446, %rax
	movq	%rax, 7000(%rsp)        # 8-byte Spill
	leaq	.L.str1443, %rax
	movq	%rax, 6992(%rsp)        # 8-byte Spill
	leaq	.L.str1444, %rax
	movq	%rax, 6984(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6976(%rsp)        # 8-byte Spill
	leaq	.L.str1441, %rax
	movq	%rax, 6968(%rsp)        # 8-byte Spill
	leaq	.L.str1442, %rax
	movq	%rax, 6960(%rsp)        # 8-byte Spill
	leaq	.L.str1438, %rax
	movq	%rax, 6952(%rsp)        # 8-byte Spill
	leaq	.L.str1439, %rax
	movq	%rax, 6944(%rsp)        # 8-byte Spill
	leaq	.L.str1440, %rax
	movq	%rax, 6936(%rsp)        # 8-byte Spill
	leaq	.L.str1436, %rax
	movq	%rax, 6928(%rsp)        # 8-byte Spill
	leaq	.L.str1437, %rax
	movq	%rax, 6920(%rsp)        # 8-byte Spill
	leaq	.L.str1434, %rax
	movq	%rax, 6912(%rsp)        # 8-byte Spill
	leaq	.L.str1435, %rax
	movq	%rax, 6904(%rsp)        # 8-byte Spill
	leaq	.L.str1432, %rax
	movq	%rax, 6896(%rsp)        # 8-byte Spill
	leaq	.L.str1433, %rax
	movq	%rax, 6888(%rsp)        # 8-byte Spill
	leaq	.L.str1429, %rax
	movq	%rax, 6880(%rsp)        # 8-byte Spill
	leaq	.L.str1430, %rax
	movq	%rax, 6872(%rsp)        # 8-byte Spill
	leaq	.L.str1431, %rax
	movq	%rax, 6864(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	3 186 0                 # kmeans.c:186:0
	movq	%rax, 6856(%rsp)        # 8-byte Spill
	movq	6976(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6848(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	6880(%rsp), %rax        # 8-byte Reload
	movl	%esi, 6844(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	6872(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 6832(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	6864(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6824(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6856(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6816(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	7636(%rsp), %eax        # 4-byte Reload
	movq	%r9, 6808(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 6800(%rsp)        # 8-byte Spill
	movq	%r14, 6792(%rsp)        # 8-byte Spill
	movq	%r12, 6784(%rsp)        # 8-byte Spill
	movq	%r13, 6776(%rsp)        # 8-byte Spill
	movq	%rbp, 6768(%rsp)        # 8-byte Spill
	movq	%rbx, 6760(%rsp)        # 8-byte Spill
	movq	%r10, 6752(%rsp)        # 8-byte Spill
	movq	%r11, 6744(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6848(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	6832(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	6896(%rsp), %r8         # 8-byte Reload
	movq	6824(%rsp), %r9         # 8-byte Reload
	movq	6888(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rdx        # 8-byte Reload
	movq	6832(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6824(%rsp), %r9         # 8-byte Reload
	movq	6904(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7616(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	6928(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	6920(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7336(%rsp), %rdi        # 8-byte Reload
	movq	6952(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	7376(%rsp), %r8         # 8-byte Reload
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6848(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	6976(%rsp), %rdx        # 8-byte Reload
	movq	6832(%rsp), %rcx        # 8-byte Reload
	movq	6968(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	6960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	6992(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	6984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7624(%rsp), %rcx        # 8-byte Reload
	addq	$-1, %rcx
	movq	7616(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6824(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 6736(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	7008(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7336(%rsp), %rdi        # 8-byte Reload
	movq	7032(%rsp), %rsi        # 8-byte Reload
	movq	7024(%rsp), %rdx        # 8-byte Reload
	movq	7016(%rsp), %rcx        # 8-byte Reload
	movq	7224(%rsp), %r8         # 8-byte Reload
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6848(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	6736(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7048(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7040(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	8512(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7064(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7056(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6736(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	8512(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7616(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 6728(%rsp)        # 8-byte Spill
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7080(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7336(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7104(%rsp), %rdx        # 8-byte Reload
	movq	7096(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	6728(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7128(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8512(%rsp), %rcx        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	-8(%rcx,%rdx,8), %rsi
	movq	7616(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 6720(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	6720(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7144(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7136(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7336(%rsp), %rdi        # 8-byte Reload
	movq	7168(%rsp), %rsi        # 8-byte Reload
	movq	7160(%rsp), %rdx        # 8-byte Reload
	movq	7152(%rsp), %rcx        # 8-byte Reload
	movq	7224(%rsp), %r8         # 8-byte Reload
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6848(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	7664(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7184(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	6720(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7200(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7664(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	6720(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7616(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 6712(%rsp)        # 8-byte Spill
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7216(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7336(%rsp), %rdi        # 8-byte Reload
	movq	7248(%rsp), %rsi        # 8-byte Reload
	movq	7240(%rsp), %rdx        # 8-byte Reload
	movq	7232(%rsp), %rcx        # 8-byte Reload
	movq	7224(%rsp), %r8         # 8-byte Reload
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6848(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7264(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	8512(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7280(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7624(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	8512(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7616(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 6704(%rsp)        # 8-byte Spill
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7336(%rsp), %rdi        # 8-byte Reload
	movq	7328(%rsp), %rsi        # 8-byte Reload
	movq	7320(%rsp), %rdx        # 8-byte Reload
	movq	7312(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6848(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	6704(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7352(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7344(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	6712(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7368(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7360(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8512(%rsp), %rcx        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	6712(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, (%rcx,%rdx,8)
	.loc	3 185 0                 # kmeans.c:185:0
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	7400(%rsp), %rsi        # 8-byte Reload
	movq	7392(%rsp), %rdx        # 8-byte Reload
	movq	7384(%rsp), %rcx        # 8-byte Reload
	movq	7376(%rsp), %r8         # 8-byte Reload
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6848(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rdx        # 8-byte Reload
	movq	6832(%rsp), %rcx        # 8-byte Reload
	movq	7416(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7432(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7424(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7624(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	7616(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6824(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 6696(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	7448(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7440(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	7480(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7456(%rsp), %r8         # 8-byte Reload
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	7504(%rsp), %rsi        # 8-byte Reload
	movq	6696(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7496(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7488(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6696(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	7616(%rsp), %rdi        # 8-byte Reload
	movq	7592(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7520(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 6692(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	7552(%rsp), %rsi        # 8-byte Reload
	movq	7544(%rsp), %rdx        # 8-byte Reload
	movq	7536(%rsp), %rcx        # 8-byte Reload
	movq	7528(%rsp), %r8         # 8-byte Reload
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7660(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	6848(%rsp), %rdi        # 8-byte Reload
	movq	7592(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7568(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6692(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	7592(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7584(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7576(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6692(%rsp), %eax        # 4-byte Reload
	movl	7660(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	7616(%rsp), %rdi        # 8-byte Reload
	movq	6824(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6691(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	6784(%rsp), %rsi        # 8-byte Reload
	movq	6776(%rsp), %rdx        # 8-byte Reload
	movq	6768(%rsp), %rcx        # 8-byte Reload
	movq	6848(%rsp), %r8         # 8-byte Reload
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6744(%rsp), %rdi        # 8-byte Reload
	movq	6832(%rsp), %rsi        # 8-byte Reload
	movq	6832(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	6760(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	6792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6848(%rsp), %rdi        # 8-byte Reload
	movq	6832(%rsp), %rsi        # 8-byte Reload
	movq	6832(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	6808(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	6752(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6691(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	6824(%rsp), %rdi        # 8-byte Reload
	movq	6824(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	6816(%rsp), %r8         # 8-byte Reload
	movq	6832(%rsp), %r9         # 8-byte Reload
	movq	7640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6691(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6696(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 7648(%rsp)        # 8-byte Spill
	jne	.LBB2_32
.Ltmp142:
.LBB2_33:                               # %._crit_edge
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str1529, %r8
	movabsq	$0, %rdx
	leaq	.L.str1530, %rsi
	leaq	.L.str1527, %r9
	leaq	.L.str1528, %r10
	movabsq	$2, %r11
	leaq	rewind, %rbx
	leaq	.L.str1525, %r14
	leaq	.L.str1526, %r15
	movabsq	$187, %r12
	leaq	.L.str1522, %r13
	leaq	.L.str1523, %rbp
	movq	%rax, 6680(%rsp)        # 8-byte Spill
	leaq	.L.str1524, %rax
	movq	%rax, 6672(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 6664(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 6660(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	3 187 0                 # kmeans.c:187:0
	movq	%rdi, 6648(%rsp)        # 8-byte Spill
	movq	%r12, %rdi
	movl	%esi, 6644(%rsp)        # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 6632(%rsp)        # 8-byte Spill
	movq	%rbp, %rdx
	movq	6672(%rsp), %r12        # 8-byte Reload
	movq	%rcx, 6624(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 6616(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	6660(%rsp), %ebp        # 4-byte Reload
	movq	%r9, 6608(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 6600(%rsp)        # 8-byte Spill
	movq	%r11, 6592(%rsp)        # 8-byte Spill
	movq	%r10, 6584(%rsp)        # 8-byte Spill
	movq	%rbx, 6576(%rsp)        # 8-byte Spill
	movq	%r15, 6568(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6592(%rsp), %rdi        # 8-byte Reload
	movq	6680(%rsp), %rsi        # 8-byte Reload
	movq	6576(%rsp), %rdx        # 8-byte Reload
	movq	6624(%rsp), %rcx        # 8-byte Reload
	movq	6600(%rsp), %r8         # 8-byte Reload
	movq	6632(%rsp), %r9         # 8-byte Reload
	movq	6568(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6624(%rsp), %rdi        # 8-byte Reload
	movq	6680(%rsp), %rsi        # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	6624(%rsp), %rcx        # 8-byte Reload
	movq	6608(%rsp), %r8         # 8-byte Reload
	movq	6632(%rsp), %r9         # 8-byte Reload
	movq	6584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6648(%rsp), %rdi        # 8-byte Reload
	movq	6680(%rsp), %rsi        # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	6624(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6632(%rsp), %r9         # 8-byte Reload
	movq	6664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15024(%rsp), %rdi       # 8-byte Reload
	callq	rewind
	movl	$0, %ebp
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str1534, %r8
	leaq	.L.str1535, %rdx
	movabsq	$189, %rdi
	leaq	.L.str1531, %rsi
	leaq	.L.str1532, %r9
	leaq	.L.str1533, %r10
	movabsq	$2, %r11
	movl	$1, %r14d
.Ltmp143:
	#DEBUG_VALUE: main:i <- 0
	.loc	3 189 0                 # kmeans.c:189:0
	movq	%rdx, 6560(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 6552(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	%r8, 6544(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 6540(%rsp)        # 4-byte Spill
	movq	%rax, 6528(%rsp)        # 8-byte Spill
	movl	%r14d, 6524(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	6528(%rsp), %rdi        # 8-byte Reload
	movq	6552(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6540(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 6520(%rsp)        # 4-byte Spill
.LBB2_34:                               # %.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_35 Depth 2
                                        #     Child Loop BB2_39 Depth 2
	movl	6520(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str1550, %r8
	leaq	.L.str1551, %rsi
	movabsq	$-1, %rdi
	leaq	.L.str1547, %r9
	leaq	.L.str1548, %r10
	leaq	.L.str1549, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$32, %r12
	leaq	.L.str1545, %r13
	movq	%rcx, 6512(%rsp)        # 8-byte Spill
	leaq	.L.str1546, %rcx
	movq	%rcx, 6504(%rsp)        # 8-byte Spill
	leaq	.L.str1543, %rcx
	movq	%rcx, 6496(%rsp)        # 8-byte Spill
	leaq	.L.str1544, %rcx
	movq	%rcx, 6488(%rsp)        # 8-byte Spill
	leaq	.L.str1541, %rcx
	movq	%rcx, 6480(%rsp)        # 8-byte Spill
	leaq	.L.str1542, %rcx
	movq	%rcx, 6472(%rsp)        # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, 6464(%rsp)        # 8-byte Spill
	leaq	.L.str1539, %rcx
	movq	%rcx, 6456(%rsp)        # 8-byte Spill
	leaq	.L.str1540, %rcx
	movq	%rcx, 6448(%rsp)        # 8-byte Spill
	leaq	.L.str1536, %rcx
	movq	%rcx, 6440(%rsp)        # 8-byte Spill
	leaq	.L.str1537, %rcx
	movq	%rcx, 6432(%rsp)        # 8-byte Spill
	leaq	.L.str1538, %rcx
	movq	%rcx, 6424(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rdi, 6416(%rsp)        # 8-byte Spill
	movq	%rcx, 6408(%rsp)        # 8-byte Spill
	movq	6440(%rsp), %rcx        # 8-byte Reload
	movq	%rsi, 6400(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	6432(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 6392(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	6424(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 6384(%rsp)         # 8-byte Spill
	movq	6408(%rsp), %r8         # 8-byte Reload
	movq	%r9, 6376(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 6372(%rsp)        # 4-byte Spill
	movl	%r14d, 6368(%rsp)       # 4-byte Spill
	movq	%r15, 6360(%rsp)        # 8-byte Spill
	movl	%ebp, 6356(%rsp)        # 4-byte Spill
	movq	%r12, 6344(%rsp)        # 8-byte Spill
	movq	%r13, 6336(%rsp)        # 8-byte Spill
	movq	%rbx, 6328(%rsp)        # 8-byte Spill
	movq	%r10, 6320(%rsp)        # 8-byte Spill
	movq	%r11, 6312(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6464(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6512(%rsp), %rcx        # 8-byte Reload
	movq	6456(%rsp), %r8         # 8-byte Reload
	movq	6512(%rsp), %r9         # 8-byte Reload
	movq	6448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6328(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6512(%rsp), %rcx        # 8-byte Reload
	movq	6480(%rsp), %r8         # 8-byte Reload
	movq	6512(%rsp), %r9         # 8-byte Reload
	movq	6472(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6392(%rsp), %rcx        # 8-byte Reload
	movq	6496(%rsp), %r8         # 8-byte Reload
	movq	6512(%rsp), %r9         # 8-byte Reload
	movq	6488(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6372(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6360(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6512(%rsp), %rcx        # 8-byte Reload
	movq	6336(%rsp), %r8         # 8-byte Reload
	movq	6392(%rsp), %r9         # 8-byte Reload
	movq	6504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6416(%rsp), %rdi        # 8-byte Reload
	movq	6376(%rsp), %rsi        # 8-byte Reload
	movq	6320(%rsp), %rdx        # 8-byte Reload
	movq	6312(%rsp), %rcx        # 8-byte Reload
	movq	6328(%rsp), %r8         # 8-byte Reload
	movl	6356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6512(%rsp), %rdi        # 8-byte Reload
	movq	6392(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6512(%rsp), %rcx        # 8-byte Reload
	movq	6384(%rsp), %r8         # 8-byte Reload
	movq	6392(%rsp), %r9         # 8-byte Reload
	movq	6400(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.LBB2_35:                               #   Parent Loop BB2_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	$1024, %esi             # imm = 0x400
	movabsq	$24601, %rax            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str1567, %r8
	movabsq	$0, %rdi
	leaq	.L.str1568, %r9
	movabsq	$3, %r10
	leaq	.L.str1565, %r11
	leaq	.L.str1566, %rbx
	movabsq	$32, %r14
	movabsq	$1024, %r15             # imm = 0x400
	leaq	.L.str1563, %r12
	leaq	.L.str1564, %r13
	movabsq	$2, %rbp
	movq	%rax, 6304(%rsp)        # 8-byte Spill
	leaq	.L.str1561, %rax
	movq	%rax, 6296(%rsp)        # 8-byte Spill
	leaq	.L.str1562, %rax
	movq	%rax, 6288(%rsp)        # 8-byte Spill
	leaq	.L.str1559, %rax
	movq	%rax, 6280(%rsp)        # 8-byte Spill
	leaq	.L.str1560, %rax
	movq	%rax, 6272(%rsp)        # 8-byte Spill
	leaq	.L.str1557, %rax
	movq	%rax, 6264(%rsp)        # 8-byte Spill
	leaq	.L.str1558, %rax
	movq	%rax, 6256(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 6248(%rsp)        # 8-byte Spill
	leaq	fgets, %rax
	movq	%rax, 6240(%rsp)        # 8-byte Spill
	leaq	.L.str1555, %rax
	movq	%rax, 6232(%rsp)        # 8-byte Spill
	leaq	.L.str1556, %rax
	movq	%rax, 6224(%rsp)        # 8-byte Spill
	movabsq	$189, %rax
	movq	%rax, 6216(%rsp)        # 8-byte Spill
	leaq	.L.str1552, %rax
	movq	%rax, 6208(%rsp)        # 8-byte Spill
	leaq	.L.str1553, %rax
	movq	%rax, 6200(%rsp)        # 8-byte Spill
	leaq	.L.str1554, %rax
	movq	%rax, 6192(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movl	%esi, 6188(%rsp)        # 4-byte Spill
	movl	$0, %esi
	movl	%esi, 6184(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 6176(%rsp)        # 8-byte Spill
	movq	6216(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6168(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	6208(%rsp), %rax        # 8-byte Reload
	movl	%esi, 6164(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	6200(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 6152(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	6192(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6144(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6176(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6136(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	6184(%rsp), %eax        # 4-byte Reload
	movq	%r9, 6128(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, 6120(%rsp)        # 8-byte Spill
	movq	%r15, 6112(%rsp)        # 8-byte Spill
	movq	%r12, 6104(%rsp)        # 8-byte Spill
	movq	%r14, 6096(%rsp)        # 8-byte Spill
	movq	%rbp, 6088(%rsp)        # 8-byte Spill
	movq	%rbx, 6080(%rsp)        # 8-byte Spill
	movq	%r10, 6072(%rsp)        # 8-byte Spill
	movq	%r11, 6064(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6248(%rsp), %rdi        # 8-byte Reload
	movq	6144(%rsp), %rsi        # 8-byte Reload
	movq	6240(%rsp), %rdx        # 8-byte Reload
	movq	6152(%rsp), %rcx        # 8-byte Reload
	movq	6232(%rsp), %r8         # 8-byte Reload
	movq	6168(%rsp), %r9         # 8-byte Reload
	movq	6224(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6152(%rsp), %rdi        # 8-byte Reload
	movq	6144(%rsp), %rsi        # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	6152(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6168(%rsp), %r9         # 8-byte Reload
	movq	6256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6304(%rsp), %rdi        # 8-byte Reload
	movq	6144(%rsp), %rsi        # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	6152(%rsp), %rcx        # 8-byte Reload
	movq	6280(%rsp), %r8         # 8-byte Reload
	movq	6168(%rsp), %r9         # 8-byte Reload
	movq	6272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6088(%rsp), %rdi        # 8-byte Reload
	movq	6096(%rsp), %rsi        # 8-byte Reload
	movq	6112(%rsp), %rdx        # 8-byte Reload
	movq	6168(%rsp), %rcx        # 8-byte Reload
	movq	6296(%rsp), %r8         # 8-byte Reload
	movq	6168(%rsp), %r9         # 8-byte Reload
	movq	6288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6304(%rsp), %rdi        # 8-byte Reload
	movq	6096(%rsp), %rsi        # 8-byte Reload
	movq	6112(%rsp), %rdx        # 8-byte Reload
	movq	6152(%rsp), %rcx        # 8-byte Reload
	movq	6104(%rsp), %r8         # 8-byte Reload
	movq	6168(%rsp), %r9         # 8-byte Reload
	movq	6120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6072(%rsp), %rdi        # 8-byte Reload
	movq	6144(%rsp), %rsi        # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	6152(%rsp), %rcx        # 8-byte Reload
	movq	6064(%rsp), %r8         # 8-byte Reload
	movq	6168(%rsp), %r9         # 8-byte Reload
	movq	6080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6304(%rsp), %rdi        # 8-byte Reload
	movq	6144(%rsp), %rsi        # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	6152(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	6168(%rsp), %r9         # 8-byte Reload
	movq	6128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24488(%rsp), %rdi       # 8-byte Reload
	movl	6188(%rsp), %esi        # 4-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	callq	fgets
	movabsq	$1, %rcx
	leaq	.L.str1587, %r8
	movabsq	$0, %rdx
	leaq	.L.str1588, %rdi
	movabsq	$2, %r9
	leaq	.L.str1585, %r10
	leaq	.L.str1586, %r11
	movabsq	$3, %rbx
	leaq	.L.str1583, %r14
	leaq	.L.str1584, %r15
	movabsq	$189, %r12
	leaq	.L.str1580, %rsi
	leaq	.L.str1581, %r13
	leaq	.L.str1582, %rbp
	movq	%rsi, 6056(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 6052(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 6040(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 6032(%rsp)        # 8-byte Spill
	leaq	.L.str1578, %rax
	movq	%rax, 6024(%rsp)        # 8-byte Spill
	leaq	.L.str1579, %rax
	movq	%rax, 6016(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 6008(%rsp)        # 8-byte Spill
	leaq	.L.str1576, %rax
	movq	%rax, 6000(%rsp)        # 8-byte Spill
	leaq	.L.str1577, %rax
	movq	%rax, 5992(%rsp)        # 8-byte Spill
	leaq	.L.str1574, %rax
	movq	%rax, 5984(%rsp)        # 8-byte Spill
	leaq	.L.str1575, %rax
	movq	%rax, 5976(%rsp)        # 8-byte Spill
	leaq	.L.str1571, %rax
	movq	%rax, 5968(%rsp)        # 8-byte Spill
	leaq	.L.str1572, %rax
	movq	%rax, 5960(%rsp)        # 8-byte Spill
	leaq	.L.str1573, %rax
	movq	%rax, 5952(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5944(%rsp)        # 8-byte Spill
	leaq	.L.str1569, %rax
	movq	%rax, 5936(%rsp)        # 8-byte Spill
	leaq	.L.str1570, %rax
	movq	%rax, 5928(%rsp)        # 8-byte Spill
	movq	6032(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5920(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	6008(%rsp), %rax        # 8-byte Reload
	movl	%esi, 5916(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	6040(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 5904(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 5896(%rsp)        # 8-byte Spill
	movq	5936(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5888(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	5904(%rsp), %rax        # 8-byte Reload
	movq	%r9, 5880(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	5928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r12, 5872(%rsp)        # 8-byte Spill
	movq	%r15, 5864(%rsp)        # 8-byte Spill
	movq	%r13, 5856(%rsp)        # 8-byte Spill
	movq	%rbp, 5848(%rsp)        # 8-byte Spill
	movq	%r14, 5840(%rsp)        # 8-byte Spill
	movq	%r10, 5832(%rsp)        # 8-byte Spill
	movq	%r11, 5824(%rsp)        # 8-byte Spill
	movq	%rbx, 5816(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	5968(%rsp), %rsi        # 8-byte Reload
	movq	5960(%rsp), %rdx        # 8-byte Reload
	movq	5952(%rsp), %rcx        # 8-byte Reload
	movq	5944(%rsp), %r8         # 8-byte Reload
	movl	6052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5880(%rsp), %rdi        # 8-byte Reload
	movq	6008(%rsp), %rsi        # 8-byte Reload
	movq	5904(%rsp), %rdx        # 8-byte Reload
	movq	5904(%rsp), %rcx        # 8-byte Reload
	movq	5984(%rsp), %r8         # 8-byte Reload
	movq	5904(%rsp), %r9         # 8-byte Reload
	movq	5976(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6008(%rsp), %rsi        # 8-byte Reload
	movq	6040(%rsp), %rdx        # 8-byte Reload
	movq	5896(%rsp), %rcx        # 8-byte Reload
	movq	6000(%rsp), %r8         # 8-byte Reload
	movq	5904(%rsp), %r9         # 8-byte Reload
	movq	5992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6040(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6032(%rsp), %rdi        # 8-byte Reload
	movq	5896(%rsp), %rsi        # 8-byte Reload
	movq	5896(%rsp), %rcx        # 8-byte Reload
	movq	6024(%rsp), %r8         # 8-byte Reload
	movq	5904(%rsp), %r9         # 8-byte Reload
	movq	6016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5815(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	6056(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	5848(%rsp), %rcx        # 8-byte Reload
	movq	5880(%rsp), %r8         # 8-byte Reload
	movl	6052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5816(%rsp), %rdi        # 8-byte Reload
	movq	5904(%rsp), %rsi        # 8-byte Reload
	movq	5904(%rsp), %rdx        # 8-byte Reload
	movq	5896(%rsp), %rcx        # 8-byte Reload
	movq	5840(%rsp), %r8         # 8-byte Reload
	movq	5904(%rsp), %r9         # 8-byte Reload
	movq	5864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5880(%rsp), %rdi        # 8-byte Reload
	movq	5904(%rsp), %rsi        # 8-byte Reload
	movq	5904(%rsp), %rdx        # 8-byte Reload
	movq	5896(%rsp), %rcx        # 8-byte Reload
	movq	5832(%rsp), %r8         # 8-byte Reload
	movq	5904(%rsp), %r9         # 8-byte Reload
	movq	5824(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5815(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5896(%rsp), %rsi        # 8-byte Reload
	movq	5896(%rsp), %rcx        # 8-byte Reload
	movq	5888(%rsp), %r8         # 8-byte Reload
	movq	5904(%rsp), %r9         # 8-byte Reload
	movq	5920(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5815(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_40
# BB#36:                                #   in Loop: Header=BB2_35 Depth=2
	leaq	.L.str5176, %rax
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$64, %rdx
	movabsq	$1, %rsi
	leaq	.L.str1600, %r8
	movabsq	$0, %rdi
	leaq	.L.str1601, %r9
	movabsq	$2, %r10
	leaq	.L.str1598, %r11
	leaq	.L.str1599, %rbx
	leaq	.L.str1596, %r14
	leaq	.L.str1597, %r15
	leaq	.L.str1594, %r12
	leaq	.L.str1595, %r13
	movabsq	$3, %rbp
	movq	%rax, 5800(%rsp)        # 8-byte Spill
	leaq	strtok, %rax
	movq	%rax, 5792(%rsp)        # 8-byte Spill
	leaq	.L.str1592, %rax
	movq	%rax, 5784(%rsp)        # 8-byte Spill
	leaq	.L.str1593, %rax
	movq	%rax, 5776(%rsp)        # 8-byte Spill
	movabsq	$190, %rax
	movq	%rax, 5768(%rsp)        # 8-byte Spill
	leaq	.L.str1589, %rax
	movq	%rax, 5760(%rsp)        # 8-byte Spill
	leaq	.L.str1590, %rax
	movq	%rax, 5752(%rsp)        # 8-byte Spill
	leaq	.L.str1591, %rax
	movq	%rax, 5744(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 5736(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 5732(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	3 190 0                 # kmeans.c:190:0
.Ltmp144:
	movq	%rax, 5720(%rsp)        # 8-byte Spill
	movq	5768(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5712(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	5760(%rsp), %rax        # 8-byte Reload
	movl	%esi, 5708(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	5752(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 5696(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	5744(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5688(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5720(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5680(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	5732(%rsp), %eax        # 4-byte Reload
	movq	%r9, 5672(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 5664(%rsp)        # 8-byte Spill
	movq	%r12, 5656(%rsp)        # 8-byte Spill
	movq	%r13, 5648(%rsp)        # 8-byte Spill
	movq	%r14, 5640(%rsp)        # 8-byte Spill
	movq	%rbp, 5632(%rsp)        # 8-byte Spill
	movq	%rbx, 5624(%rsp)        # 8-byte Spill
	movq	%r10, 5616(%rsp)        # 8-byte Spill
	movq	%r11, 5608(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5696(%rsp), %rsi        # 8-byte Reload
	movq	5792(%rsp), %rdx        # 8-byte Reload
	movq	5736(%rsp), %rcx        # 8-byte Reload
	movq	5784(%rsp), %r8         # 8-byte Reload
	movq	5712(%rsp), %r9         # 8-byte Reload
	movq	5776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5736(%rsp), %rdi        # 8-byte Reload
	movq	5696(%rsp), %rsi        # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	5736(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movq	5712(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5688(%rsp), %rdi        # 8-byte Reload
	movq	5696(%rsp), %rsi        # 8-byte Reload
	movq	24488(%rsp), %rdx       # 8-byte Reload
	movq	5736(%rsp), %rcx        # 8-byte Reload
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5712(%rsp), %r9         # 8-byte Reload
	movq	5664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5616(%rsp), %rdi        # 8-byte Reload
	movq	5696(%rsp), %rsi        # 8-byte Reload
	movq	5800(%rsp), %rdx        # 8-byte Reload
	movq	5712(%rsp), %rcx        # 8-byte Reload
	movq	5608(%rsp), %r8         # 8-byte Reload
	movq	5712(%rsp), %r9         # 8-byte Reload
	movq	5624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5688(%rsp), %rdi        # 8-byte Reload
	movq	5696(%rsp), %rsi        # 8-byte Reload
	movq	5800(%rsp), %rdx        # 8-byte Reload
	movq	5736(%rsp), %rcx        # 8-byte Reload
	movq	5680(%rsp), %r8         # 8-byte Reload
	movq	5712(%rsp), %r9         # 8-byte Reload
	movq	5672(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24488(%rsp), %rdi       # 8-byte Reload
	movq	5800(%rsp), %rsi        # 8-byte Reload
	callq	strtok
	movabsq	$1, %rcx
	leaq	.L.str1620, %r8
	movabsq	$0, %rdx
	leaq	.L.str1621, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1618, %r9
	leaq	.L.str1619, %r10
	movabsq	$3, %r11
	leaq	.L.str1616, %rbx
	leaq	.L.str1617, %r14
	movabsq	$190, %r15
	leaq	.L.str1613, %r12
	leaq	.L.str1614, %r13
	leaq	.L.str1615, %rbp
	movq	%rsi, 5600(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 5596(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 5584(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 5576(%rsp)        # 8-byte Spill
	leaq	.L.str1611, %rax
	movq	%rax, 5568(%rsp)        # 8-byte Spill
	leaq	.L.str1612, %rax
	movq	%rax, 5560(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5552(%rsp)        # 8-byte Spill
	leaq	.L.str1609, %rax
	movq	%rax, 5544(%rsp)        # 8-byte Spill
	leaq	.L.str1610, %rax
	movq	%rax, 5536(%rsp)        # 8-byte Spill
	leaq	.L.str1607, %rax
	movq	%rax, 5528(%rsp)        # 8-byte Spill
	leaq	.L.str1608, %rax
	movq	%rax, 5520(%rsp)        # 8-byte Spill
	leaq	.L.str1604, %rax
	movq	%rax, 5512(%rsp)        # 8-byte Spill
	leaq	.L.str1605, %rax
	movq	%rax, 5504(%rsp)        # 8-byte Spill
	leaq	.L.str1606, %rax
	movq	%rax, 5496(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5488(%rsp)        # 8-byte Spill
	leaq	.L.str1602, %rax
	movq	%rax, 5480(%rsp)        # 8-byte Spill
	leaq	.L.str1603, %rax
	movq	%rax, 5472(%rsp)        # 8-byte Spill
	movq	5576(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5464(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	5552(%rsp), %rax        # 8-byte Reload
	movl	%esi, 5460(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	5584(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 5448(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 5440(%rsp)        # 8-byte Spill
	movq	5480(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5432(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	5448(%rsp), %rax        # 8-byte Reload
	movq	%r9, 5424(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	5472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 5416(%rsp)        # 8-byte Spill
	movq	%r14, 5408(%rsp)        # 8-byte Spill
	movq	%r12, 5400(%rsp)        # 8-byte Spill
	movq	%r13, 5392(%rsp)        # 8-byte Spill
	movq	%rbp, 5384(%rsp)        # 8-byte Spill
	movq	%rbx, 5376(%rsp)        # 8-byte Spill
	movq	%r10, 5368(%rsp)        # 8-byte Spill
	movq	%r11, 5360(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	5416(%rsp), %rdi        # 8-byte Reload
	movq	5512(%rsp), %rsi        # 8-byte Reload
	movq	5504(%rsp), %rdx        # 8-byte Reload
	movq	5496(%rsp), %rcx        # 8-byte Reload
	movq	5488(%rsp), %r8         # 8-byte Reload
	movl	5596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5464(%rsp), %rdi        # 8-byte Reload
	movq	5552(%rsp), %rsi        # 8-byte Reload
	movq	5448(%rsp), %rdx        # 8-byte Reload
	movq	5448(%rsp), %rcx        # 8-byte Reload
	movq	5528(%rsp), %r8         # 8-byte Reload
	movq	5448(%rsp), %r9         # 8-byte Reload
	movq	5520(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5552(%rsp), %rsi        # 8-byte Reload
	movq	5584(%rsp), %rdx        # 8-byte Reload
	movq	5440(%rsp), %rcx        # 8-byte Reload
	movq	5544(%rsp), %r8         # 8-byte Reload
	movq	5448(%rsp), %r9         # 8-byte Reload
	movq	5536(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5584(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	5576(%rsp), %rdi        # 8-byte Reload
	movq	5440(%rsp), %rsi        # 8-byte Reload
	movq	5440(%rsp), %rcx        # 8-byte Reload
	movq	5568(%rsp), %r8         # 8-byte Reload
	movq	5448(%rsp), %r9         # 8-byte Reload
	movq	5560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5359(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5416(%rsp), %rdi        # 8-byte Reload
	movq	5400(%rsp), %rsi        # 8-byte Reload
	movq	5392(%rsp), %rdx        # 8-byte Reload
	movq	5384(%rsp), %rcx        # 8-byte Reload
	movq	5464(%rsp), %r8         # 8-byte Reload
	movl	5596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5448(%rsp), %rsi        # 8-byte Reload
	movq	5448(%rsp), %rdx        # 8-byte Reload
	movq	5440(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5448(%rsp), %r9         # 8-byte Reload
	movq	5408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5464(%rsp), %rdi        # 8-byte Reload
	movq	5448(%rsp), %rsi        # 8-byte Reload
	movq	5448(%rsp), %rdx        # 8-byte Reload
	movq	5440(%rsp), %rcx        # 8-byte Reload
	movq	5424(%rsp), %r8         # 8-byte Reload
	movq	5448(%rsp), %r9         # 8-byte Reload
	movq	5368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5359(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5440(%rsp), %rsi        # 8-byte Reload
	movq	5440(%rsp), %rcx        # 8-byte Reload
	movq	5432(%rsp), %r8         # 8-byte Reload
	movq	5448(%rsp), %r9         # 8-byte Reload
	movq	5600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5359(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB2_35
.Ltmp145:
# BB#37:                                # %.preheader
                                        #   in Loop: Header=BB2_34 Depth=1
	movabsq	$1, %rax
	leaq	.L.str1645, %r8
	movabsq	$0, %rcx
	leaq	.L.str1646, %rdx
	movabsq	$2, %rsi
	leaq	.L.str1643, %rdi
	leaq	.L.str1644, %r9
	movabsq	$3, %r10
	leaq	.L.str1641, %r11
	leaq	.L.str1642, %rbx
	movabsq	$191, %r14
	leaq	.L.str1638, %r15
	leaq	.L.str1639, %r12
	leaq	.L.str1640, %r13
	movl	$0, %ebp
	movq	%rsi, 5344(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 5336(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 5328(%rsp)        # 8-byte Spill
	leaq	.L.str1636, %rax
	movq	%rax, 5320(%rsp)        # 8-byte Spill
	leaq	.L.str1637, %rax
	movq	%rax, 5312(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5304(%rsp)        # 8-byte Spill
	leaq	.L.str1634, %rax
	movq	%rax, 5296(%rsp)        # 8-byte Spill
	leaq	.L.str1635, %rax
	movq	%rax, 5288(%rsp)        # 8-byte Spill
	leaq	.L.str1632, %rax
	movq	%rax, 5280(%rsp)        # 8-byte Spill
	leaq	.L.str1633, %rax
	movq	%rax, 5272(%rsp)        # 8-byte Spill
	leaq	.L.str1629, %rax
	movq	%rax, 5264(%rsp)        # 8-byte Spill
	leaq	.L.str1630, %rax
	movq	%rax, 5256(%rsp)        # 8-byte Spill
	leaq	.L.str1631, %rax
	movq	%rax, 5248(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5240(%rsp)        # 8-byte Spill
	leaq	.L.str1627, %rax
	movq	%rax, 5232(%rsp)        # 8-byte Spill
	leaq	.L.str1628, %rax
	movq	%rax, 5224(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5216(%rsp)        # 8-byte Spill
	leaq	.L.str1625, %rax
	movq	%rax, 5208(%rsp)        # 8-byte Spill
	leaq	.L.str1626, %rax
	movq	%rax, 5200(%rsp)        # 8-byte Spill
	leaq	25564(%rsp), %rax
	movq	%rax, 5192(%rsp)        # 8-byte Spill
	leaq	.L.str1622, %rax
	movq	%rax, 5184(%rsp)        # 8-byte Spill
	leaq	.L.str1623, %rax
	movq	%rax, 5176(%rsp)        # 8-byte Spill
	leaq	.L.str1624, %rax
	movq	%rax, 5168(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
.Ltmp146:
	#DEBUG_VALUE: main:numAttributes <- [RSP+5192]
	.loc	3 191 0                 # kmeans.c:191:0
	movq	%rdi, 5160(%rsp)        # 8-byte Spill
	movq	%r14, %rdi
	movq	%rax, 5152(%rsp)        # 8-byte Spill
	movq	5184(%rsp), %rax        # 8-byte Reload
	movl	%esi, 5148(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	5176(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 5136(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	5168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5128(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5152(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5120(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5112(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 5104(%rsp)        # 8-byte Spill
	movq	%r15, 5096(%rsp)        # 8-byte Spill
	movq	%r12, 5088(%rsp)        # 8-byte Spill
	movq	%r13, 5080(%rsp)        # 8-byte Spill
	movl	%ebp, 5076(%rsp)        # 4-byte Spill
	movq	%rbx, 5064(%rsp)        # 8-byte Spill
	movq	%r10, 5056(%rsp)        # 8-byte Spill
	movq	%r11, 5048(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5336(%rsp), %rdi        # 8-byte Reload
	movq	5216(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5208(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	5328(%rsp), %rdi        # 8-byte Reload
	movq	5304(%rsp), %rsi        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5232(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	movq	5224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 5044(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5104(%rsp), %rdi        # 8-byte Reload
	movq	5264(%rsp), %rsi        # 8-byte Reload
	movq	5256(%rsp), %rdx        # 8-byte Reload
	movq	5248(%rsp), %rcx        # 8-byte Reload
	movq	5240(%rsp), %r8         # 8-byte Reload
	movl	5076(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5304(%rsp), %rsi        # 8-byte Reload
	movq	5128(%rsp), %rdx        # 8-byte Reload
	movq	5128(%rsp), %rcx        # 8-byte Reload
	movq	5280(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	movq	5272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5044(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	5336(%rsp), %rdi        # 8-byte Reload
	movq	5304(%rsp), %rsi        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	movq	5288(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5044(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	5328(%rsp), %rdi        # 8-byte Reload
	movq	5336(%rsp), %rsi        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5320(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	movq	5312(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5043(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5104(%rsp), %rdi        # 8-byte Reload
	movq	5096(%rsp), %rsi        # 8-byte Reload
	movq	5088(%rsp), %rdx        # 8-byte Reload
	movq	5080(%rsp), %rcx        # 8-byte Reload
	movq	5344(%rsp), %r8         # 8-byte Reload
	movl	5076(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5056(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	5128(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5048(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	movq	5064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5344(%rsp), %rdi        # 8-byte Reload
	movq	5128(%rsp), %rsi        # 8-byte Reload
	movq	5128(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5160(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	movq	5112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5043(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5336(%rsp), %rdi        # 8-byte Reload
	movq	5336(%rsp), %rsi        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5120(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	movq	5136(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5043(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	6372(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 6520(%rsp)        # 4-byte Spill
	jne	.LBB2_38
	jmp	.LBB2_34
.Ltmp147:
.LBB2_38:                               # %.lr.ph
                                        #   in Loop: Header=BB2_34 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str1657, %r8
	leaq	.L.str1658, %rsi
	movabsq	$191, %rdi
	leaq	.L.str1654, %r9
	leaq	.L.str1655, %r10
	leaq	.L.str1656, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str1652, %r12
	leaq	.L.str1653, %r13
	movq	%rcx, 5032(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 5024(%rsp)        # 8-byte Spill
	leaq	.L.str1650, %rcx
	movq	%rcx, 5016(%rsp)        # 8-byte Spill
	leaq	.L.str1651, %rcx
	movq	%rcx, 5008(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 5000(%rsp)        # 8-byte Spill
	leaq	.L.str1647, %rcx
	movq	%rcx, 4992(%rsp)        # 8-byte Spill
	leaq	.L.str1648, %rcx
	movq	%rcx, 4984(%rsp)        # 8-byte Spill
	leaq	.L.str1649, %rcx
	movq	%rcx, 4976(%rsp)        # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 4968(%rsp)        # 8-byte Spill
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 4960(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	4992(%rsp), %rcx        # 8-byte Reload
	movq	%rsi, 4952(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	4984(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 4944(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	4976(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 4936(%rsp)         # 8-byte Spill
	movq	4968(%rsp), %r8         # 8-byte Reload
	movq	%r9, 4928(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 4924(%rsp)        # 4-byte Spill
	movq	%r14, 4912(%rsp)        # 8-byte Spill
	movq	%r15, 4904(%rsp)        # 8-byte Spill
	movl	%ebp, 4900(%rsp)        # 4-byte Spill
	movq	%r12, 4888(%rsp)        # 8-byte Spill
	movq	%r13, 4880(%rsp)        # 8-byte Spill
	movq	%rbx, 4872(%rsp)        # 8-byte Spill
	movq	%r10, 4864(%rsp)        # 8-byte Spill
	movq	%r11, 4856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	6372(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	5032(%rsp), %rdi        # 8-byte Reload
	movq	5024(%rsp), %rsi        # 8-byte Reload
	movq	5032(%rsp), %rcx        # 8-byte Reload
	movq	5016(%rsp), %r8         # 8-byte Reload
	movq	4944(%rsp), %r9         # 8-byte Reload
	movq	5008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6372(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	4912(%rsp), %rdi        # 8-byte Reload
	movq	4904(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5032(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 4848(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	4888(%rsp), %r8         # 8-byte Reload
	movq	4944(%rsp), %r9         # 8-byte Reload
	movq	4880(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	4928(%rsp), %rsi        # 8-byte Reload
	movq	4864(%rsp), %rdx        # 8-byte Reload
	movq	4856(%rsp), %rcx        # 8-byte Reload
	movq	4872(%rsp), %r8         # 8-byte Reload
	movl	4924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5032(%rsp), %rdi        # 8-byte Reload
	movq	4944(%rsp), %rsi        # 8-byte Reload
	movq	4944(%rsp), %rdx        # 8-byte Reload
	movq	5032(%rsp), %rcx        # 8-byte Reload
	movq	4936(%rsp), %r8         # 8-byte Reload
	movq	4944(%rsp), %r9         # 8-byte Reload
	movq	4952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4848(%rsp), %rcx        # 8-byte Reload
	movl	4924(%rsp), %eax        # 4-byte Reload
	movl	6372(%rsp), %ebp        # 4-byte Reload
	movq	%rcx, 4840(%rsp)        # 8-byte Spill
	movl	%eax, 4836(%rsp)        # 4-byte Spill
	movl	%ebp, 4832(%rsp)        # 4-byte Spill
.LBB2_39:                               #   Parent Loop BB2_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	4832(%rsp), %eax        # 4-byte Reload
	movl	4836(%rsp), %ecx        # 4-byte Reload
	movq	4840(%rsp), %rdx        # 8-byte Reload
	movabsq	$0, %rsi
	leaq	.L.str6177, %rdi
	movabsq	$24601, %r8             # imm = 0x6019
	movabsq	$64, %r9
	movabsq	$1, %r10
	leaq	.L.str1697, %r11
	leaq	.L.str1698, %rbx
	movabsq	$2, %r14
	leaq	.L.str1695, %r15
	leaq	.L.str1696, %r12
	leaq	.L.str1693, %r13
	leaq	.L.str1694, %rbp
	movq	%rdx, 4824(%rsp)        # 8-byte Spill
	leaq	.L.str1691, %rdx
	movq	%rdx, 4816(%rsp)        # 8-byte Spill
	leaq	.L.str1692, %rdx
	movq	%rdx, 4808(%rsp)        # 8-byte Spill
	movabsq	$3, %rdx
	movq	%rdx, 4800(%rsp)        # 8-byte Spill
	leaq	strtok, %rdx
	movq	%rdx, 4792(%rsp)        # 8-byte Spill
	leaq	.L.str1689, %rdx
	movq	%rdx, 4784(%rsp)        # 8-byte Spill
	leaq	.L.str1690, %rdx
	movq	%rdx, 4776(%rsp)        # 8-byte Spill
	movabsq	$192, %rdx
	movq	%rdx, 4768(%rsp)        # 8-byte Spill
	leaq	.L.str1686, %rdx
	movq	%rdx, 4760(%rsp)        # 8-byte Spill
	leaq	.L.str1687, %rdx
	movq	%rdx, 4752(%rsp)        # 8-byte Spill
	leaq	.L.str1688, %rdx
	movq	%rdx, 4744(%rsp)        # 8-byte Spill
	movabsq	$49, %rdx
	movl	%eax, 4740(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 4736(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rdx, 4728(%rsp)        # 8-byte Spill
	movabsq	$19134, %rdx            # imm = 0x4ABE
	movq	%rdx, 4720(%rsp)        # 8-byte Spill
	movabsq	$32, %rdx
	movq	%rdx, 4712(%rsp)        # 8-byte Spill
	leaq	.L.str1684, %rdx
	movq	%rdx, 4704(%rsp)        # 8-byte Spill
	leaq	.L.str1685, %rdx
	movq	%rdx, 4696(%rsp)        # 8-byte Spill
	leaq	.L.str1682, %rdx
	movq	%rdx, 4688(%rsp)        # 8-byte Spill
	leaq	.L.str1683, %rdx
	movq	%rdx, 4680(%rsp)        # 8-byte Spill
	leaq	.L.str1680, %rdx
	movq	%rdx, 4672(%rsp)        # 8-byte Spill
	leaq	.L.str1681, %rdx
	movq	%rdx, 4664(%rsp)        # 8-byte Spill
	movabsq	$-1, %rdx
	movq	%rdx, 4656(%rsp)        # 8-byte Spill
	leaq	.L.str1677, %rdx
	movq	%rdx, 4648(%rsp)        # 8-byte Spill
	leaq	.L.str1678, %rdx
	movq	%rdx, 4640(%rsp)        # 8-byte Spill
	leaq	.L.str1679, %rdx
	movq	%rdx, 4632(%rsp)        # 8-byte Spill
	movabsq	$48, %rdx
	movq	%rdx, 4624(%rsp)        # 8-byte Spill
	leaq	.L.str1675, %rdx
	movq	%rdx, 4616(%rsp)        # 8-byte Spill
	leaq	.L.str1676, %rdx
	movq	%rdx, 4608(%rsp)        # 8-byte Spill
	leaq	.L.str1673, %rdx
	movq	%rdx, 4600(%rsp)        # 8-byte Spill
	leaq	.L.str1674, %rdx
	movq	%rdx, 4592(%rsp)        # 8-byte Spill
	leaq	.L.str1671, %rdx
	movq	%rdx, 4584(%rsp)        # 8-byte Spill
	leaq	.L.str1672, %rdx
	movq	%rdx, 4576(%rsp)        # 8-byte Spill
	leaq	.L.str1668, %rdx
	movq	%rdx, 4568(%rsp)        # 8-byte Spill
	leaq	.L.str1669, %rdx
	movq	%rdx, 4560(%rsp)        # 8-byte Spill
	leaq	.L.str1670, %rdx
	movq	%rdx, 4552(%rsp)        # 8-byte Spill
	leaq	.L.str1666, %rdx
	movq	%rdx, 4544(%rsp)        # 8-byte Spill
	leaq	.L.str1667, %rdx
	movq	%rdx, 4536(%rsp)        # 8-byte Spill
	leaq	.L.str1664, %rdx
	movq	%rdx, 4528(%rsp)        # 8-byte Spill
	leaq	.L.str1665, %rdx
	movq	%rdx, 4520(%rsp)        # 8-byte Spill
	leaq	.L.str1662, %rdx
	movq	%rdx, 4512(%rsp)        # 8-byte Spill
	leaq	.L.str1663, %rdx
	movq	%rdx, 4504(%rsp)        # 8-byte Spill
	leaq	.L.str1659, %rdx
	movq	%rdx, 4496(%rsp)        # 8-byte Spill
	leaq	.L.str1660, %rdx
	movq	%rdx, 4488(%rsp)        # 8-byte Spill
	leaq	.L.str1661, %rdx
	.loc	3 192 0                 # kmeans.c:192:0
.Ltmp148:
	movq	%rdx, 4480(%rsp)        # 8-byte Spill
	movq	4656(%rsp), %rdx        # 8-byte Reload
	movq	%rdi, 4472(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	4496(%rsp), %rdx        # 8-byte Reload
	movq	%rsi, 4464(%rsp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	%r8, 4456(%rsp)         # 8-byte Spill
	movq	4480(%rsp), %r8         # 8-byte Reload
	movl	%ecx, 4452(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	4624(%rsp), %r8         # 8-byte Reload
	movl	%eax, 4448(%rsp)        # 4-byte Spill
	movl	4736(%rsp), %eax        # 4-byte Reload
	movq	%r9, 4440(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4432(%rsp)        # 8-byte Spill
	movq	%r12, 4424(%rsp)        # 8-byte Spill
	movq	%r13, 4416(%rsp)        # 8-byte Spill
	movq	%rbp, 4408(%rsp)        # 8-byte Spill
	movq	%r14, 4400(%rsp)        # 8-byte Spill
	movq	%rbx, 4392(%rsp)        # 8-byte Spill
	movq	%r10, 4384(%rsp)        # 8-byte Spill
	movq	%r11, 4376(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	4400(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4464(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4512(%rsp), %r8         # 8-byte Reload
	movq	4384(%rsp), %r9         # 8-byte Reload
	movq	4504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4384(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4464(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4528(%rsp), %r8         # 8-byte Reload
	movq	4384(%rsp), %r9         # 8-byte Reload
	movq	4520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4720(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4824(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4464(%rsp), %r9         # 8-byte Reload
	movq	4536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4656(%rsp), %rdi        # 8-byte Reload
	movq	4568(%rsp), %rsi        # 8-byte Reload
	movq	4560(%rsp), %rdx        # 8-byte Reload
	movq	4552(%rsp), %rcx        # 8-byte Reload
	movq	4624(%rsp), %r8         # 8-byte Reload
	movl	4736(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4400(%rsp), %rdi        # 8-byte Reload
	movq	4712(%rsp), %rsi        # 8-byte Reload
	movq	4464(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4584(%rsp), %r8         # 8-byte Reload
	movq	4384(%rsp), %r9         # 8-byte Reload
	movq	4576(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4384(%rsp), %rdi        # 8-byte Reload
	movq	4712(%rsp), %rsi        # 8-byte Reload
	movq	4464(%rsp), %rdx        # 8-byte Reload
	movq	4464(%rsp), %rcx        # 8-byte Reload
	movq	4600(%rsp), %r8         # 8-byte Reload
	movq	4384(%rsp), %r9         # 8-byte Reload
	movq	4592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	4452(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	4720(%rsp), %rdi        # 8-byte Reload
	movq	4712(%rsp), %rsi        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4464(%rsp), %r9         # 8-byte Reload
	movq	4608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4656(%rsp), %rdi        # 8-byte Reload
	movq	4648(%rsp), %rsi        # 8-byte Reload
	movq	4640(%rsp), %rdx        # 8-byte Reload
	movq	4632(%rsp), %rcx        # 8-byte Reload
	movq	4624(%rsp), %r8         # 8-byte Reload
	movl	4736(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4400(%rsp), %rdi        # 8-byte Reload
	movq	4712(%rsp), %rsi        # 8-byte Reload
	movq	4464(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4672(%rsp), %r8         # 8-byte Reload
	movq	4384(%rsp), %r9         # 8-byte Reload
	movq	4664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4384(%rsp), %rdi        # 8-byte Reload
	movq	4712(%rsp), %rsi        # 8-byte Reload
	movq	4464(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movq	4384(%rsp), %r9         # 8-byte Reload
	movq	4680(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	4740(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	4720(%rsp), %rdi        # 8-byte Reload
	movq	4712(%rsp), %rsi        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4704(%rsp), %r8         # 8-byte Reload
	movq	4464(%rsp), %r9         # 8-byte Reload
	movq	4696(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4768(%rsp), %rdi        # 8-byte Reload
	movq	4760(%rsp), %rsi        # 8-byte Reload
	movq	4752(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4728(%rsp), %r8         # 8-byte Reload
	movl	4736(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4792(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4784(%rsp), %r8         # 8-byte Reload
	movq	4464(%rsp), %r9         # 8-byte Reload
	movq	4776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4384(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4464(%rsp), %rdx        # 8-byte Reload
	movq	4464(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4464(%rsp), %r9         # 8-byte Reload
	movq	4808(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4456(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4464(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4416(%rsp), %r8         # 8-byte Reload
	movq	4464(%rsp), %r9         # 8-byte Reload
	movq	4408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4400(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4472(%rsp), %rdx        # 8-byte Reload
	movq	4464(%rsp), %rcx        # 8-byte Reload
	movq	4432(%rsp), %r8         # 8-byte Reload
	movq	4464(%rsp), %r9         # 8-byte Reload
	movq	4424(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4456(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4472(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4376(%rsp), %r8         # 8-byte Reload
	movq	4464(%rsp), %r9         # 8-byte Reload
	movq	4392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4472(%rsp), %rsi        # 8-byte Reload
	callq	strtok
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str1708, %r8
	movabsq	$0, %rsi
	leaq	.L.str1709, %r9
	leaq	.L.str1706, %r10
	leaq	.L.str1707, %r11
	movabsq	$2, %rbx
	leaq	atof, %r14
	leaq	.L.str1704, %r15
	leaq	.L.str1705, %r12
	movabsq	$192, %r13
	leaq	.L.str1701, %rbp
	movq	%rax, 4368(%rsp)        # 8-byte Spill
	leaq	.L.str1702, %rax
	movq	%rax, 4360(%rsp)        # 8-byte Spill
	leaq	.L.str1703, %rax
	movq	%rax, 4352(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 4344(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 4340(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 4328(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 4320(%rsp)        # 8-byte Spill
	leaq	.L.str1699, %rax
	movq	%rax, 4312(%rsp)        # 8-byte Spill
	leaq	.L.str1700, %rax
	.loc	3 192 26                # kmeans.c:192:26
	movq	%rax, 4304(%rsp)        # 8-byte Spill
	movq	4320(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4296(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 4292(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	4368(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 4280(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4272(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4312(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4264(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	4344(%rsp), %rax        # 8-byte Reload
	movq	%r9, 4256(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	4304(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 4248(%rsp)        # 8-byte Spill
	movq	%r15, 4240(%rsp)        # 8-byte Spill
	movq	%r12, 4232(%rsp)        # 8-byte Spill
	movq	%r14, 4224(%rsp)        # 8-byte Spill
	movq	%r13, 4216(%rsp)        # 8-byte Spill
	movq	%rbx, 4208(%rsp)        # 8-byte Spill
	movq	%r10, 4200(%rsp)        # 8-byte Spill
	movq	%r11, 4192(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4216(%rsp), %rdi        # 8-byte Reload
	movq	4248(%rsp), %rsi        # 8-byte Reload
	movq	4360(%rsp), %rdx        # 8-byte Reload
	movq	4352(%rsp), %rcx        # 8-byte Reload
	movq	4328(%rsp), %r8         # 8-byte Reload
	movl	4340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4272(%rsp), %rsi        # 8-byte Reload
	movq	4224(%rsp), %rdx        # 8-byte Reload
	movq	4280(%rsp), %rcx        # 8-byte Reload
	movq	4240(%rsp), %r8         # 8-byte Reload
	movq	4344(%rsp), %r9         # 8-byte Reload
	movq	4232(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4280(%rsp), %rdi        # 8-byte Reload
	movq	4272(%rsp), %rsi        # 8-byte Reload
	movq	4368(%rsp), %rdx        # 8-byte Reload
	movq	4280(%rsp), %rcx        # 8-byte Reload
	movq	4200(%rsp), %r8         # 8-byte Reload
	movq	4344(%rsp), %r9         # 8-byte Reload
	movq	4192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4296(%rsp), %rdi        # 8-byte Reload
	movq	4272(%rsp), %rsi        # 8-byte Reload
	movq	4368(%rsp), %rdx        # 8-byte Reload
	movq	4280(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4344(%rsp), %r9         # 8-byte Reload
	movq	4256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4368(%rsp), %rdi        # 8-byte Reload
	callq	atof
	movabsq	$1, %rax
	leaq	.L.str1785, %r8
	movabsq	$0, %rcx
	leaq	.L.str1786, %rdx
	movabsq	$2, %rsi
	leaq	.L.str1783, %rdi
	leaq	.L.str1784, %r9
	movabsq	$3, %r10
	leaq	.L.str1781, %r11
	leaq	.L.str1782, %rbx
	movabsq	$191, %r14
	leaq	.L.str1778, %r15
	leaq	.L.str1779, %r12
	leaq	.L.str1780, %r13
	movl	$0, %ebp
	movq	%rsi, 4184(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 4176(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 4168(%rsp)        # 8-byte Spill
	leaq	.L.str1776, %rax
	movq	%rax, 4160(%rsp)        # 8-byte Spill
	leaq	.L.str1777, %rax
	movq	%rax, 4152(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4144(%rsp)        # 8-byte Spill
	leaq	.L.str1774, %rax
	movq	%rax, 4136(%rsp)        # 8-byte Spill
	leaq	.L.str1775, %rax
	movq	%rax, 4128(%rsp)        # 8-byte Spill
	leaq	.L.str1772, %rax
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	leaq	.L.str1773, %rax
	movq	%rax, 4112(%rsp)        # 8-byte Spill
	leaq	.L.str1769, %rax
	movq	%rax, 4104(%rsp)        # 8-byte Spill
	leaq	.L.str1770, %rax
	movq	%rax, 4096(%rsp)        # 8-byte Spill
	leaq	.L.str1771, %rax
	movq	%rax, 4088(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4080(%rsp)        # 8-byte Spill
	leaq	.L.str1767, %rax
	movq	%rax, 4072(%rsp)        # 8-byte Spill
	leaq	.L.str1768, %rax
	movq	%rax, 4064(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4056(%rsp)        # 8-byte Spill
	leaq	.L.str1765, %rax
	movq	%rax, 4048(%rsp)        # 8-byte Spill
	leaq	.L.str1766, %rax
	movq	%rax, 4040(%rsp)        # 8-byte Spill
	leaq	25564(%rsp), %rax
	movq	%rax, 4032(%rsp)        # 8-byte Spill
	leaq	.L.str1762, %rax
	movq	%rax, 4024(%rsp)        # 8-byte Spill
	leaq	.L.str1763, %rax
	movq	%rax, 4016(%rsp)        # 8-byte Spill
	leaq	.L.str1764, %rax
	movq	%rax, 4008(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4000(%rsp)        # 8-byte Spill
	leaq	.L.str1760, %rax
	movq	%rax, 3992(%rsp)        # 8-byte Spill
	leaq	.L.str1761, %rax
	movq	%rax, 3984(%rsp)        # 8-byte Spill
	leaq	.L.str1758, %rax
	movq	%rax, 3976(%rsp)        # 8-byte Spill
	leaq	.L.str1759, %rax
	movq	%rax, 3968(%rsp)        # 8-byte Spill
	leaq	.L.str1756, %rax
	movq	%rax, 3960(%rsp)        # 8-byte Spill
	leaq	.L.str1757, %rax
	movq	%rax, 3952(%rsp)        # 8-byte Spill
	leaq	.L.str1753, %rax
	movq	%rax, 3944(%rsp)        # 8-byte Spill
	leaq	.L.str1754, %rax
	movq	%rax, 3936(%rsp)        # 8-byte Spill
	leaq	.L.str1755, %rax
	movq	%rax, 3928(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3920(%rsp)        # 8-byte Spill
	leaq	.L.str1751, %rax
	movq	%rax, 3912(%rsp)        # 8-byte Spill
	leaq	.L.str1752, %rax
	movq	%rax, 3904(%rsp)        # 8-byte Spill
	leaq	.L.str1749, %rax
	movq	%rax, 3896(%rsp)        # 8-byte Spill
	leaq	.L.str1750, %rax
	movq	%rax, 3888(%rsp)        # 8-byte Spill
	leaq	.L.str1747, %rax
	movq	%rax, 3880(%rsp)        # 8-byte Spill
	leaq	.L.str1748, %rax
	movq	%rax, 3872(%rsp)        # 8-byte Spill
	movabsq	$193, %rax
	movq	%rax, 3864(%rsp)        # 8-byte Spill
	leaq	.L.str1744, %rax
	movq	%rax, 3856(%rsp)        # 8-byte Spill
	leaq	.L.str1745, %rax
	movq	%rax, 3848(%rsp)        # 8-byte Spill
	leaq	.L.str1746, %rax
	movq	%rax, 3840(%rsp)        # 8-byte Spill
	leaq	.L.str1742, %rax
	movq	%rax, 3832(%rsp)        # 8-byte Spill
	leaq	.L.str1743, %rax
	movq	%rax, 3824(%rsp)        # 8-byte Spill
	leaq	.L.str1740, %rax
	movq	%rax, 3816(%rsp)        # 8-byte Spill
	leaq	.L.str1741, %rax
	movq	%rax, 3808(%rsp)        # 8-byte Spill
	leaq	.L.str1738, %rax
	movq	%rax, 3800(%rsp)        # 8-byte Spill
	leaq	.L.str1739, %rax
	movq	%rax, 3792(%rsp)        # 8-byte Spill
	leaq	.L.str1735, %rax
	movq	%rax, 3784(%rsp)        # 8-byte Spill
	leaq	.L.str1736, %rax
	movq	%rax, 3776(%rsp)        # 8-byte Spill
	leaq	.L.str1737, %rax
	movq	%rax, 3768(%rsp)        # 8-byte Spill
	leaq	.L.str1733, %rax
	movq	%rax, 3760(%rsp)        # 8-byte Spill
	leaq	.L.str1734, %rax
	movq	%rax, 3752(%rsp)        # 8-byte Spill
	leaq	.L.str1731, %rax
	movq	%rax, 3744(%rsp)        # 8-byte Spill
	leaq	.L.str1732, %rax
	movq	%rax, 3736(%rsp)        # 8-byte Spill
	movabsq	$192, %rax
	movq	%rax, 3728(%rsp)        # 8-byte Spill
	leaq	.L.str1728, %rax
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	leaq	.L.str1729, %rax
	movq	%rax, 3712(%rsp)        # 8-byte Spill
	leaq	.L.str1730, %rax
	movq	%rax, 3704(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 3696(%rsp)        # 8-byte Spill
	leaq	.L.str1726, %rax
	movq	%rax, 3688(%rsp)        # 8-byte Spill
	leaq	.L.str1727, %rax
	movq	%rax, 3680(%rsp)        # 8-byte Spill
	leaq	.L.str1724, %rax
	movq	%rax, 3672(%rsp)        # 8-byte Spill
	leaq	.L.str1725, %rax
	movq	%rax, 3664(%rsp)        # 8-byte Spill
	leaq	.L.str1722, %rax
	movq	%rax, 3656(%rsp)        # 8-byte Spill
	leaq	.L.str1723, %rax
	movq	%rax, 3648(%rsp)        # 8-byte Spill
	leaq	.L.str1719, %rax
	movq	%rax, 3640(%rsp)        # 8-byte Spill
	leaq	.L.str1720, %rax
	movq	%rax, 3632(%rsp)        # 8-byte Spill
	leaq	.L.str1721, %rax
	movq	%rax, 3624(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3616(%rsp)        # 8-byte Spill
	leaq	.L.str1717, %rax
	movq	%rax, 3608(%rsp)        # 8-byte Spill
	leaq	.L.str1718, %rax
	movq	%rax, 3600(%rsp)        # 8-byte Spill
	leaq	.L.str1715, %rax
	movq	%rax, 3592(%rsp)        # 8-byte Spill
	leaq	.L.str1716, %rax
	movq	%rax, 3584(%rsp)        # 8-byte Spill
	leaq	.L.str1712, %rax
	movq	%rax, 3576(%rsp)        # 8-byte Spill
	leaq	.L.str1713, %rax
	movq	%rax, 3568(%rsp)        # 8-byte Spill
	leaq	.L.str1714, %rax
	movq	%rax, 3560(%rsp)        # 8-byte Spill
	movabsq	$40, %rax
	movq	%rax, 3552(%rsp)        # 8-byte Spill
	leaq	.L.str1710, %rax
	movq	%rax, 3544(%rsp)        # 8-byte Spill
	leaq	.L.str1711, %rax
	movq	%rax, 3536(%rsp)        # 8-byte Spill
	movq	4168(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3528(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	4056(%rsp), %rax        # 8-byte Reload
	movl	%esi, 3524(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 3512(%rsp)       # 8-byte Spill
	movq	4176(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3504(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3544(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3496(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3496(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3488(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	3536(%rsp), %rax        # 8-byte Reload
	movq	%r9, 3480(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r12, 3472(%rsp)        # 8-byte Spill
	movq	%rbx, 3464(%rsp)        # 8-byte Spill
	movq	%r14, 3456(%rsp)        # 8-byte Spill
	movq	%r15, 3448(%rsp)        # 8-byte Spill
	movq	%r13, 3440(%rsp)        # 8-byte Spill
	movl	%ebp, 3436(%rsp)        # 4-byte Spill
	movq	%r11, 3424(%rsp)        # 8-byte Spill
	movq	%r10, 3416(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	3728(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3568(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3552(%rsp), %r8         # 8-byte Reload
	movl	3436(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	4176(%rsp), %rdx        # 8-byte Reload
	movq	3592(%rsp), %rcx        # 8-byte Reload
	movq	3496(%rsp), %r8         # 8-byte Reload
	movq	3584(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	cvtsd2ss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	4168(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rdx        # 8-byte Reload
	movq	3608(%rsp), %rcx        # 8-byte Reload
	movq	3496(%rsp), %r8         # 8-byte Reload
	movq	3600(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm1, 3412(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	3728(%rsp), %rdi        # 8-byte Reload
	movq	3640(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3624(%rsp), %rcx        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movl	3436(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	4824(%rsp), %rdx        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	9168(%rsp), %rdx        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3672(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4824(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	9168(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	4168(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4176(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3400(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3688(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3680(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3728(%rsp), %rdi        # 8-byte Reload
	movq	3720(%rsp), %rsi        # 8-byte Reload
	movq	3712(%rsp), %rdx        # 8-byte Reload
	movq	3704(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %r8         # 8-byte Reload
	movl	3436(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	3400(%rsp), %rdx        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3744(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3736(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovss	3412(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rdx        # 8-byte Reload
	movq	3760(%rsp), %rcx        # 8-byte Reload
	movq	3496(%rsp), %r8         # 8-byte Reload
	movq	3752(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9168(%rsp), %rax        # 8-byte Reload
	movq	4824(%rsp), %rcx        # 8-byte Reload
	vmovss	3412(%rsp), %xmm0       # 4-byte Reload
	vmovss	%xmm0, (%rax,%rcx,4)
.Ltmp149:
	.loc	3 191 0                 # kmeans.c:191:0
	movq	3456(%rsp), %rdi        # 8-byte Reload
	movq	3784(%rsp), %rsi        # 8-byte Reload
	movq	3776(%rsp), %rdx        # 8-byte Reload
	movq	3768(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movl	3436(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rdx        # 8-byte Reload
	movq	3496(%rsp), %rcx        # 8-byte Reload
	movq	3800(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	4824(%rsp), %rdx        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4824(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	.loc	3 193 0                 # kmeans.c:193:0
.Ltmp150:
	movq	4168(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3832(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3824(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3392(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	3856(%rsp), %rsi        # 8-byte Reload
	movq	3848(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movl	3436(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rdx        # 8-byte Reload
	movq	3496(%rsp), %rcx        # 8-byte Reload
	movq	3880(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4740(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3896(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3888(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4740(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4168(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3904(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 3388(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp151:
	#DEBUG_VALUE: main:i <- [RSP+3388]
	.loc	3 191 0                 # kmeans.c:191:0
	movq	3456(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	movq	3936(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movl	3436(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rdx        # 8-byte Reload
	movq	3496(%rsp), %rcx        # 8-byte Reload
	movq	3960(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4452(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3976(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3968(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4452(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4168(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3992(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 3384(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp152:
	#DEBUG_VALUE: main:j <- [RSP+3384]
	#DEBUG_VALUE: main:numAttributes <- [RSP+4032]
	movq	3456(%rsp), %rdi        # 8-byte Reload
	movq	4024(%rsp), %rsi        # 8-byte Reload
	movq	4016(%rsp), %rdx        # 8-byte Reload
	movq	4008(%rsp), %rcx        # 8-byte Reload
	movq	4000(%rsp), %r8         # 8-byte Reload
	movl	3436(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4056(%rsp), %rsi        # 8-byte Reload
	movq	4032(%rsp), %rdx        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	4048(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	4040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4168(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	4072(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	4064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 3380(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3456(%rsp), %rdi        # 8-byte Reload
	movq	4104(%rsp), %rsi        # 8-byte Reload
	movq	4096(%rsp), %rdx        # 8-byte Reload
	movq	4088(%rsp), %rcx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movl	3436(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	4120(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	4112(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3384(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4144(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	4136(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	4128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3384(%rsp), %ebp        # 4-byte Reload
	movl	3380(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	4168(%rsp), %rdi        # 8-byte Reload
	movq	4176(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	4160(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	4152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3379(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3456(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3472(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	4184(%rsp), %r8         # 8-byte Reload
	movl	3436(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3496(%rsp), %rsi        # 8-byte Reload
	movq	3496(%rsp), %rdx        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	3496(%rsp), %rsi        # 8-byte Reload
	movq	3496(%rsp), %rdx        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3528(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3480(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3379(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4176(%rsp), %rdi        # 8-byte Reload
	movq	4176(%rsp), %rsi        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	3488(%rsp), %r8         # 8-byte Reload
	movq	3496(%rsp), %r9         # 8-byte Reload
	movq	3504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3379(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	3388(%rsp), %ebp        # 4-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movl	3384(%rsp), %eax        # 4-byte Reload
	movl	3388(%rsp), %esi        # 4-byte Reload
	movl	%eax, 4836(%rsp)        # 4-byte Spill
	movl	%ebp, 6520(%rsp)        # 4-byte Spill
	movq	%rcx, 4840(%rsp)        # 8-byte Spill
	movl	%esi, 4832(%rsp)        # 4-byte Spill
	jne	.LBB2_39
	jmp	.LBB2_34
.Ltmp153:
.LBB2_40:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str1794, %r8
	movabsq	$0, %rdx
	leaq	.L.str1795, %rsi
	leaq	.L.str1792, %r9
	leaq	.L.str1793, %r10
	movabsq	$2, %r11
	leaq	fclose, %rbx
	leaq	.L.str1790, %r14
	leaq	.L.str1791, %r15
	movabsq	$196, %r12
	leaq	.L.str1787, %r13
	leaq	.L.str1788, %rbp
	movq	%rax, 3368(%rsp)        # 8-byte Spill
	leaq	.L.str1789, %rax
	movq	%rax, 3360(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 3352(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 3348(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	3 196 0                 # kmeans.c:196:0
	movq	%rdi, 3336(%rsp)        # 8-byte Spill
	movq	%r12, %rdi
	movl	%esi, 3332(%rsp)        # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 3320(%rsp)        # 8-byte Spill
	movq	%rbp, %rdx
	movq	3360(%rsp), %r12        # 8-byte Reload
	movq	%rcx, 3312(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 3304(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	3348(%rsp), %ebp        # 4-byte Reload
	movq	%r9, 3296(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 3288(%rsp)        # 8-byte Spill
	movq	%r11, 3280(%rsp)        # 8-byte Spill
	movq	%r10, 3272(%rsp)        # 8-byte Spill
	movq	%rbx, 3264(%rsp)        # 8-byte Spill
	movq	%r15, 3256(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3368(%rsp), %rsi        # 8-byte Reload
	movq	3264(%rsp), %rdx        # 8-byte Reload
	movq	3312(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3312(%rsp), %rdi        # 8-byte Reload
	movq	3368(%rsp), %rsi        # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	3312(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3368(%rsp), %rsi        # 8-byte Reload
	movq	15024(%rsp), %rdx       # 8-byte Reload
	movq	3312(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3352(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15024(%rsp), %rdi       # 8-byte Reload
	callq	fclose
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str1801, %r8
	leaq	.L.str1802, %rsi
	movabsq	$-1, %rdi
	leaq	.L.str1798, %r9
	leaq	.L.str1799, %r10
	leaq	.L.str1800, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$32, %r12
	leaq	.L.str1796, %r13
	movq	%rcx, 3248(%rsp)        # 8-byte Spill
	leaq	.L.str1797, %rcx
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rdi, 3240(%rsp)        # 8-byte Spill
	movq	%r15, %rdi
	movq	%rsi, 3232(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	%rdx, 3224(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3216(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, 3208(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	3224(%rsp), %r15        # 8-byte Reload
	movq	%r9, 3200(%rsp)         # 8-byte Spill
	movq	%r15, %r9
	movq	3216(%rsp), %r12        # 8-byte Reload
	movq	%r12, (%rsp)
	movq	%r11, 3192(%rsp)        # 8-byte Spill
	movq	%rbx, 3184(%rsp)        # 8-byte Spill
	movq	%r10, 3176(%rsp)        # 8-byte Spill
	movl	%r14d, 3172(%rsp)       # 4-byte Spill
	movl	%ebp, 3168(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3240(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3176(%rsp), %rdx        # 8-byte Reload
	movq	3192(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3168(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3224(%rsp), %rsi        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3208(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3232(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	9168(%rsp), %rcx        # 8-byte Reload
	movq	%rax, 15256(%rsp)       # 8-byte Spill
	movq	%rcx, 15248(%rsp)       # 8-byte Spill
.Ltmp154:
.LBB2_41:
	movq	15248(%rsp), %rax       # 8-byte Reload
	movq	15256(%rsp), %rcx       # 8-byte Reload
	leaq	.Lstr, %rdx
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rsi
	movabsq	$1, %r8
	leaq	.L.str1828, %r9
	movabsq	$0, %r10
	leaq	.L.str1829, %r11
	leaq	.L.str1826, %rbx
	leaq	.L.str1827, %r14
	movabsq	$2, %r15
	leaq	puts, %r12
	leaq	.L.str1824, %r13
	leaq	.L.str1825, %rbp
	movq	%rax, 3160(%rsp)        # 8-byte Spill
	movabsq	$200, %rax
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	leaq	.L.str1821, %rax
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	leaq	.L.str1822, %rax
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	leaq	.L.str1823, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 3120(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 3116(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str1819, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	leaq	.L.str1820, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	leaq	.L.str1817, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str1818, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str1815, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	leaq	.L.str1816, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str1812, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	leaq	.L.str1813, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	leaq	.L.str1814, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str1810, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str1811, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str1808, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	leaq	.L.str1809, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str1806, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	leaq	.L.str1807, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str1803, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	leaq	.L.str1804, %rax
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	leaq	.L.str1805, %rax
	.loc	3 199 0                 # kmeans.c:199:0
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	movq	3040(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2928(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	2952(%rsp), %rax        # 8-byte Reload
	movl	%esi, 2924(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	2944(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2912(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	2936(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2904(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3008(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2896(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	3116(%rsp), %eax        # 4-byte Reload
	movq	%r9, 2888(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2880(%rsp)        # 8-byte Spill
	movq	%r12, 2872(%rsp)        # 8-byte Spill
	movq	%rbp, 2864(%rsp)        # 8-byte Spill
	movq	%r13, 2856(%rsp)        # 8-byte Spill
	movq	%r14, 2848(%rsp)        # 8-byte Spill
	movq	%rbx, 2840(%rsp)        # 8-byte Spill
	movq	%r10, 2832(%rsp)        # 8-byte Spill
	movq	%r11, 2824(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2896(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2896(%rsp), %r9         # 8-byte Reload
	movq	2960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2896(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2896(%rsp), %r9         # 8-byte Reload
	movq	2976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3096(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	2896(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	2832(%rsp), %r9         # 8-byte Reload
	movq	2992(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	3016(%rsp), %rcx        # 8-byte Reload
	movq	3008(%rsp), %r8         # 8-byte Reload
	movl	3116(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2896(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2896(%rsp), %r9         # 8-byte Reload
	movq	3048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2896(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2896(%rsp), %r9         # 8-byte Reload
	movq	3064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3096(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	3160(%rsp), %rdx        # 8-byte Reload
	movq	2896(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2832(%rsp), %r9         # 8-byte Reload
	movq	3080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp155:
	#DEBUG_VALUE: main:nloops <- 1
	.loc	3 200 0                 # kmeans.c:200:0
	movq	3152(%rsp), %rdi        # 8-byte Reload
	movq	3144(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	3128(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	3116(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	2896(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2832(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2832(%rsp), %r9         # 8-byte Reload
	movq	2848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2896(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2832(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2912(%rsp), %rdi        # 8-byte Reload
	callq	puts
	leaq	25568(%rsp), %rcx
	movabsq	$24601, %rdx            # imm = 0x6019
	movabsq	$64, %rsi
	movabsq	$1, %rdi
	leaq	.L.str1940, %r8
	movabsq	$0, %r9
	leaq	.L.str1941, %r10
	movabsq	$6, %r11
	leaq	.L.str1938, %rbx
	leaq	.L.str1939, %r14
	movabsq	$32, %r15
	leaq	.L.str1936, %r12
	leaq	.L.str1937, %r13
	movabsq	$5, %rbp
	movq	%rcx, 2816(%rsp)        # 8-byte Spill
	leaq	.L.str1934, %rcx
	movq	%rcx, 2808(%rsp)        # 8-byte Spill
	leaq	.L.str1935, %rcx
	movq	%rcx, 2800(%rsp)        # 8-byte Spill
	leaq	.L.str1932, %rcx
	movq	%rcx, 2792(%rsp)        # 8-byte Spill
	leaq	.L.str1933, %rcx
	movq	%rcx, 2784(%rsp)        # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 2776(%rsp)        # 8-byte Spill
	leaq	.L.str1930, %rcx
	movq	%rcx, 2768(%rsp)        # 8-byte Spill
	leaq	.L.str1931, %rcx
	movq	%rcx, 2760(%rsp)        # 8-byte Spill
	leaq	.L.str1928, %rcx
	movq	%rcx, 2752(%rsp)        # 8-byte Spill
	leaq	.L.str1929, %rcx
	movq	%rcx, 2744(%rsp)        # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, 2736(%rsp)        # 8-byte Spill
	leaq	.L.str1926, %rcx
	movq	%rcx, 2728(%rsp)        # 8-byte Spill
	leaq	.L.str1927, %rcx
	movq	%rcx, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str1924, %rcx
	movq	%rcx, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str1925, %rcx
	movq	%rcx, 2704(%rsp)        # 8-byte Spill
	movabsq	$2, %rcx
	movq	%rcx, 2696(%rsp)        # 8-byte Spill
	leaq	.L.str1922, %rcx
	movq	%rcx, 2688(%rsp)        # 8-byte Spill
	leaq	.L.str1923, %rcx
	movq	%rcx, 2680(%rsp)        # 8-byte Spill
	leaq	.L.str1920, %rcx
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
	leaq	.L.str1921, %rcx
	movq	%rcx, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str1918, %rcx
	movq	%rcx, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str1919, %rcx
	movq	%rcx, 2648(%rsp)        # 8-byte Spill
	movabsq	$7, %rcx
	movq	%rcx, 2640(%rsp)        # 8-byte Spill
	leaq	cluster, %rcx
	movq	%rcx, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str1916, %rcx
	movq	%rcx, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str1917, %rcx
	movq	%rcx, 2616(%rsp)        # 8-byte Spill
	movabsq	$208, %rcx
	movq	%rcx, 2608(%rsp)        # 8-byte Spill
	leaq	.L.str1913, %rcx
	movq	%rcx, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str1914, %rcx
	movq	%rcx, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str1915, %rcx
	movq	%rcx, 2584(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 2580(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 2576(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 2568(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str1911, %rcx
	movq	%rcx, 2552(%rsp)        # 8-byte Spill
	leaq	.L.str1912, %rcx
	movq	%rcx, 2544(%rsp)        # 8-byte Spill
	leaq	.L.str1909, %rcx
	movq	%rcx, 2536(%rsp)        # 8-byte Spill
	leaq	.L.str1910, %rcx
	movq	%rcx, 2528(%rsp)        # 8-byte Spill
	leaq	25564(%rsp), %rcx
	movq	%rcx, 2520(%rsp)        # 8-byte Spill
	leaq	.L.str1906, %rcx
	movq	%rcx, 2512(%rsp)        # 8-byte Spill
	leaq	.L.str1907, %rcx
	movq	%rcx, 2504(%rsp)        # 8-byte Spill
	leaq	.L.str1908, %rcx
	movq	%rcx, 2496(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 2488(%rsp)        # 8-byte Spill
	leaq	.L.str1904, %rcx
	movq	%rcx, 2480(%rsp)        # 8-byte Spill
	leaq	.L.str1905, %rcx
	movq	%rcx, 2472(%rsp)        # 8-byte Spill
	leaq	.L.str1902, %rcx
	movq	%rcx, 2464(%rsp)        # 8-byte Spill
	leaq	.L.str1903, %rcx
	movq	%rcx, 2456(%rsp)        # 8-byte Spill
	leaq	25560(%rsp), %rcx
	movq	%rcx, 2448(%rsp)        # 8-byte Spill
	leaq	.L.str1899, %rcx
	movq	%rcx, 2440(%rsp)        # 8-byte Spill
	leaq	.L.str1900, %rcx
	movq	%rcx, 2432(%rsp)        # 8-byte Spill
	leaq	.L.str1901, %rcx
	movq	%rcx, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str1897, %rcx
	movq	%rcx, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str1898, %rcx
	movq	%rcx, 2408(%rsp)        # 8-byte Spill
	leaq	.L.str1895, %rcx
	movq	%rcx, 2400(%rsp)        # 8-byte Spill
	leaq	.L.str1896, %rcx
	movq	%rcx, 2392(%rsp)        # 8-byte Spill
	movabsq	$207, %rcx
	movq	%rcx, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str1892, %rcx
	movq	%rcx, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str1893, %rcx
	movq	%rcx, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str1894, %rcx
	movq	%rcx, 2360(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str1890, %rcx
	movq	%rcx, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str1891, %rcx
	movq	%rcx, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str1888, %rcx
	movq	%rcx, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str1889, %rcx
	movq	%rcx, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str1886, %rcx
	movq	%rcx, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str1887, %rcx
	movq	%rcx, 2304(%rsp)        # 8-byte Spill
	movabsq	$202, %rcx
	movq	%rcx, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str1883, %rcx
	movq	%rcx, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str1884, %rcx
	movq	%rcx, 2280(%rsp)        # 8-byte Spill
	leaq	.L.str1885, %rcx
	movq	%rcx, 2272(%rsp)        # 8-byte Spill
	movabsq	$20, %rcx
	movq	%rcx, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str1881, %rcx
	movq	%rcx, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str1882, %rcx
	movq	%rcx, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str1879, %rcx
	movq	%rcx, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str1880, %rcx
	movq	%rcx, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str1876, %rcx
	movq	%rcx, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str1877, %rcx
	movq	%rcx, 2216(%rsp)        # 8-byte Spill
	leaq	.L.str1878, %rcx
	movq	%rcx, 2208(%rsp)        # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 2200(%rsp)        # 8-byte Spill
	leaq	.L.str1874, %rcx
	movq	%rcx, 2192(%rsp)        # 8-byte Spill
	leaq	.L.str1875, %rcx
	movq	%rcx, 2184(%rsp)        # 8-byte Spill
	leaq	.L.str1872, %rcx
	movq	%rcx, 2176(%rsp)        # 8-byte Spill
	leaq	.L.str1873, %rcx
	movq	%rcx, 2168(%rsp)        # 8-byte Spill
	leaq	.L.str1870, %rcx
	movq	%rcx, 2160(%rsp)        # 8-byte Spill
	leaq	.L.str1871, %rcx
	movq	%rcx, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str1867, %rcx
	movq	%rcx, 2144(%rsp)        # 8-byte Spill
	leaq	.L.str1868, %rcx
	movq	%rcx, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str1869, %rcx
	movq	%rcx, 2128(%rsp)        # 8-byte Spill
	movabsq	$12, %rcx
	movq	%rcx, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str1865, %rcx
	movq	%rcx, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str1866, %rcx
	movq	%rcx, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str1863, %rcx
	movq	%rcx, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str1864, %rcx
	movq	%rcx, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str1860, %rcx
	movq	%rcx, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str1861, %rcx
	movq	%rcx, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str1862, %rcx
	movq	%rcx, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str1858, %rcx
	movq	%rcx, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str1859, %rcx
	movq	%rcx, 2048(%rsp)        # 8-byte Spill
	leaq	.L.str1856, %rcx
	movq	%rcx, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str1857, %rcx
	movq	%rcx, 2032(%rsp)        # 8-byte Spill
	leaq	.L.str1853, %rcx
	movq	%rcx, 2024(%rsp)        # 8-byte Spill
	leaq	.L.str1854, %rcx
	movq	%rcx, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str1855, %rcx
	movq	%rcx, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str1851, %rcx
	movq	%rcx, 2000(%rsp)        # 8-byte Spill
	leaq	.L.str1852, %rcx
	movq	%rcx, 1992(%rsp)        # 8-byte Spill
	leaq	.L.str1849, %rcx
	movq	%rcx, 1984(%rsp)        # 8-byte Spill
	leaq	.L.str1850, %rcx
	movq	%rcx, 1976(%rsp)        # 8-byte Spill
	leaq	.L.str1846, %rcx
	movq	%rcx, 1968(%rsp)        # 8-byte Spill
	leaq	.L.str1847, %rcx
	movq	%rcx, 1960(%rsp)        # 8-byte Spill
	leaq	.L.str1848, %rcx
	movq	%rcx, 1952(%rsp)        # 8-byte Spill
	movabsq	$44, %rcx
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	leaq	.L.str1844, %rcx
	movq	%rcx, 1936(%rsp)        # 8-byte Spill
	leaq	.L.str1845, %rcx
	movq	%rcx, 1928(%rsp)        # 8-byte Spill
	leaq	.L.str1842, %rcx
	movq	%rcx, 1920(%rsp)        # 8-byte Spill
	leaq	.L.str1843, %rcx
	movq	%rcx, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str1839, %rcx
	movq	%rcx, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str1840, %rcx
	movq	%rcx, 1896(%rsp)        # 8-byte Spill
	leaq	.L.str1841, %rcx
	movq	%rcx, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str1837, %rcx
	movq	%rcx, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str1838, %rcx
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str1835, %rcx
	movq	%rcx, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str1836, %rcx
	movq	%rcx, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str1832, %rcx
	movq	%rcx, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str1833, %rcx
	movq	%rcx, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str1834, %rcx
	movq	%rcx, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str1830, %rcx
	movq	%rcx, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str1831, %rcx
	.loc	3 202 0                 # kmeans.c:202:0
	movl	%eax, 1820(%rsp)        # 4-byte Spill
	movl	2580(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	movq	2560(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1800(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1792(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	1808(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1784(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1776(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1824(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1768(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1760(%rsp)         # 8-byte Spill
	movq	1776(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 1752(%rsp)        # 8-byte Spill
	movq	%r15, 1744(%rsp)        # 8-byte Spill
	movq	%r12, 1736(%rsp)        # 8-byte Spill
	movq	%r13, 1728(%rsp)        # 8-byte Spill
	movq	%r14, 1720(%rsp)        # 8-byte Spill
	movq	%rbx, 1712(%rsp)        # 8-byte Spill
	movq	%r10, 1704(%rsp)        # 8-byte Spill
	movq	%r11, 1696(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	1848(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	2488(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2904(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1896(%rsp), %rdx        # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1920(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rax        # 8-byte Reload
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1936(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	1968(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	3160(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1984(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3160(%rsp), %rax        # 8-byte Reload
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1992(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp156:
	#DEBUG_VALUE: main:numObjects <- [RSP+2448]
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2016(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2488(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1668(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp157:
	#DEBUG_VALUE: main:numAttributes <- [RSP+2520]
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2080(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2488(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2520(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1664(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2144(%rsp), %rsi        # 8-byte Reload
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2120(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1668(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1664(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1664(%rsp), %esi        # 4-byte Reload
	movl	1668(%rsp), %edi        # 4-byte Reload
	imull	%edi, %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1660(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2184(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2224(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	2200(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1660(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2232(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1660(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2248(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2288(%rsp), %rsi        # 8-byte Reload
	movq	2280(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2696(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2304(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2320(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1648(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2336(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1680(%rsp), %rdi        # 8-byte Reload
	movq	1672(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	callq	memcpy
.Ltmp158:
	#DEBUG_VALUE: main:i <- 0
	.loc	3 207 0                 # kmeans.c:207:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2376(%rsp), %rsi        # 8-byte Reload
	movq	2368(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2816(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	$0, 25568(%rsp)
.Ltmp159:
	#DEBUG_VALUE: main:numObjects <- [RSP+2448]
	.loc	3 208 0                 # kmeans.c:208:0
	movq	2608(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	2488(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2464(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25560(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1636(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2480(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2472(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp160:
	#DEBUG_VALUE: main:numAttributes <- [RSP+2520]
	movq	2608(%rsp), %rdi        # 8-byte Reload
	movq	2512(%rsp), %rsi        # 8-byte Reload
	movq	2504(%rsp), %rdx        # 8-byte Reload
	movq	2496(%rsp), %rcx        # 8-byte Reload
	movq	2488(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2520(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1632(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2608(%rsp), %rdi        # 8-byte Reload
	movq	2600(%rsp), %rsi        # 8-byte Reload
	movq	2592(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movl	2576(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2640(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2632(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1636(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2656(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1636(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1632(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2688(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2680(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1632(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	22804(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	2776(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2768(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	22804(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	2784(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovss	23156(%rsp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1752(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	2800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	23156(%rsp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1728(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2816(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	2816(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1636(%rsp), %edi        # 4-byte Reload
	movl	1632(%rsp), %esi        # 4-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movl	22804(%rsp), %ecx       # 4-byte Reload
	vmovss	23156(%rsp), %xmm0      # 4-byte Reload
	movq	2816(%rsp), %r8         # 8-byte Reload
	callq	cluster
	leaq	.L.str8179, %rdx
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %r8
	movabsq	$1, %r9
	leaq	.L.str1951, %r10
	movabsq	$0, %r11
	leaq	.L.str1952, %rbx
	leaq	.L.str1949, %r14
	leaq	.L.str1950, %r15
	movabsq	$3, %r12
	leaq	printf, %r13
	leaq	.L.str1947, %rbp
	leaq	.L.str1948, %rsi
	movabsq	$220, %rcx
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str1944, %rcx
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str1945, %rcx
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str1946, %rcx
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 1596(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 1592(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1576(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str1942, %rcx
	movq	%rcx, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str1943, %rcx
.Ltmp161:
	.loc	3 220 0                 # kmeans.c:220:0
	movl	%eax, 1556(%rsp)        # 4-byte Spill
	movl	1596(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movq	1576(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1536(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1568(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1528(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1520(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1512(%rsp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1504(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1496(%rsp)         # 8-byte Spill
	movq	%r11, %r9
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, 1488(%rsp)        # 8-byte Spill
	movq	%rbp, 1480(%rsp)        # 8-byte Spill
	movq	%r12, 1472(%rsp)        # 8-byte Spill
	movq	%r15, 1464(%rsp)        # 8-byte Spill
	movq	%r10, 1456(%rsp)        # 8-byte Spill
	movq	%r11, 1448(%rsp)        # 8-byte Spill
	movq	%rbx, 1440(%rsp)        # 8-byte Spill
	movq	%r14, 1432(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movl	1592(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1496(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1520(%rsp), %rdx        # 8-byte Reload
	movq	1448(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1520(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movl	22804(%rsp), %esi       # 4-byte Reload
	movb	$0, %al
	callq	printf
	leaq	.L.str9180, %rcx
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rdx
	movabsq	$1, %r8
	leaq	.L.str1969, %r9
	movabsq	$0, %r10
	leaq	.L.str1970, %r11
	leaq	.L.str1967, %rbx
	leaq	.L.str1968, %r14
	movabsq	$3, %r15
	leaq	printf, %r12
	leaq	.L.str1965, %r13
	leaq	.L.str1966, %rbp
	movabsq	$221, %rsi
	movq	%rcx, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str1962, %rcx
	movq	%rcx, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str1963, %rcx
	movq	%rcx, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str1964, %rcx
	movq	%rcx, 1400(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 1396(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 1392(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1384(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str1960, %rcx
	movq	%rcx, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str1961, %rcx
	movq	%rcx, 1352(%rsp)        # 8-byte Spill
	leaq	.L.str1958, %rcx
	movq	%rcx, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str1959, %rcx
	movq	%rcx, 1336(%rsp)        # 8-byte Spill
	leaq	25564(%rsp), %rcx
	movq	%rcx, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str1955, %rcx
	movq	%rcx, 1320(%rsp)        # 8-byte Spill
	leaq	.L.str1956, %rcx
	movq	%rcx, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str1957, %rcx
	movq	%rcx, 1304(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str1953, %rcx
	movq	%rcx, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str1954, %rcx
	.loc	3 221 0                 # kmeans.c:221:0
	movl	%eax, 1284(%rsp)        # 4-byte Spill
	movl	1396(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movq	1376(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1264(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1368(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1256(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1248(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1240(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1232(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1224(%rsp)         # 8-byte Spill
	movq	%r10, %r9
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 1216(%rsp)        # 8-byte Spill
	movq	%r12, 1208(%rsp)        # 8-byte Spill
	movq	%r13, 1200(%rsp)        # 8-byte Spill
	movq	%r15, 1192(%rsp)        # 8-byte Spill
	movq	%r14, 1184(%rsp)        # 8-byte Spill
	movq	%r10, 1176(%rsp)        # 8-byte Spill
	movq	%r11, 1168(%rsp)        # 8-byte Spill
	movq	%rbx, 1160(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp162:
	#DEBUG_VALUE: main:numAttributes <- [RSP+1328]
	movq	1256(%rsp), %rdi        # 8-byte Reload
	movq	1320(%rsp), %rsi        # 8-byte Reload
	movq	1312(%rsp), %rdx        # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1392(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1336(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	25564(%rsp), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1368(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1156(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1352(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1256(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1408(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movl	1392(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1184(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movl	1156(%rsp), %esi        # 4-byte Reload
	movb	$0, %al
	callq	printf
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str1987, %r8
	movabsq	$0, %r9
	leaq	.L.str1988, %r10
	leaq	.L.str1985, %r11
	leaq	.L.str1986, %rbx
	movabsq	$2, %r14
	leaq	free, %r15
	leaq	.L.str1983, %r12
	leaq	.L.str1984, %r13
	movabsq	$234, %rbp
	leaq	.L.str1980, %rsi
	movq	%rcx, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str1981, %rcx
	movq	%rcx, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str1982, %rcx
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 1124(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 1120(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str1978, %rcx
	movq	%rcx, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str1979, %rcx
	movq	%rcx, 1088(%rsp)        # 8-byte Spill
	leaq	.L.str1976, %rcx
	movq	%rcx, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str1977, %rcx
	movq	%rcx, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str1973, %rcx
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str1974, %rcx
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str1975, %rcx
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movabsq	$44, %rcx
	movq	%rcx, 1040(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str1971, %rcx
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	leaq	.L.str1972, %rcx
	.loc	3 234 0                 # kmeans.c:234:0
	movl	%eax, 1020(%rsp)        # 4-byte Spill
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	movq	1104(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1000(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1032(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 992(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 984(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	984(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1024(%rsp), %rax        # 8-byte Reload
	movq	%r8, 968(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 960(%rsp)          # 8-byte Spill
	movq	976(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 952(%rsp)         # 8-byte Spill
	movq	%r12, 944(%rsp)         # 8-byte Spill
	movq	%r13, 936(%rsp)         # 8-byte Spill
	movq	%r15, 928(%rsp)         # 8-byte Spill
	movq	%r14, 920(%rsp)         # 8-byte Spill
	movq	%r10, 912(%rsp)         # 8-byte Spill
	movq	%r11, 904(%rsp)         # 8-byte Spill
	movq	%rbx, 896(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movl	1120(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	960(%rsp), %r9          # 8-byte Reload
	movq	1072(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2904(%rsp), %rax        # 8-byte Reload
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movq	960(%rsp), %r9          # 8-byte Reload
	movq	1088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 888(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	992(%rsp), %rsi         # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movl	1120(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	960(%rsp), %r9          # 8-byte Reload
	movq	936(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	960(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	960(%rsp), %r9          # 8-byte Reload
	movq	912(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rdi         # 8-byte Reload
	callq	free
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str2017, %r8
	movabsq	$0, %rdx
	leaq	.L.str2018, %rsi
	leaq	.L.str2015, %r9
	leaq	.L.str2016, %r10
	movabsq	$2, %r11
	leaq	free, %rbx
	leaq	.L.str2013, %r14
	leaq	.L.str2014, %r15
	movabsq	$235, %r12
	leaq	.L.str2010, %r13
	leaq	.L.str2011, %rbp
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str2012, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 864(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 860(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str2008, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	leaq	.L.str2009, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str2006, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str2007, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	leaq	.L.str2003, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str2004, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	leaq	.L.str2005, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str2001, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	leaq	.L.str2002, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str1999, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str2000, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str1996, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str1997, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str1998, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str1994, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str1995, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str1992, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str1993, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	25568(%rsp), %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str1989, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str1990, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	leaq	.L.str1991, %rax
.Ltmp163:
	#DEBUG_VALUE: main:cluster_centres <- [RSP+672]
	.loc	3 235 0                 # kmeans.c:235:0
	movq	%rdi, 648(%rsp)         # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 640(%rsp)         # 8-byte Spill
	movq	664(%rsp), %rax         # 8-byte Reload
	movl	%esi, 636(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	656(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	712(%rsp), %rax         # 8-byte Reload
	movq	%r8, 608(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	860(%rsp), %eax         # 4-byte Reload
	movq	%r9, 600(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 592(%rsp)         # 8-byte Spill
	movq	%r15, 584(%rsp)         # 8-byte Spill
	movq	%r14, 576(%rsp)         # 8-byte Spill
	movq	%r12, 568(%rsp)         # 8-byte Spill
	movq	%r13, 560(%rsp)         # 8-byte Spill
	movq	%rbx, 552(%rsp)         # 8-byte Spill
	movq	%r10, 544(%rsp)         # 8-byte Spill
	movq	%r11, 536(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	624(%rsp), %r9          # 8-byte Reload
	movq	680(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	25568(%rsp), %rcx
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 528(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	624(%rsp), %r9          # 8-byte Reload
	movq	696(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	736(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	860(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	624(%rsp), %r9          # 8-byte Reload
	movq	744(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	(%rcx), %rdx
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 520(%rsp)         # 8-byte Spill
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movq	624(%rsp), %r9          # 8-byte Reload
	movq	760(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movl	860(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	520(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	624(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 512(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	624(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	592(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movl	860(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	536(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	624(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	624(%rsp), %r9          # 8-byte Reload
	movq	544(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	624(%rsp), %r9          # 8-byte Reload
	movq	864(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	512(%rsp), %rdi         # 8-byte Reload
	callq	free
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str2040, %r8
	movabsq	$0, %rsi
	leaq	.L.str2041, %r9
	leaq	.L.str2038, %r10
	leaq	.L.str2039, %r11
	movabsq	$2, %rbx
	leaq	free, %r14
	leaq	.L.str2036, %r15
	leaq	.L.str2037, %r12
	movabsq	$236, %r13
	leaq	.L.str2033, %rbp
	leaq	.L.str2034, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str2035, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 488(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 484(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str2031, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str2032, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str2029, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str2030, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str2026, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str2027, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	.L.str2028, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	.L.str2024, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	leaq	.L.str2025, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	leaq	.L.str2022, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str2023, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	leaq	25568(%rsp), %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	leaq	.L.str2019, %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	leaq	.L.str2020, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str2021, %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
.Ltmp164:
	#DEBUG_VALUE: main:cluster_centres <- [RSP+360]
	.loc	3 236 0                 # kmeans.c:236:0
	movq	%rdi, 328(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 320(%rsp)         # 8-byte Spill
	movq	352(%rsp), %rax         # 8-byte Reload
	movl	%esi, 316(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	344(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 304(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	336(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	320(%rsp), %rax         # 8-byte Reload
	movq	%r8, 288(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	484(%rsp), %eax         # 4-byte Reload
	movq	%r9, 280(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 272(%rsp)         # 8-byte Spill
	movq	%r13, 264(%rsp)         # 8-byte Spill
	movq	%r15, 256(%rsp)         # 8-byte Spill
	movq	%rbp, 248(%rsp)         # 8-byte Spill
	movq	%r14, 240(%rsp)         # 8-byte Spill
	movq	%r10, 232(%rsp)         # 8-byte Spill
	movq	%r11, 224(%rsp)         # 8-byte Spill
	movq	%rbx, 216(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	296(%rsp), %rsi         # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	25568(%rsp), %rcx
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	296(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movl	484(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	296(%rsp), %rsi         # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	432(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	296(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	448(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	248(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movl	484(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	296(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	272(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	296(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	296(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	280(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	callq	free
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str2049, %r8
	movabsq	$0, %rsi
	leaq	.L.str2050, %r9
	leaq	.L.str2047, %r10
	leaq	.L.str2048, %r11
	movabsq	$2, %rbx
	leaq	free, %r14
	leaq	.L.str2045, %r15
	leaq	.L.str2046, %r12
	movabsq	$237, %r13
	leaq	.L.str2042, %rbp
	leaq	.L.str2043, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str2044, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 176(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 172(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	3 237 0                 # kmeans.c:237:0
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movl	%esi, 156(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	192(%rsp), %r13         # 8-byte Reload
	movq	%rdx, 144(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	184(%rsp), %rbp         # 8-byte Reload
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	movq	%rbp, %rcx
	movq	%r8, 128(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	172(%rsp), %ebp         # 4-byte Reload
	movq	%r9, 120(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 112(%rsp)         # 8-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r12, 96(%rsp)          # 8-byte Spill
	movq	%rbx, 88(%rsp)          # 8-byte Spill
	movq	%r10, 80(%rsp)          # 8-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	1672(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	1672(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1672(%rsp), %rdi        # 8-byte Reload
	callq	free
	movl	$0, %ebp
	movabsq	$1, %rax
	movabsq	$32, %rsi
	movabsq	$0, %rcx
	leaq	.L.str2054, %r8
	leaq	.L.str2055, %rdx
	movabsq	$239, %rdi
	leaq	.L.str2051, %r9
	leaq	.L.str2052, %r10
	leaq	.L.str2053, %r11
	movl	$1, %r14d
	.loc	3 239 0                 # kmeans.c:239:0
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 36(%rsp)          # 4-byte Spill
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	%r14d, 20(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	48(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	36(%rsp), %eax          # 4-byte Reload
	addq	$25576, %rsp            # imm = 0x63E8
.Ltmp165:
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp166:
.Ltmp167:
	.size	main, .Ltmp167-main
.Lfunc_end2:
	.file	7 "/usr/include/libio.h"
	.cfi_endproc

	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI5_0:
	.long	2139095039              # float 3.40282347E+38
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI5_1:
	.quad	5183643170566569984     # double 3.4028234663852886E+38
	.text
	.globl	find_nearest_point
	.align	16, 0x90
	.type	find_nearest_point,@function
find_nearest_point:                     # @find_nearest_point
	.cfi_startproc
.Lfunc_begin5:
	.loc	6 81 0                  # kmeans_clustering.c:81:0
# BB#0:
	pushq	%rbp
.Ltmp175:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp176:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp177:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp178:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp179:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp180:
	.cfi_def_cfa_offset 56
	subq	$1256, %rsp             # imm = 0x4E8
.Ltmp181:
	.cfi_def_cfa_offset 1312
.Ltmp182:
	.cfi_offset %rbx, -56
.Ltmp183:
	.cfi_offset %r12, -48
.Ltmp184:
	.cfi_offset %r13, -40
.Ltmp185:
	.cfi_offset %r14, -32
.Ltmp186:
	.cfi_offset %r15, -24
.Ltmp187:
	.cfi_offset %rbp, -16
	movabsq	$0, %rax
	vmovss	.LCPI5_0, %xmm0
	movabsq	$1, %r8
	leaq	.L.str192126, %r9
	leaq	.L.str202127, %r10
	movabsq	$2, %r11
	leaq	.L.str172124, %rbx
	leaq	.L.str182125, %r14
	movabsq	$3, %r15
	leaq	.L.str152122, %r12
	leaq	.L.str162123, %r13
	movabsq	$86, %rbp
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str122119, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str132120, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str142121, %rax
	movl	%ecx, 1228(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 1224(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str102117, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str112118, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str82115, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str92116, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str62113, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str72114, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str32110, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str42111, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str52112, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	#DEBUG_VALUE: find_nearest_point:pt <- RDI
	#DEBUG_VALUE: find_nearest_point:nfeatures <- ESI
	#DEBUG_VALUE: find_nearest_point:pts <- RDX
	#DEBUG_VALUE: find_nearest_point:npts <- [RSP+1228]
.Ltmp188:
	#DEBUG_VALUE: find_nearest_point:max_dist <- 3.402823e+38
	#DEBUG_VALUE: find_nearest_point:i <- 0
	.loc	6 86 0 prologue_end     # kmeans_clustering.c:86:0
	movq	%rdi, 1120(%rsp)        # 8-byte Spill
.Ltmp189:
	#DEBUG_VALUE: find_nearest_point:pt <- [RSP+1120]
	movq	%rbp, %rdi
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	movq	1144(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1108(%rsp)        # 4-byte Spill
.Ltmp190:
	#DEBUG_VALUE: find_nearest_point:nfeatures <- [RSP+1108]
	movq	%rax, %rsi
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1096(%rsp)        # 8-byte Spill
.Ltmp191:
	#DEBUG_VALUE: find_nearest_point:pts <- [RSP+1096]
	movq	%rax, %rdx
	movq	1128(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 1092(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	1112(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1080(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1224(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1072(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 1064(%rsp)        # 8-byte Spill
	movq	%r13, 1056(%rsp)        # 8-byte Spill
	movq	%rbp, 1048(%rsp)        # 8-byte Spill
	movq	%r15, 1040(%rsp)        # 8-byte Spill
	vmovss	%xmm0, 1036(%rsp)       # 4-byte Spill
	movq	%r14, 1024(%rsp)        # 8-byte Spill
	movq	%rbx, 1016(%rsp)        # 8-byte Spill
	movq	%r10, 1008(%rsp)        # 8-byte Spill
	movq	%r11, 1000(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1168(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1228(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1080(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 999(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movl	1224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1056(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	999(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1080(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	999(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	1248(%rsp), %rcx        # 8-byte Reload
                                        # implicit-def: EAX
	vmovss	1036(%rsp), %xmm0       # 4-byte Reload
	movl	%eax, 992(%rsp)         # 4-byte Spill
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	vmovss	%xmm0, 980(%rsp)        # 4-byte Spill
	jne	.LBB5_1
	jmp	.LBB5_2
.Ltmp192:
.LBB5_1:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	vmovss	980(%rsp), %xmm0        # 4-byte Reload
	movl	992(%rsp), %eax         # 4-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str1532260, %r8
	movabsq	$0, %rsi
	leaq	.L.str1542261, %rdi
	movabsq	$2, %r9
	leaq	.L.str1512258, %r10
	leaq	.L.str1522259, %r11
	movabsq	$3, %rbx
	leaq	.L.str1492256, %r14
	leaq	.L.str1502257, %r15
	movabsq	$86, %r12
	leaq	.L.str1462253, %r13
	leaq	.L.str1472254, %rbp
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	leaq	.L.str1482255, %rcx
	movl	%eax, 964(%rsp)         # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 960(%rsp)         # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	leaq	.L.str1442251, %rcx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	leaq	.L.str1452252, %rcx
	movq	%rcx, 928(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	leaq	.L.str1422249, %rcx
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	leaq	.L.str1432250, %rcx
	movq	%rcx, 904(%rsp)         # 8-byte Spill
	leaq	.L.str1402247, %rcx
	movq	%rcx, 896(%rsp)         # 8-byte Spill
	leaq	.L.str1412248, %rcx
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	leaq	.L.str1372244, %rcx
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	leaq	.L.str1382245, %rcx
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	leaq	.L.str1392246, %rcx
	movq	%rcx, 864(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 856(%rsp)         # 8-byte Spill
	leaq	.L.str1352242, %rcx
	movq	%rcx, 848(%rsp)         # 8-byte Spill
	leaq	.L.str1362243, %rcx
	movq	%rcx, 840(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 832(%rsp)         # 8-byte Spill
	leaq	.L.str1332240, %rcx
	movq	%rcx, 824(%rsp)         # 8-byte Spill
	leaq	.L.str1342241, %rcx
	movq	%rcx, 816(%rsp)         # 8-byte Spill
	leaq	.L.str1302237, %rcx
	movq	%rcx, 808(%rsp)         # 8-byte Spill
	leaq	.L.str1312238, %rcx
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	leaq	.L.str1322239, %rcx
	movq	%rcx, 792(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 784(%rsp)         # 8-byte Spill
	leaq	.L.str1282235, %rcx
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	leaq	.L.str1292236, %rcx
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	leaq	.L.str1262233, %rcx
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	leaq	.L.str1272234, %rcx
	movq	%rcx, 752(%rsp)         # 8-byte Spill
	leaq	.L.str1242231, %rcx
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	leaq	.L.str1252232, %rcx
	movq	%rcx, 736(%rsp)         # 8-byte Spill
	leaq	.L.str1212228, %rcx
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	leaq	.L.str1222229, %rcx
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	leaq	.L.str1232230, %rcx
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	leaq	.L.str1192226, %rcx
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	leaq	.L.str1202227, %rcx
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	leaq	.L.str1172224, %rcx
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	leaq	.L.str1182225, %rcx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	leaq	.L.str1152222, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	leaq	.L.str1162223, %rcx
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	leaq	.L.str1132220, %rcx
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	leaq	.L.str1142221, %rcx
	movq	%rcx, 640(%rsp)         # 8-byte Spill
	movabsq	$89, %rcx
	movq	%rcx, 632(%rsp)         # 8-byte Spill
	leaq	.L.str1102217, %rcx
	movq	%rcx, 624(%rsp)         # 8-byte Spill
	leaq	.L.str1112218, %rcx
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	leaq	.L.str1122219, %rcx
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movabsq	$50, %rcx
	movq	%rcx, 600(%rsp)         # 8-byte Spill
	leaq	.L.str1082215, %rcx
	movq	%rcx, 592(%rsp)         # 8-byte Spill
	leaq	.L.str1092216, %rcx
	movq	%rcx, 584(%rsp)         # 8-byte Spill
	leaq	.L.str1062213, %rcx
	movq	%rcx, 576(%rsp)         # 8-byte Spill
	leaq	.L.str1072214, %rcx
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	leaq	.L.str1032210, %rcx
	movq	%rcx, 560(%rsp)         # 8-byte Spill
	leaq	.L.str1042211, %rcx
	movq	%rcx, 552(%rsp)         # 8-byte Spill
	leaq	.L.str1052212, %rcx
	movq	%rcx, 544(%rsp)         # 8-byte Spill
	leaq	.L.str1012208, %rcx
	movq	%rcx, 536(%rsp)         # 8-byte Spill
	leaq	.L.str1022209, %rcx
	.loc	6 88 0                  # kmeans_clustering.c:88:0
.Ltmp193:
	movq	%rcx, 528(%rsp)         # 8-byte Spill
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str212128, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	%eax, 524(%rsp)         # 4-byte Spill
	movl	$.L.str222129, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 512(%rsp)         # 8-byte Spill
	movl	$.L.str232130, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 504(%rsp)         # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 488(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 480(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 476(%rsp)         # 4-byte Spill
	movq	%rcx, %rsi
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	%rdx, 464(%rsp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%r8, 448(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	476(%rsp), %eax         # 4-byte Reload
	movq	%r9, 440(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	vmovss	%xmm0, 436(%rsp)        # 4-byte Spill
	movq	%r13, 424(%rsp)         # 8-byte Spill
	movq	%rbp, 416(%rsp)         # 8-byte Spill
	movq	%r15, 408(%rsp)         # 8-byte Spill
	movq	%r14, 400(%rsp)         # 8-byte Spill
	movq	%r12, 392(%rsp)         # 8-byte Spill
	movq	%rbx, 384(%rsp)         # 8-byte Spill
	movq	%r10, 376(%rsp)         # 8-byte Spill
	movq	%r11, 368(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str252132, (%rcx)
	movl	$.L.str242131, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	movl	476(%rsp), %eax         # 4-byte Reload
	movl	%eax, %esi
	movl	$1, %r9d
	movl	%r9d, %edi
	movq	%rdi, 360(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 352(%rsp)         # 8-byte Spill
	movq	%rdx, %rsi
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%rdx, 344(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 336(%rsp)         # 8-byte Spill
	movq	%r10, %rcx
	movq	360(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str272134, (%rcx)
	movl	$.L.str262133, %eax
	movl	%eax, %r8d
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str292136, (%rcx)
	movl	$.L.str282135, %eax
	movl	%eax, %r8d
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	%r9, %rcx
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str302137, %eax
	movl	%eax, %esi
	movl	$.L.str312138, %eax
	movl	%eax, %edx
	movl	$.L.str322139, %eax
	movl	%eax, %ecx
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movl	476(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str342141, (%rcx)
	movl	$.L.str332140, %eax
	movl	%eax, %r8d
	movl	$32, %eax
	movl	%eax, %ecx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	%rcx, %rsi
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	movq	%r10, %rcx
	movq	360(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str362143, (%rcx)
	movl	$.L.str352142, %eax
	movl	%eax, %r8d
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	964(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	%rsp, %rcx
	movq	$.L.str382145, (%rcx)
	movl	$.L.str372144, %eax
	movl	%eax, %r8d
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str392146, %eax
	movl	%eax, %esi
	movl	$.L.str402147, %eax
	movl	%eax, %edx
	movl	$.L.str412148, %eax
	movl	%eax, %ecx
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movl	476(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$.L.str422149, %eax
	movl	%eax, %ecx
	movl	$.L.str432150, %eax
	movl	%eax, %r9d
	vmovsd	.LCPI5_1(%rip), %xmm0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str452152, (%rcx)
	movl	$.L.str442151, %eax
	movl	%eax, %r8d
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	vmovss	436(%rsp), %xmm0        # 4-byte Reload
	vcvtss2sd	%xmm0, %xmm0, %xmm1
	movl	$.L.str462153, %eax
	movl	%eax, %ecx
	movl	$.L.str472154, %eax
	movl	%eax, %r9d
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	vmovsd	%xmm1, 312(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str482155, %eax
	movl	%eax, %esi
	movl	$.L.str492156, %eax
	movl	%eax, %edx
	movl	$.L.str502157, %eax
	movl	%eax, %ecx
	movl	$88, %eax
	movl	%eax, %edi
	movl	$29, %eax
	movl	%eax, %r8d
	movq	%rdi, 304(%rsp)         # 8-byte Spill
	movl	476(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str522159, (%rcx)
	movl	$.L.str512158, %eax
	movl	%eax, %r8d
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str542161, (%rcx)
	movl	$.L.str532160, %eax
	movl	%eax, %r8d
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str562163, (%rdi)
	movl	$.L.str552162, %eax
	movl	%eax, %r8d
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	%rsi, 296(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	296(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str572164, %eax
	movl	%eax, %esi
	movl	$.L.str582165, %eax
	movl	%eax, %edx
	movl	$.L.str592166, %eax
	movl	%eax, %ecx
	movl	$27, %eax
	movl	%eax, %r8d
	movq	304(%rsp), %rdi         # 8-byte Reload
	movl	476(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str612168, (%rcx)
	movl	$.L.str602167, %eax
	movl	%eax, %r8d
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	296(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str632170, (%rdi)
	movl	$.L.str622169, %eax
	movl	%eax, %r8d
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	%rsi, 288(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str642171, %eax
	movl	%eax, %esi
	movl	$.L.str652172, %eax
	movl	%eax, %edx
	movl	$.L.str662173, %eax
	movl	%eax, %ecx
	movl	$49, %eax
	movl	%eax, %r8d
	movq	304(%rsp), %rdi         # 8-byte Reload
	movl	476(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str682175, (%rcx)
	movl	$euclid_dist_2, %eax
	movl	%eax, %edx
	movl	$.L.str672174, %eax
	movl	%eax, %r8d
	movl	$4, %eax
	movl	%eax, %edi
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str702177, (%rcx)
	movl	$.L.str692176, %eax
	movl	%eax, %r8d
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str722179, (%rcx)
	movl	$.L.str712178, %eax
	movl	%eax, %r8d
	movl	$24601, %eax            # imm = 0x6019
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movq	%r9, %rcx
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str742181, (%rcx)
	movl	$.L.str732180, %eax
	movl	%eax, %r8d
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str762183, (%rcx)
	movl	$.L.str752182, %eax
	movl	%eax, %r8d
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	1108(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %ecx
	movq	%rsp, %rdx
	movq	$.L.str782185, (%rdx)
	movl	$.L.str772184, %eax
	movl	%eax, %r8d
	movl	$3, %eax
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 272(%rsp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	movq	%r9, %rcx
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str802187, (%rcx)
	movl	$.L.str792186, %eax
	movl	%eax, %r8d
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movl	1108(%rsp), %edx        # 4-byte Reload
	callq	euclid_dist_2
.Ltmp194:
	#DEBUG_VALUE: dist <- XMM0
	#DEBUG_VALUE: find_nearest_point:max_dist <- XMM0
	vcvtss2sd	%xmm0, %xmm0, %xmm1
	movl	$.L.str812188, %eax
	movl	%eax, %ecx
	movl	$.L.str822189, %eax
	movl	%eax, %r9d
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	vmovss	%xmm0, 260(%rsp)        # 4-byte Spill
.Ltmp195:
	#DEBUG_VALUE: dist <- [RSP+260]
	#DEBUG_VALUE: find_nearest_point:max_dist <- [RSP+260]
	vmovaps	%xmm1, %xmm0
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	vmovsd	%xmm1, 248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp196:
	.loc	6 89 0                  # kmeans_clustering.c:89:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str832190, %eax
	movl	%eax, %esi
	movl	$.L.str842191, %eax
	movl	%eax, %edx
	movl	$.L.str852192, %eax
	movl	%eax, %ecx
	movl	$89, %eax
	movl	%eax, %edi
	movl	$47, %eax
	movl	%eax, %r8d
	movq	%rdi, 240(%rsp)         # 8-byte Spill
	movl	476(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$.L.str862193, %eax
	movl	%eax, %ecx
	movl	$.L.str872194, %eax
	movl	%eax, %r9d
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	vmovsd	312(%rsp), %xmm0        # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	callq	trace_logger_log_double
	movl	$.L.str882195, %eax
	movl	%eax, %ecx
	movl	$.L.str892196, %eax
	movl	%eax, %r9d
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp197:
	.loc	6 88 0                  # kmeans_clustering.c:88:0
	vmovss	436(%rsp), %xmm0        # 4-byte Reload
	vmovss	260(%rsp), %xmm1        # 4-byte Reload
	vucomiss	%xmm1, %xmm0
	.loc	6 89 0                  # kmeans_clustering.c:89:0
.Ltmp198:
	seta	%al
	.loc	6 90 0                  # kmeans_clustering.c:90:0
.Ltmp199:
	movzbl	%al, %esi
	movl	%esi, %ecx
	movq	%rsp, %rdx
	movq	$.L.str912198, (%rdx)
	movl	$.L.str902197, %esi
	movl	%esi, %r8d
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	movq	%r9, %rcx
	movq	352(%rsp), %r9          # 8-byte Reload
	movb	%al, 231(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
.Ltmp200:
	#DEBUG_VALUE: find_nearest_point:index <- undef
	.loc	6 89 0                  # kmeans_clustering.c:89:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str922199, %eax
	movl	%eax, %esi
	movl	$.L.str932200, %eax
	movl	%eax, %edx
	movl	$.L.str942201, %eax
	movl	%eax, %ecx
	movl	$50, %eax
	movl	%eax, %r8d
	movq	240(%rsp), %rdi         # 8-byte Reload
	movl	476(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$.L.str952202, %eax
	movl	%eax, %ecx
	movl	$.L.str962203, %eax
	movl	%eax, %r9d
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	vmovsd	312(%rsp), %xmm0        # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	callq	trace_logger_log_double
	movl	$.L.str972204, %eax
	movl	%eax, %ecx
	movl	$.L.str982205, %eax
	movl	%eax, %r9d
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str1002207, (%rcx)
	movl	$.L.str992206, %eax
	movl	%eax, %r8d
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	vmovss	260(%rsp), %xmm0        # 4-byte Reload
	vmovss	436(%rsp), %xmm1        # 4-byte Reload
	vminss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	944(%rsp), %rdi         # 8-byte Reload
	movq	920(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 224(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	632(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	960(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	568(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	944(%rsp), %rdi         # 8-byte Reload
	movq	920(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 220(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	632(%rsp), %rdi         # 8-byte Reload
	movq	624(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movl	960(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	964(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	920(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	220(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	920(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	231(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	672(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	231(%rsp), %al          # 1-byte Reload
	testb	%al, %al
	movl	220(%rsp), %eax         # 4-byte Reload
	movl	964(%rsp), %esi         # 4-byte Reload
	cmovel	%esi, %eax
.Ltmp201:
	.loc	6 86 0                  # kmeans_clustering.c:86:0
	movl	%eax, %esi
	movl	%esi, %edx
	movq	944(%rsp), %rdi         # 8-byte Reload
	movq	920(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	688(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 216(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movl	960(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rcx         # 8-byte Reload
	addq	$1, %rcx
	movq	944(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	776(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	768(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	960(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	208(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	944(%rsp), %rdi         # 8-byte Reload
	movq	920(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	840(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 204(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movl	960(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	920(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	888(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	204(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	920(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	904(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	204(%rsp), %eax         # 4-byte Reload
	movl	1228(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	944(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 203(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	960(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	203(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	movq	480(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	203(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	208(%rsp), %rcx         # 8-byte Reload
	movl	216(%rsp), %eax         # 4-byte Reload
	vmovss	224(%rsp), %xmm0        # 4-byte Reload
	movl	%eax, 992(%rsp)         # 4-byte Spill
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	vmovss	%xmm0, 980(%rsp)        # 4-byte Spill
	jne	.LBB5_2
	jmp	.LBB5_1
.Ltmp202:
.LBB5_2:                                # %._crit_edge
	movl	992(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	leaq	.L.str1672274, %r8
	movabsq	$0, %rsi
	leaq	.L.str1682275, %rdi
	movabsq	$94, %r9
	leaq	.L.str1642271, %r10
	leaq	.L.str1652272, %r11
	leaq	.L.str1662273, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str1622269, %r12
	leaq	.L.str1632270, %r13
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	.L.str1602267, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	leaq	.L.str1612268, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movabsq	$2, %rcx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	leaq	.L.str1582265, %rcx
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	leaq	.L.str1592266, %rcx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	leaq	.L.str1552262, %rcx
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	leaq	.L.str1562263, %rcx
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	leaq	.L.str1572264, %rcx
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	6 94 0                  # kmeans_clustering.c:94:0
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 104(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	136(%rsp), %rcx         # 8-byte Reload
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%rcx, %rsi
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 80(%rsp)           # 8-byte Spill
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	%r9, 72(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 68(%rsp)          # 4-byte Spill
	movl	%r14d, 64(%rsp)         # 4-byte Spill
	movq	%r15, 56(%rsp)          # 8-byte Spill
	movl	%ebp, 52(%rsp)          # 4-byte Spill
	movq	%r12, 40(%rsp)          # 8-byte Spill
	movq	%r13, 32(%rsp)          # 8-byte Spill
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movq	%r11, 8(%rsp)           # 8-byte Spill
	callq	trace_logger_log0
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	movq	152(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	32(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movl	52(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	68(%rsp), %eax          # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	104(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %eax          # 4-byte Reload
	addq	$1256, %rsp             # imm = 0x4E8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp203:
.Ltmp204:
	.size	find_nearest_point, .Ltmp204-find_nearest_point
.Lfunc_end5:
	.cfi_endproc

	.globl	euclid_dist_2
	.align	16, 0x90
	.type	euclid_dist_2,@function
euclid_dist_2:                          # @euclid_dist_2
	.cfi_startproc
.Lfunc_begin6:
	.loc	6 103 0                 # kmeans_clustering.c:103:0
# BB#0:
	pushq	%rbp
.Ltmp212:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp213:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp214:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp215:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp216:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp217:
	.cfi_def_cfa_offset 56
	subq	$1624, %rsp             # imm = 0x658
.Ltmp218:
	.cfi_def_cfa_offset 1680
.Ltmp219:
	.cfi_offset %rbx, -56
.Ltmp220:
	.cfi_offset %r12, -48
.Ltmp221:
	.cfi_offset %r13, -40
.Ltmp222:
	.cfi_offset %r14, -32
.Ltmp223:
	.cfi_offset %r15, -24
.Ltmp224:
	.cfi_offset %rbp, -16
	movabsq	$0, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rcx
	leaq	.L.str1852292, %r8
	leaq	.L.str1862293, %r9
	movabsq	$2, %r10
	leaq	.L.str1832290, %r11
	leaq	.L.str1842291, %rbx
	movabsq	$3, %r14
	leaq	.L.str1812288, %r15
	leaq	.L.str1822289, %r12
	movabsq	$107, %r13
	leaq	.L.str1782285, %rbp
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str1792286, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str1802287, %rax
	movl	%edx, 1604(%rsp)        # 4-byte Spill
	movl	$0, %edx
	movl	%edx, 1600(%rsp)        # 4-byte Spill
	movl	$1, %edx
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str1762283, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str1772284, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str1742281, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str1752282, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str1722279, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str1732280, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str1692276, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str1702277, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str1712278, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	#DEBUG_VALUE: euclid_dist_2:pt1 <- RDI
	#DEBUG_VALUE: euclid_dist_2:pt2 <- RSI
	#DEBUG_VALUE: euclid_dist_2:numdims <- [RSP+1604]
.Ltmp225:
	#DEBUG_VALUE: euclid_dist_2:ans <- 0.000000e+00
	#DEBUG_VALUE: euclid_dist_2:i <- 0
	.loc	6 107 0 prologue_end    # kmeans_clustering.c:107:0
	movq	%rdi, 1496(%rsp)        # 8-byte Spill
.Ltmp226:
	#DEBUG_VALUE: euclid_dist_2:pt1 <- [RSP+1496]
	movq	%r13, %rdi
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	movq	1520(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1480(%rsp)        # 8-byte Spill
.Ltmp227:
	#DEBUG_VALUE: euclid_dist_2:pt2 <- [RSP+1480]
	movq	%rax, %rsi
	movq	1512(%rsp), %rax        # 8-byte Reload
	movl	%edx, 1476(%rsp)        # 4-byte Spill
	movq	%rax, %rdx
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1464(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1456(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1600(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1448(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, 1440(%rsp)        # 8-byte Spill
	movq	%rbp, 1432(%rsp)        # 8-byte Spill
	movq	%r12, 1424(%rsp)        # 8-byte Spill
	vmovss	%xmm0, 1420(%rsp)       # 4-byte Spill
	movq	%r15, 1408(%rsp)        # 8-byte Spill
	movq	%r14, 1400(%rsp)        # 8-byte Spill
	movq	%rbx, 1392(%rsp)        # 8-byte Spill
	movq	%r10, 1384(%rsp)        # 8-byte Spill
	movq	%r11, 1376(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1616(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1604(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1616(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1604(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1584(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1616(%rsp), %r9         # 8-byte Reload
	movq	1568(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1375(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movl	1600(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1616(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1376(%rsp), %r8         # 8-byte Reload
	movq	1616(%rsp), %r9         # 8-byte Reload
	movq	1392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1375(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1616(%rsp), %r9         # 8-byte Reload
	movq	1448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1375(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1616(%rsp), %rcx        # 8-byte Reload
	vmovss	1420(%rsp), %xmm0       # 4-byte Reload
	movq	%rcx, 1360(%rsp)        # 8-byte Spill
	vmovss	%xmm0, 1356(%rsp)       # 4-byte Spill
	jne	.LBB6_1
	jmp	.LBB6_2
.Ltmp228:
.LBB6_1:                                # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	vmovss	1356(%rsp), %xmm0       # 4-byte Reload
	movq	1360(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str2962403, %r8
	movabsq	$0, %rdx
	leaq	.L.str2972404, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2942401, %r9
	leaq	.L.str2952402, %r10
	movabsq	$3, %r11
	leaq	.L.str2922399, %rbx
	leaq	.L.str2932400, %r14
	movabsq	$107, %r15
	leaq	.L.str2892396, %r12
	leaq	.L.str2902397, %r13
	leaq	.L.str2912398, %rbp
	movq	%rsi, 1344(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1340(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	leaq	.L.str2872394, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str2882395, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str2852392, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str2862393, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str2832390, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str2842391, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str2802387, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str2812388, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str2822389, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str2782385, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str2792386, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str2762383, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str2772384, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str2732380, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str2742381, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str2752382, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str2712378, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str2722379, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str2692376, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str2702377, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str2672374, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str2682375, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str2642371, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str2652372, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str2662373, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str2622369, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str2632370, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str2602367, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str2612368, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str2582365, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	leaq	.L.str2592366, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	movabsq	$108, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	leaq	.L.str2552362, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str2562363, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str2572364, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	leaq	.L.str2532360, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str2542361, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	leaq	.L.str2512358, %rax
	movq	%rax, 968(%rsp)         # 8-byte Spill
	leaq	.L.str2522359, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str2492356, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str2502357, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	leaq	.L.str2462353, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	leaq	.L.str2472354, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str2482355, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str2442351, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str2452352, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str2422349, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	leaq	.L.str2432350, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str2402347, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str2412348, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str2372344, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	leaq	.L.str2382345, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str2392346, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	leaq	.L.str2352342, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str2362343, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str2332340, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	leaq	.L.str2342341, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str2302337, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	leaq	.L.str2312338, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str2322339, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	leaq	.L.str2282335, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str2292336, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str2262333, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str2272334, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str2242331, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str2252332, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str2212328, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str2222329, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str2232330, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str2192326, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str2202327, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str2172324, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str2182325, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	leaq	.L.str2142321, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str2152322, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str2162323, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	leaq	.L.str2122319, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	leaq	.L.str2132320, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str2102317, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	leaq	.L.str2112318, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	leaq	.L.str2082315, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str2092316, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str2052312, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str2062313, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	.L.str2072314, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str2032310, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str2042311, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str2012308, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str2022309, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str1992306, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str2002307, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str1962303, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str1972304, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str1982305, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str1942301, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str1952302, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str1922299, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str1932300, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str1902297, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str1912298, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str1872294, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	.L.str1882295, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	leaq	.L.str1892296, %rax
	.loc	6 108 0                 # kmeans_clustering.c:108:0
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movq	504(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 392(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	416(%rsp), %rax         # 8-byte Reload
	movl	%esi, 388(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 376(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	400(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 368(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	472(%rsp), %rax         # 8-byte Reload
	movq	%r8, 360(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	1340(%rsp), %eax        # 4-byte Reload
	movq	%r9, 352(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	vmovss	%xmm0, 348(%rsp)        # 4-byte Spill
	movq	%r12, 336(%rsp)         # 8-byte Spill
	movq	%r15, 328(%rsp)         # 8-byte Spill
	movq	%r13, 320(%rsp)         # 8-byte Spill
	movq	%rbp, 312(%rsp)         # 8-byte Spill
	vmovsd	%xmm1, 304(%rsp)        # 8-byte Spill
	movq	%r14, 296(%rsp)         # 8-byte Spill
	movq	%r10, 288(%rsp)         # 8-byte Spill
	movq	%r11, 280(%rsp)         # 8-byte Spill
	movq	%rbx, 272(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	368(%rsp), %r9          # 8-byte Reload
	movq	424(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	368(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	512(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	368(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovss	348(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	544(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	1496(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 264(%rsp)         # 8-byte Spill
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,4), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 260(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	672(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	1480(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 248(%rsp)         # 8-byte Spill
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	784(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,4), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 244(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	824(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	244(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	260(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	260(%rsp), %xmm0        # 4-byte Reload
	vmovss	244(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	904(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	896(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 240(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	936(%rsp), %rsi         # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	240(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	944(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	240(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	960(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	240(%rsp), %xmm0        # 4-byte Reload
	vmulss	%xmm0, %xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	976(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm1, 236(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	236(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	348(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	1048(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	348(%rsp), %xmm0        # 4-byte Reload
	vmovss	236(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	1064(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 232(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
.Ltmp229:
	#DEBUG_VALUE: euclid_dist_2:ans <- [RSP+232]
	.loc	6 107 0                 # kmeans_clustering.c:107:0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1208(%rsp), %rsi        # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	1216(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 220(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1604(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	1264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	220(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	220(%rsp), %eax         # 4-byte Reload
	movl	1604(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	1304(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 219(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	1340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	296(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	288(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	219(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	368(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	movq	1344(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	219(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	224(%rsp), %rcx         # 8-byte Reload
	vmovss	232(%rsp), %xmm0        # 4-byte Reload
	movq	%rcx, 1360(%rsp)        # 8-byte Spill
	vmovss	%xmm0, 1356(%rsp)       # 4-byte Spill
	jne	.LBB6_2
	jmp	.LBB6_1
.Ltmp230:
.LBB6_2:                                # %._crit_edge
	vmovss	1356(%rsp), %xmm0       # 4-byte Reload
	movabsq	$1, %rax
	movabsq	$32, %rcx
	leaq	.L.str3102417, %rdx
	movabsq	$0, %rsi
	leaq	.L.str3112418, %r9
	movabsq	$110, %rdi
	leaq	.L.str3072414, %r8
	leaq	.L.str3082415, %r10
	leaq	.L.str3092416, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str3052412, %r15
	leaq	.L.str3062413, %r12
	vxorps	%xmm1, %xmm1, %xmm1
	leaq	.L.str3032410, %r13
	movq	%rax, 208(%rsp)         # 8-byte Spill
	leaq	.L.str3042411, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$2, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str3012408, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str3022409, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str2982405, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str2992406, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	leaq	.L.str3002407, %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	6 110 0                 # kmeans_clustering.c:110:0
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movq	168(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 128(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	160(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 120(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovss	%xmm0, 84(%rsp)         # 4-byte Spill
	movq	%r15, 72(%rsp)          # 8-byte Spill
	movq	%r12, 64(%rsp)          # 8-byte Spill
	vmovsd	%xmm1, 56(%rsp)         # 8-byte Spill
	movl	%ebp, 52(%rsp)          # 4-byte Spill
	movq	%r13, 40(%rsp)          # 8-byte Spill
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%r10, 24(%rsp)          # 8-byte Spill
	movq	%r11, 16(%rsp)          # 8-byte Spill
	movl	%ebx, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	84(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	64(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movl	12(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	84(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	84(%rsp), %xmm0         # 4-byte Reload
	addq	$1624, %rsp             # imm = 0x658
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp231:
.Ltmp232:
	.size	euclid_dist_2, .Ltmp232-euclid_dist_2
.Lfunc_end6:
	.cfi_endproc

	.section	.rodata.cst4,"aM",@progbits,4
	.align	4
.LCPI7_0:
	.long	1065353216              # float 1
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI7_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	kmeans_clustering
	.align	16, 0x90
	.type	kmeans_clustering,@function
kmeans_clustering:                      # @kmeans_clustering
	.cfi_startproc
.Lfunc_begin7:
	.loc	6 121 0                 # kmeans_clustering.c:121:0
# BB#0:
	pushq	%rbp
.Ltmp240:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp241:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp242:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp243:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp244:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp245:
	.cfi_def_cfa_offset 56
	subq	$16088, %rsp            # imm = 0x3ED8
.Ltmp246:
	.cfi_def_cfa_offset 16144
.Ltmp247:
	.cfi_offset %rbx, -56
.Ltmp248:
	.cfi_offset %r12, -48
.Ltmp249:
	.cfi_offset %r13, -40
.Ltmp250:
	.cfi_offset %r14, -32
.Ltmp251:
	.cfi_offset %r15, -24
.Ltmp252:
	.cfi_offset %rbp, -16
	movabsq	$24601, %rax            # imm = 0x6019
	movabsq	$64, %r9
	leaq	.L.str12108, %r10
	movabsq	$1, %r11
	leaq	.L.str3302437, %rbx
	movabsq	$0, %r14
	leaq	.L.str3312438, %r15
	movabsq	$2, %r12
	leaq	.L.str3282435, %r13
	leaq	.L.str3292436, %rbp
	movq	%rax, 16080(%rsp)       # 8-byte Spill
	leaq	.L.str2107, %rax
	movq	%rax, 16072(%rsp)       # 8-byte Spill
	leaq	.L.str3262433, %rax
	movq	%rax, 16064(%rsp)       # 8-byte Spill
	leaq	.L.str3272434, %rax
	movq	%rax, 16056(%rsp)       # 8-byte Spill
	leaq	.L.str3242431, %rax
	movq	%rax, 16048(%rsp)       # 8-byte Spill
	leaq	.L.str3252432, %rax
	movq	%rax, 16040(%rsp)       # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 16032(%rsp)       # 8-byte Spill
	leaq	fopen, %rax
	movq	%rax, 16024(%rsp)       # 8-byte Spill
	leaq	.L.str3222429, %rax
	movq	%rax, 16016(%rsp)       # 8-byte Spill
	leaq	.L.str3232430, %rax
	movq	%rax, 16008(%rsp)       # 8-byte Spill
	movabsq	$129, %rax
	movq	%rax, 16000(%rsp)       # 8-byte Spill
	leaq	.L.str3192426, %rax
	movq	%rax, 15992(%rsp)       # 8-byte Spill
	leaq	.L.str3202427, %rax
	movq	%rax, 15984(%rsp)       # 8-byte Spill
	leaq	.L.str3212428, %rax
	movq	%rax, 15976(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movl	%ecx, 15972(%rsp)       # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 15960(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 15952(%rsp)       # 8-byte Spill
	leaq	.L.str3172424, %rax
	movq	%rax, 15944(%rsp)       # 8-byte Spill
	leaq	.L.str3182425, %rax
	movq	%rax, 15936(%rsp)       # 8-byte Spill
	leaq	.L.str3152422, %rax
	movq	%rax, 15928(%rsp)       # 8-byte Spill
	leaq	.L.str3162423, %rax
	movq	%rax, 15920(%rsp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 15912(%rsp)       # 8-byte Spill
	leaq	.L.str3122419, %rax
	movq	%rax, 15904(%rsp)       # 8-byte Spill
	leaq	.L.str3132420, %rax
	movq	%rax, 15896(%rsp)       # 8-byte Spill
	leaq	.L.str3142421, %rax
	movq	%rax, 15888(%rsp)       # 8-byte Spill
	movabsq	$44, %rax
	#DEBUG_VALUE: kmeans_clustering:feature <- RDI
	#DEBUG_VALUE: kmeans_clustering:nfeatures <- ESI
	#DEBUG_VALUE: kmeans_clustering:npoints <- EDX
	#DEBUG_VALUE: kmeans_clustering:nclusters <- [RSP+15972]
	#DEBUG_VALUE: kmeans_clustering:threshold <- XMM0
	#DEBUG_VALUE: kmeans_clustering:membership <- R8
.Ltmp253:
	#DEBUG_VALUE: kmeans_clustering:n <- 0
	#DEBUG_VALUE: kmeans_clustering:loop <- 0
	movq	%rax, 15880(%rsp)       # 8-byte Spill
	movq	15912(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 15872(%rsp)       # 8-byte Spill
.Ltmp254:
	#DEBUG_VALUE: kmeans_clustering:feature <- [RSP+15872]
	movq	%rax, %rdi
	movq	15904(%rsp), %rax       # 8-byte Reload
	movl	%esi, 15868(%rsp)       # 4-byte Spill
.Ltmp255:
	#DEBUG_VALUE: kmeans_clustering:nfeatures <- [RSP+15868]
	movq	%rax, %rsi
	movq	15896(%rsp), %rax       # 8-byte Reload
	movl	%edx, 15864(%rsp)       # 4-byte Spill
.Ltmp256:
	#DEBUG_VALUE: kmeans_clustering:npoints <- [RSP+15864]
	movq	%rax, %rdx
	movq	15888(%rsp), %rax       # 8-byte Reload
	movl	%ecx, 15860(%rsp)       # 4-byte Spill
	movq	%rax, %rcx
	movq	15880(%rsp), %rax       # 8-byte Reload
	movq	%r8, 15848(%rsp)        # 8-byte Spill
.Ltmp257:
	#DEBUG_VALUE: kmeans_clustering:membership <- [RSP+15848]
	movq	%rax, %r8
	movl	15860(%rsp), %eax       # 4-byte Reload
	movq	%r9, 15840(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, 15832(%rsp)       # 8-byte Spill
	movq	%r14, 15824(%rsp)       # 8-byte Spill
	vmovss	%xmm0, 15820(%rsp)      # 4-byte Spill
.Ltmp258:
	#DEBUG_VALUE: kmeans_clustering:threshold <- [RSP+15820]
	movq	%r15, 15808(%rsp)       # 8-byte Spill
	movq	%r12, 15800(%rsp)       # 8-byte Spill
	movq	%rbp, 15792(%rsp)       # 8-byte Spill
	movq	%rbx, 15784(%rsp)       # 8-byte Spill
	movq	%r10, 15776(%rsp)       # 8-byte Spill
	movq	%r11, 15768(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	15768(%rsp), %rdi       # 8-byte Reload
	movq	15840(%rsp), %rsi       # 8-byte Reload
	movq	15848(%rsp), %rdx       # 8-byte Reload
	movq	15768(%rsp), %rcx       # 8-byte Reload
	movq	15928(%rsp), %r8        # 8-byte Reload
	movq	15824(%rsp), %r9        # 8-byte Reload
	movq	15920(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15848(%rsp), %rcx       # 8-byte Reload
	.loc	6 129 0 prologue_end    # kmeans_clustering.c:129:0
.Ltmp259:
	movq	15952(%rsp), %rdi       # 8-byte Reload
	movq	15840(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	15768(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 15760(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	15944(%rsp), %r8        # 8-byte Reload
	movq	15824(%rsp), %r9        # 8-byte Reload
	movq	15936(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16000(%rsp), %rdi       # 8-byte Reload
	movq	15992(%rsp), %rsi       # 8-byte Reload
	movq	15984(%rsp), %rdx       # 8-byte Reload
	movq	15976(%rsp), %rcx       # 8-byte Reload
	movq	15960(%rsp), %r8        # 8-byte Reload
	movl	15860(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	16032(%rsp), %rdi       # 8-byte Reload
	movq	15840(%rsp), %rsi       # 8-byte Reload
	movq	16024(%rsp), %rdx       # 8-byte Reload
	movq	15768(%rsp), %rcx       # 8-byte Reload
	movq	16016(%rsp), %r8        # 8-byte Reload
	movq	15824(%rsp), %r9        # 8-byte Reload
	movq	16008(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15768(%rsp), %rdi       # 8-byte Reload
	movq	15840(%rsp), %rsi       # 8-byte Reload
	movq	16072(%rsp), %rdx       # 8-byte Reload
	movq	15824(%rsp), %rcx       # 8-byte Reload
	movq	16048(%rsp), %r8        # 8-byte Reload
	movq	15824(%rsp), %r9        # 8-byte Reload
	movq	16040(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16080(%rsp), %rdi       # 8-byte Reload
	movq	15840(%rsp), %rsi       # 8-byte Reload
	movq	16072(%rsp), %rdx       # 8-byte Reload
	movq	15768(%rsp), %rcx       # 8-byte Reload
	movq	16064(%rsp), %r8        # 8-byte Reload
	movq	15824(%rsp), %r9        # 8-byte Reload
	movq	16056(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15800(%rsp), %rdi       # 8-byte Reload
	movq	15840(%rsp), %rsi       # 8-byte Reload
	movq	15776(%rsp), %rdx       # 8-byte Reload
	movq	15824(%rsp), %rcx       # 8-byte Reload
	movq	15832(%rsp), %r8        # 8-byte Reload
	movq	15824(%rsp), %r9        # 8-byte Reload
	movq	15792(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16080(%rsp), %rdi       # 8-byte Reload
	movq	15840(%rsp), %rsi       # 8-byte Reload
	movq	15776(%rsp), %rdx       # 8-byte Reload
	movq	15768(%rsp), %rcx       # 8-byte Reload
	movq	15784(%rsp), %r8        # 8-byte Reload
	movq	15824(%rsp), %r9        # 8-byte Reload
	movq	15808(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$.L.str2107, %eax
	movl	%eax, %edi
	movl	$.L.str12108, %eax
	movl	%eax, %esi
	callq	fopen
.Ltmp260:
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$64, %rdx
	leaq	.L.str22109, %rsi
	movabsq	$1, %rdi
	leaq	.L.str3452452, %r8
	movabsq	$0, %r9
	leaq	.L.str3462453, %r10
	movabsq	$2, %r11
	leaq	.L.str3432450, %rbx
	leaq	.L.str3442451, %r14
	leaq	.L.str3412448, %r15
	leaq	.L.str3422449, %r12
	leaq	.L.str3392446, %r13
	leaq	.L.str3402447, %rbp
	movq	%rax, 15752(%rsp)       # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 15744(%rsp)       # 8-byte Spill
	leaq	fprintf, %rax
	movq	%rax, 15736(%rsp)       # 8-byte Spill
	leaq	.L.str3372444, %rax
	movq	%rax, 15728(%rsp)       # 8-byte Spill
	leaq	.L.str3382445, %rax
	movq	%rax, 15720(%rsp)       # 8-byte Spill
	movabsq	$129, %rax
	movq	%rax, 15712(%rsp)       # 8-byte Spill
	leaq	.L.str3342441, %rax
	movq	%rax, 15704(%rsp)       # 8-byte Spill
	leaq	.L.str3352442, %rax
	movq	%rax, 15696(%rsp)       # 8-byte Spill
	leaq	.L.str3362443, %rax
	movq	%rax, 15688(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 15680(%rsp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 15672(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 15664(%rsp)       # 8-byte Spill
	leaq	.L.str3322439, %rax
	movq	%rax, 15656(%rsp)       # 8-byte Spill
	leaq	.L.str3332440, %rax
	movq	%rax, 15648(%rsp)       # 8-byte Spill
	movq	15664(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 15640(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 15636(%rsp)       # 4-byte Spill
	movq	%rdx, %rsi
	movq	15752(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 15624(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	15640(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 15616(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	15656(%rsp), %rax       # 8-byte Reload
	movq	%r8, 15608(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 15600(%rsp)        # 8-byte Spill
	movq	15648(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 15592(%rsp)       # 8-byte Spill
	movq	%r12, 15584(%rsp)       # 8-byte Spill
	movq	%r13, 15576(%rsp)       # 8-byte Spill
	movq	%rbp, 15568(%rsp)       # 8-byte Spill
	movq	%r14, 15560(%rsp)       # 8-byte Spill
	movq	%rbx, 15552(%rsp)       # 8-byte Spill
	movq	%r10, 15544(%rsp)       # 8-byte Spill
	movq	%r11, 15536(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp261:
	#DEBUG_VALUE: kmeans_clustering:tmp <- [RSP+15752]
	movq	15712(%rsp), %rdi       # 8-byte Reload
	movq	15704(%rsp), %rsi       # 8-byte Reload
	movq	15696(%rsp), %rdx       # 8-byte Reload
	movq	15688(%rsp), %rcx       # 8-byte Reload
	movq	15672(%rsp), %r8        # 8-byte Reload
	movl	15636(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15744(%rsp), %rdi       # 8-byte Reload
	movq	15624(%rsp), %rsi       # 8-byte Reload
	movq	15736(%rsp), %rdx       # 8-byte Reload
	movq	15640(%rsp), %rcx       # 8-byte Reload
	movq	15728(%rsp), %r8        # 8-byte Reload
	movq	15600(%rsp), %r9        # 8-byte Reload
	movq	15720(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15640(%rsp), %rdi       # 8-byte Reload
	movq	15624(%rsp), %rsi       # 8-byte Reload
	movq	15752(%rsp), %rdx       # 8-byte Reload
	movq	15640(%rsp), %rcx       # 8-byte Reload
	movq	15576(%rsp), %r8        # 8-byte Reload
	movq	15600(%rsp), %r9        # 8-byte Reload
	movq	15568(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15616(%rsp), %rdi       # 8-byte Reload
	movq	15624(%rsp), %rsi       # 8-byte Reload
	movq	15752(%rsp), %rdx       # 8-byte Reload
	movq	15640(%rsp), %rcx       # 8-byte Reload
	movq	15592(%rsp), %r8        # 8-byte Reload
	movq	15600(%rsp), %r9        # 8-byte Reload
	movq	15584(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15536(%rsp), %rdi       # 8-byte Reload
	movq	15624(%rsp), %rsi       # 8-byte Reload
	movq	15680(%rsp), %rdx       # 8-byte Reload
	movq	15600(%rsp), %rcx       # 8-byte Reload
	movq	15552(%rsp), %r8        # 8-byte Reload
	movq	15600(%rsp), %r9        # 8-byte Reload
	movq	15560(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15616(%rsp), %rdi       # 8-byte Reload
	movq	15624(%rsp), %rsi       # 8-byte Reload
	movq	15680(%rsp), %rdx       # 8-byte Reload
	movq	15640(%rsp), %rcx       # 8-byte Reload
	movq	15608(%rsp), %r8        # 8-byte Reload
	movq	15600(%rsp), %r9        # 8-byte Reload
	movq	15544(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$.L.str22109, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %al
	movq	15752(%rsp), %rdi       # 8-byte Reload
                                        # implicit-def: RDX
	callq	fprintf
.Ltmp262:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str3562463, %r8
	movabsq	$0, %rsi
	leaq	.L.str3572464, %r9
	leaq	.L.str3542461, %r10
	leaq	.L.str3552462, %r11
	movabsq	$2, %rbx
	leaq	fclose, %r14
	leaq	.L.str3522459, %r15
	leaq	.L.str3532460, %r12
	movabsq	$129, %r13
	leaq	.L.str3492456, %rbp
	movq	%rcx, 15528(%rsp)       # 8-byte Spill
	leaq	.L.str3502457, %rcx
	movq	%rcx, 15520(%rsp)       # 8-byte Spill
	leaq	.L.str3512458, %rcx
	movq	%rcx, 15512(%rsp)       # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 15508(%rsp)       # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 15496(%rsp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 15488(%rsp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 15480(%rsp)       # 8-byte Spill
	leaq	.L.str3472454, %rcx
	movq	%rcx, 15472(%rsp)       # 8-byte Spill
	leaq	.L.str3482455, %rcx
	movl	%eax, 15468(%rsp)       # 4-byte Spill
	movl	15508(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 15456(%rsp)       # 8-byte Spill
	movq	15488(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 15448(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	15480(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 15440(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	15456(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 15432(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	15432(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 15424(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	15472(%rsp), %rax       # 8-byte Reload
	movq	%r8, 15416(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	15440(%rsp), %rax       # 8-byte Reload
	movq	%r9, 15408(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	15424(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 15400(%rsp)       # 8-byte Spill
	movq	%r15, 15392(%rsp)       # 8-byte Spill
	movq	%r12, 15384(%rsp)       # 8-byte Spill
	movq	%r14, 15376(%rsp)       # 8-byte Spill
	movq	%r13, 15368(%rsp)       # 8-byte Spill
	movq	%rbx, 15360(%rsp)       # 8-byte Spill
	movq	%r10, 15352(%rsp)       # 8-byte Spill
	movq	%r11, 15344(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	15368(%rsp), %rdi       # 8-byte Reload
	movq	15400(%rsp), %rsi       # 8-byte Reload
	movq	15520(%rsp), %rdx       # 8-byte Reload
	movq	15512(%rsp), %rcx       # 8-byte Reload
	movq	15496(%rsp), %r8        # 8-byte Reload
	movl	15468(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15360(%rsp), %rdi       # 8-byte Reload
	movq	15528(%rsp), %rsi       # 8-byte Reload
	movq	15376(%rsp), %rdx       # 8-byte Reload
	movq	15432(%rsp), %rcx       # 8-byte Reload
	movq	15392(%rsp), %r8        # 8-byte Reload
	movq	15440(%rsp), %r9        # 8-byte Reload
	movq	15384(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15432(%rsp), %rdi       # 8-byte Reload
	movq	15528(%rsp), %rsi       # 8-byte Reload
	movq	15752(%rsp), %rdx       # 8-byte Reload
	movq	15432(%rsp), %rcx       # 8-byte Reload
	movq	15352(%rsp), %r8        # 8-byte Reload
	movq	15440(%rsp), %r9        # 8-byte Reload
	movq	15344(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15448(%rsp), %rdi       # 8-byte Reload
	movq	15528(%rsp), %rsi       # 8-byte Reload
	movq	15752(%rsp), %rdx       # 8-byte Reload
	movq	15432(%rsp), %rcx       # 8-byte Reload
	movq	15416(%rsp), %r8        # 8-byte Reload
	movq	15440(%rsp), %r9        # 8-byte Reload
	movq	15408(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15752(%rsp), %rdi       # 8-byte Reload
	callq	fclose
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str3832490, %r8
	movabsq	$0, %rsi
	leaq	.L.str3842491, %r9
	leaq	.L.str3812488, %r10
	leaq	.L.str3822489, %r11
	movabsq	$2, %rbx
	leaq	malloc, %r14
	leaq	.L.str3792486, %r15
	leaq	.L.str3802487, %r12
	movabsq	$131, %r13
	leaq	.L.str3762483, %rbp
	movq	%rcx, 15336(%rsp)       # 8-byte Spill
	leaq	.L.str3772484, %rcx
	movq	%rcx, 15328(%rsp)       # 8-byte Spill
	leaq	.L.str3782485, %rcx
	movq	%rcx, 15320(%rsp)       # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 15316(%rsp)       # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 15304(%rsp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 15296(%rsp)       # 8-byte Spill
	leaq	.L.str3742481, %rcx
	movq	%rcx, 15288(%rsp)       # 8-byte Spill
	leaq	.L.str3752482, %rcx
	movq	%rcx, 15280(%rsp)       # 8-byte Spill
	leaq	.L.str3722479, %rcx
	movq	%rcx, 15272(%rsp)       # 8-byte Spill
	leaq	.L.str3732480, %rcx
	movq	%rcx, 15264(%rsp)       # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, 15256(%rsp)       # 8-byte Spill
	leaq	.L.str3702477, %rcx
	movq	%rcx, 15248(%rsp)       # 8-byte Spill
	leaq	.L.str3712478, %rcx
	movq	%rcx, 15240(%rsp)       # 8-byte Spill
	leaq	.L.str3672474, %rcx
	movq	%rcx, 15232(%rsp)       # 8-byte Spill
	leaq	.L.str3682475, %rcx
	movq	%rcx, 15224(%rsp)       # 8-byte Spill
	leaq	.L.str3692476, %rcx
	movq	%rcx, 15216(%rsp)       # 8-byte Spill
	movabsq	$20, %rcx
	movq	%rcx, 15208(%rsp)       # 8-byte Spill
	leaq	.L.str3652472, %rcx
	movq	%rcx, 15200(%rsp)       # 8-byte Spill
	leaq	.L.str3662473, %rcx
	movq	%rcx, 15192(%rsp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 15184(%rsp)       # 8-byte Spill
	leaq	.L.str3632470, %rcx
	movq	%rcx, 15176(%rsp)       # 8-byte Spill
	leaq	.L.str3642471, %rcx
	movq	%rcx, 15168(%rsp)       # 8-byte Spill
	leaq	.L.str3602467, %rcx
	movq	%rcx, 15160(%rsp)       # 8-byte Spill
	leaq	.L.str3612468, %rcx
	movq	%rcx, 15152(%rsp)       # 8-byte Spill
	leaq	.L.str3622469, %rcx
	movq	%rcx, 15144(%rsp)       # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 15136(%rsp)       # 8-byte Spill
	leaq	.L.str3582465, %rcx
	movq	%rcx, 15128(%rsp)       # 8-byte Spill
	leaq	.L.str3592466, %rcx
	.loc	6 131 0                 # kmeans_clustering.c:131:0
	movl	%eax, 15124(%rsp)       # 4-byte Spill
	movl	15316(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 15112(%rsp)       # 8-byte Spill
	movq	15296(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 15104(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	15184(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 15096(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	15112(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 15088(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	15088(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 15080(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	15128(%rsp), %rax       # 8-byte Reload
	movq	%r8, 15072(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	15096(%rsp), %rax       # 8-byte Reload
	movq	%r9, 15064(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	15080(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 15056(%rsp)       # 8-byte Spill
	movq	%r15, 15048(%rsp)       # 8-byte Spill
	movq	%r12, 15040(%rsp)       # 8-byte Spill
	movq	%r14, 15032(%rsp)       # 8-byte Spill
	movq	%r13, 15024(%rsp)       # 8-byte Spill
	movq	%rbx, 15016(%rsp)       # 8-byte Spill
	movq	%r10, 15008(%rsp)       # 8-byte Spill
	movq	%r11, 15000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	15024(%rsp), %rdi       # 8-byte Reload
	movq	15160(%rsp), %rsi       # 8-byte Reload
	movq	15152(%rsp), %rdx       # 8-byte Reload
	movq	15144(%rsp), %rcx       # 8-byte Reload
	movq	15136(%rsp), %r8        # 8-byte Reload
	movl	15124(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15972(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	15088(%rsp), %rdi       # 8-byte Reload
	movq	15184(%rsp), %rsi       # 8-byte Reload
	movq	15088(%rsp), %rcx       # 8-byte Reload
	movq	15176(%rsp), %r8        # 8-byte Reload
	movq	15096(%rsp), %r9        # 8-byte Reload
	movq	15168(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %esi       # 4-byte Reload
	movslq	%esi, %rax
	movq	15296(%rsp), %rdi       # 8-byte Reload
	movq	15336(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	15088(%rsp), %rcx       # 8-byte Reload
	movq	15200(%rsp), %r8        # 8-byte Reload
	movq	15096(%rsp), %r9        # 8-byte Reload
	movq	15192(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 14992(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	15024(%rsp), %rdi       # 8-byte Reload
	movq	15232(%rsp), %rsi       # 8-byte Reload
	movq	15224(%rsp), %rdx       # 8-byte Reload
	movq	15216(%rsp), %rcx       # 8-byte Reload
	movq	15208(%rsp), %r8        # 8-byte Reload
	movl	15124(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15016(%rsp), %rdi       # 8-byte Reload
	movq	15336(%rsp), %rsi       # 8-byte Reload
	movq	15256(%rsp), %rdx       # 8-byte Reload
	movq	15096(%rsp), %rcx       # 8-byte Reload
	movq	15248(%rsp), %r8        # 8-byte Reload
	movq	15096(%rsp), %r9        # 8-byte Reload
	movq	15240(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15088(%rsp), %rdi       # 8-byte Reload
	movq	15336(%rsp), %rsi       # 8-byte Reload
	movq	14992(%rsp), %rdx       # 8-byte Reload
	movq	15088(%rsp), %rcx       # 8-byte Reload
	movq	15272(%rsp), %r8        # 8-byte Reload
	movq	15096(%rsp), %r9        # 8-byte Reload
	movq	15264(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14992(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	15296(%rsp), %rdi       # 8-byte Reload
	movq	15336(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	15088(%rsp), %rcx       # 8-byte Reload
	movq	15288(%rsp), %r8        # 8-byte Reload
	movq	15096(%rsp), %r9        # 8-byte Reload
	movq	15280(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 14984(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	15024(%rsp), %rdi       # 8-byte Reload
	movq	15056(%rsp), %rsi       # 8-byte Reload
	movq	15328(%rsp), %rdx       # 8-byte Reload
	movq	15320(%rsp), %rcx       # 8-byte Reload
	movq	15304(%rsp), %r8        # 8-byte Reload
	movl	15124(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	15016(%rsp), %rdi       # 8-byte Reload
	movq	15336(%rsp), %rsi       # 8-byte Reload
	movq	15032(%rsp), %rdx       # 8-byte Reload
	movq	15088(%rsp), %rcx       # 8-byte Reload
	movq	15048(%rsp), %r8        # 8-byte Reload
	movq	15096(%rsp), %r9        # 8-byte Reload
	movq	15040(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15088(%rsp), %rdi       # 8-byte Reload
	movq	15336(%rsp), %rsi       # 8-byte Reload
	movq	14984(%rsp), %rdx       # 8-byte Reload
	movq	15088(%rsp), %rcx       # 8-byte Reload
	movq	15008(%rsp), %r8        # 8-byte Reload
	movq	15096(%rsp), %r9        # 8-byte Reload
	movq	15000(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15104(%rsp), %rdi       # 8-byte Reload
	movq	15336(%rsp), %rsi       # 8-byte Reload
	movq	14984(%rsp), %rdx       # 8-byte Reload
	movq	15088(%rsp), %rcx       # 8-byte Reload
	movq	15072(%rsp), %r8        # 8-byte Reload
	movq	15096(%rsp), %r9        # 8-byte Reload
	movq	15064(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14984(%rsp), %rdi       # 8-byte Reload
	callq	malloc
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str4262533, %r8
	movabsq	$0, %rsi
	leaq	.L.str4272534, %r9
	leaq	.L.str4242531, %r10
	leaq	.L.str4252532, %r11
	movabsq	$2, %rbx
	leaq	malloc, %r14
	leaq	.L.str4222529, %r15
	leaq	.L.str4232530, %r12
	movabsq	$132, %r13
	leaq	.L.str4192526, %rbp
	movq	%rax, 14976(%rsp)       # 8-byte Spill
	leaq	.L.str4202527, %rax
	movq	%rax, 14968(%rsp)       # 8-byte Spill
	leaq	.L.str4212528, %rax
	movq	%rax, 14960(%rsp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 14952(%rsp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 14944(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 14936(%rsp)       # 8-byte Spill
	leaq	.L.str4172524, %rax
	movq	%rax, 14928(%rsp)       # 8-byte Spill
	leaq	.L.str4182525, %rax
	movq	%rax, 14920(%rsp)       # 8-byte Spill
	leaq	.L.str4152522, %rax
	movq	%rax, 14912(%rsp)       # 8-byte Spill
	leaq	.L.str4162523, %rax
	movq	%rax, 14904(%rsp)       # 8-byte Spill
	leaq	.L.str4132520, %rax
	movq	%rax, 14896(%rsp)       # 8-byte Spill
	leaq	.L.str4142521, %rax
	movq	%rax, 14888(%rsp)       # 8-byte Spill
	leaq	.L.str4102517, %rax
	movq	%rax, 14880(%rsp)       # 8-byte Spill
	leaq	.L.str4112518, %rax
	movq	%rax, 14872(%rsp)       # 8-byte Spill
	leaq	.L.str4122519, %rax
	movq	%rax, 14864(%rsp)       # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 14856(%rsp)       # 8-byte Spill
	leaq	.L.str4082515, %rax
	movq	%rax, 14848(%rsp)       # 8-byte Spill
	leaq	.L.str4092516, %rax
	movq	%rax, 14840(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 14832(%rsp)       # 8-byte Spill
	leaq	.L.str4062513, %rax
	movq	%rax, 14824(%rsp)       # 8-byte Spill
	leaq	.L.str4072514, %rax
	movq	%rax, 14816(%rsp)       # 8-byte Spill
	leaq	.L.str4032510, %rax
	movq	%rax, 14808(%rsp)       # 8-byte Spill
	leaq	.L.str4042511, %rax
	movq	%rax, 14800(%rsp)       # 8-byte Spill
	leaq	.L.str4052512, %rax
	movq	%rax, 14792(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 14784(%rsp)       # 8-byte Spill
	leaq	.L.str4012508, %rax
	movq	%rax, 14776(%rsp)       # 8-byte Spill
	leaq	.L.str4022509, %rax
	movq	%rax, 14768(%rsp)       # 8-byte Spill
	leaq	.L.str3992506, %rax
	movq	%rax, 14760(%rsp)       # 8-byte Spill
	leaq	.L.str4002507, %rax
	movq	%rax, 14752(%rsp)       # 8-byte Spill
	leaq	.L.str3972504, %rax
	movq	%rax, 14744(%rsp)       # 8-byte Spill
	leaq	.L.str3982505, %rax
	movq	%rax, 14736(%rsp)       # 8-byte Spill
	leaq	.L.str3942501, %rax
	movq	%rax, 14728(%rsp)       # 8-byte Spill
	leaq	.L.str3952502, %rax
	movq	%rax, 14720(%rsp)       # 8-byte Spill
	leaq	.L.str3962503, %rax
	movq	%rax, 14712(%rsp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 14704(%rsp)       # 8-byte Spill
	leaq	.L.str3922499, %rax
	movq	%rax, 14696(%rsp)       # 8-byte Spill
	leaq	.L.str3932500, %rax
	movq	%rax, 14688(%rsp)       # 8-byte Spill
	leaq	.L.str3902497, %rax
	movq	%rax, 14680(%rsp)       # 8-byte Spill
	leaq	.L.str3912498, %rax
	movq	%rax, 14672(%rsp)       # 8-byte Spill
	movabsq	$131, %rax
	movq	%rax, 14664(%rsp)       # 8-byte Spill
	leaq	.L.str3872494, %rax
	movq	%rax, 14656(%rsp)       # 8-byte Spill
	leaq	.L.str3882495, %rax
	movq	%rax, 14648(%rsp)       # 8-byte Spill
	leaq	.L.str3892496, %rax
	movq	%rax, 14640(%rsp)       # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 14632(%rsp)       # 8-byte Spill
	leaq	.L.str3852492, %rax
	movq	%rax, 14624(%rsp)       # 8-byte Spill
	leaq	.L.str3862493, %rax
	movq	%rax, 14616(%rsp)       # 8-byte Spill
	movq	14936(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 14608(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 14604(%rsp)       # 4-byte Spill
	movq	%rcx, %rsi
	movq	14976(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 14592(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	14592(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 14584(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	14624(%rsp), %rax       # 8-byte Reload
	movq	%r8, 14576(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	14952(%rsp), %rax       # 8-byte Reload
	movq	%r9, 14568(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	14616(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 14560(%rsp)       # 8-byte Spill
	movq	%r15, 14552(%rsp)       # 8-byte Spill
	movq	%r12, 14544(%rsp)       # 8-byte Spill
	movq	%r14, 14536(%rsp)       # 8-byte Spill
	movq	%r13, 14528(%rsp)       # 8-byte Spill
	movq	%rbx, 14520(%rsp)       # 8-byte Spill
	movq	%r10, 14512(%rsp)       # 8-byte Spill
	movq	%r11, 14504(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	14664(%rsp), %rdi       # 8-byte Reload
	movq	14656(%rsp), %rsi       # 8-byte Reload
	movq	14648(%rsp), %rdx       # 8-byte Reload
	movq	14640(%rsp), %rcx       # 8-byte Reload
	movq	14632(%rsp), %r8        # 8-byte Reload
	movl	14604(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14592(%rsp), %rdi       # 8-byte Reload
	movq	14584(%rsp), %rsi       # 8-byte Reload
	movq	14976(%rsp), %rdx       # 8-byte Reload
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14680(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14672(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14976(%rsp), %rax       # 8-byte Reload
	movq	14936(%rsp), %rdi       # 8-byte Reload
	movq	14584(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14696(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14688(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 14496(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp263:
	#DEBUG_VALUE: kmeans_clustering:clusters <- [RSP+14496]
	.loc	6 132 0                 # kmeans_clustering.c:132:0
	movq	14528(%rsp), %rdi       # 8-byte Reload
	movq	14728(%rsp), %rsi       # 8-byte Reload
	movq	14720(%rsp), %rdx       # 8-byte Reload
	movq	14712(%rsp), %rcx       # 8-byte Reload
	movq	14704(%rsp), %r8        # 8-byte Reload
	movl	14604(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15868(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	14520(%rsp), %rdi       # 8-byte Reload
	movq	14832(%rsp), %rsi       # 8-byte Reload
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14744(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14736(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	14592(%rsp), %rdi       # 8-byte Reload
	movq	14832(%rsp), %rsi       # 8-byte Reload
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14760(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14752(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %esi       # 4-byte Reload
	movl	15868(%rsp), %edi       # 4-byte Reload
	imull	%edi, %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	14936(%rsp), %rdi       # 8-byte Reload
	movq	14832(%rsp), %rax       # 8-byte Reload
	movl	%esi, 14492(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14776(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14768(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14528(%rsp), %rdi       # 8-byte Reload
	movq	14808(%rsp), %rsi       # 8-byte Reload
	movq	14800(%rsp), %rdx       # 8-byte Reload
	movq	14792(%rsp), %rcx       # 8-byte Reload
	movq	14784(%rsp), %r8        # 8-byte Reload
	movl	14604(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	14492(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	14592(%rsp), %rdi       # 8-byte Reload
	movq	14832(%rsp), %rsi       # 8-byte Reload
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14824(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14816(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	14492(%rsp), %esi       # 4-byte Reload
	movslq	%esi, %rax
	movq	14936(%rsp), %rdi       # 8-byte Reload
	movq	14584(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14848(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14840(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 14480(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	14528(%rsp), %rdi       # 8-byte Reload
	movq	14880(%rsp), %rsi       # 8-byte Reload
	movq	14872(%rsp), %rdx       # 8-byte Reload
	movq	14864(%rsp), %rcx       # 8-byte Reload
	movq	14856(%rsp), %r8        # 8-byte Reload
	movl	14604(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14520(%rsp), %rdi       # 8-byte Reload
	movq	14584(%rsp), %rsi       # 8-byte Reload
	movq	14520(%rsp), %rdx       # 8-byte Reload
	movq	14952(%rsp), %rcx       # 8-byte Reload
	movq	14896(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14888(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14592(%rsp), %rdi       # 8-byte Reload
	movq	14584(%rsp), %rsi       # 8-byte Reload
	movq	14480(%rsp), %rdx       # 8-byte Reload
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14912(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14904(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14480(%rsp), %rax       # 8-byte Reload
	shlq	$2, %rax
	movq	14936(%rsp), %rdi       # 8-byte Reload
	movq	14584(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14928(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14920(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 14472(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	14528(%rsp), %rdi       # 8-byte Reload
	movq	14560(%rsp), %rsi       # 8-byte Reload
	movq	14968(%rsp), %rdx       # 8-byte Reload
	movq	14960(%rsp), %rcx       # 8-byte Reload
	movq	14944(%rsp), %r8        # 8-byte Reload
	movl	14604(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14520(%rsp), %rdi       # 8-byte Reload
	movq	14584(%rsp), %rsi       # 8-byte Reload
	movq	14536(%rsp), %rdx       # 8-byte Reload
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14552(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14544(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14592(%rsp), %rdi       # 8-byte Reload
	movq	14584(%rsp), %rsi       # 8-byte Reload
	movq	14472(%rsp), %rdx       # 8-byte Reload
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14512(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14504(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14608(%rsp), %rdi       # 8-byte Reload
	movq	14584(%rsp), %rsi       # 8-byte Reload
	movq	14472(%rsp), %rdx       # 8-byte Reload
	movq	14592(%rsp), %rcx       # 8-byte Reload
	movq	14576(%rsp), %r8        # 8-byte Reload
	movq	14952(%rsp), %r9        # 8-byte Reload
	movq	14568(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14472(%rsp), %rdi       # 8-byte Reload
	callq	malloc
.Ltmp264:
	movabsq	$1, %rcx
	leaq	.L.str4602567, %r8
	movabsq	$0, %rdx
	leaq	.L.str4612568, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4582565, %r9
	leaq	.L.str4592566, %r10
	movabsq	$3, %r11
	leaq	.L.str4562563, %rbx
	leaq	.L.str4572564, %r14
	movabsq	$133, %r15
	leaq	.L.str4532560, %r12
	leaq	.L.str4542561, %r13
	leaq	.L.str4552562, %rbp
	movq	%rsi, 14464(%rsp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 14456(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 14448(%rsp)       # 8-byte Spill
	leaq	.L.str4512558, %rax
	movq	%rax, 14440(%rsp)       # 8-byte Spill
	leaq	.L.str4522559, %rax
	movq	%rax, 14432(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 14424(%rsp)       # 8-byte Spill
	leaq	.L.str4492556, %rax
	movq	%rax, 14416(%rsp)       # 8-byte Spill
	leaq	.L.str4502557, %rax
	movq	%rax, 14408(%rsp)       # 8-byte Spill
	leaq	.L.str4472554, %rax
	movq	%rax, 14400(%rsp)       # 8-byte Spill
	leaq	.L.str4482555, %rax
	movq	%rax, 14392(%rsp)       # 8-byte Spill
	leaq	.L.str4442551, %rax
	movq	%rax, 14384(%rsp)       # 8-byte Spill
	leaq	.L.str4452552, %rax
	movq	%rax, 14376(%rsp)       # 8-byte Spill
	leaq	.L.str4462553, %rax
	movq	%rax, 14368(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 14360(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 14352(%rsp)       # 8-byte Spill
	leaq	.L.str4422549, %rax
	movq	%rax, 14344(%rsp)       # 8-byte Spill
	leaq	.L.str4432550, %rax
	movq	%rax, 14336(%rsp)       # 8-byte Spill
	leaq	.L.str4402547, %rax
	movq	%rax, 14328(%rsp)       # 8-byte Spill
	leaq	.L.str4412548, %rax
	movq	%rax, 14320(%rsp)       # 8-byte Spill
	movabsq	$132, %rax
	movq	%rax, 14312(%rsp)       # 8-byte Spill
	leaq	.L.str4372544, %rax
	movq	%rax, 14304(%rsp)       # 8-byte Spill
	leaq	.L.str4382545, %rax
	movq	%rax, 14296(%rsp)       # 8-byte Spill
	leaq	.L.str4392546, %rax
	movq	%rax, 14288(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 14280(%rsp)       # 8-byte Spill
	leaq	.L.str4352542, %rax
	movq	%rax, 14272(%rsp)       # 8-byte Spill
	leaq	.L.str4362543, %rax
	movq	%rax, 14264(%rsp)       # 8-byte Spill
	leaq	.L.str4332540, %rax
	movq	%rax, 14256(%rsp)       # 8-byte Spill
	leaq	.L.str4342541, %rax
	movq	%rax, 14248(%rsp)       # 8-byte Spill
	leaq	.L.str4302537, %rax
	movq	%rax, 14240(%rsp)       # 8-byte Spill
	leaq	.L.str4312538, %rax
	movq	%rax, 14232(%rsp)       # 8-byte Spill
	leaq	.L.str4322539, %rax
	movq	%rax, 14224(%rsp)       # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 14216(%rsp)       # 8-byte Spill
	leaq	.L.str4282535, %rax
	movq	%rax, 14208(%rsp)       # 8-byte Spill
	leaq	.L.str4292536, %rax
	movq	%rax, 14200(%rsp)       # 8-byte Spill
	movq	14448(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 14192(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	14352(%rsp), %rax       # 8-byte Reload
	movl	%esi, 14188(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	14456(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 14176(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 14168(%rsp)       # 8-byte Spill
	movq	14208(%rsp), %rax       # 8-byte Reload
	movq	%r8, 14160(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	14176(%rsp), %rax       # 8-byte Reload
	movq	%r9, 14152(%rsp)        # 8-byte Spill
	movq	%rax, %r9
	movq	14200(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 14144(%rsp)       # 8-byte Spill
	movq	%r14, 14136(%rsp)       # 8-byte Spill
	movq	%r12, 14128(%rsp)       # 8-byte Spill
	movq	%r13, 14120(%rsp)       # 8-byte Spill
	movq	%rbp, 14112(%rsp)       # 8-byte Spill
	movq	%rbx, 14104(%rsp)       # 8-byte Spill
	movq	%r10, 14096(%rsp)       # 8-byte Spill
	movq	%r11, 14088(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	14312(%rsp), %rdi       # 8-byte Reload
	movq	14240(%rsp), %rsi       # 8-byte Reload
	movq	14232(%rsp), %rdx       # 8-byte Reload
	movq	14224(%rsp), %rcx       # 8-byte Reload
	movq	14216(%rsp), %r8        # 8-byte Reload
	movl	14188(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14168(%rsp), %rdi       # 8-byte Reload
	movq	14352(%rsp), %rsi       # 8-byte Reload
	movq	14456(%rsp), %rdx       # 8-byte Reload
	movq	14168(%rsp), %rcx       # 8-byte Reload
	movq	14256(%rsp), %r8        # 8-byte Reload
	movq	14176(%rsp), %r9        # 8-byte Reload
	movq	14248(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14456(%rsp), %rax       # 8-byte Reload
	movq	14448(%rsp), %rdi       # 8-byte Reload
	movq	14352(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	14168(%rsp), %rcx       # 8-byte Reload
	movq	14272(%rsp), %r8        # 8-byte Reload
	movq	14176(%rsp), %r9        # 8-byte Reload
	movq	14264(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 14080(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	14312(%rsp), %rdi       # 8-byte Reload
	movq	14304(%rsp), %rsi       # 8-byte Reload
	movq	14296(%rsp), %rdx       # 8-byte Reload
	movq	14288(%rsp), %rcx       # 8-byte Reload
	movq	14280(%rsp), %r8        # 8-byte Reload
	movl	14188(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14192(%rsp), %rdi       # 8-byte Reload
	movq	14352(%rsp), %rsi       # 8-byte Reload
	movq	14496(%rsp), %rdx       # 8-byte Reload
	movq	14168(%rsp), %rcx       # 8-byte Reload
	movq	14328(%rsp), %r8        # 8-byte Reload
	movq	14176(%rsp), %r9        # 8-byte Reload
	movq	14320(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14168(%rsp), %rdi       # 8-byte Reload
	movq	14352(%rsp), %rsi       # 8-byte Reload
	movq	14080(%rsp), %rdx       # 8-byte Reload
	movq	14168(%rsp), %rcx       # 8-byte Reload
	movq	14344(%rsp), %r8        # 8-byte Reload
	movq	14176(%rsp), %r9        # 8-byte Reload
	movq	14336(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14976(%rsp), %rax       # 8-byte Reload
	movq	14080(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, (%rax)
.Ltmp265:
	#DEBUG_VALUE: kmeans_clustering:i <- 1
	.loc	6 133 0                 # kmeans_clustering.c:133:0
	movq	14144(%rsp), %rdi       # 8-byte Reload
	movq	14384(%rsp), %rsi       # 8-byte Reload
	movq	14376(%rsp), %rdx       # 8-byte Reload
	movq	14368(%rsp), %rcx       # 8-byte Reload
	movq	14360(%rsp), %r8        # 8-byte Reload
	movl	14188(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14192(%rsp), %rdi       # 8-byte Reload
	movq	14424(%rsp), %rsi       # 8-byte Reload
	movq	14168(%rsp), %rdx       # 8-byte Reload
	movq	14176(%rsp), %rcx       # 8-byte Reload
	movq	14400(%rsp), %r8        # 8-byte Reload
	movq	14176(%rsp), %r9        # 8-byte Reload
	movq	14392(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	14168(%rsp), %rdi       # 8-byte Reload
	movq	14424(%rsp), %rsi       # 8-byte Reload
	movq	14168(%rsp), %rcx       # 8-byte Reload
	movq	14416(%rsp), %r8        # 8-byte Reload
	movq	14176(%rsp), %r9        # 8-byte Reload
	movq	14408(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %esi       # 4-byte Reload
	cmpl	$1, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	14448(%rsp), %rdi       # 8-byte Reload
	movq	14168(%rsp), %rsi       # 8-byte Reload
	movq	14168(%rsp), %rcx       # 8-byte Reload
	movq	14440(%rsp), %r8        # 8-byte Reload
	movq	14176(%rsp), %r9        # 8-byte Reload
	movq	14432(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 14079(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	14144(%rsp), %rdi       # 8-byte Reload
	movq	14128(%rsp), %rsi       # 8-byte Reload
	movq	14120(%rsp), %rdx       # 8-byte Reload
	movq	14112(%rsp), %rcx       # 8-byte Reload
	movq	14192(%rsp), %r8        # 8-byte Reload
	movl	14188(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14088(%rsp), %rdi       # 8-byte Reload
	movq	14176(%rsp), %rsi       # 8-byte Reload
	movq	14176(%rsp), %rdx       # 8-byte Reload
	movq	14168(%rsp), %rcx       # 8-byte Reload
	movq	14104(%rsp), %r8        # 8-byte Reload
	movq	14176(%rsp), %r9        # 8-byte Reload
	movq	14136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14192(%rsp), %rdi       # 8-byte Reload
	movq	14176(%rsp), %rsi       # 8-byte Reload
	movq	14176(%rsp), %rdx       # 8-byte Reload
	movq	14168(%rsp), %rcx       # 8-byte Reload
	movq	14152(%rsp), %r8        # 8-byte Reload
	movq	14176(%rsp), %r9        # 8-byte Reload
	movq	14096(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	14079(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	14168(%rsp), %rdi       # 8-byte Reload
	movq	14168(%rsp), %rsi       # 8-byte Reload
	movq	14168(%rsp), %rcx       # 8-byte Reload
	movq	14160(%rsp), %r8        # 8-byte Reload
	movq	14176(%rsp), %r9        # 8-byte Reload
	movq	14464(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	14079(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB7_1
	jmp	.LBB7_2
.Ltmp266:
.LBB7_1:                                # %.lr.ph26
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str4722579, %r8
	leaq	.L.str4732580, %rdx
	movabsq	$133, %rdi
	leaq	.L.str4692576, %rsi
	leaq	.L.str4702577, %r9
	leaq	.L.str4712578, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str4672574, %r12
	leaq	.L.str4682575, %r13
	movabsq	$32, %rbp
	movq	%rax, 14064(%rsp)       # 8-byte Spill
	leaq	.L.str4652572, %rax
	movq	%rax, 14056(%rsp)       # 8-byte Spill
	leaq	.L.str4662573, %rax
	movq	%rax, 14048(%rsp)       # 8-byte Spill
	movabsq	$134, %rax
	movq	%rax, 14040(%rsp)       # 8-byte Spill
	leaq	.L.str4622569, %rax
	movq	%rax, 14032(%rsp)       # 8-byte Spill
	leaq	.L.str4632570, %rax
	movq	%rax, 14024(%rsp)       # 8-byte Spill
	leaq	.L.str4642571, %rax
	movq	%rax, 14016(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	.loc	6 134 0                 # kmeans_clustering.c:134:0
	movq	%rax, 14008(%rsp)       # 8-byte Spill
	movq	14040(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 14000(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	14032(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 13992(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	14024(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 13984(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	14016(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 13976(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	14008(%rsp), %rax       # 8-byte Reload
	movq	%r8, 13968(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 13960(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 13952(%rsp)       # 8-byte Spill
	movq	%r14, 13944(%rsp)       # 8-byte Spill
	movq	%r12, 13936(%rsp)       # 8-byte Spill
	movq	%rbp, 13928(%rsp)       # 8-byte Spill
	movq	%r13, 13920(%rsp)       # 8-byte Spill
	movl	%ebx, 13916(%rsp)       # 4-byte Spill
	movq	%r10, 13904(%rsp)       # 8-byte Spill
	movq	%r11, 13896(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movl	15868(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	14064(%rsp), %rdi       # 8-byte Reload
	movq	13928(%rsp), %rsi       # 8-byte Reload
	movq	14064(%rsp), %rcx       # 8-byte Reload
	movq	14056(%rsp), %r8        # 8-byte Reload
	movq	13976(%rsp), %r9        # 8-byte Reload
	movq	14048(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15868(%rsp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	.loc	6 133 0                 # kmeans_clustering.c:133:0
	movq	13944(%rsp), %rdi       # 8-byte Reload
	movq	13952(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	14064(%rsp), %rcx       # 8-byte Reload
	movq	13936(%rsp), %r8        # 8-byte Reload
	movq	13976(%rsp), %r9        # 8-byte Reload
	movq	13920(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 13888(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	14000(%rsp), %rdi       # 8-byte Reload
	movq	13992(%rsp), %rsi       # 8-byte Reload
	movq	13960(%rsp), %rdx       # 8-byte Reload
	movq	13904(%rsp), %rcx       # 8-byte Reload
	movq	13896(%rsp), %r8        # 8-byte Reload
	movl	13916(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	14064(%rsp), %rdi       # 8-byte Reload
	movq	13976(%rsp), %rsi       # 8-byte Reload
	movq	13976(%rsp), %rdx       # 8-byte Reload
	movq	14064(%rsp), %rcx       # 8-byte Reload
	movq	13968(%rsp), %r8        # 8-byte Reload
	movq	13976(%rsp), %r9        # 8-byte Reload
	movq	13984(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14064(%rsp), %rax       # 8-byte Reload
	movq	%rax, 13880(%rsp)       # 8-byte Spill
	jmp	.LBB7_4
.Ltmp267:
.LBB7_2:                                # %.preheader21
	movabsq	$1, %rax
	leaq	.L.str4902597, %r8
	movabsq	$0, %rcx
	leaq	.L.str4912598, %rdx
	movabsq	$2, %rsi
	leaq	.L.str4882595, %rdi
	leaq	.L.str4892596, %r9
	movabsq	$3, %r10
	leaq	.L.str4862593, %r11
	leaq	.L.str4872594, %rbx
	movabsq	$137, %r14
	leaq	.L.str4832590, %r15
	leaq	.L.str4842591, %r12
	leaq	.L.str4852592, %r13
	movl	$1, %ebp
	movq	%rax, 13872(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 13864(%rsp)       # 8-byte Spill
	leaq	.L.str4812588, %rax
	movq	%rax, 13856(%rsp)       # 8-byte Spill
	leaq	.L.str4822589, %rax
	movq	%rax, 13848(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 13840(%rsp)       # 8-byte Spill
	leaq	.L.str4792586, %rax
	movq	%rax, 13832(%rsp)       # 8-byte Spill
	leaq	.L.str4802587, %rax
	movq	%rax, 13824(%rsp)       # 8-byte Spill
	leaq	.L.str4772584, %rax
	movq	%rax, 13816(%rsp)       # 8-byte Spill
	leaq	.L.str4782585, %rax
	movq	%rax, 13808(%rsp)       # 8-byte Spill
	leaq	.L.str4742581, %rax
	movq	%rax, 13800(%rsp)       # 8-byte Spill
	leaq	.L.str4752582, %rax
	movq	%rax, 13792(%rsp)       # 8-byte Spill
	leaq	.L.str4762583, %rax
	movq	%rax, 13784(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	.loc	6 137 0                 # kmeans_clustering.c:137:0
.Ltmp268:
	movq	%rdi, 13776(%rsp)       # 8-byte Spill
	movq	%r14, %rdi
	movq	%rax, 13768(%rsp)       # 8-byte Spill
	movq	13800(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 13760(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	13792(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 13752(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	13784(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 13744(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	13768(%rsp), %rax       # 8-byte Reload
	movq	%r8, 13736(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 13728(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 13720(%rsp)       # 8-byte Spill
	movq	%r15, 13712(%rsp)       # 8-byte Spill
	movq	%r12, 13704(%rsp)       # 8-byte Spill
	movq	%r13, 13696(%rsp)       # 8-byte Spill
	movl	%ebp, 13692(%rsp)       # 4-byte Spill
	movq	%rbx, 13680(%rsp)       # 8-byte Spill
	movq	%r10, 13672(%rsp)       # 8-byte Spill
	movq	%r11, 13664(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	13760(%rsp), %rdi       # 8-byte Reload
	movq	13840(%rsp), %rsi       # 8-byte Reload
	movq	13744(%rsp), %rdx       # 8-byte Reload
	movq	13744(%rsp), %rcx       # 8-byte Reload
	movq	13816(%rsp), %r8        # 8-byte Reload
	movq	13744(%rsp), %r9        # 8-byte Reload
	movq	13808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	13872(%rsp), %rdi       # 8-byte Reload
	movq	13840(%rsp), %rsi       # 8-byte Reload
	movq	13872(%rsp), %rcx       # 8-byte Reload
	movq	13832(%rsp), %r8        # 8-byte Reload
	movq	13744(%rsp), %r9        # 8-byte Reload
	movq	13824(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	13864(%rsp), %rdi       # 8-byte Reload
	movq	13872(%rsp), %rsi       # 8-byte Reload
	movq	13872(%rsp), %rcx       # 8-byte Reload
	movq	13856(%rsp), %r8        # 8-byte Reload
	movq	13744(%rsp), %r9        # 8-byte Reload
	movq	13848(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 13663(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	13720(%rsp), %rdi       # 8-byte Reload
	movq	13712(%rsp), %rsi       # 8-byte Reload
	movq	13704(%rsp), %rdx       # 8-byte Reload
	movq	13696(%rsp), %rcx       # 8-byte Reload
	movq	13760(%rsp), %r8        # 8-byte Reload
	movl	13692(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	13672(%rsp), %rdi       # 8-byte Reload
	movq	13744(%rsp), %rsi       # 8-byte Reload
	movq	13744(%rsp), %rdx       # 8-byte Reload
	movq	13872(%rsp), %rcx       # 8-byte Reload
	movq	13664(%rsp), %r8        # 8-byte Reload
	movq	13744(%rsp), %r9        # 8-byte Reload
	movq	13680(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13760(%rsp), %rdi       # 8-byte Reload
	movq	13744(%rsp), %rsi       # 8-byte Reload
	movq	13744(%rsp), %rdx       # 8-byte Reload
	movq	13872(%rsp), %rcx       # 8-byte Reload
	movq	13776(%rsp), %r8        # 8-byte Reload
	movq	13744(%rsp), %r9        # 8-byte Reload
	movq	13728(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	13663(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	13872(%rsp), %rdi       # 8-byte Reload
	movq	13872(%rsp), %rsi       # 8-byte Reload
	movq	13872(%rsp), %rcx       # 8-byte Reload
	movq	13736(%rsp), %r8        # 8-byte Reload
	movq	13744(%rsp), %r9        # 8-byte Reload
	movq	13752(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	13663(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB7_3
	jmp	.LBB7_7
.LBB7_3:                                # %.preheader17.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str5042611, %r8
	leaq	.L.str5052612, %rdx
	movabsq	$137, %rdi
	leaq	.L.str5012608, %rsi
	leaq	.L.str5022609, %r9
	leaq	.L.str5032610, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str4992606, %r15
	leaq	.L.str5002607, %r12
	movabsq	$32, %r13
	leaq	.L.str4972604, %rbp
	movq	%rax, 13648(%rsp)       # 8-byte Spill
	leaq	.L.str4982605, %rax
	movq	%rax, 13640(%rsp)       # 8-byte Spill
	leaq	.L.str4952602, %rax
	movq	%rax, 13632(%rsp)       # 8-byte Spill
	leaq	.L.str4962603, %rax
	movq	%rax, 13624(%rsp)       # 8-byte Spill
	movabsq	$139, %rax
	movq	%rax, 13616(%rsp)       # 8-byte Spill
	leaq	.L.str4922599, %rax
	movq	%rax, 13608(%rsp)       # 8-byte Spill
	leaq	.L.str4932600, %rax
	movq	%rax, 13600(%rsp)       # 8-byte Spill
	leaq	.L.str4942601, %rax
	movq	%rax, 13592(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	.loc	6 139 0                 # kmeans_clustering.c:139:0
.Ltmp269:
	movq	%rax, 13584(%rsp)       # 8-byte Spill
	movq	13616(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 13576(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	13608(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 13568(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	13600(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 13560(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	13592(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 13552(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	13584(%rsp), %rax       # 8-byte Reload
	movq	%r8, 13544(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 13536(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 13528(%rsp)       # 8-byte Spill
	movq	%r14, 13520(%rsp)       # 8-byte Spill
	movq	%r12, 13512(%rsp)       # 8-byte Spill
	movq	%rbp, 13504(%rsp)       # 8-byte Spill
	movq	%r13, 13496(%rsp)       # 8-byte Spill
	movl	%ebx, 13492(%rsp)       # 4-byte Spill
	movq	%r10, 13480(%rsp)       # 8-byte Spill
	movq	%r11, 13472(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	13472(%rsp), %rdi       # 8-byte Reload
	movq	13496(%rsp), %rsi       # 8-byte Reload
	movq	13648(%rsp), %rdx       # 8-byte Reload
	movq	13648(%rsp), %rcx       # 8-byte Reload
	movq	13632(%rsp), %r8        # 8-byte Reload
	movq	13648(%rsp), %r9        # 8-byte Reload
	movq	13624(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15868(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	13552(%rsp), %rdi       # 8-byte Reload
	movq	13496(%rsp), %rsi       # 8-byte Reload
	movq	13552(%rsp), %rcx       # 8-byte Reload
	movq	13504(%rsp), %r8        # 8-byte Reload
	movq	13648(%rsp), %r9        # 8-byte Reload
	movq	13640(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15868(%rsp), %ebx       # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp270:
	.loc	6 137 0                 # kmeans_clustering.c:137:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	13520(%rsp), %rdi       # 8-byte Reload
	movq	13552(%rsp), %rsi       # 8-byte Reload
	movq	13552(%rsp), %rcx       # 8-byte Reload
	movq	13528(%rsp), %r8        # 8-byte Reload
	movq	13648(%rsp), %r9        # 8-byte Reload
	movq	13512(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 13471(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	13576(%rsp), %rdi       # 8-byte Reload
	movq	13568(%rsp), %rsi       # 8-byte Reload
	movq	13536(%rsp), %rdx       # 8-byte Reload
	movq	13480(%rsp), %rcx       # 8-byte Reload
	movq	13472(%rsp), %r8        # 8-byte Reload
	movl	13492(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	13552(%rsp), %rdi       # 8-byte Reload
	movq	13648(%rsp), %rsi       # 8-byte Reload
	movq	13648(%rsp), %rdx       # 8-byte Reload
	movq	13552(%rsp), %rcx       # 8-byte Reload
	movq	13544(%rsp), %r8        # 8-byte Reload
	movq	13648(%rsp), %r9        # 8-byte Reload
	movq	13560(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13648(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 13456(%rsp)       # 8-byte Spill
	jmp	.LBB7_5
.Ltmp271:
.LBB7_4:                                # =>This Inner Loop Header: Depth=1
	movq	13880(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str5972704, %r8
	movabsq	$0, %rdx
	leaq	.L.str5982705, %rsi
	movabsq	$2, %rdi
	leaq	.L.str5952702, %r9
	leaq	.L.str5962703, %r10
	movabsq	$3, %r11
	leaq	.L.str5932700, %rbx
	leaq	.L.str5942701, %r14
	movabsq	$133, %r15
	leaq	.L.str5902697, %r12
	leaq	.L.str5912698, %r13
	leaq	.L.str5922699, %rbp
	movq	%rsi, 13448(%rsp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 13440(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 13432(%rsp)       # 8-byte Spill
	leaq	.L.str5882695, %rax
	movq	%rax, 13424(%rsp)       # 8-byte Spill
	leaq	.L.str5892696, %rax
	movq	%rax, 13416(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 13408(%rsp)       # 8-byte Spill
	leaq	.L.str5862693, %rax
	movq	%rax, 13400(%rsp)       # 8-byte Spill
	leaq	.L.str5872694, %rax
	movq	%rax, 13392(%rsp)       # 8-byte Spill
	leaq	.L.str5842691, %rax
	movq	%rax, 13384(%rsp)       # 8-byte Spill
	leaq	.L.str5852692, %rax
	movq	%rax, 13376(%rsp)       # 8-byte Spill
	leaq	.L.str5812688, %rax
	movq	%rax, 13368(%rsp)       # 8-byte Spill
	leaq	.L.str5822689, %rax
	movq	%rax, 13360(%rsp)       # 8-byte Spill
	leaq	.L.str5832690, %rax
	movq	%rax, 13352(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 13344(%rsp)       # 8-byte Spill
	leaq	.L.str5792686, %rax
	movq	%rax, 13336(%rsp)       # 8-byte Spill
	leaq	.L.str5802687, %rax
	movq	%rax, 13328(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 13320(%rsp)       # 8-byte Spill
	leaq	.L.str5772684, %rax
	movq	%rax, 13312(%rsp)       # 8-byte Spill
	leaq	.L.str5782685, %rax
	movq	%rax, 13304(%rsp)       # 8-byte Spill
	leaq	.L.str5742681, %rax
	movq	%rax, 13296(%rsp)       # 8-byte Spill
	leaq	.L.str5752682, %rax
	movq	%rax, 13288(%rsp)       # 8-byte Spill
	leaq	.L.str5762683, %rax
	movq	%rax, 13280(%rsp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 13272(%rsp)       # 8-byte Spill
	leaq	.L.str5722679, %rax
	movq	%rax, 13264(%rsp)       # 8-byte Spill
	leaq	.L.str5732680, %rax
	movq	%rax, 13256(%rsp)       # 8-byte Spill
	leaq	.L.str5702677, %rax
	movq	%rax, 13248(%rsp)       # 8-byte Spill
	leaq	.L.str5712678, %rax
	movq	%rax, 13240(%rsp)       # 8-byte Spill
	leaq	.L.str5682675, %rax
	movq	%rax, 13232(%rsp)       # 8-byte Spill
	leaq	.L.str5692676, %rax
	movq	%rax, 13224(%rsp)       # 8-byte Spill
	leaq	.L.str5652672, %rax
	movq	%rax, 13216(%rsp)       # 8-byte Spill
	leaq	.L.str5662673, %rax
	movq	%rax, 13208(%rsp)       # 8-byte Spill
	leaq	.L.str5672674, %rax
	movq	%rax, 13200(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 13192(%rsp)       # 8-byte Spill
	leaq	.L.str5632670, %rax
	movq	%rax, 13184(%rsp)       # 8-byte Spill
	leaq	.L.str5642671, %rax
	movq	%rax, 13176(%rsp)       # 8-byte Spill
	leaq	.L.str5612668, %rax
	movq	%rax, 13168(%rsp)       # 8-byte Spill
	leaq	.L.str5622669, %rax
	movq	%rax, 13160(%rsp)       # 8-byte Spill
	movabsq	$134, %rax
	movq	%rax, 13152(%rsp)       # 8-byte Spill
	leaq	.L.str5582665, %rax
	movq	%rax, 13144(%rsp)       # 8-byte Spill
	leaq	.L.str5592666, %rax
	movq	%rax, 13136(%rsp)       # 8-byte Spill
	leaq	.L.str5602667, %rax
	movq	%rax, 13128(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 13120(%rsp)       # 8-byte Spill
	leaq	.L.str5562663, %rax
	movq	%rax, 13112(%rsp)       # 8-byte Spill
	leaq	.L.str5572664, %rax
	movq	%rax, 13104(%rsp)       # 8-byte Spill
	leaq	.L.str5542661, %rax
	movq	%rax, 13096(%rsp)       # 8-byte Spill
	leaq	.L.str5552662, %rax
	movq	%rax, 13088(%rsp)       # 8-byte Spill
	leaq	.L.str5522659, %rax
	movq	%rax, 13080(%rsp)       # 8-byte Spill
	leaq	.L.str5532660, %rax
	movq	%rax, 13072(%rsp)       # 8-byte Spill
	leaq	.L.str5492656, %rax
	movq	%rax, 13064(%rsp)       # 8-byte Spill
	leaq	.L.str5502657, %rax
	movq	%rax, 13056(%rsp)       # 8-byte Spill
	leaq	.L.str5512658, %rax
	movq	%rax, 13048(%rsp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 13040(%rsp)       # 8-byte Spill
	leaq	.L.str5472654, %rax
	movq	%rax, 13032(%rsp)       # 8-byte Spill
	leaq	.L.str5482655, %rax
	movq	%rax, 13024(%rsp)       # 8-byte Spill
	leaq	.L.str5452652, %rax
	movq	%rax, 13016(%rsp)       # 8-byte Spill
	leaq	.L.str5462653, %rax
	movq	%rax, 13008(%rsp)       # 8-byte Spill
	leaq	.L.str5432650, %rax
	movq	%rax, 13000(%rsp)       # 8-byte Spill
	leaq	.L.str5442651, %rax
	movq	%rax, 12992(%rsp)       # 8-byte Spill
	leaq	.L.str5402647, %rax
	movq	%rax, 12984(%rsp)       # 8-byte Spill
	leaq	.L.str5412648, %rax
	movq	%rax, 12976(%rsp)       # 8-byte Spill
	leaq	.L.str5422649, %rax
	movq	%rax, 12968(%rsp)       # 8-byte Spill
	leaq	.L.str5382645, %rax
	movq	%rax, 12960(%rsp)       # 8-byte Spill
	leaq	.L.str5392646, %rax
	movq	%rax, 12952(%rsp)       # 8-byte Spill
	leaq	.L.str5362643, %rax
	movq	%rax, 12944(%rsp)       # 8-byte Spill
	leaq	.L.str5372644, %rax
	movq	%rax, 12936(%rsp)       # 8-byte Spill
	leaq	.L.str5332640, %rax
	movq	%rax, 12928(%rsp)       # 8-byte Spill
	leaq	.L.str5342641, %rax
	movq	%rax, 12920(%rsp)       # 8-byte Spill
	leaq	.L.str5352642, %rax
	movq	%rax, 12912(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 12904(%rsp)       # 8-byte Spill
	leaq	.L.str5312638, %rax
	movq	%rax, 12896(%rsp)       # 8-byte Spill
	leaq	.L.str5322639, %rax
	movq	%rax, 12888(%rsp)       # 8-byte Spill
	leaq	.L.str5292636, %rax
	movq	%rax, 12880(%rsp)       # 8-byte Spill
	leaq	.L.str5302637, %rax
	movq	%rax, 12872(%rsp)       # 8-byte Spill
	leaq	.L.str5272634, %rax
	movq	%rax, 12864(%rsp)       # 8-byte Spill
	leaq	.L.str5282635, %rax
	movq	%rax, 12856(%rsp)       # 8-byte Spill
	leaq	.L.str5242631, %rax
	movq	%rax, 12848(%rsp)       # 8-byte Spill
	leaq	.L.str5252632, %rax
	movq	%rax, 12840(%rsp)       # 8-byte Spill
	leaq	.L.str5262633, %rax
	movq	%rax, 12832(%rsp)       # 8-byte Spill
	leaq	.L.str5222629, %rax
	movq	%rax, 12824(%rsp)       # 8-byte Spill
	leaq	.L.str5232630, %rax
	movq	%rax, 12816(%rsp)       # 8-byte Spill
	leaq	.L.str5202627, %rax
	movq	%rax, 12808(%rsp)       # 8-byte Spill
	leaq	.L.str5212628, %rax
	movq	%rax, 12800(%rsp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 12792(%rsp)       # 8-byte Spill
	leaq	.L.str5182625, %rax
	movq	%rax, 12784(%rsp)       # 8-byte Spill
	leaq	.L.str5192626, %rax
	movq	%rax, 12776(%rsp)       # 8-byte Spill
	leaq	.L.str5152622, %rax
	movq	%rax, 12768(%rsp)       # 8-byte Spill
	leaq	.L.str5162623, %rax
	movq	%rax, 12760(%rsp)       # 8-byte Spill
	leaq	.L.str5172624, %rax
	movq	%rax, 12752(%rsp)       # 8-byte Spill
	leaq	.L.str5132620, %rax
	movq	%rax, 12744(%rsp)       # 8-byte Spill
	leaq	.L.str5142621, %rax
	movq	%rax, 12736(%rsp)       # 8-byte Spill
	leaq	.L.str5112618, %rax
	movq	%rax, 12728(%rsp)       # 8-byte Spill
	leaq	.L.str5122619, %rax
	movq	%rax, 12720(%rsp)       # 8-byte Spill
	leaq	.L.str5092616, %rax
	movq	%rax, 12712(%rsp)       # 8-byte Spill
	leaq	.L.str5102617, %rax
	movq	%rax, 12704(%rsp)       # 8-byte Spill
	leaq	.L.str5062613, %rax
	movq	%rax, 12696(%rsp)       # 8-byte Spill
	leaq	.L.str5072614, %rax
	movq	%rax, 12688(%rsp)       # 8-byte Spill
	leaq	.L.str5082615, %rax
	movq	%rax, 12680(%rsp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	6 134 0                 # kmeans_clustering.c:134:0
.Ltmp272:
	movq	%rax, 12672(%rsp)       # 8-byte Spill
	movq	12792(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 12664(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	12696(%rsp), %rax       # 8-byte Reload
	movl	%esi, 12660(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	12688(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 12648(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	12680(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 12640(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	12672(%rsp), %rax       # 8-byte Reload
	movq	%r8, 12632(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	12660(%rsp), %eax       # 4-byte Reload
	movq	%r9, 12624(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 12616(%rsp)       # 8-byte Spill
	movq	%r14, 12608(%rsp)       # 8-byte Spill
	movq	%r12, 12600(%rsp)       # 8-byte Spill
	movq	%r13, 12592(%rsp)       # 8-byte Spill
	movq	%rbp, 12584(%rsp)       # 8-byte Spill
	movq	%rbx, 12576(%rsp)       # 8-byte Spill
	movq	%r10, 12568(%rsp)       # 8-byte Spill
	movq	%r11, 12560(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	12664(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	12648(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12712(%rsp), %r8        # 8-byte Reload
	movq	12640(%rsp), %r9        # 8-byte Reload
	movq	12704(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	12640(%rsp), %rdx       # 8-byte Reload
	movq	12648(%rsp), %rcx       # 8-byte Reload
	movq	12728(%rsp), %r8        # 8-byte Reload
	movq	12640(%rsp), %r9        # 8-byte Reload
	movq	12720(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13432(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	13440(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12744(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12736(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13152(%rsp), %rdi       # 8-byte Reload
	movq	12768(%rsp), %rsi       # 8-byte Reload
	movq	12760(%rsp), %rdx       # 8-byte Reload
	movq	12752(%rsp), %rcx       # 8-byte Reload
	movq	13192(%rsp), %r8        # 8-byte Reload
	movl	12660(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12664(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	12792(%rsp), %rdx       # 8-byte Reload
	movq	12648(%rsp), %rcx       # 8-byte Reload
	movq	12784(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12776(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	13440(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12808(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12800(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13440(%rsp), %rcx       # 8-byte Reload
	addq	$-1, %rcx
	movq	13432(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	12640(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 12552(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	12824(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12816(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13152(%rsp), %rdi       # 8-byte Reload
	movq	12848(%rsp), %rsi       # 8-byte Reload
	movq	12840(%rsp), %rdx       # 8-byte Reload
	movq	12832(%rsp), %rcx       # 8-byte Reload
	movq	13040(%rsp), %r8        # 8-byte Reload
	movl	12660(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12664(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	12552(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12864(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12856(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	14496(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12880(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12872(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12552(%rsp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	14496(%rsp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	movq	13432(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 12544(%rsp)       # 8-byte Spill
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12896(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12888(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13152(%rsp), %rdi       # 8-byte Reload
	movq	12928(%rsp), %rsi       # 8-byte Reload
	movq	12920(%rsp), %rdx       # 8-byte Reload
	movq	12912(%rsp), %rcx       # 8-byte Reload
	movq	12904(%rsp), %r8        # 8-byte Reload
	movl	12660(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	12544(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12944(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12936(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14496(%rsp), %rcx       # 8-byte Reload
	movq	13440(%rsp), %rdx       # 8-byte Reload
	movq	-8(%rcx,%rdx,8), %rsi
	movq	13432(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %r8        # 8-byte Reload
	movq	%rsi, 12536(%rsp)       # 8-byte Spill
	movq	%r8, %rsi
	movq	12536(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12960(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12952(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13152(%rsp), %rdi       # 8-byte Reload
	movq	12984(%rsp), %rsi       # 8-byte Reload
	movq	12976(%rsp), %rdx       # 8-byte Reload
	movq	12968(%rsp), %rcx       # 8-byte Reload
	movq	13040(%rsp), %r8        # 8-byte Reload
	movl	12660(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12664(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	13888(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13000(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12992(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	12536(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13016(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13008(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13888(%rsp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	12536(%rsp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	movq	13432(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 12528(%rsp)       # 8-byte Spill
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13032(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13024(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13152(%rsp), %rdi       # 8-byte Reload
	movq	13064(%rsp), %rsi       # 8-byte Reload
	movq	13056(%rsp), %rdx       # 8-byte Reload
	movq	13048(%rsp), %rcx       # 8-byte Reload
	movq	13040(%rsp), %r8        # 8-byte Reload
	movl	12660(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12664(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	13440(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13080(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13072(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	14496(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13096(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13088(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13440(%rsp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	14496(%rsp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	movq	13432(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 12520(%rsp)       # 8-byte Spill
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13112(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13104(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13152(%rsp), %rdi       # 8-byte Reload
	movq	13144(%rsp), %rsi       # 8-byte Reload
	movq	13136(%rsp), %rdx       # 8-byte Reload
	movq	13128(%rsp), %rcx       # 8-byte Reload
	movq	13120(%rsp), %r8        # 8-byte Reload
	movl	12660(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12664(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	12520(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13168(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13160(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	12528(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13184(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13176(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	14496(%rsp), %rcx       # 8-byte Reload
	movq	13440(%rsp), %rdx       # 8-byte Reload
	movq	12528(%rsp), %rsi       # 8-byte Reload
	movq	%rsi, (%rcx,%rdx,8)
	.loc	6 133 0                 # kmeans_clustering.c:133:0
	movq	12616(%rsp), %rdi       # 8-byte Reload
	movq	13216(%rsp), %rsi       # 8-byte Reload
	movq	13208(%rsp), %rdx       # 8-byte Reload
	movq	13200(%rsp), %rcx       # 8-byte Reload
	movq	13192(%rsp), %r8        # 8-byte Reload
	movl	12660(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12664(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	12640(%rsp), %rdx       # 8-byte Reload
	movq	12648(%rsp), %rcx       # 8-byte Reload
	movq	13232(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13224(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	13440(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13248(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13240(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	13440(%rsp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	movq	13432(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	12640(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 12512(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	13264(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13256(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12616(%rsp), %rdi       # 8-byte Reload
	movq	13296(%rsp), %rsi       # 8-byte Reload
	movq	13288(%rsp), %rdx       # 8-byte Reload
	movq	13280(%rsp), %rcx       # 8-byte Reload
	movq	13272(%rsp), %r8        # 8-byte Reload
	movl	12660(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	13320(%rsp), %rsi       # 8-byte Reload
	movq	12512(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13312(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13304(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12512(%rsp), %rcx       # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	13432(%rsp), %rdi       # 8-byte Reload
	movq	13408(%rsp), %rsi       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13336(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13328(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 12508(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	12616(%rsp), %rdi       # 8-byte Reload
	movq	13368(%rsp), %rsi       # 8-byte Reload
	movq	13360(%rsp), %rdx       # 8-byte Reload
	movq	13352(%rsp), %rcx       # 8-byte Reload
	movq	13344(%rsp), %r8        # 8-byte Reload
	movl	12660(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15972(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	12664(%rsp), %rdi       # 8-byte Reload
	movq	13408(%rsp), %rsi       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13384(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13376(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	12508(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	13408(%rsp), %rsi       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13400(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13392(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	12508(%rsp), %eax       # 4-byte Reload
	movl	15972(%rsp), %esi       # 4-byte Reload
	cmpl	%esi, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	13432(%rsp), %rdi       # 8-byte Reload
	movq	12640(%rsp), %rsi       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	13424(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13416(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 12507(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	12616(%rsp), %rdi       # 8-byte Reload
	movq	12600(%rsp), %rsi       # 8-byte Reload
	movq	12592(%rsp), %rdx       # 8-byte Reload
	movq	12584(%rsp), %rcx       # 8-byte Reload
	movq	12664(%rsp), %r8        # 8-byte Reload
	movl	12660(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12560(%rsp), %rdi       # 8-byte Reload
	movq	12648(%rsp), %rsi       # 8-byte Reload
	movq	12648(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12576(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12608(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12664(%rsp), %rdi       # 8-byte Reload
	movq	12648(%rsp), %rsi       # 8-byte Reload
	movq	12648(%rsp), %rdx       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12624(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	12568(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	12507(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	12640(%rsp), %rdi       # 8-byte Reload
	movq	12640(%rsp), %rsi       # 8-byte Reload
	movq	12640(%rsp), %rcx       # 8-byte Reload
	movq	12632(%rsp), %r8        # 8-byte Reload
	movq	12648(%rsp), %r9        # 8-byte Reload
	movq	13448(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	12507(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	movq	12512(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 13880(%rsp)       # 8-byte Spill
	jne	.LBB7_2
	jmp	.LBB7_4
.Ltmp273:
.LBB7_5:                                # %.preheader17
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_8 Depth 2
	movq	13456(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str6152722, %r8
	movabsq	$0, %rdx
	leaq	.L.str6162723, %rsi
	movabsq	$2, %rdi
	leaq	.L.str6132720, %r9
	leaq	.L.str6142721, %r10
	movabsq	$3, %r11
	leaq	.L.str6112718, %rbx
	leaq	.L.str6122719, %r14
	movabsq	$139, %r15
	leaq	.L.str6082715, %r12
	leaq	.L.str6092716, %r13
	leaq	.L.str6102717, %rbp
	movq	%rsi, 12496(%rsp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 12488(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 12480(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 12472(%rsp)       # 8-byte Spill
	leaq	.L.str6062713, %rax
	movq	%rax, 12464(%rsp)       # 8-byte Spill
	leaq	.L.str6072714, %rax
	movq	%rax, 12456(%rsp)       # 8-byte Spill
	leaq	.L.str6042711, %rax
	movq	%rax, 12448(%rsp)       # 8-byte Spill
	leaq	.L.str6052712, %rax
	movq	%rax, 12440(%rsp)       # 8-byte Spill
	leaq	.L.str6022709, %rax
	movq	%rax, 12432(%rsp)       # 8-byte Spill
	leaq	.L.str6032710, %rax
	movq	%rax, 12424(%rsp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 12416(%rsp)       # 8-byte Spill
	leaq	.L.str5992706, %rax
	movq	%rax, 12408(%rsp)       # 8-byte Spill
	leaq	.L.str6002707, %rax
	movq	%rax, 12400(%rsp)       # 8-byte Spill
	leaq	.L.str6012708, %rax
	movq	%rax, 12392(%rsp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	6 139 0                 # kmeans_clustering.c:139:0
.Ltmp274:
	movq	%rax, 12384(%rsp)       # 8-byte Spill
	movq	12416(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 12376(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	12408(%rsp), %rax       # 8-byte Reload
	movl	%esi, 12372(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	12400(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 12360(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	12392(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 12352(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	12384(%rsp), %rax       # 8-byte Reload
	movq	%r8, 12344(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	12372(%rsp), %eax       # 4-byte Reload
	movq	%r9, 12336(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 12328(%rsp)       # 8-byte Spill
	movq	%r14, 12320(%rsp)       # 8-byte Spill
	movq	%r12, 12312(%rsp)       # 8-byte Spill
	movq	%r13, 12304(%rsp)       # 8-byte Spill
	movq	%rbp, 12296(%rsp)       # 8-byte Spill
	movq	%rbx, 12288(%rsp)       # 8-byte Spill
	movq	%r10, 12280(%rsp)       # 8-byte Spill
	movq	%r11, 12272(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	12376(%rsp), %rdi       # 8-byte Reload
	movq	12472(%rsp), %rsi       # 8-byte Reload
	movq	12360(%rsp), %rdx       # 8-byte Reload
	movq	12352(%rsp), %rcx       # 8-byte Reload
	movq	12432(%rsp), %r8        # 8-byte Reload
	movq	12352(%rsp), %r9        # 8-byte Reload
	movq	12424(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12352(%rsp), %rdi       # 8-byte Reload
	movq	12472(%rsp), %rsi       # 8-byte Reload
	movq	12360(%rsp), %rdx       # 8-byte Reload
	movq	12360(%rsp), %rcx       # 8-byte Reload
	movq	12448(%rsp), %r8        # 8-byte Reload
	movq	12352(%rsp), %r9        # 8-byte Reload
	movq	12440(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12480(%rsp), %rdi       # 8-byte Reload
	movq	12472(%rsp), %rsi       # 8-byte Reload
	movq	12488(%rsp), %rdx       # 8-byte Reload
	movq	12352(%rsp), %rcx       # 8-byte Reload
	movq	12464(%rsp), %r8        # 8-byte Reload
	movq	12360(%rsp), %r9        # 8-byte Reload
	movq	12456(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12328(%rsp), %rdi       # 8-byte Reload
	movq	12312(%rsp), %rsi       # 8-byte Reload
	movq	12304(%rsp), %rdx       # 8-byte Reload
	movq	12296(%rsp), %rcx       # 8-byte Reload
	movq	12376(%rsp), %r8        # 8-byte Reload
	movl	12372(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	12272(%rsp), %rdi       # 8-byte Reload
	movq	12360(%rsp), %rsi       # 8-byte Reload
	movq	12360(%rsp), %rdx       # 8-byte Reload
	movq	12352(%rsp), %rcx       # 8-byte Reload
	movq	12288(%rsp), %r8        # 8-byte Reload
	movq	12360(%rsp), %r9        # 8-byte Reload
	movq	12320(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12376(%rsp), %rdi       # 8-byte Reload
	movq	12360(%rsp), %rsi       # 8-byte Reload
	movq	12360(%rsp), %rdx       # 8-byte Reload
	movq	12352(%rsp), %rcx       # 8-byte Reload
	movq	12336(%rsp), %r8        # 8-byte Reload
	movq	12360(%rsp), %r9        # 8-byte Reload
	movq	12280(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	13471(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	12352(%rsp), %rdi       # 8-byte Reload
	movq	12352(%rsp), %rsi       # 8-byte Reload
	movq	12352(%rsp), %rcx       # 8-byte Reload
	movq	12344(%rsp), %r8        # 8-byte Reload
	movq	12360(%rsp), %r9        # 8-byte Reload
	movq	12496(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	13471(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB7_6
	jmp	.LBB7_9
.LBB7_6:                                # %.lr.ph19
                                        #   in Loop: Header=BB7_5 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str6522759, %r8
	leaq	.L.str6532760, %rdx
	movabsq	$139, %rdi
	leaq	.L.str6492756, %rsi
	leaq	.L.str6502757, %r9
	leaq	.L.str6512758, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str6472754, %r12
	leaq	.L.str6482755, %r13
	leaq	.L.str6452752, %rbp
	movq	%rax, 12264(%rsp)       # 8-byte Spill
	leaq	.L.str6462753, %rax
	movq	%rax, 12256(%rsp)       # 8-byte Spill
	movabsq	$140, %rax
	movq	%rax, 12248(%rsp)       # 8-byte Spill
	leaq	.L.str6422749, %rax
	movq	%rax, 12240(%rsp)       # 8-byte Spill
	leaq	.L.str6432750, %rax
	movq	%rax, 12232(%rsp)       # 8-byte Spill
	leaq	.L.str6442751, %rax
	movq	%rax, 12224(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 12216(%rsp)       # 8-byte Spill
	leaq	.L.str6402747, %rax
	movq	%rax, 12208(%rsp)       # 8-byte Spill
	leaq	.L.str6412748, %rax
	movq	%rax, 12200(%rsp)       # 8-byte Spill
	leaq	.L.str6382745, %rax
	movq	%rax, 12192(%rsp)       # 8-byte Spill
	leaq	.L.str6392746, %rax
	movq	%rax, 12184(%rsp)       # 8-byte Spill
	leaq	.L.str6362743, %rax
	movq	%rax, 12176(%rsp)       # 8-byte Spill
	leaq	.L.str6372744, %rax
	movq	%rax, 12168(%rsp)       # 8-byte Spill
	leaq	.L.str6332740, %rax
	movq	%rax, 12160(%rsp)       # 8-byte Spill
	leaq	.L.str6342741, %rax
	movq	%rax, 12152(%rsp)       # 8-byte Spill
	leaq	.L.str6352742, %rax
	movq	%rax, 12144(%rsp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 12136(%rsp)       # 8-byte Spill
	leaq	.L.str6312738, %rax
	movq	%rax, 12128(%rsp)       # 8-byte Spill
	leaq	.L.str6322739, %rax
	movq	%rax, 12120(%rsp)       # 8-byte Spill
	leaq	.L.str6292736, %rax
	movq	%rax, 12112(%rsp)       # 8-byte Spill
	leaq	.L.str6302737, %rax
	movq	%rax, 12104(%rsp)       # 8-byte Spill
	leaq	.L.str6262733, %rax
	movq	%rax, 12096(%rsp)       # 8-byte Spill
	leaq	.L.str6272734, %rax
	movq	%rax, 12088(%rsp)       # 8-byte Spill
	leaq	.L.str6282735, %rax
	movq	%rax, 12080(%rsp)       # 8-byte Spill
	leaq	.L.str6242731, %rax
	movq	%rax, 12072(%rsp)       # 8-byte Spill
	leaq	.L.str6252732, %rax
	movq	%rax, 12064(%rsp)       # 8-byte Spill
	leaq	.L.str6222729, %rax
	movq	%rax, 12056(%rsp)       # 8-byte Spill
	leaq	.L.str6232730, %rax
	movq	%rax, 12048(%rsp)       # 8-byte Spill
	leaq	.L.str6202727, %rax
	movq	%rax, 12040(%rsp)       # 8-byte Spill
	leaq	.L.str6212728, %rax
	movq	%rax, 12032(%rsp)       # 8-byte Spill
	leaq	.L.str6172724, %rax
	movq	%rax, 12024(%rsp)       # 8-byte Spill
	leaq	.L.str6182725, %rax
	movq	%rax, 12016(%rsp)       # 8-byte Spill
	leaq	.L.str6192726, %rax
	.loc	6 140 0                 # kmeans_clustering.c:140:0
	movq	%rax, 12008(%rsp)       # 8-byte Spill
	movq	12248(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 12000(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	12024(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 11992(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	12016(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 11984(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	12008(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 11976(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	12136(%rsp), %rax       # 8-byte Reload
	movq	%r8, 11968(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 11960(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 11952(%rsp)       # 8-byte Spill
	movq	%r14, 11944(%rsp)       # 8-byte Spill
	movq	%r12, 11936(%rsp)       # 8-byte Spill
	movq	%rbp, 11928(%rsp)       # 8-byte Spill
	movq	%r13, 11920(%rsp)       # 8-byte Spill
	movl	%ebx, 11916(%rsp)       # 4-byte Spill
	movq	%r10, 11904(%rsp)       # 8-byte Spill
	movq	%r11, 11896(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	11896(%rsp), %rdi       # 8-byte Reload
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	12488(%rsp), %rdx       # 8-byte Reload
	movq	11976(%rsp), %rcx       # 8-byte Reload
	movq	12040(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	12032(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	11976(%rsp), %rdi       # 8-byte Reload
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	15872(%rsp), %rdx       # 8-byte Reload
	movq	11976(%rsp), %rcx       # 8-byte Reload
	movq	12056(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	12048(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	12488(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	15872(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	11944(%rsp), %rdi       # 8-byte Reload
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	11976(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 11888(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	12072(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	12064(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12248(%rsp), %rdi       # 8-byte Reload
	movq	12096(%rsp), %rsi       # 8-byte Reload
	movq	12088(%rsp), %rdx       # 8-byte Reload
	movq	12080(%rsp), %rcx       # 8-byte Reload
	movq	12216(%rsp), %r8        # 8-byte Reload
	movl	11916(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	11976(%rsp), %rdi       # 8-byte Reload
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	11888(%rsp), %rdx       # 8-byte Reload
	movq	11976(%rsp), %rcx       # 8-byte Reload
	movq	12112(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	12104(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15872(%rsp), %rax       # 8-byte Reload
	movq	12488(%rsp), %rcx       # 8-byte Reload
	movq	(%rax,%rcx,8), %rdx
	movq	11944(%rsp), %rdi       # 8-byte Reload
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 11880(%rsp)       # 8-byte Spill
	movq	11976(%rsp), %rcx       # 8-byte Reload
	movq	12128(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	12120(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12248(%rsp), %rdi       # 8-byte Reload
	movq	12160(%rsp), %rsi       # 8-byte Reload
	movq	12152(%rsp), %rdx       # 8-byte Reload
	movq	12144(%rsp), %rcx       # 8-byte Reload
	movq	12136(%rsp), %r8        # 8-byte Reload
	movl	11916(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	11896(%rsp), %rdi       # 8-byte Reload
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	12488(%rsp), %rdx       # 8-byte Reload
	movq	11976(%rsp), %rcx       # 8-byte Reload
	movq	12176(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	12168(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	11976(%rsp), %rdi       # 8-byte Reload
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	14496(%rsp), %rdx       # 8-byte Reload
	movq	11976(%rsp), %rcx       # 8-byte Reload
	movq	12192(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	12184(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	12488(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	14496(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	11944(%rsp), %rdi       # 8-byte Reload
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	11976(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 11872(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	12208(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	12200(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12248(%rsp), %rdi       # 8-byte Reload
	movq	12240(%rsp), %rsi       # 8-byte Reload
	movq	12232(%rsp), %rdx       # 8-byte Reload
	movq	12224(%rsp), %rcx       # 8-byte Reload
	movq	12216(%rsp), %r8        # 8-byte Reload
	movl	11916(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	11976(%rsp), %rdi       # 8-byte Reload
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	11872(%rsp), %rdx       # 8-byte Reload
	movq	11976(%rsp), %rcx       # 8-byte Reload
	movq	11928(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	12256(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14496(%rsp), %rax       # 8-byte Reload
	movq	12488(%rsp), %rcx       # 8-byte Reload
	movq	(%rax,%rcx,8), %rdx
	.loc	6 139 0                 # kmeans_clustering.c:139:0
	movq	11944(%rsp), %rdi       # 8-byte Reload
	movq	11952(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 11864(%rsp)       # 8-byte Spill
	movq	11976(%rsp), %rcx       # 8-byte Reload
	movq	11936(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	11920(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	12000(%rsp), %rdi       # 8-byte Reload
	movq	11992(%rsp), %rsi       # 8-byte Reload
	movq	11960(%rsp), %rdx       # 8-byte Reload
	movq	11904(%rsp), %rcx       # 8-byte Reload
	movq	11896(%rsp), %r8        # 8-byte Reload
	movl	11916(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	11976(%rsp), %rdi       # 8-byte Reload
	movq	12264(%rsp), %rsi       # 8-byte Reload
	movq	12264(%rsp), %rdx       # 8-byte Reload
	movq	11976(%rsp), %rcx       # 8-byte Reload
	movq	11968(%rsp), %r8        # 8-byte Reload
	movq	12264(%rsp), %r9        # 8-byte Reload
	movq	11984(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	12264(%rsp), %rax       # 8-byte Reload
	movq	%rax, 11856(%rsp)       # 8-byte Spill
	jmp	.LBB7_8
.Ltmp275:
.LBB7_7:                                # %.preheader13
	movabsq	$1, %rax
	leaq	.L.str6702777, %r8
	movabsq	$0, %rcx
	leaq	.L.str6712778, %rdx
	movabsq	$2, %rsi
	leaq	.L.str6682775, %rdi
	leaq	.L.str6692776, %r9
	movabsq	$3, %r10
	leaq	.L.str6662773, %r11
	leaq	.L.str6672774, %rbx
	movabsq	$144, %r14
	leaq	.L.str6632770, %r15
	leaq	.L.str6642771, %r12
	leaq	.L.str6652772, %r13
	movl	$1, %ebp
	movq	%rax, 11848(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 11840(%rsp)       # 8-byte Spill
	leaq	.L.str6612768, %rax
	movq	%rax, 11832(%rsp)       # 8-byte Spill
	leaq	.L.str6622769, %rax
	movq	%rax, 11824(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 11816(%rsp)       # 8-byte Spill
	leaq	.L.str6592766, %rax
	movq	%rax, 11808(%rsp)       # 8-byte Spill
	leaq	.L.str6602767, %rax
	movq	%rax, 11800(%rsp)       # 8-byte Spill
	leaq	.L.str6572764, %rax
	movq	%rax, 11792(%rsp)       # 8-byte Spill
	leaq	.L.str6582765, %rax
	movq	%rax, 11784(%rsp)       # 8-byte Spill
	leaq	.L.str6542761, %rax
	movq	%rax, 11776(%rsp)       # 8-byte Spill
	leaq	.L.str6552762, %rax
	movq	%rax, 11768(%rsp)       # 8-byte Spill
	leaq	.L.str6562763, %rax
	movq	%rax, 11760(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	.loc	6 144 0                 # kmeans_clustering.c:144:0
.Ltmp276:
	movq	%rdi, 11752(%rsp)       # 8-byte Spill
	movq	%r14, %rdi
	movq	%rax, 11744(%rsp)       # 8-byte Spill
	movq	11776(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 11736(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	11768(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 11728(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	11760(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 11720(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	11744(%rsp), %rax       # 8-byte Reload
	movq	%r8, 11712(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 11704(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 11696(%rsp)       # 8-byte Spill
	movq	%r15, 11688(%rsp)       # 8-byte Spill
	movq	%r12, 11680(%rsp)       # 8-byte Spill
	movq	%r13, 11672(%rsp)       # 8-byte Spill
	movl	%ebp, 11668(%rsp)       # 4-byte Spill
	movq	%rbx, 11656(%rsp)       # 8-byte Spill
	movq	%r10, 11648(%rsp)       # 8-byte Spill
	movq	%r11, 11640(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	11736(%rsp), %rdi       # 8-byte Reload
	movq	11816(%rsp), %rsi       # 8-byte Reload
	movq	11720(%rsp), %rdx       # 8-byte Reload
	movq	11720(%rsp), %rcx       # 8-byte Reload
	movq	11792(%rsp), %r8        # 8-byte Reload
	movq	11720(%rsp), %r9        # 8-byte Reload
	movq	11784(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15864(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	11848(%rsp), %rdi       # 8-byte Reload
	movq	11816(%rsp), %rsi       # 8-byte Reload
	movq	11848(%rsp), %rcx       # 8-byte Reload
	movq	11808(%rsp), %r8        # 8-byte Reload
	movq	11720(%rsp), %r9        # 8-byte Reload
	movq	11800(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15864(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	11840(%rsp), %rdi       # 8-byte Reload
	movq	11848(%rsp), %rsi       # 8-byte Reload
	movq	11848(%rsp), %rcx       # 8-byte Reload
	movq	11832(%rsp), %r8        # 8-byte Reload
	movq	11720(%rsp), %r9        # 8-byte Reload
	movq	11824(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 11639(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	11696(%rsp), %rdi       # 8-byte Reload
	movq	11688(%rsp), %rsi       # 8-byte Reload
	movq	11680(%rsp), %rdx       # 8-byte Reload
	movq	11672(%rsp), %rcx       # 8-byte Reload
	movq	11736(%rsp), %r8        # 8-byte Reload
	movl	11668(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	11648(%rsp), %rdi       # 8-byte Reload
	movq	11720(%rsp), %rsi       # 8-byte Reload
	movq	11720(%rsp), %rdx       # 8-byte Reload
	movq	11848(%rsp), %rcx       # 8-byte Reload
	movq	11640(%rsp), %r8        # 8-byte Reload
	movq	11720(%rsp), %r9        # 8-byte Reload
	movq	11656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11736(%rsp), %rdi       # 8-byte Reload
	movq	11720(%rsp), %rsi       # 8-byte Reload
	movq	11720(%rsp), %rdx       # 8-byte Reload
	movq	11848(%rsp), %rcx       # 8-byte Reload
	movq	11752(%rsp), %r8        # 8-byte Reload
	movq	11720(%rsp), %r9        # 8-byte Reload
	movq	11704(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	11639(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	11848(%rsp), %rdi       # 8-byte Reload
	movq	11848(%rsp), %rsi       # 8-byte Reload
	movq	11848(%rsp), %rcx       # 8-byte Reload
	movq	11712(%rsp), %r8        # 8-byte Reload
	movq	11720(%rsp), %r9        # 8-byte Reload
	movq	11728(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	11639(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB7_10
	jmp	.LBB7_11
.Ltmp277:
.LBB7_8:                                #   Parent Loop BB7_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	11856(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str7452852, %r8
	movabsq	$0, %rdx
	leaq	.L.str7462853, %rsi
	movabsq	$2, %rdi
	leaq	.L.str7432850, %r9
	leaq	.L.str7442851, %r10
	movabsq	$3, %r11
	leaq	.L.str7412848, %rbx
	leaq	.L.str7422849, %r14
	movabsq	$139, %r15
	leaq	.L.str7382845, %r12
	leaq	.L.str7392846, %r13
	leaq	.L.str7402847, %rbp
	movq	%rsi, 11624(%rsp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 11616(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 11608(%rsp)       # 8-byte Spill
	leaq	.L.str7362843, %rax
	movq	%rax, 11600(%rsp)       # 8-byte Spill
	leaq	.L.str7372844, %rax
	movq	%rax, 11592(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 11584(%rsp)       # 8-byte Spill
	leaq	.L.str7342841, %rax
	movq	%rax, 11576(%rsp)       # 8-byte Spill
	leaq	.L.str7352842, %rax
	movq	%rax, 11568(%rsp)       # 8-byte Spill
	leaq	.L.str7322839, %rax
	movq	%rax, 11560(%rsp)       # 8-byte Spill
	leaq	.L.str7332840, %rax
	movq	%rax, 11552(%rsp)       # 8-byte Spill
	leaq	.L.str7292836, %rax
	movq	%rax, 11544(%rsp)       # 8-byte Spill
	leaq	.L.str7302837, %rax
	movq	%rax, 11536(%rsp)       # 8-byte Spill
	leaq	.L.str7312838, %rax
	movq	%rax, 11528(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 11520(%rsp)       # 8-byte Spill
	leaq	.L.str7272834, %rax
	movq	%rax, 11512(%rsp)       # 8-byte Spill
	leaq	.L.str7282835, %rax
	movq	%rax, 11504(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 11496(%rsp)       # 8-byte Spill
	leaq	.L.str7252832, %rax
	movq	%rax, 11488(%rsp)       # 8-byte Spill
	leaq	.L.str7262833, %rax
	movq	%rax, 11480(%rsp)       # 8-byte Spill
	leaq	.L.str7222829, %rax
	movq	%rax, 11472(%rsp)       # 8-byte Spill
	leaq	.L.str7232830, %rax
	movq	%rax, 11464(%rsp)       # 8-byte Spill
	leaq	.L.str7242831, %rax
	movq	%rax, 11456(%rsp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 11448(%rsp)       # 8-byte Spill
	leaq	.L.str7202827, %rax
	movq	%rax, 11440(%rsp)       # 8-byte Spill
	leaq	.L.str7212828, %rax
	movq	%rax, 11432(%rsp)       # 8-byte Spill
	leaq	.L.str7182825, %rax
	movq	%rax, 11424(%rsp)       # 8-byte Spill
	leaq	.L.str7192826, %rax
	movq	%rax, 11416(%rsp)       # 8-byte Spill
	leaq	.L.str7162823, %rax
	movq	%rax, 11408(%rsp)       # 8-byte Spill
	leaq	.L.str7172824, %rax
	movq	%rax, 11400(%rsp)       # 8-byte Spill
	leaq	.L.str7132820, %rax
	movq	%rax, 11392(%rsp)       # 8-byte Spill
	leaq	.L.str7142821, %rax
	movq	%rax, 11384(%rsp)       # 8-byte Spill
	leaq	.L.str7152822, %rax
	movq	%rax, 11376(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 11368(%rsp)       # 8-byte Spill
	leaq	.L.str7112818, %rax
	movq	%rax, 11360(%rsp)       # 8-byte Spill
	leaq	.L.str7122819, %rax
	movq	%rax, 11352(%rsp)       # 8-byte Spill
	leaq	.L.str7092816, %rax
	movq	%rax, 11344(%rsp)       # 8-byte Spill
	leaq	.L.str7102817, %rax
	movq	%rax, 11336(%rsp)       # 8-byte Spill
	movabsq	$140, %rax
	movq	%rax, 11328(%rsp)       # 8-byte Spill
	leaq	.L.str7062813, %rax
	movq	%rax, 11320(%rsp)       # 8-byte Spill
	leaq	.L.str7072814, %rax
	movq	%rax, 11312(%rsp)       # 8-byte Spill
	leaq	.L.str7082815, %rax
	movq	%rax, 11304(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 11296(%rsp)       # 8-byte Spill
	leaq	.L.str7042811, %rax
	movq	%rax, 11288(%rsp)       # 8-byte Spill
	leaq	.L.str7052812, %rax
	movq	%rax, 11280(%rsp)       # 8-byte Spill
	leaq	.L.str7022809, %rax
	movq	%rax, 11272(%rsp)       # 8-byte Spill
	leaq	.L.str7032810, %rax
	movq	%rax, 11264(%rsp)       # 8-byte Spill
	leaq	.L.str7002807, %rax
	movq	%rax, 11256(%rsp)       # 8-byte Spill
	leaq	.L.str7012808, %rax
	movq	%rax, 11248(%rsp)       # 8-byte Spill
	leaq	.L.str6972804, %rax
	movq	%rax, 11240(%rsp)       # 8-byte Spill
	leaq	.L.str6982805, %rax
	movq	%rax, 11232(%rsp)       # 8-byte Spill
	leaq	.L.str6992806, %rax
	movq	%rax, 11224(%rsp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 11216(%rsp)       # 8-byte Spill
	leaq	.L.str6952802, %rax
	movq	%rax, 11208(%rsp)       # 8-byte Spill
	leaq	.L.str6962803, %rax
	movq	%rax, 11200(%rsp)       # 8-byte Spill
	leaq	.L.str6932800, %rax
	movq	%rax, 11192(%rsp)       # 8-byte Spill
	leaq	.L.str6942801, %rax
	movq	%rax, 11184(%rsp)       # 8-byte Spill
	leaq	.L.str6902797, %rax
	movq	%rax, 11176(%rsp)       # 8-byte Spill
	leaq	.L.str6912798, %rax
	movq	%rax, 11168(%rsp)       # 8-byte Spill
	leaq	.L.str6922799, %rax
	movq	%rax, 11160(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 11152(%rsp)       # 8-byte Spill
	leaq	.L.str6882795, %rax
	movq	%rax, 11144(%rsp)       # 8-byte Spill
	leaq	.L.str6892796, %rax
	movq	%rax, 11136(%rsp)       # 8-byte Spill
	leaq	.L.str6862793, %rax
	movq	%rax, 11128(%rsp)       # 8-byte Spill
	leaq	.L.str6872794, %rax
	movq	%rax, 11120(%rsp)       # 8-byte Spill
	leaq	.L.str6842791, %rax
	movq	%rax, 11112(%rsp)       # 8-byte Spill
	leaq	.L.str6852792, %rax
	movq	%rax, 11104(%rsp)       # 8-byte Spill
	leaq	.L.str6812788, %rax
	movq	%rax, 11096(%rsp)       # 8-byte Spill
	leaq	.L.str6822789, %rax
	movq	%rax, 11088(%rsp)       # 8-byte Spill
	leaq	.L.str6832790, %rax
	movq	%rax, 11080(%rsp)       # 8-byte Spill
	leaq	.L.str6792786, %rax
	movq	%rax, 11072(%rsp)       # 8-byte Spill
	leaq	.L.str6802787, %rax
	movq	%rax, 11064(%rsp)       # 8-byte Spill
	leaq	.L.str6772784, %rax
	movq	%rax, 11056(%rsp)       # 8-byte Spill
	leaq	.L.str6782785, %rax
	movq	%rax, 11048(%rsp)       # 8-byte Spill
	leaq	.L.str6752782, %rax
	movq	%rax, 11040(%rsp)       # 8-byte Spill
	leaq	.L.str6762783, %rax
	movq	%rax, 11032(%rsp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 11024(%rsp)       # 8-byte Spill
	leaq	.L.str6722779, %rax
	movq	%rax, 11016(%rsp)       # 8-byte Spill
	leaq	.L.str6732780, %rax
	movq	%rax, 11008(%rsp)       # 8-byte Spill
	leaq	.L.str6742781, %rax
	movq	%rax, 11000(%rsp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	6 140 0                 # kmeans_clustering.c:140:0
.Ltmp278:
	movq	%rax, 10992(%rsp)       # 8-byte Spill
	movq	11024(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10984(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	11016(%rsp), %rax       # 8-byte Reload
	movl	%esi, 10980(%rsp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	11008(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 10968(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	11000(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10960(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10992(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10952(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movl	10980(%rsp), %eax       # 4-byte Reload
	movq	%r9, 10944(%rsp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 10936(%rsp)       # 8-byte Spill
	movq	%r14, 10928(%rsp)       # 8-byte Spill
	movq	%r12, 10920(%rsp)       # 8-byte Spill
	movq	%r13, 10912(%rsp)       # 8-byte Spill
	movq	%rbp, 10904(%rsp)       # 8-byte Spill
	movq	%rbx, 10896(%rsp)       # 8-byte Spill
	movq	%r10, 10888(%rsp)       # 8-byte Spill
	movq	%r11, 10880(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10984(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11040(%rsp), %r8        # 8-byte Reload
	movq	10960(%rsp), %r9        # 8-byte Reload
	movq	11032(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10960(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	10968(%rsp), %rcx       # 8-byte Reload
	movq	11056(%rsp), %r8        # 8-byte Reload
	movq	10960(%rsp), %r9        # 8-byte Reload
	movq	11048(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11608(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	11616(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11072(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11064(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11328(%rsp), %rdi       # 8-byte Reload
	movq	11096(%rsp), %rsi       # 8-byte Reload
	movq	11088(%rsp), %rdx       # 8-byte Reload
	movq	11080(%rsp), %rcx       # 8-byte Reload
	movq	11216(%rsp), %r8        # 8-byte Reload
	movl	10980(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10984(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	11616(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11112(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11104(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10960(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	11880(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11128(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11120(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11616(%rsp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	11880(%rsp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	movq	11608(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 10872(%rsp)       # 8-byte Spill
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11144(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11328(%rsp), %rdi       # 8-byte Reload
	movq	11176(%rsp), %rsi       # 8-byte Reload
	movq	11168(%rsp), %rdx       # 8-byte Reload
	movq	11160(%rsp), %rcx       # 8-byte Reload
	movq	11152(%rsp), %r8        # 8-byte Reload
	movl	10980(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10960(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	10872(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11192(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11184(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11880(%rsp), %rcx       # 8-byte Reload
	movq	11616(%rsp), %rdx       # 8-byte Reload
	vmovss	(%rcx,%rdx,4), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	11608(%rsp), %rdi       # 8-byte Reload
	movq	11584(%rsp), %rsi       # 8-byte Reload
	vmovss	%xmm0, 10868(%rsp)      # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	11208(%rsp), %rcx       # 8-byte Reload
	movq	10968(%rsp), %r8        # 8-byte Reload
	movq	11200(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	11328(%rsp), %rdi       # 8-byte Reload
	movq	11240(%rsp), %rsi       # 8-byte Reload
	movq	11232(%rsp), %rdx       # 8-byte Reload
	movq	11224(%rsp), %rcx       # 8-byte Reload
	movq	11216(%rsp), %r8        # 8-byte Reload
	movl	10980(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10984(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	11616(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11256(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11248(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10960(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	11864(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11272(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11264(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11616(%rsp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	11864(%rsp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	movq	11608(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	%rdx, 10856(%rsp)       # 8-byte Spill
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11288(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11280(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11328(%rsp), %rdi       # 8-byte Reload
	movq	11320(%rsp), %rsi       # 8-byte Reload
	movq	11312(%rsp), %rdx       # 8-byte Reload
	movq	11304(%rsp), %rcx       # 8-byte Reload
	movq	11296(%rsp), %r8        # 8-byte Reload
	movl	10980(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10984(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	10856(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11344(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11336(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovss	10868(%rsp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	10960(%rsp), %rdi       # 8-byte Reload
	movq	11584(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	11360(%rsp), %rcx       # 8-byte Reload
	movq	10968(%rsp), %r8        # 8-byte Reload
	movq	11352(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	11864(%rsp), %rcx       # 8-byte Reload
	movq	11616(%rsp), %rdx       # 8-byte Reload
	vmovss	10868(%rsp), %xmm0      # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,4)
	.loc	6 139 0                 # kmeans_clustering.c:139:0
	movq	10936(%rsp), %rdi       # 8-byte Reload
	movq	11392(%rsp), %rsi       # 8-byte Reload
	movq	11384(%rsp), %rdx       # 8-byte Reload
	movq	11376(%rsp), %rcx       # 8-byte Reload
	movq	11368(%rsp), %r8        # 8-byte Reload
	movl	10980(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10984(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	10968(%rsp), %rcx       # 8-byte Reload
	movq	11408(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11400(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10960(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	11616(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11424(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11416(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	11616(%rsp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	movq	11608(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	10960(%rsp), %r8        # 8-byte Reload
	movq	%rcx, 10848(%rsp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	11440(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11432(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10936(%rsp), %rdi       # 8-byte Reload
	movq	11472(%rsp), %rsi       # 8-byte Reload
	movq	11464(%rsp), %rdx       # 8-byte Reload
	movq	11456(%rsp), %rcx       # 8-byte Reload
	movq	11448(%rsp), %r8        # 8-byte Reload
	movl	10980(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10960(%rsp), %rdi       # 8-byte Reload
	movq	11496(%rsp), %rsi       # 8-byte Reload
	movq	10848(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11488(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11480(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10848(%rsp), %rcx       # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	11608(%rsp), %rdi       # 8-byte Reload
	movq	11584(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11512(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11504(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 10844(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10936(%rsp), %rdi       # 8-byte Reload
	movq	11544(%rsp), %rsi       # 8-byte Reload
	movq	11536(%rsp), %rdx       # 8-byte Reload
	movq	11528(%rsp), %rcx       # 8-byte Reload
	movq	11520(%rsp), %r8        # 8-byte Reload
	movl	10980(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15868(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	10984(%rsp), %rdi       # 8-byte Reload
	movq	11584(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11560(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11552(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10844(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	10960(%rsp), %rdi       # 8-byte Reload
	movq	11584(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11576(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11568(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10844(%rsp), %eax       # 4-byte Reload
	movl	15868(%rsp), %esi       # 4-byte Reload
	cmpl	%esi, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	11608(%rsp), %rdi       # 8-byte Reload
	movq	10960(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	11600(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11592(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10843(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10936(%rsp), %rdi       # 8-byte Reload
	movq	10920(%rsp), %rsi       # 8-byte Reload
	movq	10912(%rsp), %rdx       # 8-byte Reload
	movq	10904(%rsp), %rcx       # 8-byte Reload
	movq	10984(%rsp), %r8        # 8-byte Reload
	movl	10980(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10880(%rsp), %rdi       # 8-byte Reload
	movq	10968(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	10896(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	10928(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10984(%rsp), %rdi       # 8-byte Reload
	movq	10968(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	10944(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	10888(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10843(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	10960(%rsp), %rdi       # 8-byte Reload
	movq	10960(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rcx       # 8-byte Reload
	movq	10952(%rsp), %r8        # 8-byte Reload
	movq	10968(%rsp), %r9        # 8-byte Reload
	movq	11624(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10843(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	movq	10848(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 11856(%rsp)       # 8-byte Spill
	jne	.LBB7_9
	jmp	.LBB7_8
.Ltmp279:
.LBB7_9:                                # %._crit_edge20
                                        #   in Loop: Header=BB7_5 Depth=1
	movabsq	$1, %rax
	leaq	.L.str7792886, %r8
	movabsq	$0, %rcx
	leaq	.L.str7802887, %rdx
	movabsq	$2, %rsi
	leaq	.L.str7772884, %rdi
	leaq	.L.str7782885, %r9
	movabsq	$3, %r10
	leaq	.L.str7752882, %r11
	leaq	.L.str7762883, %rbx
	movabsq	$137, %r14
	leaq	.L.str7722879, %r15
	leaq	.L.str7732880, %r12
	leaq	.L.str7742881, %r13
	movl	$1, %ebp
	movq	%rax, 10832(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 10824(%rsp)       # 8-byte Spill
	leaq	.L.str7702877, %rax
	movq	%rax, 10816(%rsp)       # 8-byte Spill
	leaq	.L.str7712878, %rax
	movq	%rax, 10808(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10800(%rsp)       # 8-byte Spill
	leaq	.L.str7682875, %rax
	movq	%rax, 10792(%rsp)       # 8-byte Spill
	leaq	.L.str7692876, %rax
	movq	%rax, 10784(%rsp)       # 8-byte Spill
	leaq	.L.str7662873, %rax
	movq	%rax, 10776(%rsp)       # 8-byte Spill
	leaq	.L.str7672874, %rax
	movq	%rax, 10768(%rsp)       # 8-byte Spill
	leaq	.L.str7632870, %rax
	movq	%rax, 10760(%rsp)       # 8-byte Spill
	leaq	.L.str7642871, %rax
	movq	%rax, 10752(%rsp)       # 8-byte Spill
	leaq	.L.str7652872, %rax
	movq	%rax, 10744(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 10736(%rsp)       # 8-byte Spill
	leaq	.L.str7612868, %rax
	movq	%rax, 10728(%rsp)       # 8-byte Spill
	leaq	.L.str7622869, %rax
	movq	%rax, 10720(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 10712(%rsp)       # 8-byte Spill
	leaq	.L.str7592866, %rax
	movq	%rax, 10704(%rsp)       # 8-byte Spill
	leaq	.L.str7602867, %rax
	movq	%rax, 10696(%rsp)       # 8-byte Spill
	leaq	.L.str7562863, %rax
	movq	%rax, 10688(%rsp)       # 8-byte Spill
	leaq	.L.str7572864, %rax
	movq	%rax, 10680(%rsp)       # 8-byte Spill
	leaq	.L.str7582865, %rax
	movq	%rax, 10672(%rsp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 10664(%rsp)       # 8-byte Spill
	leaq	.L.str7542861, %rax
	movq	%rax, 10656(%rsp)       # 8-byte Spill
	leaq	.L.str7552862, %rax
	movq	%rax, 10648(%rsp)       # 8-byte Spill
	leaq	.L.str7522859, %rax
	movq	%rax, 10640(%rsp)       # 8-byte Spill
	leaq	.L.str7532860, %rax
	movq	%rax, 10632(%rsp)       # 8-byte Spill
	leaq	.L.str7502857, %rax
	movq	%rax, 10624(%rsp)       # 8-byte Spill
	leaq	.L.str7512858, %rax
	movq	%rax, 10616(%rsp)       # 8-byte Spill
	leaq	.L.str7472854, %rax
	movq	%rax, 10608(%rsp)       # 8-byte Spill
	leaq	.L.str7482855, %rax
	movq	%rax, 10600(%rsp)       # 8-byte Spill
	leaq	.L.str7492856, %rax
	movq	%rax, 10592(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	6 137 0                 # kmeans_clustering.c:137:0
	movq	%rdi, 10584(%rsp)       # 8-byte Spill
	movq	%r14, %rdi
	movq	%rax, 10576(%rsp)       # 8-byte Spill
	movq	10608(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 10568(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	10600(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 10560(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	10592(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10552(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10576(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10544(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10536(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10528(%rsp)       # 8-byte Spill
	movq	%r15, 10520(%rsp)       # 8-byte Spill
	movq	%r12, 10512(%rsp)       # 8-byte Spill
	movq	%r13, 10504(%rsp)       # 8-byte Spill
	movl	%ebp, 10500(%rsp)       # 4-byte Spill
	movq	%rbx, 10488(%rsp)       # 8-byte Spill
	movq	%r10, 10480(%rsp)       # 8-byte Spill
	movq	%r11, 10472(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10568(%rsp), %rdi       # 8-byte Reload
	movq	10712(%rsp), %rsi       # 8-byte Reload
	movq	10832(%rsp), %rdx       # 8-byte Reload
	movq	10552(%rsp), %rcx       # 8-byte Reload
	movq	10624(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10616(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10832(%rsp), %rdi       # 8-byte Reload
	movq	10712(%rsp), %rsi       # 8-byte Reload
	movq	12488(%rsp), %rdx       # 8-byte Reload
	movq	10832(%rsp), %rcx       # 8-byte Reload
	movq	10640(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10632(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	12488(%rsp), %rax       # 8-byte Reload
	addq	$1, %rax
	movq	10824(%rsp), %rdi       # 8-byte Reload
	movq	10712(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10832(%rsp), %rcx       # 8-byte Reload
	movq	10656(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10648(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 10464(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	10528(%rsp), %rdi       # 8-byte Reload
	movq	10688(%rsp), %rsi       # 8-byte Reload
	movq	10680(%rsp), %rdx       # 8-byte Reload
	movq	10672(%rsp), %rcx       # 8-byte Reload
	movq	10664(%rsp), %r8        # 8-byte Reload
	movl	10500(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10832(%rsp), %rdi       # 8-byte Reload
	movq	10712(%rsp), %rsi       # 8-byte Reload
	movq	10464(%rsp), %rdx       # 8-byte Reload
	movq	10832(%rsp), %rcx       # 8-byte Reload
	movq	10704(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10696(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10464(%rsp), %rax       # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	10824(%rsp), %rdi       # 8-byte Reload
	movq	10800(%rsp), %rsi       # 8-byte Reload
	movq	10832(%rsp), %rcx       # 8-byte Reload
	movq	10728(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10720(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 10460(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10528(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10752(%rsp), %rdx       # 8-byte Reload
	movq	10744(%rsp), %rcx       # 8-byte Reload
	movq	10736(%rsp), %r8        # 8-byte Reload
	movl	10500(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15972(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10568(%rsp), %rdi       # 8-byte Reload
	movq	10800(%rsp), %rsi       # 8-byte Reload
	movq	10832(%rsp), %rcx       # 8-byte Reload
	movq	10776(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10768(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10460(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	10832(%rsp), %rdi       # 8-byte Reload
	movq	10800(%rsp), %rsi       # 8-byte Reload
	movq	10832(%rsp), %rcx       # 8-byte Reload
	movq	10792(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10784(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10460(%rsp), %ebp       # 4-byte Reload
	movl	15972(%rsp), %esi       # 4-byte Reload
	cmpl	%esi, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	10824(%rsp), %rdi       # 8-byte Reload
	movq	10832(%rsp), %rsi       # 8-byte Reload
	movq	10832(%rsp), %rcx       # 8-byte Reload
	movq	10816(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10459(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10528(%rsp), %rdi       # 8-byte Reload
	movq	10520(%rsp), %rsi       # 8-byte Reload
	movq	10512(%rsp), %rdx       # 8-byte Reload
	movq	10504(%rsp), %rcx       # 8-byte Reload
	movq	10568(%rsp), %r8        # 8-byte Reload
	movl	10500(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10480(%rsp), %rdi       # 8-byte Reload
	movq	10552(%rsp), %rsi       # 8-byte Reload
	movq	10552(%rsp), %rdx       # 8-byte Reload
	movq	10832(%rsp), %rcx       # 8-byte Reload
	movq	10472(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10488(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10568(%rsp), %rdi       # 8-byte Reload
	movq	10552(%rsp), %rsi       # 8-byte Reload
	movq	10552(%rsp), %rdx       # 8-byte Reload
	movq	10832(%rsp), %rcx       # 8-byte Reload
	movq	10584(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10536(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10459(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	10832(%rsp), %rdi       # 8-byte Reload
	movq	10832(%rsp), %rsi       # 8-byte Reload
	movq	10832(%rsp), %rcx       # 8-byte Reload
	movq	10544(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10560(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10459(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	movq	10464(%rsp), %rcx       # 8-byte Reload
	movq	%rcx, 13456(%rsp)       # 8-byte Spill
	jne	.LBB7_7
	jmp	.LBB7_5
.Ltmp280:
.LBB7_10:                               # %._crit_edge16
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str8182925, %r8
	leaq	.L.str8192926, %rdx
	movabsq	$144, %rsi
	leaq	.L.str8152922, %rdi
	leaq	.L.str8162923, %r9
	leaq	.L.str8172924, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movl	$255, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str8132920, %r12
	leaq	.L.str8142921, %r13
	movq	%rax, 10448(%rsp)       # 8-byte Spill
	leaq	.L.str8112918, %rax
	movq	%rax, 10440(%rsp)       # 8-byte Spill
	leaq	.L.str8122919, %rax
	movq	%rax, 10432(%rsp)       # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 10424(%rsp)       # 8-byte Spill
	leaq	.L.str8092916, %rax
	movq	%rax, 10416(%rsp)       # 8-byte Spill
	leaq	.L.str8102917, %rax
	movq	%rax, 10408(%rsp)       # 8-byte Spill
	leaq	.L.str8062913, %rax
	movq	%rax, 10400(%rsp)       # 8-byte Spill
	leaq	.L.str8072914, %rax
	movq	%rax, 10392(%rsp)       # 8-byte Spill
	leaq	.L.str8082915, %rax
	movq	%rax, 10384(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 10376(%rsp)       # 8-byte Spill
	leaq	.L.str8042911, %rax
	movq	%rax, 10368(%rsp)       # 8-byte Spill
	leaq	.L.str8052912, %rax
	movq	%rax, 10360(%rsp)       # 8-byte Spill
	leaq	.L.str8022909, %rax
	movq	%rax, 10352(%rsp)       # 8-byte Spill
	leaq	.L.str8032910, %rax
	movq	%rax, 10344(%rsp)       # 8-byte Spill
	leaq	.L.str8002907, %rax
	movq	%rax, 10336(%rsp)       # 8-byte Spill
	leaq	.L.str8012908, %rax
	movq	%rax, 10328(%rsp)       # 8-byte Spill
	leaq	.L.str7972904, %rax
	movq	%rax, 10320(%rsp)       # 8-byte Spill
	leaq	.L.str7982905, %rax
	movq	%rax, 10312(%rsp)       # 8-byte Spill
	leaq	.L.str7992906, %rax
	movq	%rax, 10304(%rsp)       # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 10296(%rsp)       # 8-byte Spill
	leaq	.L.str7952902, %rax
	movq	%rax, 10288(%rsp)       # 8-byte Spill
	leaq	.L.str7962903, %rax
	movq	%rax, 10280(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10272(%rsp)       # 8-byte Spill
	leaq	.L.str7932900, %rax
	movq	%rax, 10264(%rsp)       # 8-byte Spill
	leaq	.L.str7942901, %rax
	movq	%rax, 10256(%rsp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 10248(%rsp)       # 8-byte Spill
	leaq	.L.str7902897, %rax
	movq	%rax, 10240(%rsp)       # 8-byte Spill
	leaq	.L.str7912898, %rax
	movq	%rax, 10232(%rsp)       # 8-byte Spill
	leaq	.L.str7922899, %rax
	movq	%rax, 10224(%rsp)       # 8-byte Spill
	movabsq	$34, %rax
	movq	%rax, 10216(%rsp)       # 8-byte Spill
	leaq	.L.str7882895, %rax
	movq	%rax, 10208(%rsp)       # 8-byte Spill
	leaq	.L.str7892896, %rax
	movq	%rax, 10200(%rsp)       # 8-byte Spill
	leaq	.L.str7862893, %rax
	movq	%rax, 10192(%rsp)       # 8-byte Spill
	leaq	.L.str7872894, %rax
	movq	%rax, 10184(%rsp)       # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 10176(%rsp)       # 8-byte Spill
	leaq	.L.str7842891, %rax
	movq	%rax, 10168(%rsp)       # 8-byte Spill
	leaq	.L.str7852892, %rax
	movq	%rax, 10160(%rsp)       # 8-byte Spill
	leaq	.L.str7812888, %rax
	movq	%rax, 10152(%rsp)       # 8-byte Spill
	leaq	.L.str7822889, %rax
	movq	%rax, 10144(%rsp)       # 8-byte Spill
	leaq	.L.str7832890, %rax
	.loc	6 144 0                 # kmeans_clustering.c:144:0
.Ltmp281:
	movq	%rdi, 10136(%rsp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 10128(%rsp)       # 8-byte Spill
	movq	10152(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 10120(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	10144(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 10112(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	10128(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10104(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10376(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10096(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10088(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10080(%rsp)       # 8-byte Spill
	movl	%ebp, 10076(%rsp)       # 4-byte Spill
	movq	%r15, 10064(%rsp)       # 8-byte Spill
	movq	%r12, 10056(%rsp)       # 8-byte Spill
	movq	%r13, 10048(%rsp)       # 8-byte Spill
	movl	%ebx, 10044(%rsp)       # 4-byte Spill
	movq	%r10, 10032(%rsp)       # 8-byte Spill
	movq	%r11, 10024(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10024(%rsp), %rdi       # 8-byte Reload
	movq	10272(%rsp), %rsi       # 8-byte Reload
	movq	10176(%rsp), %rdx       # 8-byte Reload
	movq	10104(%rsp), %rcx       # 8-byte Reload
	movq	10168(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10160(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15864(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10448(%rsp), %rdi       # 8-byte Reload
	movq	10272(%rsp), %rsi       # 8-byte Reload
	movq	10448(%rsp), %rcx       # 8-byte Reload
	movq	10192(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10184(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15864(%rsp), %ebx       # 4-byte Reload
	addl	$4294967295, %ebx       # imm = 0xFFFFFFFF
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10080(%rsp), %rdi       # 8-byte Reload
	movq	10272(%rsp), %rsi       # 8-byte Reload
	movq	10448(%rsp), %rcx       # 8-byte Reload
	movq	10208(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10200(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 10020(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10248(%rsp), %rdi       # 8-byte Reload
	movq	10240(%rsp), %rsi       # 8-byte Reload
	movq	10232(%rsp), %rdx       # 8-byte Reload
	movq	10224(%rsp), %rcx       # 8-byte Reload
	movq	10216(%rsp), %r8        # 8-byte Reload
	movl	10044(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10020(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	10448(%rsp), %rdi       # 8-byte Reload
	movq	10272(%rsp), %rsi       # 8-byte Reload
	movq	10448(%rsp), %rcx       # 8-byte Reload
	movq	10264(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10256(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10020(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %eax
	movq	10080(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10448(%rsp), %rcx       # 8-byte Reload
	movq	10288(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10280(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 10008(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	10120(%rsp), %rdi       # 8-byte Reload
	movq	10320(%rsp), %rsi       # 8-byte Reload
	movq	10312(%rsp), %rdx       # 8-byte Reload
	movq	10304(%rsp), %rcx       # 8-byte Reload
	movq	10296(%rsp), %r8        # 8-byte Reload
	movl	10044(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10024(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10024(%rsp), %rdx       # 8-byte Reload
	movq	10104(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10328(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10448(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10008(%rsp), %rdx       # 8-byte Reload
	movq	10448(%rsp), %rcx       # 8-byte Reload
	movq	10352(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10344(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10008(%rsp), %rax       # 8-byte Reload
	shlq	$2, %rax
	movq	10080(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10448(%rsp), %rcx       # 8-byte Reload
	movq	10368(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10360(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 10000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	10120(%rsp), %rdi       # 8-byte Reload
	movq	10400(%rsp), %rsi       # 8-byte Reload
	movq	10392(%rsp), %rdx       # 8-byte Reload
	movq	10384(%rsp), %rcx       # 8-byte Reload
	movq	10376(%rsp), %r8        # 8-byte Reload
	movl	10044(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10024(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10424(%rsp), %rdx       # 8-byte Reload
	movq	10104(%rsp), %rcx       # 8-byte Reload
	movq	10416(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10408(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10448(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10000(%rsp), %rdx       # 8-byte Reload
	movq	10448(%rsp), %rcx       # 8-byte Reload
	movq	10440(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10432(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10000(%rsp), %rax       # 8-byte Reload
	addq	$4, %rax
	.loc	6 145 0                 # kmeans_clustering.c:145:0
	movq	10080(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10448(%rsp), %rcx       # 8-byte Reload
	movq	10056(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10048(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9992(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	15760(%rsp), %rdi       # 8-byte Reload
	movl	10076(%rsp), %esi       # 4-byte Reload
	movq	9992(%rsp), %rdx        # 8-byte Reload
	callq	memset
	.loc	6 144 0                 # kmeans_clustering.c:144:0
	movq	10120(%rsp), %rdi       # 8-byte Reload
	movq	10136(%rsp), %rsi       # 8-byte Reload
	movq	10088(%rsp), %rdx       # 8-byte Reload
	movq	10032(%rsp), %rcx       # 8-byte Reload
	movq	10024(%rsp), %r8        # 8-byte Reload
	movl	10044(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10448(%rsp), %rdi       # 8-byte Reload
	movq	10104(%rsp), %rsi       # 8-byte Reload
	movq	10104(%rsp), %rdx       # 8-byte Reload
	movq	10448(%rsp), %rcx       # 8-byte Reload
	movq	10096(%rsp), %r8        # 8-byte Reload
	movq	10104(%rsp), %r9        # 8-byte Reload
	movq	10112(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.Ltmp282:
.LBB7_11:
	movabsq	$24601, %rax            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$4, %rdx
	movabsq	$1, %rsi
	leaq	.L.str8312938, %r8
	movabsq	$0, %rdi
	leaq	.L.str8322939, %r9
	movabsq	$2, %r10
	leaq	.L.str8292936, %r11
	leaq	.L.str8302937, %rbx
	leaq	.L.str8272934, %r14
	leaq	.L.str8282935, %r15
	leaq	.L.str8252932, %r12
	leaq	.L.str8262933, %r13
	movabsq	$3, %rbp
	movq	%rax, 9984(%rsp)        # 8-byte Spill
	leaq	calloc, %rax
	movq	%rax, 9976(%rsp)        # 8-byte Spill
	leaq	.L.str8232930, %rax
	movq	%rax, 9968(%rsp)        # 8-byte Spill
	leaq	.L.str8242931, %rax
	movq	%rax, 9960(%rsp)        # 8-byte Spill
	movabsq	$148, %rax
	movq	%rax, 9952(%rsp)        # 8-byte Spill
	leaq	.L.str8202927, %rax
	movq	%rax, 9944(%rsp)        # 8-byte Spill
	leaq	.L.str8212928, %rax
	movq	%rax, 9936(%rsp)        # 8-byte Spill
	leaq	.L.str8222929, %rax
	movq	%rax, 9928(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 9920(%rsp)        # 8-byte Spill
	movl	$1, %esi
	.loc	6 148 0                 # kmeans_clustering.c:148:0
	movq	%rax, 9912(%rsp)        # 8-byte Spill
	movq	9952(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9904(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	9944(%rsp), %rax        # 8-byte Reload
	movl	%esi, 9900(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	9936(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 9888(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	9928(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9880(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9912(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9872(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	9900(%rsp), %eax        # 4-byte Reload
	movq	%r9, 9864(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 9856(%rsp)        # 8-byte Spill
	movq	%r12, 9848(%rsp)        # 8-byte Spill
	movq	%r13, 9840(%rsp)        # 8-byte Spill
	movq	%r14, 9832(%rsp)        # 8-byte Spill
	movq	%rbp, 9824(%rsp)        # 8-byte Spill
	movq	%rbx, 9816(%rsp)        # 8-byte Spill
	movq	%r10, 9808(%rsp)        # 8-byte Spill
	movq	%r11, 9800(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9824(%rsp), %rdi        # 8-byte Reload
	movq	9880(%rsp), %rsi        # 8-byte Reload
	movq	9976(%rsp), %rdx        # 8-byte Reload
	movq	9920(%rsp), %rcx        # 8-byte Reload
	movq	9968(%rsp), %r8         # 8-byte Reload
	movq	9904(%rsp), %r9         # 8-byte Reload
	movq	9960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9920(%rsp), %rdi        # 8-byte Reload
	movq	9880(%rsp), %rsi        # 8-byte Reload
	movq	14992(%rsp), %rdx       # 8-byte Reload
	movq	9920(%rsp), %rcx        # 8-byte Reload
	movq	9848(%rsp), %r8         # 8-byte Reload
	movq	9904(%rsp), %r9         # 8-byte Reload
	movq	9840(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9984(%rsp), %rdi        # 8-byte Reload
	movq	9880(%rsp), %rsi        # 8-byte Reload
	movq	14992(%rsp), %rdx       # 8-byte Reload
	movq	9920(%rsp), %rcx        # 8-byte Reload
	movq	9832(%rsp), %r8         # 8-byte Reload
	movq	9904(%rsp), %r9         # 8-byte Reload
	movq	9856(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9808(%rsp), %rdi        # 8-byte Reload
	movq	9880(%rsp), %rsi        # 8-byte Reload
	movq	9888(%rsp), %rdx        # 8-byte Reload
	movq	9904(%rsp), %rcx        # 8-byte Reload
	movq	9800(%rsp), %r8         # 8-byte Reload
	movq	9904(%rsp), %r9         # 8-byte Reload
	movq	9816(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9984(%rsp), %rdi        # 8-byte Reload
	movq	9880(%rsp), %rsi        # 8-byte Reload
	movq	9888(%rsp), %rdx        # 8-byte Reload
	movq	9920(%rsp), %rcx        # 8-byte Reload
	movq	9872(%rsp), %r8         # 8-byte Reload
	movq	9904(%rsp), %r9         # 8-byte Reload
	movq	9864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %eax
	movl	%eax, %esi
	movq	14992(%rsp), %rdi       # 8-byte Reload
	callq	calloc
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str8492956, %r8
	movabsq	$0, %rsi
	leaq	.L.str8502957, %r9
	leaq	.L.str8472954, %r10
	leaq	.L.str8482955, %r11
	movabsq	$2, %rbx
	leaq	malloc, %r14
	leaq	.L.str8452952, %r15
	leaq	.L.str8462953, %r12
	movabsq	$150, %r13
	leaq	.L.str8422949, %rbp
	movq	%rax, 9792(%rsp)        # 8-byte Spill
	leaq	.L.str8432950, %rax
	movq	%rax, 9784(%rsp)        # 8-byte Spill
	leaq	.L.str8442951, %rax
	movq	%rax, 9776(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 9768(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 9760(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 9752(%rsp)        # 8-byte Spill
	leaq	.L.str8402947, %rax
	movq	%rax, 9744(%rsp)        # 8-byte Spill
	leaq	.L.str8412948, %rax
	movq	%rax, 9736(%rsp)        # 8-byte Spill
	leaq	.L.str8382945, %rax
	movq	%rax, 9728(%rsp)        # 8-byte Spill
	leaq	.L.str8392946, %rax
	movq	%rax, 9720(%rsp)        # 8-byte Spill
	movabsq	$148, %rax
	movq	%rax, 9712(%rsp)        # 8-byte Spill
	leaq	.L.str8352942, %rax
	movq	%rax, 9704(%rsp)        # 8-byte Spill
	leaq	.L.str8362943, %rax
	movq	%rax, 9696(%rsp)        # 8-byte Spill
	leaq	.L.str8372944, %rax
	movq	%rax, 9688(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 9680(%rsp)        # 8-byte Spill
	leaq	.L.str8332940, %rax
	movq	%rax, 9672(%rsp)        # 8-byte Spill
	leaq	.L.str8342941, %rax
	movq	%rax, 9664(%rsp)        # 8-byte Spill
	movq	9752(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9656(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 9652(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	9792(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 9640(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	9640(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9632(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9672(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9624(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	9768(%rsp), %rax        # 8-byte Reload
	movq	%r9, 9616(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	9664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbp, 9608(%rsp)        # 8-byte Spill
	movq	%r15, 9600(%rsp)        # 8-byte Spill
	movq	%r12, 9592(%rsp)        # 8-byte Spill
	movq	%r14, 9584(%rsp)        # 8-byte Spill
	movq	%r13, 9576(%rsp)        # 8-byte Spill
	movq	%rbx, 9568(%rsp)        # 8-byte Spill
	movq	%r10, 9560(%rsp)        # 8-byte Spill
	movq	%r11, 9552(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9712(%rsp), %rdi        # 8-byte Reload
	movq	9704(%rsp), %rsi        # 8-byte Reload
	movq	9696(%rsp), %rdx        # 8-byte Reload
	movq	9688(%rsp), %rcx        # 8-byte Reload
	movq	9680(%rsp), %r8         # 8-byte Reload
	movl	9652(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9640(%rsp), %rdi        # 8-byte Reload
	movq	9632(%rsp), %rsi        # 8-byte Reload
	movq	9792(%rsp), %rdx        # 8-byte Reload
	movq	9640(%rsp), %rcx        # 8-byte Reload
	movq	9728(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9792(%rsp), %rax        # 8-byte Reload
	movq	9752(%rsp), %rdi        # 8-byte Reload
	movq	9632(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9640(%rsp), %rcx        # 8-byte Reload
	movq	9744(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9736(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9544(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp283:
	#DEBUG_VALUE: kmeans_clustering:new_centers_len <- [RSP+9544]
	.loc	6 150 0                 # kmeans_clustering.c:150:0
	movq	9576(%rsp), %rdi        # 8-byte Reload
	movq	9608(%rsp), %rsi        # 8-byte Reload
	movq	9784(%rsp), %rdx        # 8-byte Reload
	movq	9776(%rsp), %rcx        # 8-byte Reload
	movq	9760(%rsp), %r8         # 8-byte Reload
	movl	9652(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9568(%rsp), %rdi        # 8-byte Reload
	movq	9632(%rsp), %rsi        # 8-byte Reload
	movq	9584(%rsp), %rdx        # 8-byte Reload
	movq	9640(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9640(%rsp), %rdi        # 8-byte Reload
	movq	9632(%rsp), %rsi        # 8-byte Reload
	movq	14984(%rsp), %rdx       # 8-byte Reload
	movq	9640(%rsp), %rcx        # 8-byte Reload
	movq	9560(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rdi        # 8-byte Reload
	movq	9632(%rsp), %rsi        # 8-byte Reload
	movq	14984(%rsp), %rdx       # 8-byte Reload
	movq	9640(%rsp), %rcx        # 8-byte Reload
	movq	9624(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14984(%rsp), %rdi       # 8-byte Reload
	callq	malloc
.Ltmp284:
	movabsq	$24601, %rcx            # imm = 0x6019
	movabsq	$64, %rdx
	movabsq	$4, %rsi
	movabsq	$1, %rdi
	leaq	.L.str8712978, %r8
	movabsq	$0, %r9
	leaq	.L.str8722979, %r10
	movabsq	$2, %r11
	leaq	.L.str8692976, %rbx
	leaq	.L.str8702977, %r14
	leaq	.L.str8672974, %r15
	leaq	.L.str8682975, %r12
	leaq	.L.str8652972, %r13
	leaq	.L.str8662973, %rbp
	movq	%rax, 9536(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 9528(%rsp)        # 8-byte Spill
	leaq	calloc, %rax
	movq	%rax, 9520(%rsp)        # 8-byte Spill
	leaq	.L.str8632970, %rax
	movq	%rax, 9512(%rsp)        # 8-byte Spill
	leaq	.L.str8642971, %rax
	movq	%rax, 9504(%rsp)        # 8-byte Spill
	movabsq	$151, %rax
	movq	%rax, 9496(%rsp)        # 8-byte Spill
	leaq	.L.str8602967, %rax
	movq	%rax, 9488(%rsp)        # 8-byte Spill
	leaq	.L.str8612968, %rax
	movq	%rax, 9480(%rsp)        # 8-byte Spill
	leaq	.L.str8622969, %rax
	movq	%rax, 9472(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 9464(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 9456(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 9448(%rsp)        # 8-byte Spill
	leaq	.L.str8582965, %rax
	movq	%rax, 9440(%rsp)        # 8-byte Spill
	leaq	.L.str8592966, %rax
	movq	%rax, 9432(%rsp)        # 8-byte Spill
	leaq	.L.str8562963, %rax
	movq	%rax, 9424(%rsp)        # 8-byte Spill
	leaq	.L.str8572964, %rax
	movq	%rax, 9416(%rsp)        # 8-byte Spill
	movabsq	$150, %rax
	movq	%rax, 9408(%rsp)        # 8-byte Spill
	leaq	.L.str8532960, %rax
	movq	%rax, 9400(%rsp)        # 8-byte Spill
	leaq	.L.str8542961, %rax
	movq	%rax, 9392(%rsp)        # 8-byte Spill
	leaq	.L.str8552962, %rax
	movq	%rax, 9384(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 9376(%rsp)        # 8-byte Spill
	leaq	.L.str8512958, %rax
	movq	%rax, 9368(%rsp)        # 8-byte Spill
	leaq	.L.str8522959, %rax
	movq	%rax, 9360(%rsp)        # 8-byte Spill
	movq	9448(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9352(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 9348(%rsp)        # 4-byte Spill
	movq	%rdx, %rsi
	movq	9536(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 9336(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	9352(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9328(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9368(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9320(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9312(%rsp)         # 8-byte Spill
	movq	9360(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 9304(%rsp)        # 8-byte Spill
	movq	%r12, 9296(%rsp)        # 8-byte Spill
	movq	%r13, 9288(%rsp)        # 8-byte Spill
	movq	%rbp, 9280(%rsp)        # 8-byte Spill
	movq	%r14, 9272(%rsp)        # 8-byte Spill
	movq	%rbx, 9264(%rsp)        # 8-byte Spill
	movq	%r10, 9256(%rsp)        # 8-byte Spill
	movq	%r11, 9248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9408(%rsp), %rdi        # 8-byte Reload
	movq	9400(%rsp), %rsi        # 8-byte Reload
	movq	9392(%rsp), %rdx        # 8-byte Reload
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	9376(%rsp), %r8         # 8-byte Reload
	movl	9348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9352(%rsp), %rdi        # 8-byte Reload
	movq	9336(%rsp), %rsi        # 8-byte Reload
	movq	9536(%rsp), %rdx        # 8-byte Reload
	movq	9352(%rsp), %rcx        # 8-byte Reload
	movq	9424(%rsp), %r8         # 8-byte Reload
	movq	9312(%rsp), %r9         # 8-byte Reload
	movq	9416(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9536(%rsp), %rax        # 8-byte Reload
	movq	9448(%rsp), %rdi        # 8-byte Reload
	movq	9336(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9352(%rsp), %rcx        # 8-byte Reload
	movq	9440(%rsp), %r8         # 8-byte Reload
	movq	9312(%rsp), %r9         # 8-byte Reload
	movq	9432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp285:
	#DEBUG_VALUE: kmeans_clustering:new_centers <- [RSP+9240]
	.loc	6 151 0                 # kmeans_clustering.c:151:0
	movq	9496(%rsp), %rdi        # 8-byte Reload
	movq	9488(%rsp), %rsi        # 8-byte Reload
	movq	9480(%rsp), %rdx        # 8-byte Reload
	movq	9472(%rsp), %rcx        # 8-byte Reload
	movq	9456(%rsp), %r8         # 8-byte Reload
	movl	9348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9528(%rsp), %rdi        # 8-byte Reload
	movq	9336(%rsp), %rsi        # 8-byte Reload
	movq	9520(%rsp), %rdx        # 8-byte Reload
	movq	9352(%rsp), %rcx        # 8-byte Reload
	movq	9512(%rsp), %r8         # 8-byte Reload
	movq	9312(%rsp), %r9         # 8-byte Reload
	movq	9504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9352(%rsp), %rdi        # 8-byte Reload
	movq	9336(%rsp), %rsi        # 8-byte Reload
	movq	14480(%rsp), %rdx       # 8-byte Reload
	movq	9352(%rsp), %rcx        # 8-byte Reload
	movq	9288(%rsp), %r8         # 8-byte Reload
	movq	9312(%rsp), %r9         # 8-byte Reload
	movq	9280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9336(%rsp), %rsi        # 8-byte Reload
	movq	14480(%rsp), %rdx       # 8-byte Reload
	movq	9352(%rsp), %rcx        # 8-byte Reload
	movq	9304(%rsp), %r8         # 8-byte Reload
	movq	9312(%rsp), %r9         # 8-byte Reload
	movq	9296(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9248(%rsp), %rdi        # 8-byte Reload
	movq	9336(%rsp), %rsi        # 8-byte Reload
	movq	9464(%rsp), %rdx        # 8-byte Reload
	movq	9312(%rsp), %rcx        # 8-byte Reload
	movq	9264(%rsp), %r8         # 8-byte Reload
	movq	9312(%rsp), %r9         # 8-byte Reload
	movq	9272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9336(%rsp), %rsi        # 8-byte Reload
	movq	9464(%rsp), %rdx        # 8-byte Reload
	movq	9352(%rsp), %rcx        # 8-byte Reload
	movq	9320(%rsp), %r8         # 8-byte Reload
	movq	9312(%rsp), %r9         # 8-byte Reload
	movq	9256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$4, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	14480(%rsp), %rdi       # 8-byte Reload
	callq	calloc
.Ltmp286:
	movabsq	$1, %rcx
	leaq	.L.str9053012, %r8
	movabsq	$0, %rdx
	leaq	.L.str9063013, %rsi
	movabsq	$2, %rdi
	leaq	.L.str9033010, %r9
	leaq	.L.str9043011, %r10
	movabsq	$3, %r11
	leaq	.L.str9013008, %rbx
	leaq	.L.str9023009, %r14
	movabsq	$152, %r15
	leaq	.L.str8983005, %r12
	leaq	.L.str8993006, %r13
	leaq	.L.str9003007, %rbp
	movq	%rsi, 9232(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 9224(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 9216(%rsp)        # 8-byte Spill
	leaq	.L.str8963003, %rax
	movq	%rax, 9208(%rsp)        # 8-byte Spill
	leaq	.L.str8973004, %rax
	movq	%rax, 9200(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9192(%rsp)        # 8-byte Spill
	leaq	.L.str8943001, %rax
	movq	%rax, 9184(%rsp)        # 8-byte Spill
	leaq	.L.str8953002, %rax
	movq	%rax, 9176(%rsp)        # 8-byte Spill
	leaq	.L.str8922999, %rax
	movq	%rax, 9168(%rsp)        # 8-byte Spill
	leaq	.L.str8933000, %rax
	movq	%rax, 9160(%rsp)        # 8-byte Spill
	leaq	.L.str8892996, %rax
	movq	%rax, 9152(%rsp)        # 8-byte Spill
	leaq	.L.str8902997, %rax
	movq	%rax, 9144(%rsp)        # 8-byte Spill
	leaq	.L.str8912998, %rax
	movq	%rax, 9136(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 9128(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 9120(%rsp)        # 8-byte Spill
	leaq	.L.str8872994, %rax
	movq	%rax, 9112(%rsp)        # 8-byte Spill
	leaq	.L.str8882995, %rax
	movq	%rax, 9104(%rsp)        # 8-byte Spill
	leaq	.L.str8852992, %rax
	movq	%rax, 9096(%rsp)        # 8-byte Spill
	leaq	.L.str8862993, %rax
	movq	%rax, 9088(%rsp)        # 8-byte Spill
	movabsq	$151, %rax
	movq	%rax, 9080(%rsp)        # 8-byte Spill
	leaq	.L.str8822989, %rax
	movq	%rax, 9072(%rsp)        # 8-byte Spill
	leaq	.L.str8832990, %rax
	movq	%rax, 9064(%rsp)        # 8-byte Spill
	leaq	.L.str8842991, %rax
	movq	%rax, 9056(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 9048(%rsp)        # 8-byte Spill
	leaq	.L.str8802987, %rax
	movq	%rax, 9040(%rsp)        # 8-byte Spill
	leaq	.L.str8812988, %rax
	movq	%rax, 9032(%rsp)        # 8-byte Spill
	leaq	.L.str8782985, %rax
	movq	%rax, 9024(%rsp)        # 8-byte Spill
	leaq	.L.str8792986, %rax
	movq	%rax, 9016(%rsp)        # 8-byte Spill
	leaq	.L.str8752982, %rax
	movq	%rax, 9008(%rsp)        # 8-byte Spill
	leaq	.L.str8762983, %rax
	movq	%rax, 9000(%rsp)        # 8-byte Spill
	leaq	.L.str8772984, %rax
	movq	%rax, 8992(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 8984(%rsp)        # 8-byte Spill
	leaq	.L.str8732980, %rax
	movq	%rax, 8976(%rsp)        # 8-byte Spill
	leaq	.L.str8742981, %rax
	movq	%rax, 8968(%rsp)        # 8-byte Spill
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8960(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	9120(%rsp), %rax        # 8-byte Reload
	movl	%esi, 8956(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	9224(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 8944(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 8936(%rsp)        # 8-byte Spill
	movq	8976(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8928(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	8944(%rsp), %rax        # 8-byte Reload
	movq	%r9, 8920(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	8968(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 8912(%rsp)        # 8-byte Spill
	movq	%r14, 8904(%rsp)        # 8-byte Spill
	movq	%r12, 8896(%rsp)        # 8-byte Spill
	movq	%r13, 8888(%rsp)        # 8-byte Spill
	movq	%rbp, 8880(%rsp)        # 8-byte Spill
	movq	%rbx, 8872(%rsp)        # 8-byte Spill
	movq	%r10, 8864(%rsp)        # 8-byte Spill
	movq	%r11, 8856(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9080(%rsp), %rdi        # 8-byte Reload
	movq	9008(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	8992(%rsp), %rcx        # 8-byte Reload
	movq	8984(%rsp), %r8         # 8-byte Reload
	movl	8956(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8936(%rsp), %rdi        # 8-byte Reload
	movq	9120(%rsp), %rsi        # 8-byte Reload
	movq	9224(%rsp), %rdx        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	9024(%rsp), %r8         # 8-byte Reload
	movq	8944(%rsp), %r9         # 8-byte Reload
	movq	9016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9224(%rsp), %rax        # 8-byte Reload
	movq	9216(%rsp), %rdi        # 8-byte Reload
	movq	9120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	8944(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8848(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9080(%rsp), %rdi        # 8-byte Reload
	movq	9072(%rsp), %rsi        # 8-byte Reload
	movq	9064(%rsp), %rdx        # 8-byte Reload
	movq	9056(%rsp), %rcx        # 8-byte Reload
	movq	9048(%rsp), %r8         # 8-byte Reload
	movl	8956(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8960(%rsp), %rdi        # 8-byte Reload
	movq	9120(%rsp), %rsi        # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	9096(%rsp), %r8         # 8-byte Reload
	movq	8944(%rsp), %r9         # 8-byte Reload
	movq	9088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8936(%rsp), %rdi        # 8-byte Reload
	movq	9120(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	9112(%rsp), %r8         # 8-byte Reload
	movq	8944(%rsp), %r9         # 8-byte Reload
	movq	9104(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9536(%rsp), %rax        # 8-byte Reload
	movq	8848(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
.Ltmp287:
	#DEBUG_VALUE: kmeans_clustering:i <- 1
	.loc	6 152 0                 # kmeans_clustering.c:152:0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9152(%rsp), %rsi        # 8-byte Reload
	movq	9144(%rsp), %rdx        # 8-byte Reload
	movq	9136(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	8956(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8960(%rsp), %rdi        # 8-byte Reload
	movq	9192(%rsp), %rsi        # 8-byte Reload
	movq	8936(%rsp), %rdx        # 8-byte Reload
	movq	8944(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	8944(%rsp), %r9         # 8-byte Reload
	movq	9160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	8936(%rsp), %rdi        # 8-byte Reload
	movq	9192(%rsp), %rsi        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	9184(%rsp), %r8         # 8-byte Reload
	movq	8944(%rsp), %r9         # 8-byte Reload
	movq	9176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %esi       # 4-byte Reload
	cmpl	$1, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9216(%rsp), %rdi        # 8-byte Reload
	movq	8936(%rsp), %rsi        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	9208(%rsp), %r8         # 8-byte Reload
	movq	8944(%rsp), %r9         # 8-byte Reload
	movq	9200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8847(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	8880(%rsp), %rcx        # 8-byte Reload
	movq	8960(%rsp), %r8         # 8-byte Reload
	movl	8956(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8856(%rsp), %rdi        # 8-byte Reload
	movq	8944(%rsp), %rsi        # 8-byte Reload
	movq	8944(%rsp), %rdx        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	8872(%rsp), %r8         # 8-byte Reload
	movq	8944(%rsp), %r9         # 8-byte Reload
	movq	8904(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8960(%rsp), %rdi        # 8-byte Reload
	movq	8944(%rsp), %rsi        # 8-byte Reload
	movq	8944(%rsp), %rdx        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	8920(%rsp), %r8         # 8-byte Reload
	movq	8944(%rsp), %r9         # 8-byte Reload
	movq	8864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8847(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	8936(%rsp), %rdi        # 8-byte Reload
	movq	8936(%rsp), %rsi        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	8928(%rsp), %r8         # 8-byte Reload
	movq	8944(%rsp), %r9         # 8-byte Reload
	movq	9232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8847(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB7_12
	jmp	.LBB7_13
.LBB7_12:                               # %.lr.ph12
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str9173024, %r8
	leaq	.L.str9183025, %rdx
	movabsq	$152, %rdi
	leaq	.L.str9143021, %rsi
	leaq	.L.str9153022, %r9
	leaq	.L.str9163023, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str9123019, %r12
	leaq	.L.str9133020, %r13
	movabsq	$32, %rbp
	movq	%rax, 8832(%rsp)        # 8-byte Spill
	leaq	.L.str9103017, %rax
	movq	%rax, 8824(%rsp)        # 8-byte Spill
	leaq	.L.str9113018, %rax
	movq	%rax, 8816(%rsp)        # 8-byte Spill
	movabsq	$153, %rax
	movq	%rax, 8808(%rsp)        # 8-byte Spill
	leaq	.L.str9073014, %rax
	movq	%rax, 8800(%rsp)        # 8-byte Spill
	leaq	.L.str9083015, %rax
	movq	%rax, 8792(%rsp)        # 8-byte Spill
	leaq	.L.str9093016, %rax
	movq	%rax, 8784(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	.loc	6 153 0                 # kmeans_clustering.c:153:0
	movq	%rax, 8776(%rsp)        # 8-byte Spill
	movq	8808(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8768(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	8800(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 8760(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	8792(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 8752(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	8784(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8744(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8776(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8736(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8728(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8720(%rsp)        # 8-byte Spill
	movq	%r14, 8712(%rsp)        # 8-byte Spill
	movq	%r12, 8704(%rsp)        # 8-byte Spill
	movq	%rbp, 8696(%rsp)        # 8-byte Spill
	movq	%r13, 8688(%rsp)        # 8-byte Spill
	movl	%ebx, 8684(%rsp)        # 4-byte Spill
	movq	%r10, 8672(%rsp)        # 8-byte Spill
	movq	%r11, 8664(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	15868(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	8832(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8832(%rsp), %rcx        # 8-byte Reload
	movq	8824(%rsp), %r8         # 8-byte Reload
	movq	8744(%rsp), %r9         # 8-byte Reload
	movq	8816(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	15868(%rsp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	.loc	6 152 0                 # kmeans_clustering.c:152:0
	movq	8712(%rsp), %rdi        # 8-byte Reload
	movq	8720(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8832(%rsp), %rcx        # 8-byte Reload
	movq	8704(%rsp), %r8         # 8-byte Reload
	movq	8744(%rsp), %r9         # 8-byte Reload
	movq	8688(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8760(%rsp), %rsi        # 8-byte Reload
	movq	8728(%rsp), %rdx        # 8-byte Reload
	movq	8672(%rsp), %rcx        # 8-byte Reload
	movq	8664(%rsp), %r8         # 8-byte Reload
	movl	8684(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8832(%rsp), %rdi        # 8-byte Reload
	movq	8744(%rsp), %rsi        # 8-byte Reload
	movq	8744(%rsp), %rdx        # 8-byte Reload
	movq	8832(%rsp), %rcx        # 8-byte Reload
	movq	8736(%rsp), %r8         # 8-byte Reload
	movq	8744(%rsp), %r9         # 8-byte Reload
	movq	8752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8832(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	jmp	.LBB7_14
.Ltmp288:
.LBB7_13:                               # %.preheader9
	vxorps	%xmm0, %xmm0, %xmm0
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str9493056, %r8
	leaq	.L.str9503057, %rsi
	movabsq	$160, %rdi
	leaq	.L.str9463053, %r9
	leaq	.L.str9473054, %r10
	leaq	.L.str9483055, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str9443051, %r15
	leaq	.L.str9453052, %r12
	movabsq	$32, %r13
	movq	%rcx, 8640(%rsp)        # 8-byte Spill
	leaq	.L.str9423049, %rcx
	movq	%rcx, 8632(%rsp)        # 8-byte Spill
	leaq	.L.str9433050, %rcx
	movq	%rcx, 8624(%rsp)        # 8-byte Spill
	leaq	.L.str9403047, %rcx
	movq	%rcx, 8616(%rsp)        # 8-byte Spill
	leaq	.L.str9413048, %rcx
	movq	%rcx, 8608(%rsp)        # 8-byte Spill
	movabsq	$178, %rcx
	movq	%rcx, 8600(%rsp)        # 8-byte Spill
	leaq	.L.str9373044, %rcx
	movq	%rcx, 8592(%rsp)        # 8-byte Spill
	leaq	.L.str9383045, %rcx
	movq	%rcx, 8584(%rsp)        # 8-byte Spill
	leaq	.L.str9393046, %rcx
	movq	%rcx, 8576(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 8568(%rsp)        # 8-byte Spill
	leaq	.L.str9353042, %rcx
	movq	%rcx, 8560(%rsp)        # 8-byte Spill
	leaq	.L.str9363043, %rcx
	movq	%rcx, 8552(%rsp)        # 8-byte Spill
	leaq	.L.str9333040, %rcx
	movq	%rcx, 8544(%rsp)        # 8-byte Spill
	leaq	.L.str9343041, %rcx
	movq	%rcx, 8536(%rsp)        # 8-byte Spill
	leaq	.L.str9313038, %rcx
	movq	%rcx, 8528(%rsp)        # 8-byte Spill
	leaq	.L.str9323039, %rcx
	movq	%rcx, 8520(%rsp)        # 8-byte Spill
	movabsq	$177, %rcx
	movq	%rcx, 8512(%rsp)        # 8-byte Spill
	leaq	.L.str9283035, %rcx
	movq	%rcx, 8504(%rsp)        # 8-byte Spill
	leaq	.L.str9293036, %rcx
	movq	%rcx, 8496(%rsp)        # 8-byte Spill
	leaq	.L.str9303037, %rcx
	movq	%rcx, 8488(%rsp)        # 8-byte Spill
	leaq	.L.str9263033, %rcx
	movq	%rcx, 8480(%rsp)        # 8-byte Spill
	leaq	.L.str9273034, %rcx
	movq	%rcx, 8472(%rsp)        # 8-byte Spill
	leaq	.L.str9243031, %rcx
	movq	%rcx, 8464(%rsp)        # 8-byte Spill
	leaq	.L.str9253032, %rcx
	movq	%rcx, 8456(%rsp)        # 8-byte Spill
	leaq	.L.str9223029, %rcx
	movq	%rcx, 8448(%rsp)        # 8-byte Spill
	leaq	.L.str9233030, %rcx
	movq	%rcx, 8440(%rsp)        # 8-byte Spill
	movabsq	$171, %rcx
	movq	%rcx, 8432(%rsp)        # 8-byte Spill
	leaq	.L.str9193026, %rcx
	movq	%rcx, 8424(%rsp)        # 8-byte Spill
	leaq	.L.str9203027, %rcx
	movq	%rcx, 8416(%rsp)        # 8-byte Spill
	leaq	.L.str9213028, %rcx
	.loc	6 171 0                 # kmeans_clustering.c:171:0
.Ltmp289:
	movq	%rcx, 8408(%rsp)        # 8-byte Spill
	movq	8432(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 8400(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	8424(%rsp), %rcx        # 8-byte Reload
	movq	%rsi, 8392(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	8416(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 8384(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	8408(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 8376(%rsp)         # 8-byte Spill
	movq	8568(%rsp), %r8         # 8-byte Reload
	movq	%r9, 8368(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovss	%xmm0, 8364(%rsp)       # 4-byte Spill
	movl	%eax, 8360(%rsp)        # 4-byte Spill
	movq	%r14, 8352(%rsp)        # 8-byte Spill
	movq	%r15, 8344(%rsp)        # 8-byte Spill
	movl	%ebp, 8340(%rsp)        # 4-byte Spill
	movq	%r12, 8328(%rsp)        # 8-byte Spill
	movq	%r13, 8320(%rsp)        # 8-byte Spill
	movq	%rbx, 8312(%rsp)        # 8-byte Spill
	movq	%r10, 8304(%rsp)        # 8-byte Spill
	movq	%r11, 8296(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8312(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	8384(%rsp), %rcx        # 8-byte Reload
	movq	8448(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	movq	8440(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15868(%rsp), %eax       # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	8640(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8640(%rsp), %rcx        # 8-byte Reload
	movq	8464(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	movq	8456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15868(%rsp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
.Ltmp290:
	.loc	6 177 0                 # kmeans_clustering.c:177:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	8352(%rsp), %rdi        # 8-byte Reload
	movq	8640(%rsp), %rsi        # 8-byte Reload
	movq	8640(%rsp), %rcx        # 8-byte Reload
	movq	8480(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	movq	8472(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8295(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8512(%rsp), %rdi        # 8-byte Reload
	movq	8504(%rsp), %rsi        # 8-byte Reload
	movq	8496(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8312(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	8384(%rsp), %rcx        # 8-byte Reload
	movq	8528(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	movq	8520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	8640(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8640(%rsp), %rcx        # 8-byte Reload
	movq	8544(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	movq	8536(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	.loc	6 178 0                 # kmeans_clustering.c:178:0
.Ltmp291:
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	8352(%rsp), %rdi        # 8-byte Reload
	movq	8640(%rsp), %rsi        # 8-byte Reload
	movq	8640(%rsp), %rcx        # 8-byte Reload
	movq	8560(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	movq	8552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8294(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8592(%rsp), %rsi        # 8-byte Reload
	movq	8584(%rsp), %rdx        # 8-byte Reload
	movq	8576(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8312(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	8384(%rsp), %rcx        # 8-byte Reload
	movq	8616(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	movq	8608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15868(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	8640(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8640(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	movq	8624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15868(%rsp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
.Ltmp292:
	.loc	6 160 0                 # kmeans_clustering.c:160:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	8352(%rsp), %rdi        # 8-byte Reload
	movq	8640(%rsp), %rsi        # 8-byte Reload
	movq	8640(%rsp), %rcx        # 8-byte Reload
	movq	8344(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	movq	8328(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8293(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8400(%rsp), %rdi        # 8-byte Reload
	movq	8368(%rsp), %rsi        # 8-byte Reload
	movq	8304(%rsp), %rdx        # 8-byte Reload
	movq	8296(%rsp), %rcx        # 8-byte Reload
	movq	8312(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8640(%rsp), %rdi        # 8-byte Reload
	movq	8384(%rsp), %rsi        # 8-byte Reload
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	8640(%rsp), %rcx        # 8-byte Reload
	movq	8376(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	movq	8392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovss	8364(%rsp), %xmm0       # 4-byte Reload
	movl	8360(%rsp), %ebp        # 4-byte Reload
	vmovss	%xmm0, 8288(%rsp)       # 4-byte Spill
	movl	%ebp, 8284(%rsp)        # 4-byte Spill
	jmp	.LBB7_15
.Ltmp293:
.LBB7_14:                               # =>This Inner Loop Header: Depth=1
	movq	8648(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str10423149, %r8
	movabsq	$0, %rdx
	leaq	.L.str10433150, %rsi
	movabsq	$2, %rdi
	leaq	.L.str10403147, %r9
	leaq	.L.str10413148, %r10
	movabsq	$3, %r11
	leaq	.L.str10383145, %rbx
	leaq	.L.str10393146, %r14
	movabsq	$152, %r15
	leaq	.L.str10353142, %r12
	leaq	.L.str10363143, %r13
	leaq	.L.str10373144, %rbp
	movq	%rsi, 8272(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 8264(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 8256(%rsp)        # 8-byte Spill
	leaq	.L.str10333140, %rax
	movq	%rax, 8248(%rsp)        # 8-byte Spill
	leaq	.L.str10343141, %rax
	movq	%rax, 8240(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8232(%rsp)        # 8-byte Spill
	leaq	.L.str10313138, %rax
	movq	%rax, 8224(%rsp)        # 8-byte Spill
	leaq	.L.str10323139, %rax
	movq	%rax, 8216(%rsp)        # 8-byte Spill
	leaq	.L.str10293136, %rax
	movq	%rax, 8208(%rsp)        # 8-byte Spill
	leaq	.L.str10303137, %rax
	movq	%rax, 8200(%rsp)        # 8-byte Spill
	leaq	.L.str10263133, %rax
	movq	%rax, 8192(%rsp)        # 8-byte Spill
	leaq	.L.str10273134, %rax
	movq	%rax, 8184(%rsp)        # 8-byte Spill
	leaq	.L.str10283135, %rax
	movq	%rax, 8176(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8168(%rsp)        # 8-byte Spill
	leaq	.L.str10243131, %rax
	movq	%rax, 8160(%rsp)        # 8-byte Spill
	leaq	.L.str10253132, %rax
	movq	%rax, 8152(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8144(%rsp)        # 8-byte Spill
	leaq	.L.str10223129, %rax
	movq	%rax, 8136(%rsp)        # 8-byte Spill
	leaq	.L.str10233130, %rax
	movq	%rax, 8128(%rsp)        # 8-byte Spill
	leaq	.L.str10193126, %rax
	movq	%rax, 8120(%rsp)        # 8-byte Spill
	leaq	.L.str10203127, %rax
	movq	%rax, 8112(%rsp)        # 8-byte Spill
	leaq	.L.str10213128, %rax
	movq	%rax, 8104(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8096(%rsp)        # 8-byte Spill
	leaq	.L.str10173124, %rax
	movq	%rax, 8088(%rsp)        # 8-byte Spill
	leaq	.L.str10183125, %rax
	movq	%rax, 8080(%rsp)        # 8-byte Spill
	leaq	.L.str10153122, %rax
	movq	%rax, 8072(%rsp)        # 8-byte Spill
	leaq	.L.str10163123, %rax
	movq	%rax, 8064(%rsp)        # 8-byte Spill
	leaq	.L.str10133120, %rax
	movq	%rax, 8056(%rsp)        # 8-byte Spill
	leaq	.L.str10143121, %rax
	movq	%rax, 8048(%rsp)        # 8-byte Spill
	leaq	.L.str10103117, %rax
	movq	%rax, 8040(%rsp)        # 8-byte Spill
	leaq	.L.str10113118, %rax
	movq	%rax, 8032(%rsp)        # 8-byte Spill
	leaq	.L.str10123119, %rax
	movq	%rax, 8024(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 8016(%rsp)        # 8-byte Spill
	leaq	.L.str10083115, %rax
	movq	%rax, 8008(%rsp)        # 8-byte Spill
	leaq	.L.str10093116, %rax
	movq	%rax, 8000(%rsp)        # 8-byte Spill
	leaq	.L.str10063113, %rax
	movq	%rax, 7992(%rsp)        # 8-byte Spill
	leaq	.L.str10073114, %rax
	movq	%rax, 7984(%rsp)        # 8-byte Spill
	movabsq	$153, %rax
	movq	%rax, 7976(%rsp)        # 8-byte Spill
	leaq	.L.str10033110, %rax
	movq	%rax, 7968(%rsp)        # 8-byte Spill
	leaq	.L.str10043111, %rax
	movq	%rax, 7960(%rsp)        # 8-byte Spill
	leaq	.L.str10053112, %rax
	movq	%rax, 7952(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7944(%rsp)        # 8-byte Spill
	leaq	.L.str10013108, %rax
	movq	%rax, 7936(%rsp)        # 8-byte Spill
	leaq	.L.str10023109, %rax
	movq	%rax, 7928(%rsp)        # 8-byte Spill
	leaq	.L.str9993106, %rax
	movq	%rax, 7920(%rsp)        # 8-byte Spill
	leaq	.L.str10003107, %rax
	movq	%rax, 7912(%rsp)        # 8-byte Spill
	leaq	.L.str9973104, %rax
	movq	%rax, 7904(%rsp)        # 8-byte Spill
	leaq	.L.str9983105, %rax
	movq	%rax, 7896(%rsp)        # 8-byte Spill
	leaq	.L.str9943101, %rax
	movq	%rax, 7888(%rsp)        # 8-byte Spill
	leaq	.L.str9953102, %rax
	movq	%rax, 7880(%rsp)        # 8-byte Spill
	leaq	.L.str9963103, %rax
	movq	%rax, 7872(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 7864(%rsp)        # 8-byte Spill
	leaq	.L.str9923099, %rax
	movq	%rax, 7856(%rsp)        # 8-byte Spill
	leaq	.L.str9933100, %rax
	movq	%rax, 7848(%rsp)        # 8-byte Spill
	leaq	.L.str9903097, %rax
	movq	%rax, 7840(%rsp)        # 8-byte Spill
	leaq	.L.str9913098, %rax
	movq	%rax, 7832(%rsp)        # 8-byte Spill
	leaq	.L.str9883095, %rax
	movq	%rax, 7824(%rsp)        # 8-byte Spill
	leaq	.L.str9893096, %rax
	movq	%rax, 7816(%rsp)        # 8-byte Spill
	leaq	.L.str9853092, %rax
	movq	%rax, 7808(%rsp)        # 8-byte Spill
	leaq	.L.str9863093, %rax
	movq	%rax, 7800(%rsp)        # 8-byte Spill
	leaq	.L.str9873094, %rax
	movq	%rax, 7792(%rsp)        # 8-byte Spill
	leaq	.L.str9833090, %rax
	movq	%rax, 7784(%rsp)        # 8-byte Spill
	leaq	.L.str9843091, %rax
	movq	%rax, 7776(%rsp)        # 8-byte Spill
	leaq	.L.str9813088, %rax
	movq	%rax, 7768(%rsp)        # 8-byte Spill
	leaq	.L.str9823089, %rax
	movq	%rax, 7760(%rsp)        # 8-byte Spill
	leaq	.L.str9783085, %rax
	movq	%rax, 7752(%rsp)        # 8-byte Spill
	leaq	.L.str9793086, %rax
	movq	%rax, 7744(%rsp)        # 8-byte Spill
	leaq	.L.str9803087, %rax
	movq	%rax, 7736(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7728(%rsp)        # 8-byte Spill
	leaq	.L.str9763083, %rax
	movq	%rax, 7720(%rsp)        # 8-byte Spill
	leaq	.L.str9773084, %rax
	movq	%rax, 7712(%rsp)        # 8-byte Spill
	leaq	.L.str9743081, %rax
	movq	%rax, 7704(%rsp)        # 8-byte Spill
	leaq	.L.str9753082, %rax
	movq	%rax, 7696(%rsp)        # 8-byte Spill
	leaq	.L.str9723079, %rax
	movq	%rax, 7688(%rsp)        # 8-byte Spill
	leaq	.L.str9733080, %rax
	movq	%rax, 7680(%rsp)        # 8-byte Spill
	leaq	.L.str9693076, %rax
	movq	%rax, 7672(%rsp)        # 8-byte Spill
	leaq	.L.str9703077, %rax
	movq	%rax, 7664(%rsp)        # 8-byte Spill
	leaq	.L.str9713078, %rax
	movq	%rax, 7656(%rsp)        # 8-byte Spill
	leaq	.L.str9673074, %rax
	movq	%rax, 7648(%rsp)        # 8-byte Spill
	leaq	.L.str9683075, %rax
	movq	%rax, 7640(%rsp)        # 8-byte Spill
	leaq	.L.str9653072, %rax
	movq	%rax, 7632(%rsp)        # 8-byte Spill
	leaq	.L.str9663073, %rax
	movq	%rax, 7624(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 7616(%rsp)        # 8-byte Spill
	leaq	.L.str9633070, %rax
	movq	%rax, 7608(%rsp)        # 8-byte Spill
	leaq	.L.str9643071, %rax
	movq	%rax, 7600(%rsp)        # 8-byte Spill
	leaq	.L.str9603067, %rax
	movq	%rax, 7592(%rsp)        # 8-byte Spill
	leaq	.L.str9613068, %rax
	movq	%rax, 7584(%rsp)        # 8-byte Spill
	leaq	.L.str9623069, %rax
	movq	%rax, 7576(%rsp)        # 8-byte Spill
	leaq	.L.str9583065, %rax
	movq	%rax, 7568(%rsp)        # 8-byte Spill
	leaq	.L.str9593066, %rax
	movq	%rax, 7560(%rsp)        # 8-byte Spill
	leaq	.L.str9563063, %rax
	movq	%rax, 7552(%rsp)        # 8-byte Spill
	leaq	.L.str9573064, %rax
	movq	%rax, 7544(%rsp)        # 8-byte Spill
	leaq	.L.str9543061, %rax
	movq	%rax, 7536(%rsp)        # 8-byte Spill
	leaq	.L.str9553062, %rax
	movq	%rax, 7528(%rsp)        # 8-byte Spill
	leaq	.L.str9513058, %rax
	movq	%rax, 7520(%rsp)        # 8-byte Spill
	leaq	.L.str9523059, %rax
	movq	%rax, 7512(%rsp)        # 8-byte Spill
	leaq	.L.str9533060, %rax
	movq	%rax, 7504(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	6 153 0                 # kmeans_clustering.c:153:0
.Ltmp294:
	movq	%rax, 7496(%rsp)        # 8-byte Spill
	movq	7616(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7488(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	7520(%rsp), %rax        # 8-byte Reload
	movl	%esi, 7484(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	7512(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 7472(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	7504(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7464(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7496(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7456(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	7484(%rsp), %eax        # 4-byte Reload
	movq	%r9, 7448(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 7440(%rsp)        # 8-byte Spill
	movq	%r14, 7432(%rsp)        # 8-byte Spill
	movq	%r12, 7424(%rsp)        # 8-byte Spill
	movq	%r13, 7416(%rsp)        # 8-byte Spill
	movq	%rbp, 7408(%rsp)        # 8-byte Spill
	movq	%rbx, 7400(%rsp)        # 8-byte Spill
	movq	%r10, 7392(%rsp)        # 8-byte Spill
	movq	%r11, 7384(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movq	7464(%rsp), %r9         # 8-byte Reload
	movq	7528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	7472(%rsp), %rcx        # 8-byte Reload
	movq	7552(%rsp), %r8         # 8-byte Reload
	movq	7464(%rsp), %r9         # 8-byte Reload
	movq	7544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8256(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	8264(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7568(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7976(%rsp), %rdi        # 8-byte Reload
	movq	7592(%rsp), %rsi        # 8-byte Reload
	movq	7584(%rsp), %rdx        # 8-byte Reload
	movq	7576(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	7616(%rsp), %rdx        # 8-byte Reload
	movq	7472(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	8264(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7632(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8264(%rsp), %rcx        # 8-byte Reload
	addq	$-1, %rcx
	movq	8256(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7464(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 7376(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7976(%rsp), %rdi        # 8-byte Reload
	movq	7672(%rsp), %rsi        # 8-byte Reload
	movq	7664(%rsp), %rdx        # 8-byte Reload
	movq	7656(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movl	7484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	7376(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7688(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7680(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7704(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7696(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7376(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9240(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8256(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7368(%rsp)        # 8-byte Spill
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7720(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7976(%rsp), %rdi        # 8-byte Reload
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	7744(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7728(%rsp), %r8         # 8-byte Reload
	movl	7484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	7368(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7768(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9240(%rsp), %rcx        # 8-byte Reload
	movq	8264(%rsp), %rdx        # 8-byte Reload
	movq	-8(%rcx,%rdx,8), %rsi
	movq	8256(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 7360(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	7360(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7976(%rsp), %rdi        # 8-byte Reload
	movq	7808(%rsp), %rsi        # 8-byte Reload
	movq	7800(%rsp), %rdx        # 8-byte Reload
	movq	7792(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movl	7484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	8656(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7816(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	7360(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7840(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8656(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	7360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8256(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7352(%rsp)        # 8-byte Spill
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7856(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7976(%rsp), %rdi        # 8-byte Reload
	movq	7888(%rsp), %rsi        # 8-byte Reload
	movq	7880(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movl	7484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	8264(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7896(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8264(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9240(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8256(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7344(%rsp)        # 8-byte Spill
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7936(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7976(%rsp), %rdi        # 8-byte Reload
	movq	7968(%rsp), %rsi        # 8-byte Reload
	movq	7960(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7944(%rsp), %r8         # 8-byte Reload
	movl	7484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	7344(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7992(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	7352(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	8000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9240(%rsp), %rcx        # 8-byte Reload
	movq	8264(%rsp), %rdx        # 8-byte Reload
	movq	7352(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, (%rcx,%rdx,8)
	.loc	6 152 0                 # kmeans_clustering.c:152:0
	movq	7440(%rsp), %rdi        # 8-byte Reload
	movq	8040(%rsp), %rsi        # 8-byte Reload
	movq	8032(%rsp), %rdx        # 8-byte Reload
	movq	8024(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rdx        # 8-byte Reload
	movq	7472(%rsp), %rcx        # 8-byte Reload
	movq	8056(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	8048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	8264(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	8072(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	8064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8264(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	8256(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7464(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 7336(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	8088(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	8080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7440(%rsp), %rdi        # 8-byte Reload
	movq	8120(%rsp), %rsi        # 8-byte Reload
	movq	8112(%rsp), %rdx        # 8-byte Reload
	movq	8104(%rsp), %rcx        # 8-byte Reload
	movq	8096(%rsp), %r8         # 8-byte Reload
	movl	7484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	8144(%rsp), %rsi        # 8-byte Reload
	movq	7336(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	8136(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	8128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7336(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	8256(%rsp), %rdi        # 8-byte Reload
	movq	8232(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	8160(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	8152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 7332(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7440(%rsp), %rdi        # 8-byte Reload
	movq	8192(%rsp), %rsi        # 8-byte Reload
	movq	8184(%rsp), %rdx        # 8-byte Reload
	movq	8176(%rsp), %rcx        # 8-byte Reload
	movq	8168(%rsp), %r8         # 8-byte Reload
	movl	7484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15972(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	8232(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	8208(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	8200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7332(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	8232(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	8224(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	8216(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7332(%rsp), %eax        # 4-byte Reload
	movl	15972(%rsp), %esi       # 4-byte Reload
	cmpl	%esi, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8256(%rsp), %rdi        # 8-byte Reload
	movq	7464(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	8248(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	8240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7331(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7440(%rsp), %rdi        # 8-byte Reload
	movq	7424(%rsp), %rsi        # 8-byte Reload
	movq	7416(%rsp), %rdx        # 8-byte Reload
	movq	7408(%rsp), %rcx        # 8-byte Reload
	movq	7488(%rsp), %r8         # 8-byte Reload
	movl	7484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7384(%rsp), %rdi        # 8-byte Reload
	movq	7472(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7400(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	7472(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7448(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	7392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7331(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	7464(%rsp), %rsi        # 8-byte Reload
	movq	7464(%rsp), %rcx        # 8-byte Reload
	movq	7456(%rsp), %r8         # 8-byte Reload
	movq	7472(%rsp), %r9         # 8-byte Reload
	movq	8272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7331(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	7336(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8648(%rsp)        # 8-byte Spill
	jne	.LBB7_13
	jmp	.LBB7_14
.Ltmp295:
.LBB7_15:                               # %.backedge
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_21 Depth 2
                                        #     Child Loop BB7_23 Depth 2
                                        #       Child Loop BB7_25 Depth 3
	movl	8284(%rsp), %eax        # 4-byte Reload
	vmovss	8288(%rsp), %xmm0       # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str10823189, %r8
	movabsq	$0, %rdx
	leaq	.L.str10833190, %rsi
	movabsq	$2, %rdi
	leaq	.L.str10803187, %r9
	leaq	.L.str10813188, %r10
	movabsq	$3, %r11
	leaq	.L.str10783185, %rbx
	leaq	.L.str10793186, %r14
	movabsq	$160, %r15
	leaq	.L.str10753182, %r12
	leaq	.L.str10763183, %r13
	leaq	.L.str10773184, %rbp
	movl	%eax, 7324(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 7312(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 7304(%rsp)        # 8-byte Spill
	leaq	.L.str10733180, %rcx
	movq	%rcx, 7296(%rsp)        # 8-byte Spill
	leaq	.L.str10743181, %rcx
	movq	%rcx, 7288(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 7280(%rsp)        # 8-byte Spill
	leaq	.L.str10713178, %rcx
	movq	%rcx, 7272(%rsp)        # 8-byte Spill
	leaq	.L.str10723179, %rcx
	movq	%rcx, 7264(%rsp)        # 8-byte Spill
	leaq	.L.str10693176, %rcx
	movq	%rcx, 7256(%rsp)        # 8-byte Spill
	leaq	.L.str10703177, %rcx
	movq	%rcx, 7248(%rsp)        # 8-byte Spill
	leaq	.L.str10663173, %rcx
	movq	%rcx, 7240(%rsp)        # 8-byte Spill
	leaq	.L.str10673174, %rcx
	movq	%rcx, 7232(%rsp)        # 8-byte Spill
	leaq	.L.str10683175, %rcx
	movq	%rcx, 7224(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 7216(%rsp)        # 8-byte Spill
	leaq	.L.str10643171, %rcx
	movq	%rcx, 7208(%rsp)        # 8-byte Spill
	leaq	.L.str10653172, %rcx
	movq	%rcx, 7200(%rsp)        # 8-byte Spill
	leaq	.L.str10623169, %rcx
	movq	%rcx, 7192(%rsp)        # 8-byte Spill
	leaq	.L.str10633170, %rcx
	movq	%rcx, 7184(%rsp)        # 8-byte Spill
	leaq	.L.str10603167, %rcx
	movq	%rcx, 7176(%rsp)        # 8-byte Spill
	leaq	.L.str10613168, %rcx
	movq	%rcx, 7168(%rsp)        # 8-byte Spill
	leaq	.L.str10583165, %rcx
	movq	%rcx, 7160(%rsp)        # 8-byte Spill
	leaq	.L.str10593166, %rcx
	movq	%rcx, 7152(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 7144(%rsp)        # 8-byte Spill
	leaq	.L.str10553162, %rcx
	movq	%rcx, 7136(%rsp)        # 8-byte Spill
	leaq	.L.str10563163, %rcx
	movq	%rcx, 7128(%rsp)        # 8-byte Spill
	leaq	.L.str10573164, %rcx
	movq	%rcx, 7120(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 7112(%rsp)        # 8-byte Spill
	leaq	.L.str10533160, %rcx
	movq	%rcx, 7104(%rsp)        # 8-byte Spill
	leaq	.L.str10543161, %rcx
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rcx, 7096(%rsp)        # 8-byte Spill
	leaq	.L.str10513158, %rcx
	movq	%rcx, 7088(%rsp)        # 8-byte Spill
	leaq	.L.str10523159, %rcx
	movq	%rcx, 7080(%rsp)        # 8-byte Spill
	leaq	.L.str10493156, %rcx
	movq	%rcx, 7072(%rsp)        # 8-byte Spill
	leaq	.L.str10503157, %rcx
	movq	%rcx, 7064(%rsp)        # 8-byte Spill
	leaq	.L.str10473154, %rcx
	movq	%rcx, 7056(%rsp)        # 8-byte Spill
	leaq	.L.str10483155, %rcx
	movq	%rcx, 7048(%rsp)        # 8-byte Spill
	leaq	.L.str10443151, %rcx
	movq	%rcx, 7040(%rsp)        # 8-byte Spill
	leaq	.L.str10453152, %rcx
	movq	%rcx, 7032(%rsp)        # 8-byte Spill
	leaq	.L.str10463153, %rcx
	.loc	6 160 0                 # kmeans_clustering.c:160:0
.Ltmp296:
	movq	%rcx, 7024(%rsp)        # 8-byte Spill
	movq	7144(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 7016(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	7040(%rsp), %rcx        # 8-byte Reload
	movq	%rsi, 7008(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	7032(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 7000(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 6992(%rsp)         # 8-byte Spill
	movq	7112(%rsp), %r8         # 8-byte Reload
	movq	%r9, 6984(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 6980(%rsp)        # 4-byte Spill
	vmovss	%xmm0, 6976(%rsp)       # 4-byte Spill
	movq	%r12, 6968(%rsp)        # 8-byte Spill
	movq	%r15, 6960(%rsp)        # 8-byte Spill
	movq	%r13, 6952(%rsp)        # 8-byte Spill
	movq	%rbp, 6944(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 6936(%rsp)       # 8-byte Spill
	movq	%r14, 6928(%rsp)        # 8-byte Spill
	movq	%r10, 6920(%rsp)        # 8-byte Spill
	movq	%r11, 6912(%rsp)        # 8-byte Spill
	movq	%rbx, 6904(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6912(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	6936(%rsp), %xmm0       # 8-byte Reload
	movq	7000(%rsp), %rdx        # 8-byte Reload
	movq	7056(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %r8         # 8-byte Reload
	movq	7048(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7016(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	movq	7000(%rsp), %rdx        # 8-byte Reload
	movq	7312(%rsp), %rcx        # 8-byte Reload
	movq	7072(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	movq	7064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7312(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	6936(%rsp), %xmm0       # 8-byte Reload
	movq	7000(%rsp), %rdx        # 8-byte Reload
	movq	7088(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %r8         # 8-byte Reload
	movq	7080(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	6976(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	7304(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	movq	7312(%rsp), %rdx        # 8-byte Reload
	movq	7104(%rsp), %rcx        # 8-byte Reload
	movq	7000(%rsp), %r8         # 8-byte Reload
	movq	7096(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7144(%rsp), %rdi        # 8-byte Reload
	movq	7136(%rsp), %rsi        # 8-byte Reload
	movq	7128(%rsp), %rdx        # 8-byte Reload
	movq	7120(%rsp), %rcx        # 8-byte Reload
	movq	7112(%rsp), %r8         # 8-byte Reload
	movl	6980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6912(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	movq	7000(%rsp), %rdx        # 8-byte Reload
	movq	7000(%rsp), %rcx        # 8-byte Reload
	movq	7160(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	movq	7152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7016(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	movq	7000(%rsp), %rdx        # 8-byte Reload
	movq	7312(%rsp), %rcx        # 8-byte Reload
	movq	7176(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	movq	7168(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7312(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	movq	7000(%rsp), %rdx        # 8-byte Reload
	movq	7000(%rsp), %rcx        # 8-byte Reload
	movq	7192(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	movq	7184(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7324(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7304(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	movq	7312(%rsp), %rcx        # 8-byte Reload
	movq	7208(%rsp), %r8         # 8-byte Reload
	movq	7000(%rsp), %r9         # 8-byte Reload
	movq	7200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6960(%rsp), %rdi        # 8-byte Reload
	movq	7240(%rsp), %rsi        # 8-byte Reload
	movq	7232(%rsp), %rdx        # 8-byte Reload
	movq	7224(%rsp), %rcx        # 8-byte Reload
	movq	7216(%rsp), %r8         # 8-byte Reload
	movl	6980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15864(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	7016(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	movq	7312(%rsp), %rcx        # 8-byte Reload
	movq	7256(%rsp), %r8         # 8-byte Reload
	movq	7000(%rsp), %r9         # 8-byte Reload
	movq	7248(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7324(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7312(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	movq	7312(%rsp), %rcx        # 8-byte Reload
	movq	7272(%rsp), %r8         # 8-byte Reload
	movq	7000(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7324(%rsp), %eax        # 4-byte Reload
	movl	15864(%rsp), %esi       # 4-byte Reload
	cmpl	%esi, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	7304(%rsp), %rdi        # 8-byte Reload
	movq	7312(%rsp), %rsi        # 8-byte Reload
	movq	7312(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7000(%rsp), %r9         # 8-byte Reload
	movq	7288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6903(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6960(%rsp), %rdi        # 8-byte Reload
	movq	6968(%rsp), %rsi        # 8-byte Reload
	movq	6952(%rsp), %rdx        # 8-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movq	7016(%rsp), %r8         # 8-byte Reload
	movl	6980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6912(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7000(%rsp), %rdx        # 8-byte Reload
	movq	7312(%rsp), %rcx        # 8-byte Reload
	movq	6904(%rsp), %r8         # 8-byte Reload
	movq	7000(%rsp), %r9         # 8-byte Reload
	movq	6928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7016(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7000(%rsp), %rdx        # 8-byte Reload
	movq	7312(%rsp), %rcx        # 8-byte Reload
	movq	6984(%rsp), %r8         # 8-byte Reload
	movq	7000(%rsp), %r9         # 8-byte Reload
	movq	6920(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6903(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	7312(%rsp), %rdi        # 8-byte Reload
	movq	7312(%rsp), %rsi        # 8-byte Reload
	movq	7312(%rsp), %rcx        # 8-byte Reload
	movq	6992(%rsp), %r8         # 8-byte Reload
	movq	7000(%rsp), %r9         # 8-byte Reload
	movq	7008(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6903(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB7_17
.Ltmp297:
# BB#16:                                # %.preheader2
                                        #   in Loop: Header=BB7_15 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str10913198, %r8
	leaq	.L.str10923199, %rdx
	movabsq	$2, %rsi
	leaq	.L.str10893196, %rdi
	leaq	.L.str10903197, %r9
	movabsq	$3, %r10
	leaq	.L.str10873194, %r11
	leaq	.L.str10883195, %rbx
	movabsq	$177, %r14
	leaq	.L.str10843191, %r15
	leaq	.L.str10853192, %r12
	leaq	.L.str10863193, %r13
	movl	$1, %ebp
	.loc	6 177 0                 # kmeans_clustering.c:177:0
.Ltmp298:
	movq	%rdi, 6888(%rsp)        # 8-byte Spill
	movq	%r14, %rdi
	movq	%rsi, 6880(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 6872(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	%rcx, 6864(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	6880(%rsp), %r14        # 8-byte Reload
	movq	%r8, 6856(%rsp)         # 8-byte Spill
	movq	%r14, %r8
	movq	%r9, 6848(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 6840(%rsp)        # 8-byte Spill
	movq	%r10, 6832(%rsp)        # 8-byte Spill
	movq	%rbx, 6824(%rsp)        # 8-byte Spill
	movq	%r11, 6816(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6832(%rsp), %rdi        # 8-byte Reload
	movq	6840(%rsp), %rsi        # 8-byte Reload
	movq	6840(%rsp), %rdx        # 8-byte Reload
	movq	6864(%rsp), %rcx        # 8-byte Reload
	movq	6816(%rsp), %r8         # 8-byte Reload
	movq	6840(%rsp), %r9         # 8-byte Reload
	movq	6824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6880(%rsp), %rdi        # 8-byte Reload
	movq	6840(%rsp), %rsi        # 8-byte Reload
	movq	6840(%rsp), %rdx        # 8-byte Reload
	movq	6864(%rsp), %rcx        # 8-byte Reload
	movq	6888(%rsp), %r8         # 8-byte Reload
	movq	6840(%rsp), %r9         # 8-byte Reload
	movq	6848(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8294(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6864(%rsp), %rdi        # 8-byte Reload
	movq	6864(%rsp), %rsi        # 8-byte Reload
	movq	6864(%rsp), %rcx        # 8-byte Reload
	movq	6856(%rsp), %r8         # 8-byte Reload
	movq	6840(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8294(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6840(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 6808(%rsp)        # 8-byte Spill
	jne	.LBB7_23
	jmp	.LBB7_29
.Ltmp299:
.LBB7_17:                               #   in Loop: Header=BB7_15 Depth=1
	movabsq	$24601, %rax            # imm = 0x6019
	movabsq	$32, %rcx
	movabsq	$1, %rdx
	leaq	.L.str11353242, %r8
	movabsq	$0, %rsi
	leaq	.L.str11363243, %rdi
	movabsq	$4, %r9
	leaq	.L.str11333240, %r10
	leaq	.L.str11343241, %r11
	movabsq	$64, %rbx
	leaq	.L.str11313238, %r14
	leaq	.L.str11323239, %r15
	movabsq	$3, %r12
	leaq	.L.str11293236, %r13
	leaq	.L.str11303237, %rbp
	movq	%rax, 6800(%rsp)        # 8-byte Spill
	leaq	.L.str11273234, %rax
	movq	%rax, 6792(%rsp)        # 8-byte Spill
	leaq	.L.str11283235, %rax
	movq	%rax, 6784(%rsp)        # 8-byte Spill
	movabsq	$2, %rax
	movq	%rax, 6776(%rsp)        # 8-byte Spill
	leaq	.L.str11253232, %rax
	movq	%rax, 6768(%rsp)        # 8-byte Spill
	leaq	.L.str11263233, %rax
	movq	%rax, 6760(%rsp)        # 8-byte Spill
	leaq	.L.str11233230, %rax
	movq	%rax, 6752(%rsp)        # 8-byte Spill
	leaq	.L.str11243231, %rax
	movq	%rax, 6744(%rsp)        # 8-byte Spill
	leaq	.L.str11213228, %rax
	movq	%rax, 6736(%rsp)        # 8-byte Spill
	leaq	.L.str11223229, %rax
	movq	%rax, 6728(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 6720(%rsp)        # 8-byte Spill
	leaq	find_nearest_point, %rax
	movq	%rax, 6712(%rsp)        # 8-byte Spill
	leaq	.L.str11193226, %rax
	movq	%rax, 6704(%rsp)        # 8-byte Spill
	leaq	.L.str11203227, %rax
	movq	%rax, 6696(%rsp)        # 8-byte Spill
	movabsq	$162, %rax
	movq	%rax, 6688(%rsp)        # 8-byte Spill
	leaq	.L.str11163223, %rax
	movq	%rax, 6680(%rsp)        # 8-byte Spill
	leaq	.L.str11173224, %rax
	movq	%rax, 6672(%rsp)        # 8-byte Spill
	leaq	.L.str11183225, %rax
	movq	%rax, 6664(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 6656(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 6648(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 6640(%rsp)        # 8-byte Spill
	leaq	.L.str11143221, %rax
	movq	%rax, 6632(%rsp)        # 8-byte Spill
	leaq	.L.str11153222, %rax
	movq	%rax, 6624(%rsp)        # 8-byte Spill
	leaq	.L.str11123219, %rax
	movq	%rax, 6616(%rsp)        # 8-byte Spill
	leaq	.L.str11133220, %rax
	movq	%rax, 6608(%rsp)        # 8-byte Spill
	leaq	.L.str11093216, %rax
	movq	%rax, 6600(%rsp)        # 8-byte Spill
	leaq	.L.str11103217, %rax
	movq	%rax, 6592(%rsp)        # 8-byte Spill
	leaq	.L.str11113218, %rax
	movq	%rax, 6584(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 6576(%rsp)        # 8-byte Spill
	leaq	.L.str11073214, %rax
	movq	%rax, 6568(%rsp)        # 8-byte Spill
	leaq	.L.str11083215, %rax
	movq	%rax, 6560(%rsp)        # 8-byte Spill
	leaq	.L.str11053212, %rax
	movq	%rax, 6552(%rsp)        # 8-byte Spill
	leaq	.L.str11063213, %rax
	movq	%rax, 6544(%rsp)        # 8-byte Spill
	leaq	.L.str11033210, %rax
	movq	%rax, 6536(%rsp)        # 8-byte Spill
	leaq	.L.str11043211, %rax
	movq	%rax, 6528(%rsp)        # 8-byte Spill
	leaq	.L.str11003207, %rax
	movq	%rax, 6520(%rsp)        # 8-byte Spill
	leaq	.L.str11013208, %rax
	movq	%rax, 6512(%rsp)        # 8-byte Spill
	leaq	.L.str11023209, %rax
	movq	%rax, 6504(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 6496(%rsp)        # 8-byte Spill
	leaq	.L.str10983205, %rax
	movq	%rax, 6488(%rsp)        # 8-byte Spill
	leaq	.L.str10993206, %rax
	movq	%rax, 6480(%rsp)        # 8-byte Spill
	leaq	.L.str10963203, %rax
	movq	%rax, 6472(%rsp)        # 8-byte Spill
	leaq	.L.str10973204, %rax
	movq	%rax, 6464(%rsp)        # 8-byte Spill
	leaq	.L.str10933200, %rax
	movq	%rax, 6456(%rsp)        # 8-byte Spill
	leaq	.L.str10943201, %rax
	movq	%rax, 6448(%rsp)        # 8-byte Spill
	leaq	.L.str10953202, %rax
	movq	%rax, 6440(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	.loc	6 162 0                 # kmeans_clustering.c:162:0
.Ltmp300:
	movq	%rax, 6432(%rsp)        # 8-byte Spill
	movq	6688(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6424(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	6456(%rsp), %rax        # 8-byte Reload
	movl	%esi, 6420(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	6448(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 6408(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	6440(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6400(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6392(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	6420(%rsp), %eax        # 4-byte Reload
	movq	%r9, 6384(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 6376(%rsp)        # 8-byte Spill
	movq	%r12, 6368(%rsp)        # 8-byte Spill
	movq	%r14, 6360(%rsp)        # 8-byte Spill
	movq	%r13, 6352(%rsp)        # 8-byte Spill
	movq	%rbp, 6344(%rsp)        # 8-byte Spill
	movq	%rbx, 6336(%rsp)        # 8-byte Spill
	movq	%r10, 6328(%rsp)        # 8-byte Spill
	movq	%r11, 6320(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	7324(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6472(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7324(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	6640(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6408(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 6312(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	6488(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6480(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6688(%rsp), %rdi        # 8-byte Reload
	movq	6520(%rsp), %rsi        # 8-byte Reload
	movq	6512(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6496(%rsp), %r8         # 8-byte Reload
	movl	6420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %rsi        # 8-byte Reload
	movq	6312(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6536(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %rsi        # 8-byte Reload
	movq	15872(%rsp), %rdx       # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6312(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	15872(%rsp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	movq	6640(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 6304(%rsp)        # 8-byte Spill
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6688(%rsp), %rdi        # 8-byte Reload
	movq	6600(%rsp), %rsi        # 8-byte Reload
	movq	6592(%rsp), %rdx        # 8-byte Reload
	movq	6584(%rsp), %rcx        # 8-byte Reload
	movq	6576(%rsp), %r8         # 8-byte Reload
	movl	6420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %rsi        # 8-byte Reload
	movq	6304(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	15872(%rsp), %rcx       # 8-byte Reload
	movq	6312(%rsp), %rdx        # 8-byte Reload
	movq	(%rcx,%rdx,8), %rsi
	movq	6640(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 6296(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	6296(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6632(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6688(%rsp), %rdi        # 8-byte Reload
	movq	6680(%rsp), %rsi        # 8-byte Reload
	movq	6672(%rsp), %rdx        # 8-byte Reload
	movq	6664(%rsp), %rcx        # 8-byte Reload
	movq	6648(%rsp), %r8         # 8-byte Reload
	movl	6420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6720(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %rsi        # 8-byte Reload
	movq	6712(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6704(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6696(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %rsi        # 8-byte Reload
	movq	6296(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6736(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6728(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %rsi        # 8-byte Reload
	movq	6296(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6752(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15868(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6768(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15868(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6792(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6784(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %rsi        # 8-byte Reload
	movq	14496(%rsp), %rdx       # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6352(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6344(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	6336(%rsp), %rsi        # 8-byte Reload
	movq	14496(%rsp), %rdx       # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6360(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6376(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	6384(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6328(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6320(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	15972(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	6800(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6392(%rsp), %r8         # 8-byte Reload
	movq	6656(%rsp), %r9         # 8-byte Reload
	movq	6424(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6296(%rsp), %rdi        # 8-byte Reload
	movl	15868(%rsp), %esi       # 4-byte Reload
	movq	14496(%rsp), %rdx       # 8-byte Reload
	movl	15972(%rsp), %ecx       # 4-byte Reload
	callq	find_nearest_point
	movabsq	$1, %rdx
	leaq	.L.str11713278, %r8
	movabsq	$0, %rdi
	leaq	.L.str11723279, %r9
	movabsq	$2, %r10
	leaq	.L.str11693276, %r11
	leaq	.L.str11703277, %rbx
	movabsq	$3, %r14
	leaq	.L.str11673274, %r15
	leaq	.L.str11683275, %r12
	movabsq	$164, %r13
	leaq	.L.str11643271, %rsi
	leaq	.L.str11653272, %rbp
	leaq	.L.str11663273, %rcx
	movl	%eax, 6292(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 6280(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 6272(%rsp)        # 8-byte Spill
	leaq	.L.str11623269, %rcx
	movq	%rcx, 6264(%rsp)        # 8-byte Spill
	leaq	.L.str11633270, %rcx
	movq	%rcx, 6256(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 6248(%rsp)        # 8-byte Spill
	leaq	.L.str11603267, %rcx
	movq	%rcx, 6240(%rsp)        # 8-byte Spill
	leaq	.L.str11613268, %rcx
	movq	%rcx, 6232(%rsp)        # 8-byte Spill
	leaq	.L.str11583265, %rcx
	movq	%rcx, 6224(%rsp)        # 8-byte Spill
	leaq	.L.str11593266, %rcx
	movq	%rcx, 6216(%rsp)        # 8-byte Spill
	leaq	.L.str11553262, %rcx
	movq	%rcx, 6208(%rsp)        # 8-byte Spill
	leaq	.L.str11563263, %rcx
	movq	%rcx, 6200(%rsp)        # 8-byte Spill
	leaq	.L.str11573264, %rcx
	movq	%rcx, 6192(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 6184(%rsp)        # 8-byte Spill
	leaq	.L.str11533260, %rcx
	movq	%rcx, 6176(%rsp)        # 8-byte Spill
	leaq	.L.str11543261, %rcx
	movq	%rcx, 6168(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6160(%rsp)        # 8-byte Spill
	leaq	.L.str11513258, %rcx
	movq	%rcx, 6152(%rsp)        # 8-byte Spill
	leaq	.L.str11523259, %rcx
	movq	%rcx, 6144(%rsp)        # 8-byte Spill
	leaq	.L.str11483255, %rcx
	movq	%rcx, 6136(%rsp)        # 8-byte Spill
	leaq	.L.str11493256, %rcx
	movq	%rcx, 6128(%rsp)        # 8-byte Spill
	leaq	.L.str11503257, %rcx
	movq	%rcx, 6120(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 6112(%rsp)        # 8-byte Spill
	leaq	.L.str11463253, %rcx
	movq	%rcx, 6104(%rsp)        # 8-byte Spill
	leaq	.L.str11473254, %rcx
	movq	%rcx, 6096(%rsp)        # 8-byte Spill
	leaq	.L.str11443251, %rcx
	movq	%rcx, 6088(%rsp)        # 8-byte Spill
	leaq	.L.str11453252, %rcx
	movq	%rcx, 6080(%rsp)        # 8-byte Spill
	leaq	.L.str11423249, %rcx
	movq	%rcx, 6072(%rsp)        # 8-byte Spill
	leaq	.L.str11433250, %rcx
	movq	%rcx, 6064(%rsp)        # 8-byte Spill
	leaq	.L.str11393246, %rcx
	movq	%rcx, 6056(%rsp)        # 8-byte Spill
	leaq	.L.str11403247, %rcx
	movq	%rcx, 6048(%rsp)        # 8-byte Spill
	leaq	.L.str11413248, %rcx
	movq	%rcx, 6040(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 6032(%rsp)        # 8-byte Spill
	leaq	.L.str11373244, %rcx
	movq	%rcx, 6024(%rsp)        # 8-byte Spill
	leaq	.L.str11383245, %rcx
	movl	%eax, 6020(%rsp)        # 4-byte Spill
	movl	6292(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 6008(%rsp)        # 8-byte Spill
	movq	6272(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6000(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	6248(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 5992(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	6008(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 5984(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	5984(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5976(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6024(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5968(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%r9, 5960(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	5976(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, 5952(%rsp)        # 8-byte Spill
	movq	%rbp, 5944(%rsp)        # 8-byte Spill
	movq	%r12, 5936(%rsp)        # 8-byte Spill
	movq	%r15, 5928(%rsp)        # 8-byte Spill
	movq	%r10, 5920(%rsp)        # 8-byte Spill
	movq	%r11, 5912(%rsp)        # 8-byte Spill
	movq	%rbx, 5904(%rsp)        # 8-byte Spill
	movq	%r14, 5896(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp301:
	#DEBUG_VALUE: kmeans_clustering:index <- [RSP+6292]
	.loc	6 164 0                 # kmeans_clustering.c:164:0
	movq	5952(%rsp), %rdi        # 8-byte Reload
	movq	6056(%rsp), %rsi        # 8-byte Reload
	movq	6048(%rsp), %rdx        # 8-byte Reload
	movq	6040(%rsp), %rcx        # 8-byte Reload
	movq	6032(%rsp), %r8         # 8-byte Reload
	movl	6020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5920(%rsp), %rdi        # 8-byte Reload
	movq	6160(%rsp), %rsi        # 8-byte Reload
	movq	6312(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	6064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5984(%rsp), %rdi        # 8-byte Reload
	movq	6160(%rsp), %rsi        # 8-byte Reload
	movq	15848(%rsp), %rdx       # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6088(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	6080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6312(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	15848(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6272(%rsp), %rdi        # 8-byte Reload
	movq	6160(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5984(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5888(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6104(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	6096(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5952(%rsp), %rdi        # 8-byte Reload
	movq	6136(%rsp), %rsi        # 8-byte Reload
	movq	6128(%rsp), %rdx        # 8-byte Reload
	movq	6120(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movl	6020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5984(%rsp), %rdi        # 8-byte Reload
	movq	6160(%rsp), %rsi        # 8-byte Reload
	movq	5888(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6152(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	6144(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	15848(%rsp), %rax       # 8-byte Reload
	movq	6312(%rsp), %rcx        # 8-byte Reload
	movl	(%rax,%rcx,4), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	6272(%rsp), %rdi        # 8-byte Reload
	movq	6248(%rsp), %r8         # 8-byte Reload
	movl	%esi, 5884(%rsp)        # 4-byte Spill
	movq	%r8, %rsi
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6176(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	6168(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5952(%rsp), %rdi        # 8-byte Reload
	movq	6208(%rsp), %rsi        # 8-byte Reload
	movq	6200(%rsp), %rdx        # 8-byte Reload
	movq	6192(%rsp), %rcx        # 8-byte Reload
	movq	6184(%rsp), %r8         # 8-byte Reload
	movl	6020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	6292(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	5920(%rsp), %rdi        # 8-byte Reload
	movq	6248(%rsp), %rsi        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6224(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	6216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5884(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	5984(%rsp), %rdi        # 8-byte Reload
	movq	6248(%rsp), %rsi        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6240(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	6232(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5884(%rsp), %esi        # 4-byte Reload
	movl	6292(%rsp), %edi        # 4-byte Reload
	cmpl	%edi, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6272(%rsp), %rdi        # 8-byte Reload
	movq	5984(%rsp), %rsi        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	6256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5883(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5952(%rsp), %rdi        # 8-byte Reload
	movq	5992(%rsp), %rsi        # 8-byte Reload
	movq	5944(%rsp), %rdx        # 8-byte Reload
	movq	6280(%rsp), %rcx        # 8-byte Reload
	movq	5920(%rsp), %r8         # 8-byte Reload
	movl	6020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	6000(%rsp), %rsi        # 8-byte Reload
	movq	6000(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5928(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	5936(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5920(%rsp), %rdi        # 8-byte Reload
	movq	6000(%rsp), %rsi        # 8-byte Reload
	movq	6000(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5912(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	5904(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5883(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	5984(%rsp), %rdi        # 8-byte Reload
	movq	5984(%rsp), %rsi        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5968(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	movq	5960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5883(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovss	6976(%rsp), %xmm0       # 4-byte Reload
	vmovss	%xmm0, 5876(%rsp)       # 4-byte Spill
	jne	.LBB7_19
.Ltmp302:
# BB#18:                                #   in Loop: Header=BB7_15 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str11853292, %r8
	leaq	.L.str11863293, %rdx
	movabsq	$164, %rsi
	leaq	.L.str11823289, %rdi
	leaq	.L.str11833290, %r9
	leaq	.L.str11843291, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str11803287, %r12
	leaq	.L.str11813288, %r13
	vmovss	.LCPI7_0, %xmm0
	leaq	.L.str11783285, %rbp
	movq	%rax, 5864(%rsp)        # 8-byte Spill
	leaq	.L.str11793286, %rax
	vmovsd	.LCPI7_1, %xmm1
	movq	%rax, 5856(%rsp)        # 8-byte Spill
	leaq	.L.str11763283, %rax
	movq	%rax, 5848(%rsp)        # 8-byte Spill
	leaq	.L.str11773284, %rax
	movq	%rax, 5840(%rsp)        # 8-byte Spill
	leaq	.L.str11733280, %rax
	movq	%rax, 5832(%rsp)        # 8-byte Spill
	leaq	.L.str11743281, %rax
	movq	%rax, 5824(%rsp)        # 8-byte Spill
	leaq	.L.str11753282, %rax
	movq	%rax, 5816(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rdi, 5808(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 5800(%rsp)        # 8-byte Spill
	movq	5832(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 5792(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	5824(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 5784(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	5816(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5776(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5800(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5768(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5760(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r13, 5752(%rsp)        # 8-byte Spill
	movq	%r12, 5744(%rsp)        # 8-byte Spill
	vmovss	%xmm0, 5740(%rsp)       # 4-byte Spill
	movq	%rbp, 5728(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 5720(%rsp)       # 8-byte Spill
	movq	%r15, 5712(%rsp)        # 8-byte Spill
	movq	%r10, 5704(%rsp)        # 8-byte Spill
	movq	%r11, 5696(%rsp)        # 8-byte Spill
	movl	%ebx, 5692(%rsp)        # 4-byte Spill
	movq	%r14, 5680(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5696(%rsp), %rdi        # 8-byte Reload
	movq	5712(%rsp), %rsi        # 8-byte Reload
	vmovsd	5720(%rsp), %xmm0       # 8-byte Reload
	movq	5776(%rsp), %rdx        # 8-byte Reload
	movq	5848(%rsp), %rcx        # 8-byte Reload
	movq	5776(%rsp), %r8         # 8-byte Reload
	movq	5840(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	6976(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	5712(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	5728(%rsp), %rcx        # 8-byte Reload
	movq	5776(%rsp), %r8         # 8-byte Reload
	movq	5856(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	6976(%rsp), %xmm0       # 4-byte Reload
	vmovss	5740(%rsp), %xmm1       # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	5680(%rsp), %rdi        # 8-byte Reload
	movq	5712(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	5744(%rsp), %rcx        # 8-byte Reload
	movq	5776(%rsp), %r8         # 8-byte Reload
	movq	5752(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 5676(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
.Ltmp303:
	#DEBUG_VALUE: kmeans_clustering:delta <- [RSP+5676]
	movq	5792(%rsp), %rdi        # 8-byte Reload
	movq	5808(%rsp), %rsi        # 8-byte Reload
	movq	5760(%rsp), %rdx        # 8-byte Reload
	movq	5704(%rsp), %rcx        # 8-byte Reload
	movq	5696(%rsp), %r8         # 8-byte Reload
	movl	5692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5864(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5776(%rsp), %rdx        # 8-byte Reload
	movq	5864(%rsp), %rcx        # 8-byte Reload
	movq	5768(%rsp), %r8         # 8-byte Reload
	movq	5776(%rsp), %r9         # 8-byte Reload
	movq	5784(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovss	5676(%rsp), %xmm0       # 4-byte Reload
	vmovss	%xmm0, 5876(%rsp)       # 4-byte Spill
.Ltmp304:
.LBB7_19:                               #   in Loop: Header=BB7_15 Depth=1
	vmovss	5876(%rsp), %xmm0       # 4-byte Reload
	movabsq	$1, %rax
	leaq	.L.str12493356, %r8
	movabsq	$0, %rcx
	leaq	.L.str12503357, %rdx
	movabsq	$2, %rsi
	leaq	.L.str12473354, %rdi
	leaq	.L.str12483355, %r9
	movabsq	$3, %r10
	leaq	.L.str12453352, %r11
	leaq	.L.str12463353, %rbx
	movabsq	$171, %r14
	leaq	.L.str12423349, %r15
	leaq	.L.str12433350, %r12
	leaq	.L.str12443351, %r13
	movl	$1, %ebp
	movq	%rax, 5664(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5656(%rsp)        # 8-byte Spill
	leaq	.L.str12403347, %rax
	movq	%rax, 5648(%rsp)        # 8-byte Spill
	leaq	.L.str12413348, %rax
	movq	%rax, 5640(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5632(%rsp)        # 8-byte Spill
	leaq	.L.str12383345, %rax
	movq	%rax, 5624(%rsp)        # 8-byte Spill
	leaq	.L.str12393346, %rax
	movq	%rax, 5616(%rsp)        # 8-byte Spill
	movabsq	$170, %rax
	movq	%rax, 5608(%rsp)        # 8-byte Spill
	leaq	.L.str12353342, %rax
	movq	%rax, 5600(%rsp)        # 8-byte Spill
	leaq	.L.str12363343, %rax
	movq	%rax, 5592(%rsp)        # 8-byte Spill
	leaq	.L.str12373344, %rax
	movq	%rax, 5584(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 5576(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 5568(%rsp)        # 8-byte Spill
	leaq	.L.str12333340, %rax
	movq	%rax, 5560(%rsp)        # 8-byte Spill
	leaq	.L.str12343341, %rax
	movq	%rax, 5552(%rsp)        # 8-byte Spill
	leaq	.L.str12313338, %rax
	movq	%rax, 5544(%rsp)        # 8-byte Spill
	leaq	.L.str12323339, %rax
	movq	%rax, 5536(%rsp)        # 8-byte Spill
	leaq	.L.str12293336, %rax
	movq	%rax, 5528(%rsp)        # 8-byte Spill
	leaq	.L.str12303337, %rax
	movq	%rax, 5520(%rsp)        # 8-byte Spill
	leaq	.L.str12263333, %rax
	movq	%rax, 5512(%rsp)        # 8-byte Spill
	leaq	.L.str12273334, %rax
	movq	%rax, 5504(%rsp)        # 8-byte Spill
	leaq	.L.str12283335, %rax
	movq	%rax, 5496(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 5488(%rsp)        # 8-byte Spill
	leaq	.L.str12243331, %rax
	movq	%rax, 5480(%rsp)        # 8-byte Spill
	leaq	.L.str12253332, %rax
	movq	%rax, 5472(%rsp)        # 8-byte Spill
	leaq	.L.str12223329, %rax
	movq	%rax, 5464(%rsp)        # 8-byte Spill
	leaq	.L.str12233330, %rax
	movq	%rax, 5456(%rsp)        # 8-byte Spill
	leaq	.L.str12193326, %rax
	movq	%rax, 5448(%rsp)        # 8-byte Spill
	leaq	.L.str12203327, %rax
	movq	%rax, 5440(%rsp)        # 8-byte Spill
	leaq	.L.str12213328, %rax
	movq	%rax, 5432(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 5424(%rsp)        # 8-byte Spill
	leaq	.L.str12173324, %rax
	movq	%rax, 5416(%rsp)        # 8-byte Spill
	leaq	.L.str12183325, %rax
	movq	%rax, 5408(%rsp)        # 8-byte Spill
	leaq	.L.str12153322, %rax
	movq	%rax, 5400(%rsp)        # 8-byte Spill
	leaq	.L.str12163323, %rax
	movq	%rax, 5392(%rsp)        # 8-byte Spill
	leaq	.L.str12133320, %rax
	movq	%rax, 5384(%rsp)        # 8-byte Spill
	leaq	.L.str12143321, %rax
	movq	%rax, 5376(%rsp)        # 8-byte Spill
	leaq	.L.str12103317, %rax
	movq	%rax, 5368(%rsp)        # 8-byte Spill
	leaq	.L.str12113318, %rax
	movq	%rax, 5360(%rsp)        # 8-byte Spill
	leaq	.L.str12123319, %rax
	movq	%rax, 5352(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 5344(%rsp)        # 8-byte Spill
	leaq	.L.str12083315, %rax
	movq	%rax, 5336(%rsp)        # 8-byte Spill
	leaq	.L.str12093316, %rax
	movq	%rax, 5328(%rsp)        # 8-byte Spill
	leaq	.L.str12063313, %rax
	movq	%rax, 5320(%rsp)        # 8-byte Spill
	leaq	.L.str12073314, %rax
	movq	%rax, 5312(%rsp)        # 8-byte Spill
	leaq	.L.str12033310, %rax
	movq	%rax, 5304(%rsp)        # 8-byte Spill
	leaq	.L.str12043311, %rax
	movq	%rax, 5296(%rsp)        # 8-byte Spill
	leaq	.L.str12053312, %rax
	movq	%rax, 5288(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 5280(%rsp)        # 8-byte Spill
	leaq	.L.str12013308, %rax
	movq	%rax, 5272(%rsp)        # 8-byte Spill
	leaq	.L.str12023309, %rax
	movq	%rax, 5264(%rsp)        # 8-byte Spill
	leaq	.L.str11993306, %rax
	movq	%rax, 5256(%rsp)        # 8-byte Spill
	leaq	.L.str12003307, %rax
	movq	%rax, 5248(%rsp)        # 8-byte Spill
	movabsq	$167, %rax
	movq	%rax, 5240(%rsp)        # 8-byte Spill
	leaq	.L.str11963303, %rax
	movq	%rax, 5232(%rsp)        # 8-byte Spill
	leaq	.L.str11973304, %rax
	movq	%rax, 5224(%rsp)        # 8-byte Spill
	leaq	.L.str11983305, %rax
	movq	%rax, 5216(%rsp)        # 8-byte Spill
	leaq	.L.str11943301, %rax
	movq	%rax, 5208(%rsp)        # 8-byte Spill
	leaq	.L.str11953302, %rax
	movq	%rax, 5200(%rsp)        # 8-byte Spill
	leaq	.L.str11923299, %rax
	movq	%rax, 5192(%rsp)        # 8-byte Spill
	leaq	.L.str11933300, %rax
	movq	%rax, 5184(%rsp)        # 8-byte Spill
	leaq	.L.str11903297, %rax
	movq	%rax, 5176(%rsp)        # 8-byte Spill
	leaq	.L.str11913298, %rax
	movq	%rax, 5168(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 5160(%rsp)        # 8-byte Spill
	leaq	.L.str11873294, %rax
	movq	%rax, 5152(%rsp)        # 8-byte Spill
	leaq	.L.str11883295, %rax
	movq	%rax, 5144(%rsp)        # 8-byte Spill
	leaq	.L.str11893296, %rax
	movq	%rax, 5136(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	6 167 0                 # kmeans_clustering.c:167:0
	movq	%rax, 5128(%rsp)        # 8-byte Spill
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5120(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	5152(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 5112(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	5144(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 5104(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	5136(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5096(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5128(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5088(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5080(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovss	%xmm0, 5076(%rsp)       # 4-byte Spill
	movq	%r14, 5064(%rsp)        # 8-byte Spill
	movq	%r15, 5056(%rsp)        # 8-byte Spill
	movq	%r12, 5048(%rsp)        # 8-byte Spill
	movq	%r13, 5040(%rsp)        # 8-byte Spill
	movl	%ebp, 5036(%rsp)        # 4-byte Spill
	movq	%rbx, 5024(%rsp)        # 8-byte Spill
	movq	%r10, 5016(%rsp)        # 8-byte Spill
	movq	%r11, 5008(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5112(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %rsi        # 8-byte Reload
	movq	5096(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5176(%rsp), %r8         # 8-byte Reload
	movq	5664(%rsp), %r9         # 8-byte Reload
	movq	5168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5664(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %rsi        # 8-byte Reload
	movq	5096(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5192(%rsp), %r8         # 8-byte Reload
	movq	5664(%rsp), %r9         # 8-byte Reload
	movq	5184(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovss	5076(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %rsi        # 8-byte Reload
	movq	5664(%rsp), %rdx        # 8-byte Reload
	movq	5208(%rsp), %rcx        # 8-byte Reload
	movq	5096(%rsp), %r8         # 8-byte Reload
	movq	5200(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5240(%rsp), %rdi        # 8-byte Reload
	movq	5232(%rsp), %rsi        # 8-byte Reload
	movq	5224(%rsp), %rdx        # 8-byte Reload
	movq	5216(%rsp), %rcx        # 8-byte Reload
	movq	5576(%rsp), %r8         # 8-byte Reload
	movl	5036(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5112(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	5888(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5256(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5248(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6292(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	5664(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %rsi        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5888(%rsp), %rax        # 8-byte Reload
	movl	6292(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, (%rax)
	.loc	6 170 0                 # kmeans_clustering.c:170:0
	movq	5608(%rsp), %rdi        # 8-byte Reload
	movq	5304(%rsp), %rsi        # 8-byte Reload
	movq	5296(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5280(%rsp), %r8         # 8-byte Reload
	movl	5036(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	6292(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	5664(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %rsi        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5320(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5312(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6292(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5336(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5328(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 5000(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	5608(%rsp), %rdi        # 8-byte Reload
	movq	5368(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5352(%rsp), %rcx        # 8-byte Reload
	movq	5344(%rsp), %r8         # 8-byte Reload
	movl	5036(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5112(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5384(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5376(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5664(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	9544(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5400(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5000(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	9544(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5664(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4992(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5416(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5608(%rsp), %rdi        # 8-byte Reload
	movq	5448(%rsp), %rsi        # 8-byte Reload
	movq	5440(%rsp), %rdx        # 8-byte Reload
	movq	5432(%rsp), %rcx        # 8-byte Reload
	movq	5424(%rsp), %r8         # 8-byte Reload
	movl	5036(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5664(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	4992(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5464(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9544(%rsp), %rax        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movl	(%rax,%rcx,4), %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %rsi        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5480(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5472(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4988(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5608(%rsp), %rdi        # 8-byte Reload
	movq	5512(%rsp), %rsi        # 8-byte Reload
	movq	5504(%rsp), %rdx        # 8-byte Reload
	movq	5496(%rsp), %rcx        # 8-byte Reload
	movq	5488(%rsp), %r8         # 8-byte Reload
	movl	5036(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5112(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %rsi        # 8-byte Reload
	movq	5664(%rsp), %rdx        # 8-byte Reload
	movq	5096(%rsp), %rcx        # 8-byte Reload
	movq	5528(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5520(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4988(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	5664(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %rsi        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5544(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5536(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4988(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %rsi        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5560(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 4984(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5608(%rsp), %rdi        # 8-byte Reload
	movq	5600(%rsp), %rsi        # 8-byte Reload
	movq	5592(%rsp), %rdx        # 8-byte Reload
	movq	5584(%rsp), %rcx        # 8-byte Reload
	movq	5576(%rsp), %r8         # 8-byte Reload
	movl	5036(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5112(%rsp), %rdi        # 8-byte Reload
	movq	5632(%rsp), %rsi        # 8-byte Reload
	movq	4992(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5624(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4984(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	5664(%rsp), %rdi        # 8-byte Reload
	movq	5656(%rsp), %rsi        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5648(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5640(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9544(%rsp), %rax        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movl	4984(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, (%rax,%rcx,4)
.Ltmp305:
	#DEBUG_VALUE: kmeans_clustering:j <- 0
	.loc	6 171 0                 # kmeans_clustering.c:171:0
	movq	5064(%rsp), %rdi        # 8-byte Reload
	movq	5056(%rsp), %rsi        # 8-byte Reload
	movq	5048(%rsp), %rdx        # 8-byte Reload
	movq	5040(%rsp), %rcx        # 8-byte Reload
	movq	5112(%rsp), %r8         # 8-byte Reload
	movl	5036(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5016(%rsp), %rdi        # 8-byte Reload
	movq	5096(%rsp), %rsi        # 8-byte Reload
	movq	5096(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5008(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5112(%rsp), %rdi        # 8-byte Reload
	movq	5096(%rsp), %rsi        # 8-byte Reload
	movq	5096(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5120(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8295(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5664(%rsp), %rdi        # 8-byte Reload
	movq	5664(%rsp), %rsi        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5088(%rsp), %r8         # 8-byte Reload
	movq	5096(%rsp), %r9         # 8-byte Reload
	movq	5104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8295(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB7_20
	jmp	.LBB7_22
.LBB7_20:                               # %.lr.ph7
                                        #   in Loop: Header=BB7_15 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str12773384, %r8
	leaq	.L.str12783385, %rdx
	movabsq	$171, %rdi
	leaq	.L.str12743381, %rsi
	leaq	.L.str12753382, %r9
	leaq	.L.str12763383, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str12723379, %r12
	leaq	.L.str12733380, %r13
	leaq	.L.str12703377, %rbp
	movq	%rax, 4976(%rsp)        # 8-byte Spill
	leaq	.L.str12713378, %rax
	movq	%rax, 4968(%rsp)        # 8-byte Spill
	movabsq	$172, %rax
	movq	%rax, 4960(%rsp)        # 8-byte Spill
	leaq	.L.str12673374, %rax
	movq	%rax, 4952(%rsp)        # 8-byte Spill
	leaq	.L.str12683375, %rax
	movq	%rax, 4944(%rsp)        # 8-byte Spill
	leaq	.L.str12693376, %rax
	movq	%rax, 4936(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4928(%rsp)        # 8-byte Spill
	leaq	.L.str12653372, %rax
	movq	%rax, 4920(%rsp)        # 8-byte Spill
	leaq	.L.str12663373, %rax
	movq	%rax, 4912(%rsp)        # 8-byte Spill
	leaq	.L.str12633370, %rax
	movq	%rax, 4904(%rsp)        # 8-byte Spill
	leaq	.L.str12643371, %rax
	movq	%rax, 4896(%rsp)        # 8-byte Spill
	leaq	.L.str12613368, %rax
	movq	%rax, 4888(%rsp)        # 8-byte Spill
	leaq	.L.str12623369, %rax
	movq	%rax, 4880(%rsp)        # 8-byte Spill
	leaq	.L.str12583365, %rax
	movq	%rax, 4872(%rsp)        # 8-byte Spill
	leaq	.L.str12593366, %rax
	movq	%rax, 4864(%rsp)        # 8-byte Spill
	leaq	.L.str12603367, %rax
	movq	%rax, 4856(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 4848(%rsp)        # 8-byte Spill
	leaq	.L.str12563363, %rax
	movq	%rax, 4840(%rsp)        # 8-byte Spill
	leaq	.L.str12573364, %rax
	movq	%rax, 4832(%rsp)        # 8-byte Spill
	leaq	.L.str12543361, %rax
	movq	%rax, 4824(%rsp)        # 8-byte Spill
	leaq	.L.str12553362, %rax
	movq	%rax, 4816(%rsp)        # 8-byte Spill
	leaq	.L.str12513358, %rax
	movq	%rax, 4808(%rsp)        # 8-byte Spill
	leaq	.L.str12523359, %rax
	movq	%rax, 4800(%rsp)        # 8-byte Spill
	leaq	.L.str12533360, %rax
	.loc	6 172 0                 # kmeans_clustering.c:172:0
	movq	%rax, 4792(%rsp)        # 8-byte Spill
	movq	4960(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4784(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	4808(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 4776(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	4800(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 4768(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	4792(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4760(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4928(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4752(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4744(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4736(%rsp)        # 8-byte Spill
	movq	%r14, 4728(%rsp)        # 8-byte Spill
	movq	%r12, 4720(%rsp)        # 8-byte Spill
	movq	%rbp, 4712(%rsp)        # 8-byte Spill
	movq	%r13, 4704(%rsp)        # 8-byte Spill
	movl	%ebx, 4700(%rsp)        # 4-byte Spill
	movq	%r10, 4688(%rsp)        # 8-byte Spill
	movq	%r11, 4680(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4736(%rsp), %rsi        # 8-byte Reload
	movq	6304(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movq	4976(%rsp), %r9         # 8-byte Reload
	movq	4816(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6304(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4736(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4760(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 4672(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	4840(%rsp), %r8         # 8-byte Reload
	movq	4976(%rsp), %r9         # 8-byte Reload
	movq	4832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4864(%rsp), %rdx        # 8-byte Reload
	movq	4856(%rsp), %rcx        # 8-byte Reload
	movq	4848(%rsp), %r8         # 8-byte Reload
	movl	4700(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4680(%rsp), %rdi        # 8-byte Reload
	movq	4736(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4888(%rsp), %r8         # 8-byte Reload
	movq	4976(%rsp), %r9         # 8-byte Reload
	movq	4880(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4736(%rsp), %rsi        # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4904(%rsp), %r8         # 8-byte Reload
	movq	4976(%rsp), %r9         # 8-byte Reload
	movq	4896(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5000(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9240(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4736(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4760(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4664(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	4976(%rsp), %r9         # 8-byte Reload
	movq	4912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	4952(%rsp), %rsi        # 8-byte Reload
	movq	4944(%rsp), %rdx        # 8-byte Reload
	movq	4936(%rsp), %rcx        # 8-byte Reload
	movq	4928(%rsp), %r8         # 8-byte Reload
	movl	4700(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4736(%rsp), %rsi        # 8-byte Reload
	movq	4664(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movq	4976(%rsp), %r9         # 8-byte Reload
	movq	4968(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9240(%rsp), %rax        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	(%rax,%rcx,8), %rdx
	.loc	6 171 0                 # kmeans_clustering.c:171:0
	movq	4728(%rsp), %rdi        # 8-byte Reload
	movq	4736(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 4656(%rsp)        # 8-byte Spill
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4720(%rsp), %r8         # 8-byte Reload
	movq	4976(%rsp), %r9         # 8-byte Reload
	movq	4704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4784(%rsp), %rdi        # 8-byte Reload
	movq	4776(%rsp), %rsi        # 8-byte Reload
	movq	4744(%rsp), %rdx        # 8-byte Reload
	movq	4688(%rsp), %rcx        # 8-byte Reload
	movq	4680(%rsp), %r8         # 8-byte Reload
	movl	4700(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4976(%rsp), %rsi        # 8-byte Reload
	movq	4976(%rsp), %rdx        # 8-byte Reload
	movq	4760(%rsp), %rcx        # 8-byte Reload
	movq	4752(%rsp), %r8         # 8-byte Reload
	movq	4976(%rsp), %r9         # 8-byte Reload
	movq	4768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4976(%rsp), %rax        # 8-byte Reload
	movq	%rax, 4648(%rsp)        # 8-byte Spill
.LBB7_21:                               #   Parent Loop BB7_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4648(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str13683475, %r8
	movabsq	$0, %rdx
	leaq	.L.str13693476, %rsi
	movabsq	$2, %rdi
	leaq	.L.str13663473, %r9
	leaq	.L.str13673474, %r10
	movabsq	$3, %r11
	leaq	.L.str13643471, %rbx
	leaq	.L.str13653472, %r14
	movabsq	$171, %r15
	leaq	.L.str13613468, %r12
	leaq	.L.str13623469, %r13
	leaq	.L.str13633470, %rbp
	movq	%rsi, 4640(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 4632(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 4624(%rsp)        # 8-byte Spill
	leaq	.L.str13593466, %rax
	movq	%rax, 4616(%rsp)        # 8-byte Spill
	leaq	.L.str13603467, %rax
	movq	%rax, 4608(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4600(%rsp)        # 8-byte Spill
	leaq	.L.str13573464, %rax
	movq	%rax, 4592(%rsp)        # 8-byte Spill
	leaq	.L.str13583465, %rax
	movq	%rax, 4584(%rsp)        # 8-byte Spill
	leaq	.L.str13553462, %rax
	movq	%rax, 4576(%rsp)        # 8-byte Spill
	leaq	.L.str13563463, %rax
	movq	%rax, 4568(%rsp)        # 8-byte Spill
	leaq	.L.str13523459, %rax
	movq	%rax, 4560(%rsp)        # 8-byte Spill
	leaq	.L.str13533460, %rax
	movq	%rax, 4552(%rsp)        # 8-byte Spill
	leaq	.L.str13543461, %rax
	movq	%rax, 4544(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4536(%rsp)        # 8-byte Spill
	leaq	.L.str13503457, %rax
	movq	%rax, 4528(%rsp)        # 8-byte Spill
	leaq	.L.str13513458, %rax
	movq	%rax, 4520(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4512(%rsp)        # 8-byte Spill
	leaq	.L.str13483455, %rax
	movq	%rax, 4504(%rsp)        # 8-byte Spill
	leaq	.L.str13493456, %rax
	movq	%rax, 4496(%rsp)        # 8-byte Spill
	leaq	.L.str13453452, %rax
	movq	%rax, 4488(%rsp)        # 8-byte Spill
	leaq	.L.str13463453, %rax
	movq	%rax, 4480(%rsp)        # 8-byte Spill
	leaq	.L.str13473454, %rax
	movq	%rax, 4472(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4464(%rsp)        # 8-byte Spill
	leaq	.L.str13433450, %rax
	movq	%rax, 4456(%rsp)        # 8-byte Spill
	leaq	.L.str13443451, %rax
	movq	%rax, 4448(%rsp)        # 8-byte Spill
	leaq	.L.str13413448, %rax
	movq	%rax, 4440(%rsp)        # 8-byte Spill
	leaq	.L.str13423449, %rax
	movq	%rax, 4432(%rsp)        # 8-byte Spill
	leaq	.L.str13393446, %rax
	movq	%rax, 4424(%rsp)        # 8-byte Spill
	leaq	.L.str13403447, %rax
	movq	%rax, 4416(%rsp)        # 8-byte Spill
	leaq	.L.str13363443, %rax
	movq	%rax, 4408(%rsp)        # 8-byte Spill
	leaq	.L.str13373444, %rax
	movq	%rax, 4400(%rsp)        # 8-byte Spill
	leaq	.L.str13383445, %rax
	movq	%rax, 4392(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4384(%rsp)        # 8-byte Spill
	leaq	.L.str13343441, %rax
	movq	%rax, 4376(%rsp)        # 8-byte Spill
	leaq	.L.str13353442, %rax
	movq	%rax, 4368(%rsp)        # 8-byte Spill
	leaq	.L.str13323439, %rax
	movq	%rax, 4360(%rsp)        # 8-byte Spill
	leaq	.L.str13333440, %rax
	movq	%rax, 4352(%rsp)        # 8-byte Spill
	movabsq	$172, %rax
	movq	%rax, 4344(%rsp)        # 8-byte Spill
	leaq	.L.str13293436, %rax
	movq	%rax, 4336(%rsp)        # 8-byte Spill
	leaq	.L.str13303437, %rax
	movq	%rax, 4328(%rsp)        # 8-byte Spill
	leaq	.L.str13313438, %rax
	movq	%rax, 4320(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 4312(%rsp)        # 8-byte Spill
	leaq	.L.str13273434, %rax
	movq	%rax, 4304(%rsp)        # 8-byte Spill
	leaq	.L.str13283435, %rax
	movq	%rax, 4296(%rsp)        # 8-byte Spill
	leaq	.L.str13253432, %rax
	movq	%rax, 4288(%rsp)        # 8-byte Spill
	leaq	.L.str13263433, %rax
	movq	%rax, 4280(%rsp)        # 8-byte Spill
	leaq	.L.str13233430, %rax
	movq	%rax, 4272(%rsp)        # 8-byte Spill
	leaq	.L.str13243431, %rax
	movq	%rax, 4264(%rsp)        # 8-byte Spill
	leaq	.L.str13203427, %rax
	movq	%rax, 4256(%rsp)        # 8-byte Spill
	leaq	.L.str13213428, %rax
	movq	%rax, 4248(%rsp)        # 8-byte Spill
	leaq	.L.str13223429, %rax
	movq	%rax, 4240(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 4232(%rsp)        # 8-byte Spill
	leaq	.L.str13183425, %rax
	movq	%rax, 4224(%rsp)        # 8-byte Spill
	leaq	.L.str13193426, %rax
	movq	%rax, 4216(%rsp)        # 8-byte Spill
	leaq	.L.str13163423, %rax
	movq	%rax, 4208(%rsp)        # 8-byte Spill
	leaq	.L.str13173424, %rax
	movq	%rax, 4200(%rsp)        # 8-byte Spill
	leaq	.L.str13133420, %rax
	movq	%rax, 4192(%rsp)        # 8-byte Spill
	leaq	.L.str13143421, %rax
	movq	%rax, 4184(%rsp)        # 8-byte Spill
	leaq	.L.str13153422, %rax
	movq	%rax, 4176(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4168(%rsp)        # 8-byte Spill
	leaq	.L.str13113418, %rax
	movq	%rax, 4160(%rsp)        # 8-byte Spill
	leaq	.L.str13123419, %rax
	movq	%rax, 4152(%rsp)        # 8-byte Spill
	leaq	.L.str13093416, %rax
	movq	%rax, 4144(%rsp)        # 8-byte Spill
	leaq	.L.str13103417, %rax
	movq	%rax, 4136(%rsp)        # 8-byte Spill
	leaq	.L.str13073414, %rax
	movq	%rax, 4128(%rsp)        # 8-byte Spill
	leaq	.L.str13083415, %rax
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	leaq	.L.str13043411, %rax
	movq	%rax, 4112(%rsp)        # 8-byte Spill
	leaq	.L.str13053412, %rax
	movq	%rax, 4104(%rsp)        # 8-byte Spill
	leaq	.L.str13063413, %rax
	movq	%rax, 4096(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 4088(%rsp)        # 8-byte Spill
	leaq	.L.str13023409, %rax
	movq	%rax, 4080(%rsp)        # 8-byte Spill
	leaq	.L.str13033410, %rax
	movq	%rax, 4072(%rsp)        # 8-byte Spill
	leaq	.L.str13003407, %rax
	movq	%rax, 4064(%rsp)        # 8-byte Spill
	leaq	.L.str13013408, %rax
	movq	%rax, 4056(%rsp)        # 8-byte Spill
	leaq	.L.str12973404, %rax
	movq	%rax, 4048(%rsp)        # 8-byte Spill
	leaq	.L.str12983405, %rax
	movq	%rax, 4040(%rsp)        # 8-byte Spill
	leaq	.L.str12993406, %rax
	movq	%rax, 4032(%rsp)        # 8-byte Spill
	leaq	.L.str12953402, %rax
	movq	%rax, 4024(%rsp)        # 8-byte Spill
	leaq	.L.str12963403, %rax
	movq	%rax, 4016(%rsp)        # 8-byte Spill
	leaq	.L.str12933400, %rax
	movq	%rax, 4008(%rsp)        # 8-byte Spill
	leaq	.L.str12943401, %rax
	movq	%rax, 4000(%rsp)        # 8-byte Spill
	leaq	.L.str12913398, %rax
	movq	%rax, 3992(%rsp)        # 8-byte Spill
	leaq	.L.str12923399, %rax
	movq	%rax, 3984(%rsp)        # 8-byte Spill
	leaq	.L.str12883395, %rax
	movq	%rax, 3976(%rsp)        # 8-byte Spill
	leaq	.L.str12893396, %rax
	movq	%rax, 3968(%rsp)        # 8-byte Spill
	leaq	.L.str12903397, %rax
	movq	%rax, 3960(%rsp)        # 8-byte Spill
	leaq	.L.str12863393, %rax
	movq	%rax, 3952(%rsp)        # 8-byte Spill
	leaq	.L.str12873394, %rax
	movq	%rax, 3944(%rsp)        # 8-byte Spill
	leaq	.L.str12843391, %rax
	movq	%rax, 3936(%rsp)        # 8-byte Spill
	leaq	.L.str12853392, %rax
	movq	%rax, 3928(%rsp)        # 8-byte Spill
	leaq	.L.str12823389, %rax
	movq	%rax, 3920(%rsp)        # 8-byte Spill
	leaq	.L.str12833390, %rax
	movq	%rax, 3912(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3904(%rsp)        # 8-byte Spill
	leaq	.L.str12793386, %rax
	movq	%rax, 3896(%rsp)        # 8-byte Spill
	leaq	.L.str12803387, %rax
	movq	%rax, 3888(%rsp)        # 8-byte Spill
	leaq	.L.str12813388, %rax
	movq	%rax, 3880(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	6 172 0                 # kmeans_clustering.c:172:0
	movq	%rax, 3872(%rsp)        # 8-byte Spill
	movq	3904(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3864(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3896(%rsp), %rax        # 8-byte Reload
	movl	%esi, 3860(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3888(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3848(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3880(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3840(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3872(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3832(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	3860(%rsp), %eax        # 4-byte Reload
	movq	%r9, 3824(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 3816(%rsp)        # 8-byte Spill
	movq	%r14, 3808(%rsp)        # 8-byte Spill
	movq	%r12, 3800(%rsp)        # 8-byte Spill
	movq	%r13, 3792(%rsp)        # 8-byte Spill
	movq	%rbp, 3784(%rsp)        # 8-byte Spill
	movq	%rbx, 3776(%rsp)        # 8-byte Spill
	movq	%r10, 3768(%rsp)        # 8-byte Spill
	movq	%r11, 3760(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	3848(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3840(%rsp), %r9         # 8-byte Reload
	movq	3912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	3848(%rsp), %rdx        # 8-byte Reload
	movq	3848(%rsp), %rcx        # 8-byte Reload
	movq	3936(%rsp), %r8         # 8-byte Reload
	movq	3840(%rsp), %r9         # 8-byte Reload
	movq	3928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4624(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	4632(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	3952(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	3944(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4344(%rsp), %rdi        # 8-byte Reload
	movq	3976(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3960(%rsp), %rcx        # 8-byte Reload
	movq	4088(%rsp), %r8         # 8-byte Reload
	movl	3860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	4632(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	3992(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	3984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	4672(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4008(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4632(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	4672(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	4624(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 3752(%rsp)        # 8-byte Spill
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4024(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4344(%rsp), %rdi        # 8-byte Reload
	movq	4048(%rsp), %rsi        # 8-byte Reload
	movq	4040(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	4168(%rsp), %r8         # 8-byte Reload
	movl	3860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	3752(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4056(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4672(%rsp), %rcx        # 8-byte Reload
	movq	4632(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,4), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	4624(%rsp), %rdi        # 8-byte Reload
	movq	4600(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 3748(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	3840(%rsp), %rdx        # 8-byte Reload
	movq	4080(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	4072(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4344(%rsp), %rdi        # 8-byte Reload
	movq	4112(%rsp), %rsi        # 8-byte Reload
	movq	4104(%rsp), %rdx        # 8-byte Reload
	movq	4096(%rsp), %rcx        # 8-byte Reload
	movq	4088(%rsp), %r8         # 8-byte Reload
	movl	3860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	4632(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4128(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	4656(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4144(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4136(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4632(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	4656(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	4624(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 3736(%rsp)        # 8-byte Spill
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4160(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4344(%rsp), %rdi        # 8-byte Reload
	movq	4192(%rsp), %rsi        # 8-byte Reload
	movq	4184(%rsp), %rdx        # 8-byte Reload
	movq	4176(%rsp), %rcx        # 8-byte Reload
	movq	4168(%rsp), %r8         # 8-byte Reload
	movl	3860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	3736(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4208(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	4632(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,4), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	4624(%rsp), %rdi        # 8-byte Reload
	movq	4600(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 3732(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	3840(%rsp), %rdx        # 8-byte Reload
	movq	4224(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	4216(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4344(%rsp), %rdi        # 8-byte Reload
	movq	4256(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4240(%rsp), %rcx        # 8-byte Reload
	movq	4232(%rsp), %r8         # 8-byte Reload
	movl	3860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	3732(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	4600(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rdx        # 8-byte Reload
	movq	4272(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3748(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	4600(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rdx        # 8-byte Reload
	movq	4288(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	4280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3748(%rsp), %xmm0       # 4-byte Reload
	vmovss	3732(%rsp), %xmm1       # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	4624(%rsp), %rdi        # 8-byte Reload
	movq	4600(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rdx        # 8-byte Reload
	movq	4304(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	4296(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 3728(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	4344(%rsp), %rdi        # 8-byte Reload
	movq	4336(%rsp), %rsi        # 8-byte Reload
	movq	4328(%rsp), %rdx        # 8-byte Reload
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4312(%rsp), %r8         # 8-byte Reload
	movl	3860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	3736(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4360(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4352(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovss	3728(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	4600(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rdx        # 8-byte Reload
	movq	4376(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	4368(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	4632(%rsp), %rdx        # 8-byte Reload
	vmovss	3728(%rsp), %xmm0       # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,4)
	.loc	6 171 0                 # kmeans_clustering.c:171:0
	movq	3816(%rsp), %rdi        # 8-byte Reload
	movq	4408(%rsp), %rsi        # 8-byte Reload
	movq	4400(%rsp), %rdx        # 8-byte Reload
	movq	4392(%rsp), %rcx        # 8-byte Reload
	movq	4384(%rsp), %r8         # 8-byte Reload
	movl	3860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rdx        # 8-byte Reload
	movq	3848(%rsp), %rcx        # 8-byte Reload
	movq	4424(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	4632(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4440(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4632(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	4624(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3840(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3720(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3816(%rsp), %rdi        # 8-byte Reload
	movq	4488(%rsp), %rsi        # 8-byte Reload
	movq	4480(%rsp), %rdx        # 8-byte Reload
	movq	4472(%rsp), %rcx        # 8-byte Reload
	movq	4464(%rsp), %r8         # 8-byte Reload
	movl	3860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	4512(%rsp), %rsi        # 8-byte Reload
	movq	3720(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4504(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4496(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3720(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	4624(%rsp), %rdi        # 8-byte Reload
	movq	4600(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4528(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 3716(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3816(%rsp), %rdi        # 8-byte Reload
	movq	4560(%rsp), %rsi        # 8-byte Reload
	movq	4552(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4536(%rsp), %r8         # 8-byte Reload
	movl	3860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15868(%rsp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	4600(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4576(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4568(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3716(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	4600(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4592(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3716(%rsp), %eax        # 4-byte Reload
	movl	15868(%rsp), %esi       # 4-byte Reload
	cmpl	%esi, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	4624(%rsp), %rdi        # 8-byte Reload
	movq	3840(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3715(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3816(%rsp), %rdi        # 8-byte Reload
	movq	3800(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3784(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movl	3860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	3848(%rsp), %rsi        # 8-byte Reload
	movq	3848(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	3776(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	3808(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3864(%rsp), %rdi        # 8-byte Reload
	movq	3848(%rsp), %rsi        # 8-byte Reload
	movq	3848(%rsp), %rdx        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	3768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3715(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	3840(%rsp), %rsi        # 8-byte Reload
	movq	3840(%rsp), %rcx        # 8-byte Reload
	movq	3832(%rsp), %r8         # 8-byte Reload
	movq	3848(%rsp), %r9         # 8-byte Reload
	movq	4640(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3715(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	3720(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 4648(%rsp)        # 8-byte Spill
	jne	.LBB7_22
	jmp	.LBB7_21
.Ltmp306:
.LBB7_22:                               # %._crit_edge8
                                        #   in Loop: Header=BB7_15 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str13823489, %r8
	leaq	.L.str13833490, %rdx
	movabsq	$160, %rsi
	leaq	.L.str13793486, %rdi
	leaq	.L.str13803487, %r9
	leaq	.L.str13813488, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str13773484, %r12
	leaq	.L.str13783485, %r13
	leaq	.L.str13753482, %rbp
	movq	%rax, 3704(%rsp)        # 8-byte Spill
	leaq	.L.str13763483, %rax
	movq	%rax, 3696(%rsp)        # 8-byte Spill
	leaq	.L.str13733480, %rax
	movq	%rax, 3688(%rsp)        # 8-byte Spill
	leaq	.L.str13743481, %rax
	movq	%rax, 3680(%rsp)        # 8-byte Spill
	leaq	.L.str13703477, %rax
	movq	%rax, 3672(%rsp)        # 8-byte Spill
	leaq	.L.str13713478, %rax
	movq	%rax, 3664(%rsp)        # 8-byte Spill
	leaq	.L.str13723479, %rax
	movq	%rax, 3656(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	6 160 0                 # kmeans_clustering.c:160:0
	movq	%rdi, 3648(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 3640(%rsp)        # 8-byte Spill
	movq	3672(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 3632(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	3664(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3624(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3656(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3616(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3640(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3608(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3600(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 3592(%rsp)        # 8-byte Spill
	movq	%r14, 3584(%rsp)        # 8-byte Spill
	movq	%r12, 3576(%rsp)        # 8-byte Spill
	movq	%r13, 3568(%rsp)        # 8-byte Spill
	movq	%rbp, 3560(%rsp)        # 8-byte Spill
	movl	%ebx, 3556(%rsp)        # 4-byte Spill
	movq	%r10, 3544(%rsp)        # 8-byte Spill
	movq	%r11, 3536(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3536(%rsp), %rdi        # 8-byte Reload
	movq	3592(%rsp), %rsi        # 8-byte Reload
	movq	3704(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3688(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3680(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7324(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	3704(%rsp), %rdi        # 8-byte Reload
	movq	3592(%rsp), %rsi        # 8-byte Reload
	movq	3704(%rsp), %rcx        # 8-byte Reload
	movq	3560(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3696(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7324(%rsp), %ebx        # 4-byte Reload
	addl	$1, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	3584(%rsp), %rdi        # 8-byte Reload
	movq	3592(%rsp), %rsi        # 8-byte Reload
	movq	3704(%rsp), %rcx        # 8-byte Reload
	movq	3576(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3568(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 3532(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp307:
	#DEBUG_VALUE: kmeans_clustering:i <- [RSP+3532]
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3600(%rsp), %rdx        # 8-byte Reload
	movq	3544(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movl	3556(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3704(%rsp), %rdi        # 8-byte Reload
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3704(%rsp), %rcx        # 8-byte Reload
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3624(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovss	5076(%rsp), %xmm0       # 4-byte Reload
	movl	3532(%rsp), %ebx        # 4-byte Reload
	vmovss	%xmm0, 8288(%rsp)       # 4-byte Spill
	movl	%ebx, 8284(%rsp)        # 4-byte Spill
	jmp	.LBB7_15
.Ltmp308:
.LBB7_23:                               # %.preheader
                                        #   Parent Loop BB7_15 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_25 Depth 3
	movq	6808(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str14093516, %r8
	movabsq	$0, %rdx
	leaq	.L.str14103517, %rsi
	movabsq	$2, %rdi
	leaq	.L.str14073514, %r9
	leaq	.L.str14083515, %r10
	movabsq	$3, %r11
	leaq	.L.str14053512, %rbx
	leaq	.L.str14063513, %r14
	movabsq	$178, %r15
	leaq	.L.str14023509, %r12
	leaq	.L.str14033510, %r13
	leaq	.L.str14043511, %rbp
	movq	%rsi, 3520(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 3512(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3504(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3496(%rsp)        # 8-byte Spill
	leaq	.L.str14003507, %rax
	movq	%rax, 3488(%rsp)        # 8-byte Spill
	leaq	.L.str14013508, %rax
	movq	%rax, 3480(%rsp)        # 8-byte Spill
	leaq	.L.str13983505, %rax
	movq	%rax, 3472(%rsp)        # 8-byte Spill
	leaq	.L.str13993506, %rax
	movq	%rax, 3464(%rsp)        # 8-byte Spill
	leaq	.L.str13963503, %rax
	movq	%rax, 3456(%rsp)        # 8-byte Spill
	leaq	.L.str13973504, %rax
	movq	%rax, 3448(%rsp)        # 8-byte Spill
	movabsq	$179, %rax
	movq	%rax, 3440(%rsp)        # 8-byte Spill
	leaq	.L.str13933500, %rax
	movq	%rax, 3432(%rsp)        # 8-byte Spill
	leaq	.L.str13943501, %rax
	movq	%rax, 3424(%rsp)        # 8-byte Spill
	leaq	.L.str13953502, %rax
	movq	%rax, 3416(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3408(%rsp)        # 8-byte Spill
	leaq	.L.str13913498, %rax
	movq	%rax, 3400(%rsp)        # 8-byte Spill
	leaq	.L.str13923499, %rax
	movq	%rax, 3392(%rsp)        # 8-byte Spill
	leaq	.L.str13893496, %rax
	movq	%rax, 3384(%rsp)        # 8-byte Spill
	leaq	.L.str13903497, %rax
	movq	%rax, 3376(%rsp)        # 8-byte Spill
	leaq	.L.str13873494, %rax
	movq	%rax, 3368(%rsp)        # 8-byte Spill
	leaq	.L.str13883495, %rax
	movq	%rax, 3360(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3352(%rsp)        # 8-byte Spill
	leaq	.L.str13843491, %rax
	movq	%rax, 3344(%rsp)        # 8-byte Spill
	leaq	.L.str13853492, %rax
	movq	%rax, 3336(%rsp)        # 8-byte Spill
	leaq	.L.str13863493, %rax
	movq	%rax, 3328(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	6 179 0                 # kmeans_clustering.c:179:0
.Ltmp309:
	movq	%rax, 3320(%rsp)        # 8-byte Spill
	movq	3352(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3312(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3344(%rsp), %rax        # 8-byte Reload
	movl	%esi, 3308(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3336(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3296(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3328(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3288(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3320(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3280(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	3308(%rsp), %eax        # 4-byte Reload
	movq	%r9, 3272(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 3264(%rsp)        # 8-byte Spill
	movq	%r14, 3256(%rsp)        # 8-byte Spill
	movq	%r12, 3248(%rsp)        # 8-byte Spill
	movq	%r13, 3240(%rsp)        # 8-byte Spill
	movq	%rbp, 3232(%rsp)        # 8-byte Spill
	movq	%rbx, 3224(%rsp)        # 8-byte Spill
	movq	%r10, 3216(%rsp)        # 8-byte Spill
	movq	%r11, 3208(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3312(%rsp), %rdi        # 8-byte Reload
	movq	3496(%rsp), %rsi        # 8-byte Reload
	movq	3296(%rsp), %rdx        # 8-byte Reload
	movq	3296(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3288(%rsp), %r9         # 8-byte Reload
	movq	3360(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3288(%rsp), %rdi        # 8-byte Reload
	movq	3496(%rsp), %rsi        # 8-byte Reload
	movq	3296(%rsp), %rdx        # 8-byte Reload
	movq	3288(%rsp), %rcx        # 8-byte Reload
	movq	3384(%rsp), %r8         # 8-byte Reload
	movq	3288(%rsp), %r9         # 8-byte Reload
	movq	3376(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3496(%rsp), %rsi        # 8-byte Reload
	movq	3512(%rsp), %rdx        # 8-byte Reload
	movq	3288(%rsp), %rcx        # 8-byte Reload
	movq	3400(%rsp), %r8         # 8-byte Reload
	movq	3296(%rsp), %r9         # 8-byte Reload
	movq	3392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3432(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movl	3308(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3312(%rsp), %rdi        # 8-byte Reload
	movq	3496(%rsp), %rsi        # 8-byte Reload
	movq	3512(%rsp), %rdx        # 8-byte Reload
	movq	3288(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3296(%rsp), %r9         # 8-byte Reload
	movq	3448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3288(%rsp), %rdi        # 8-byte Reload
	movq	3496(%rsp), %rsi        # 8-byte Reload
	movq	9544(%rsp), %rdx        # 8-byte Reload
	movq	3288(%rsp), %rcx        # 8-byte Reload
	movq	3472(%rsp), %r8         # 8-byte Reload
	movq	3296(%rsp), %r9         # 8-byte Reload
	movq	3464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3512(%rsp), %rcx        # 8-byte Reload
	shlq	$2, %rcx
	movq	9544(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
.Ltmp310:
	.loc	6 178 0                 # kmeans_clustering.c:178:0
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3496(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 3200(%rsp)        # 8-byte Spill
	movq	3288(%rsp), %rcx        # 8-byte Reload
	movq	3488(%rsp), %r8         # 8-byte Reload
	movq	3296(%rsp), %r9         # 8-byte Reload
	movq	3480(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3264(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3240(%rsp), %rdx        # 8-byte Reload
	movq	3232(%rsp), %rcx        # 8-byte Reload
	movq	3312(%rsp), %r8         # 8-byte Reload
	movl	3308(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3296(%rsp), %rsi        # 8-byte Reload
	movq	3296(%rsp), %rdx        # 8-byte Reload
	movq	3288(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %r8         # 8-byte Reload
	movq	3296(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3312(%rsp), %rdi        # 8-byte Reload
	movq	3296(%rsp), %rsi        # 8-byte Reload
	movq	3296(%rsp), %rdx        # 8-byte Reload
	movq	3288(%rsp), %rcx        # 8-byte Reload
	movq	3272(%rsp), %r8         # 8-byte Reload
	movq	3296(%rsp), %r9         # 8-byte Reload
	movq	3216(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8293(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3288(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rcx        # 8-byte Reload
	movq	3280(%rsp), %r8         # 8-byte Reload
	movq	3296(%rsp), %r9         # 8-byte Reload
	movq	3520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8293(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB7_24
	jmp	.LBB7_28
.LBB7_24:                               # %.lr.ph
                                        #   in Loop: Header=BB7_23 Depth=2
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str14713578, %r8
	leaq	.L.str14723579, %rdx
	movabsq	$178, %rdi
	leaq	.L.str14683575, %rsi
	leaq	.L.str14693576, %r9
	leaq	.L.str14703577, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str14663573, %r12
	leaq	.L.str14673574, %r13
	leaq	.L.str14643571, %rbp
	movq	%rax, 3192(%rsp)        # 8-byte Spill
	leaq	.L.str14653572, %rax
	movq	%rax, 3184(%rsp)        # 8-byte Spill
	movabsq	$181, %rax
	movq	%rax, 3176(%rsp)        # 8-byte Spill
	leaq	.L.str14613568, %rax
	movq	%rax, 3168(%rsp)        # 8-byte Spill
	leaq	.L.str14623569, %rax
	movq	%rax, 3160(%rsp)        # 8-byte Spill
	leaq	.L.str14633570, %rax
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	leaq	.L.str14593566, %rax
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	leaq	.L.str14603567, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	leaq	.L.str14573564, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	leaq	.L.str14583565, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	leaq	.L.str14553562, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	leaq	.L.str14563563, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str14523559, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	leaq	.L.str14533560, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	leaq	.L.str14543561, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str14503557, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	leaq	.L.str14513558, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	leaq	.L.str14483555, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str14493556, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	leaq	.L.str14463553, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	leaq	.L.str14473554, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$180, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str14433550, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str14443551, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str14453552, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str14413548, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	leaq	.L.str14423549, %rax
	.loc	6 179 0                 # kmeans_clustering.c:179:0
.Ltmp311:
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str14113518, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 2952(%rsp)        # 8-byte Spill
	movl	$.L.str14123519, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 2944(%rsp)        # 8-byte Spill
	movl	$.L.str14133520, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 2936(%rsp)        # 8-byte Spill
	movl	$179, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 2928(%rsp)        # 8-byte Spill
	movl	$27, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 2920(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2904(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	2912(%rsp), %rax        # 8-byte Reload
	movl	%esi, 2900(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	2944(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2888(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	2936(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2880(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2872(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	2900(%rsp), %eax        # 4-byte Reload
	movq	%r9, 2864(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movq	%rbp, 2856(%rsp)        # 8-byte Spill
	movq	%r15, 2848(%rsp)        # 8-byte Spill
	movq	%r14, 2840(%rsp)        # 8-byte Spill
	movq	%r12, 2832(%rsp)        # 8-byte Spill
	movq	%r13, 2824(%rsp)        # 8-byte Spill
	movl	%ebx, 2820(%rsp)        # 4-byte Spill
	movq	%r10, 2808(%rsp)        # 8-byte Spill
	movq	%r11, 2800(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str14153522, (%rcx)
	movl	$.L.str14143521, %eax
	movl	%eax, %r8d
	movl	$64, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	movq	%rsi, 2792(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	3200(%rsp), %r10        # 8-byte Reload
	movq	%rdx, 2784(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	2784(%rsp), %r11        # 8-byte Reload
	movq	%rcx, 2776(%rsp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	2792(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	movl	%eax, %edx
	movq	%rsp, %rsi
	movq	$.L.str14173524, (%rsi)
	movl	$.L.str14163523, %ebx
	movl	%ebx, %r8d
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %esi
	movl	$32, %ebx
	movl	%ebx, %edi
	movq	%rdi, 2768(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	2768(%rsp), %r9         # 8-byte Reload
	movq	%rsi, 2760(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 2752(%rsp)        # 8-byte Spill
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r9         # 8-byte Reload
	movl	%eax, 2748(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str14183525, %eax
	movl	%eax, %esi
	movl	$.L.str14193526, %eax
	movl	%eax, %edx
	movl	$.L.str14203527, %eax
	movl	%eax, %ecx
	movl	$46, %eax
	movl	%eax, %r8d
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movl	2900(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str14223529, (%rcx)
	movl	$.L.str14213528, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movq	2792(%rsp), %rdx        # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 2736(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str14243531, (%rcx)
	movl	$.L.str14233530, %eax
	movl	%eax, %r8d
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	2748(%rsp), %eax        # 4-byte Reload
	testl	%eax, %eax
	setg	%al
	.loc	6 180 0                 # kmeans_clustering.c:180:0
	movzbl	%al, %ebx
	movl	%ebx, %edx
	movq	%rsp, %rcx
	movq	$.L.str14263533, (%rcx)
	movl	$.L.str14253532, %ebx
	movl	%ebx, %r8d
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movq	2784(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r9         # 8-byte Reload
	movb	%al, 2735(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str14273534, %ebx
	movl	%ebx, %esi
	movl	$.L.str14283535, %ebx
	movl	%ebx, %edx
	movl	$.L.str14293536, %ebx
	movl	%ebx, %ecx
	movl	$180, %ebx
	movl	%ebx, %edi
	movl	$29, %ebx
	movl	%ebx, %r8d
	movq	%rdi, 2720(%rsp)        # 8-byte Spill
	movl	2900(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str14313538, (%rcx)
	movl	$.L.str14303537, %r9d
	movl	%r9d, %r8d
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	3512(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str14333540, (%rcx)
	movl	$.L.str14323539, %ebx
	movl	%ebx, %r8d
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	9240(%rsp), %rcx        # 8-byte Reload
	movq	3512(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str14353542, (%rdi)
	movl	$.L.str14343541, %ebx
	movl	%ebx, %r8d
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %r9         # 8-byte Reload
	movq	%rsi, 2712(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	2712(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str14363543, %ebx
	movl	%ebx, %esi
	movl	$.L.str14373544, %ebx
	movl	%ebx, %edx
	movl	$.L.str14383545, %ebx
	movl	%ebx, %ecx
	movl	$39, %ebx
	movl	%ebx, %r8d
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movl	2900(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str14403547, (%rcx)
	movl	$.L.str14393546, %r9d
	movl	%r9d, %r8d
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	2748(%rsp), %ebx        # 4-byte Reload
	vcvtsi2ssl	%ebx, %xmm0, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2976(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 2708(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	2960(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3000(%rsp), %rsi        # 8-byte Reload
	movq	2992(%rsp), %rdx        # 8-byte Reload
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movl	2820(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	2848(%rsp), %rsi        # 8-byte Reload
	movq	3512(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movq	3192(%rsp), %r9         # 8-byte Reload
	movq	3016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2848(%rsp), %rsi        # 8-byte Reload
	movq	14496(%rsp), %rdx       # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3040(%rsp), %r8         # 8-byte Reload
	movq	3192(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3512(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	14496(%rsp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
.Ltmp312:
	.loc	6 181 0                 # kmeans_clustering.c:181:0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2848(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2696(%rsp)        # 8-byte Spill
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	3192(%rsp), %r9         # 8-byte Reload
	movq	3048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3176(%rsp), %rdi        # 8-byte Reload
	movq	3088(%rsp), %rsi        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movl	2820(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	2848(%rsp), %rsi        # 8-byte Reload
	movq	3512(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	3192(%rsp), %r9         # 8-byte Reload
	movq	3096(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2848(%rsp), %rsi        # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	3192(%rsp), %r9         # 8-byte Reload
	movq	3112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3512(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9240(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2848(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2688(%rsp)        # 8-byte Spill
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	3136(%rsp), %r8         # 8-byte Reload
	movq	3192(%rsp), %r9         # 8-byte Reload
	movq	3128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3176(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	3160(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3144(%rsp), %r8         # 8-byte Reload
	movl	2820(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2848(%rsp), %rsi        # 8-byte Reload
	movq	2688(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	3192(%rsp), %r9         # 8-byte Reload
	movq	3184(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9240(%rsp), %rcx        # 8-byte Reload
	movq	3512(%rsp), %rdx        # 8-byte Reload
	movq	(%rcx,%rdx,8), %rsi
.Ltmp313:
	.loc	6 178 0                 # kmeans_clustering.c:178:0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2680(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	2680(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	3192(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2864(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2800(%rsp), %r8         # 8-byte Reload
	movl	2820(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	3192(%rsp), %r9         # 8-byte Reload
	movq	2888(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3192(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
.LBB7_25:                               #   Parent Loop BB7_15 Depth=1
                                        #     Parent Loop BB7_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	2672(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str14893596, %r8
	movabsq	$0, %rdx
	leaq	.L.str14903597, %rsi
	movabsq	$2, %rdi
	leaq	.L.str14873594, %r9
	leaq	.L.str14883595, %r10
	movabsq	$3, %r11
	leaq	.L.str14853592, %rbx
	leaq	.L.str14863593, %r14
	movabsq	$179, %r15
	leaq	.L.str14823589, %r12
	leaq	.L.str14833590, %r13
	leaq	.L.str14843591, %rbp
	movq	%rsi, 2664(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str14803587, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str14813588, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str14783585, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str14793586, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	leaq	.L.str14763583, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str14773584, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	leaq	.L.str14733580, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	leaq	.L.str14743581, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	leaq	.L.str14753582, %rax
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	6 179 0                 # kmeans_clustering.c:179:0
.Ltmp314:
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2544(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	2576(%rsp), %rax        # 8-byte Reload
	movl	%esi, 2540(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	2568(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2528(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	2560(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2520(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2552(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2512(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	2540(%rsp), %eax        # 4-byte Reload
	movq	%r9, 2504(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2496(%rsp)        # 8-byte Spill
	movq	%r14, 2488(%rsp)        # 8-byte Spill
	movq	%r12, 2480(%rsp)        # 8-byte Spill
	movq	%r13, 2472(%rsp)        # 8-byte Spill
	movq	%rbp, 2464(%rsp)        # 8-byte Spill
	movq	%rbx, 2456(%rsp)        # 8-byte Spill
	movq	%r10, 2448(%rsp)        # 8-byte Spill
	movq	%r11, 2440(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	movq	2592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	movq	2608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2648(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2496(%rsp), %rdi        # 8-byte Reload
	movq	2480(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	2464(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movl	2540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2488(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2504(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2735(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2520(%rsp), %rsi        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2735(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB7_26
	jmp	.LBB7_27
.LBB7_26:                               #   in Loop: Header=BB7_25 Depth=3
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str15493656, %r8
	leaq	.L.str15503657, %rdx
	movabsq	$180, %rsi
	leaq	.L.str15463653, %rdi
	leaq	.L.str15473654, %r9
	leaq	.L.str15483655, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$32, %r14
	leaq	.L.str15443651, %r15
	leaq	.L.str15453652, %r12
	movabsq	$64, %r13
	leaq	.L.str15423649, %rbp
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	leaq	.L.str15433650, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str15393646, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str15403647, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	leaq	.L.str15413648, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str15373644, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str15383645, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str15353642, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	leaq	.L.str15363643, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str15333640, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str15343641, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str15303637, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str15313638, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str15323639, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str15283635, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str15293636, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str15263633, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	leaq	.L.str15273634, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str15233630, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str15243631, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str15253632, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str15213628, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str15223629, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str15193626, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	leaq	.L.str15203627, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	leaq	.L.str15173624, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	leaq	.L.str15183625, %rax
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	leaq	.L.str15143621, %rax
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	leaq	.L.str15153622, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	leaq	.L.str15163623, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	leaq	.L.str15123619, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str15133620, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	leaq	.L.str15103617, %rax
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str15113618, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str15073614, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str15083615, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str15093616, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str15053612, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str15063613, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str15033610, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str15043611, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str15013608, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str15023609, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str14983605, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	leaq	.L.str14993606, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str15003607, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	leaq	.L.str14963603, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	leaq	.L.str14973604, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str14943601, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str14953602, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	leaq	.L.str14913598, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	leaq	.L.str14923599, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	leaq	.L.str14933600, %rax
	.loc	6 180 0                 # kmeans_clustering.c:180:0
	movq	%rdi, 1976(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	movq	1992(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1960(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1952(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1968(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1936(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1928(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1920(%rsp)        # 8-byte Spill
	movq	%r14, 1912(%rsp)        # 8-byte Spill
	movq	%r12, 1904(%rsp)        # 8-byte Spill
	movq	%r13, 1896(%rsp)        # 8-byte Spill
	movq	%rbp, 1888(%rsp)        # 8-byte Spill
	movl	%ebx, 1884(%rsp)        # 4-byte Spill
	movq	%r10, 1872(%rsp)        # 8-byte Spill
	movq	%r11, 1864(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	2712(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2712(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1856(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	2048(%rsp), %rsi        # 8-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movl	1884(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1856(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2072(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	1856(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2432(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2112(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movl	1884(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1848(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	2136(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	2656(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rax,%rcx,4), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1844(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	2144(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2176(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	1884(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	2708(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2200(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1844(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	2208(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1844(%rsp), %xmm0       # 4-byte Reload
	vmovss	2708(%rsp), %xmm1       # 4-byte Reload
	vdivss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	2224(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1840(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	2264(%rsp), %rsi        # 8-byte Reload
	movq	2256(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movl	1884(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	2696(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2696(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1832(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2288(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	2328(%rsp), %rsi        # 8-byte Reload
	movq	2320(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movl	1884(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2336(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2352(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	1832(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2432(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1824(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2376(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2408(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	1884(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovss	1840(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	2656(%rsp), %rcx        # 8-byte Reload
	vmovss	1840(%rsp), %xmm0       # 4-byte Reload
	vmovss	%xmm0, (%rax,%rcx,4)
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	1976(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movl	1884(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	1936(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.Ltmp315:
.LBB7_27:                               #   in Loop: Header=BB7_25 Depth=3
	movabsq	$1, %rax
	leaq	.L.str15993706, %r8
	movabsq	$0, %rcx
	leaq	.L.str16003707, %rdx
	movabsq	$2, %rsi
	leaq	.L.str15973704, %rdi
	leaq	.L.str15983705, %r9
	movabsq	$3, %r10
	leaq	.L.str15953702, %r11
	leaq	.L.str15963703, %rbx
	movabsq	$178, %r14
	leaq	.L.str15923699, %r15
	leaq	.L.str15933700, %r12
	leaq	.L.str15943701, %r13
	movl	$1, %ebp
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str15903697, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str15913698, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str15883695, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str15893696, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	leaq	.L.str15863693, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str15873694, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str15833690, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str15843691, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str15853692, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str15813688, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str15823689, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str15793686, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str15803687, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str15763683, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str15773684, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str15783685, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str15743681, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str15753682, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str15723679, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str15733680, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str15703677, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str15713678, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str15673674, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str15683675, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str15693676, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str15653672, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str15663673, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str15633670, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str15643671, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$181, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str15603667, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str15613668, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str15623669, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	leaq	.L.str15583665, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	leaq	.L.str15593666, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str15563663, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str15573664, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str15543661, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	leaq	.L.str15553662, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str15513658, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	leaq	.L.str15523659, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str15533660, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	.loc	6 181 0                 # kmeans_clustering.c:181:0
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1408(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1400(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1432(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1392(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1384(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1416(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1376(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1368(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r12, 1360(%rsp)        # 8-byte Spill
	movq	%r13, 1352(%rsp)        # 8-byte Spill
	movl	%ebp, 1348(%rsp)        # 4-byte Spill
	vmovss	%xmm0, 1344(%rsp)       # 4-byte Spill
	vmovsd	%xmm1, 1336(%rsp)       # 8-byte Spill
	movq	%r15, 1328(%rsp)        # 8-byte Spill
	movq	%r10, 1320(%rsp)        # 8-byte Spill
	movq	%r11, 1312(%rsp)        # 8-byte Spill
	movq	%rbx, 1304(%rsp)        # 8-byte Spill
	movq	%r14, 1296(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	2680(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	2680(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1816(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1288(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1480(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1536(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	vmovsd	1336(%rsp), %xmm0       # 8-byte Reload
	movq	1384(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2680(%rsp), %rax        # 8-byte Reload
	movq	2656(%rsp), %rcx        # 8-byte Reload
	vmovss	1344(%rsp), %xmm0       # 4-byte Reload
	vmovss	%xmm0, (%rax,%rcx,4)
.Ltmp316:
	.loc	6 178 0                 # kmeans_clustering.c:178:0
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1672(%rsp), %rsi        # 8-byte Reload
	movq	1664(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1680(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1280(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1276(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1744(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1720(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15868(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1276(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1276(%rsp), %ebp        # 4-byte Reload
	movl	15868(%rsp), %esi       # 4-byte Reload
	cmpl	%esi, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1816(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1275(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1328(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	1348(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1384(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1304(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1384(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1275(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1816(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1376(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	movq	1392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1275(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
	jne	.LBB7_28
	jmp	.LBB7_25
.Ltmp317:
.LBB7_28:                               # %._crit_edge
                                        #   in Loop: Header=BB7_23 Depth=2
	movabsq	$1, %rax
	leaq	.L.str16403747, %r8
	movabsq	$0, %rcx
	leaq	.L.str16413748, %rdx
	movabsq	$2, %rsi
	leaq	.L.str16383745, %rdi
	leaq	.L.str16393746, %r9
	movabsq	$3, %r10
	leaq	.L.str16363743, %r11
	leaq	.L.str16373744, %rbx
	movabsq	$177, %r14
	leaq	.L.str16333740, %r15
	leaq	.L.str16343741, %r12
	leaq	.L.str16353742, %r13
	movl	$1, %ebp
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str16313738, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str16323739, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str16293736, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str16303737, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str16273734, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str16283735, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str16243731, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str16253732, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str16263733, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str16223729, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str16233730, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str16203727, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str16213728, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str16173724, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str16183725, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str16193726, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str16153722, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	leaq	.L.str16163723, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str16133720, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str16143721, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str16113718, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str16123719, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str16083715, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	leaq	.L.str16093716, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str16103717, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str16063713, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str16073714, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str16043711, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	leaq	.L.str16053712, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	movabsq	$183, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	leaq	.L.str16013708, %rax
	movq	%rax, 968(%rsp)         # 8-byte Spill
	leaq	.L.str16023709, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str16033710, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	.loc	6 183 0                 # kmeans_clustering.c:183:0
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movq	976(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 936(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	968(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 928(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 920(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	952(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	944(%rsp), %rax         # 8-byte Reload
	movq	%r8, 904(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 896(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 888(%rsp)         # 8-byte Spill
	movq	%r15, 880(%rsp)         # 8-byte Spill
	movq	%r12, 872(%rsp)         # 8-byte Spill
	movq	%r13, 864(%rsp)         # 8-byte Spill
	movl	%ebp, 860(%rsp)         # 4-byte Spill
	movq	%rbx, 848(%rsp)         # 8-byte Spill
	movq	%r10, 840(%rsp)         # 8-byte Spill
	movq	%r11, 832(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	984(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	1000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3200(%rsp), %rax        # 8-byte Reload
	movl	$0, (%rax)
.Ltmp318:
	.loc	6 177 0                 # kmeans_clustering.c:177:0
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	1040(%rsp), %rsi        # 8-byte Reload
	movq	1032(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movl	860(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	1048(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	3512(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	1064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3512(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1256(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	1080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 824(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movl	860(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1144(%rsp), %rsi        # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	1128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	824(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1256(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 820(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	1192(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	860(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	15972(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	820(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	1216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	820(%rsp), %ebp         # 4-byte Reload
	movl	15972(%rsp), %esi       # 4-byte Reload
	cmpl	%esi, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1256(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	1240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 819(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	860(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	848(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	819(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	912(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	819(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	824(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 6808(%rsp)        # 8-byte Spill
	jne	.LBB7_29
	jmp	.LBB7_23
.Ltmp319:
.LBB7_29:                               # %._crit_edge4
                                        #   in Loop: Header=BB7_15 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str16583765, %r8
	movabsq	$0, %rdx
	leaq	.L.str16593766, %rsi
	movabsq	$2, %rdi
	leaq	.L.str16563763, %r9
	leaq	.L.str16573764, %r10
	movabsq	$3, %r11
	leaq	.L.str16543761, %rbx
	leaq	.L.str16553762, %r14
	movabsq	$187, %r15
	leaq	.L.str16513758, %r12
	leaq	.L.str16523759, %r13
	leaq	.L.str16533760, %rbp
	movl	%eax, 812(%rsp)         # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 792(%rsp)         # 8-byte Spill
	leaq	.L.str16493756, %rcx
	movq	%rcx, 784(%rsp)         # 8-byte Spill
	leaq	.L.str16503757, %rcx
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	leaq	.L.str16473754, %rcx
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	leaq	.L.str16483755, %rcx
	movq	%rcx, 752(%rsp)         # 8-byte Spill
	leaq	.L.str16453752, %rcx
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	leaq	.L.str16463753, %rcx
	movq	%rcx, 736(%rsp)         # 8-byte Spill
	leaq	.L.str16423749, %rcx
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	leaq	.L.str16433750, %rcx
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	leaq	.L.str16443751, %rcx
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	movabsq	$47, %rcx
	.loc	6 187 0                 # kmeans_clustering.c:187:0
	movq	%rdi, 704(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	%rsi, 688(%rsp)         # 8-byte Spill
	movq	%rcx, %rsi
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	%rdx, 680(%rsp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 672(%rsp)          # 8-byte Spill
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	%r9, 664(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	vmovss	%xmm0, 660(%rsp)        # 4-byte Spill
	movl	%eax, 656(%rsp)         # 4-byte Spill
	movq	%r15, 648(%rsp)         # 8-byte Spill
	movq	%r14, 640(%rsp)         # 8-byte Spill
	movq	%r12, 632(%rsp)         # 8-byte Spill
	movq	%r13, 624(%rsp)         # 8-byte Spill
	movq	%rbp, 616(%rsp)         # 8-byte Spill
	movq	%rbx, 608(%rsp)         # 8-byte Spill
	movq	%r10, 600(%rsp)         # 8-byte Spill
	movq	%r11, 592(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	vmovss	15820(%rsp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	6976(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	6976(%rsp), %xmm0       # 4-byte Reload
	vmovss	15820(%rsp), %xmm1      # 4-byte Reload
	vucomiss	%xmm1, %xmm0
	seta	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	680(%rsp), %r9          # 8-byte Reload
	movq	776(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 591(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	632(%rsp), %rsi         # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movl	656(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	680(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	680(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	680(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	680(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	591(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	680(%rsp), %r9          # 8-byte Reload
	movq	688(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	591(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovss	660(%rsp), %xmm0        # 4-byte Reload
	movl	812(%rsp), %eax         # 4-byte Reload
	movl	%eax, 8284(%rsp)        # 4-byte Spill
	vmovss	%xmm0, 8288(%rsp)       # 4-byte Spill
	jne	.LBB7_15
.Ltmp320:
# BB#30:
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str16813788, %r8
	movabsq	$0, %rdx
	leaq	.L.str16823789, %rsi
	leaq	.L.str16793786, %r9
	leaq	.L.str16803787, %r10
	movabsq	$2, %r11
	leaq	free, %rbx
	leaq	.L.str16773784, %r14
	leaq	.L.str16783785, %r15
	movabsq	$190, %r12
	leaq	.L.str16743781, %r13
	leaq	.L.str16753782, %rbp
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str16763783, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 560(%rsp)         # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 552(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str16723779, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str16733780, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str16703777, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str16713778, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str16673774, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str16683775, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str16693776, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str16653772, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str16663773, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str16633770, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str16643771, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str16603767, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str16613768, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str16623769, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	6 190 0                 # kmeans_clustering.c:190:0
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movq	440(%rsp), %rax         # 8-byte Reload
	movl	%esi, 404(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 392(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	424(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%r8, 376(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	404(%rsp), %eax         # 4-byte Reload
	movq	%r9, 368(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 360(%rsp)         # 8-byte Spill
	movq	%r15, 352(%rsp)         # 8-byte Spill
	movq	%r14, 344(%rsp)         # 8-byte Spill
	movq	%r12, 336(%rsp)         # 8-byte Spill
	movq	%r13, 328(%rsp)         # 8-byte Spill
	movq	%rbx, 320(%rsp)         # 8-byte Spill
	movq	%r10, 312(%rsp)         # 8-byte Spill
	movq	%r11, 304(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	448(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9240(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 296(%rsp)         # 8-byte Spill
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	464(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	296(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	512(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	312(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	560(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	callq	free
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str16903797, %r8
	movabsq	$0, %rsi
	leaq	.L.str16913798, %r9
	leaq	.L.str16883795, %r10
	leaq	.L.str16893796, %r11
	movabsq	$2, %rbx
	leaq	free, %r14
	leaq	.L.str16863793, %r15
	leaq	.L.str16873794, %r12
	movabsq	$191, %r13
	leaq	.L.str16833790, %rbp
	leaq	.L.str16843791, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	leaq	.L.str16853792, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 264(%rsp)         # 8-byte Spill
	movl	$1, %esi
	.loc	6 191 0                 # kmeans_clustering.c:191:0
	movq	%rdi, 256(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movl	%esi, 252(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	280(%rsp), %r13         # 8-byte Reload
	movq	%rdx, 240(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	272(%rsp), %rbp         # 8-byte Reload
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	movq	%rbp, %rcx
	movq	%r8, 224(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	252(%rsp), %ebp         # 4-byte Reload
	movq	%r9, 216(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 208(%rsp)         # 8-byte Spill
	movq	%r14, 200(%rsp)         # 8-byte Spill
	movq	%r12, 192(%rsp)         # 8-byte Spill
	movq	%rbx, 184(%rsp)         # 8-byte Spill
	movq	%r10, 176(%rsp)         # 8-byte Spill
	movq	%r11, 168(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	240(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	9536(%rsp), %rdx        # 8-byte Reload
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	9536(%rsp), %rdx        # 8-byte Reload
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9536(%rsp), %rdi        # 8-byte Reload
	callq	free
	movabsq	$24601, %rdi            # imm = 0x6019
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str16993806, %r8
	movabsq	$0, %rdx
	leaq	.L.str17003807, %rsi
	leaq	.L.str16973804, %r9
	leaq	.L.str16983805, %r10
	movabsq	$2, %r11
	leaq	free, %rbx
	leaq	.L.str16953802, %r14
	leaq	.L.str16963803, %r15
	movabsq	$192, %r12
	leaq	.L.str16923799, %r13
	leaq	.L.str16933800, %rbp
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str16943801, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 144(%rsp)         # 8-byte Spill
	movl	$1, %esi
	.loc	6 192 0                 # kmeans_clustering.c:192:0
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%r12, %rdi
	movl	%esi, 132(%rsp)         # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%rbp, %rdx
	movq	152(%rsp), %r12         # 8-byte Reload
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 104(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	132(%rsp), %ebp         # 4-byte Reload
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 88(%rsp)          # 8-byte Spill
	movq	%r11, 80(%rsp)          # 8-byte Spill
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movq	%r15, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	9792(%rsp), %rdx        # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	9792(%rsp), %rdx        # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9792(%rsp), %rdi        # 8-byte Reload
	callq	free
	movabsq	$1, %rax
	movabsq	$64, %rsi
	leaq	.L.str17043811, %r8
	movabsq	$0, %r9
	leaq	.L.str17053812, %rcx
	movabsq	$194, %rdi
	leaq	.L.str17013808, %rdx
	leaq	.L.str17023809, %r10
	leaq	.L.str17033810, %r11
	movl	$1, %ebp
	.loc	6 194 0                 # kmeans_clustering.c:194:0
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%rdx, %rsi
	movq	%r10, %rdx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 24(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	14496(%rsp), %rdx       # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	24(%rsp), %r9           # 8-byte Reload
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	14496(%rsp), %rax       # 8-byte Reload
	addq	$16088, %rsp            # imm = 0x3ED8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp321:
.Ltmp322:
	.size	kmeans_clustering, .Ltmp322-kmeans_clustering
.Lfunc_end7:
	.cfi_endproc

	.globl	trace_logger_init
	.align	16, 0x90
	.type	trace_logger_init,@function
trace_logger_init:                      # @trace_logger_init
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp324:
	.cfi_def_cfa_offset 16
	movl	$.L.str3815, %eax
	movl	%eax, %edi
	movl	$.L.str13816, %eax
	movl	%eax, %esi
	callq	gzopen
	movq	%rax, full_trace_file
	cmpq	$0, %rax
	jne	.LBB8_2
# BB#1:
	movl	$.L.str23817, %eax
	movl	%eax, %edi
	callq	perror
	movl	$-1, %edi
	callq	exit
.LBB8_2:
	movl	$trace_logger_fin, %eax
	movl	%eax, %edi
	popq	%rax
	jmp	atexit                  # TAILCALL
.Ltmp325:
	.size	trace_logger_init, .Ltmp325-trace_logger_init
	.cfi_endproc

	.globl	trace_logger_fin
	.align	16, 0x90
	.type	trace_logger_fin,@function
trace_logger_fin:                       # @trace_logger_fin
	.cfi_startproc
# BB#0:
	movq	full_trace_file(%rip), %rdi
	jmp	gzclose                 # TAILCALL
.Ltmp326:
	.size	trace_logger_fin, .Ltmp326-trace_logger_fin
	.cfi_endproc

	.globl	trace_logger_log0
	.align	16, 0x90
	.type	trace_logger_log0,@function
trace_logger_log0:                      # @trace_logger_log0
	.cfi_startproc
# BB#0:
	subq	$72, %rsp
.Ltmp328:
	.cfi_def_cfa_offset 80
	movb	%r9b, %al
	movb	80(%rsp), %r10b
	cmpl	$0, initp
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movb	%r10b, 63(%rsp)         # 1-byte Spill
	movl	%r8d, 56(%rsp)          # 4-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movb	%al, 39(%rsp)           # 1-byte Spill
	movl	%edi, 32(%rsp)          # 4-byte Spill
	jne	.LBB10_4
# BB#1:
	movl	$.L.str3815, %eax
	movl	%eax, %edi
	movl	$.L.str13816, %eax
	movl	%eax, %esi
	callq	gzopen
	movq	%rax, full_trace_file
	cmpq	$0, %rax
	jne	.LBB10_3
# BB#2:
	movl	$.L.str23817, %eax
	movl	%eax, %edi
	callq	perror
	movl	$-1, %edi
	callq	exit
.LBB10_3:                               # %trace_logger_init.exit
	movl	$trace_logger_fin, %eax
	movl	%eax, %edi
	callq	atexit
	movl	$1, initp
	movl	%eax, 28(%rsp)          # 4-byte Spill
.LBB10_4:
	movl	inst_count(%rip), %eax
	testl	%eax, %eax
	setne	%cl
	movb	39(%rsp), %dl           # 1-byte Reload
	notb	%dl
	orb	%dl, %cl
	testb	$1, %cl
	movb	track_next_inst(%rip), %cl
	movb	$1, %dl
	movl	%eax, 24(%rsp)          # 4-byte Spill
	movb	%dl, 23(%rsp)           # 1-byte Spill
	movb	%cl, 22(%rsp)           # 1-byte Spill
	jne	.LBB10_14
# BB#13:
	movb	23(%rsp), %al           # 1-byte Reload
	movb	%al, 22(%rsp)           # 1-byte Spill
.LBB10_14:
	movb	22(%rsp), %al           # 1-byte Reload
	movb	%al, track_curr_inst
	movb	63(%rsp), %cl           # 1-byte Reload
	testb	$1, %cl
	movb	%al, 21(%rsp)           # 1-byte Spill
	jne	.LBB10_5
	jmp	.LBB10_9
.LBB10_5:
	movb	39(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_6
	jmp	.LBB10_10
.LBB10_6:
	movl	56(%rsp), %eax          # 4-byte Reload
	cmpl	$1, %eax
	setne	%cl
	movb	21(%rsp), %dl           # 1-byte Reload
	cmpb	$0, %dl
	sete	%sil
	orb	%sil, %cl
	testb	$1, %cl
	jne	.LBB10_8
# BB#7:
	movb	$0, track_next_inst
	jmp	.LBB10_10
.LBB10_8:
	movb	$1, track_next_inst
	jmp	.LBB10_10
.LBB10_9:
	movb	$1, track_next_inst
.LBB10_10:
	movb	21(%rsp), %al           # 1-byte Reload
	cmpb	$0, %al
	je	.LBB10_12
# BB#11:
	movq	full_trace_file, %rdi
	movq	%rsp, %rax
	movl	24(%rsp), %ecx          # 4-byte Reload
	movl	%ecx, 8(%rax)
	movl	56(%rsp), %edx          # 4-byte Reload
	movl	%edx, (%rax)
	movl	$.L.str33818, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%r8d, %r8d
	movb	%r8b, %r9b
	movl	32(%rsp), %edx          # 4-byte Reload
	movq	64(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	48(%rsp), %rax          # 8-byte Reload
	movb	%r9b, 20(%rsp)          # 1-byte Spill
	movq	%rax, %r9
	movb	20(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	inst_count, %edx
	addl	$1, %edx
	movl	%edx, inst_count
	movl	%eax, 16(%rsp)          # 4-byte Spill
.LBB10_12:
	addq	$72, %rsp
	ret
.Ltmp329:
	.size	trace_logger_log0, .Ltmp329-trace_logger_log0
	.cfi_endproc

	.globl	trace_logger_log_int
	.align	16, 0x90
	.type	trace_logger_log_int,@function
trace_logger_log_int:                   # @trace_logger_log_int
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp331:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpl	$1, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	je	.LBB11_2
# BB#1:
	movl	$.L.str43819, %eax
	movl	%eax, %edi
	movl	$.L.str53820, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_int, %eax
	movl	%eax, %ecx
	movl	$88, %edx
	callq	__assert_fail
.LBB11_2:
	cmpb	$0, track_curr_inst
	je	.LBB11_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB11_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str63821, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB11_8
.LBB11_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB11_7
# BB#6:
	movl	$.L.str73822, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB11_8
.LBB11_7:
	movl	$.L.str83823, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB11_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB11_10
# BB#9:
	movl	$.L.str93824, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB11_11
.LBB11_10:
	movl	$.L.str103825, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB11_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB11_13
# BB#12:
	movl	$.L.str113826, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB11_14
.LBB11_13:
	movl	$.L.str123827, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB11_14:
	addq	$120, %rsp
	ret
.Ltmp332:
	.size	trace_logger_log_int, .Ltmp332-trace_logger_log_int
	.cfi_endproc

	.globl	trace_logger_log_double
	.align	16, 0x90
	.type	trace_logger_log_double,@function
trace_logger_log_double:                # @trace_logger_log_double
	.cfi_startproc
# BB#0:
	subq	$104, %rsp
.Ltmp334:
	.cfi_def_cfa_offset 112
	cmpl	$1, initp
	movl	%esi, 100(%rsp)         # 4-byte Spill
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%r8d, 84(%rsp)          # 4-byte Spill
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movl	%edx, 68(%rsp)          # 4-byte Spill
	vmovsd	%xmm0, 56(%rsp)         # 8-byte Spill
	movl	%edi, 52(%rsp)          # 4-byte Spill
	je	.LBB12_2
# BB#1:
	movl	$.L.str43819, %eax
	movl	%eax, %edi
	movl	$.L.str53820, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_double, %eax
	movl	%eax, %ecx
	movl	$108, %edx
	callq	__assert_fail
.LBB12_2:
	cmpb	$0, track_curr_inst
	je	.LBB12_14
# BB#3:
	movl	52(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB12_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str133828, %eax
	movl	%eax, %esi
	movb	$1, %al
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB12_8
.LBB12_5:
	movq	full_trace_file, %rax
	movl	52(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 40(%rsp)          # 8-byte Spill
	jne	.LBB12_7
# BB#6:
	movl	$.L.str143829, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 36(%rsp)          # 4-byte Spill
	jmp	.LBB12_8
.LBB12_7:
	movl	$.L.str153830, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	52(%rsp), %edx          # 4-byte Reload
	movl	100(%rsp), %ecx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %r8d          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 32(%rsp)          # 4-byte Spill
.LBB12_8:
	movq	full_trace_file, %rax
	movl	68(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	je	.LBB12_10
# BB#9:
	movl	$.L.str93824, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 20(%rsp)          # 4-byte Spill
	jmp	.LBB12_11
.LBB12_10:
	movl	$.L.str103825, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 16(%rsp)          # 4-byte Spill
.LBB12_11:
	movq	full_trace_file, %rax
	movl	84(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	je	.LBB12_13
# BB#12:
	movl	$.L.str113826, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
	jmp	.LBB12_14
.LBB12_13:
	movl	$.L.str123827, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, (%rsp)            # 4-byte Spill
.LBB12_14:
	addq	$104, %rsp
	ret
.Ltmp335:
	.size	trace_logger_log_double, .Ltmp335-trace_logger_log_double
	.cfi_endproc

	.type	.L.str,@object          # @.str
	.section	.rodata,"a",@progbits
.L.str:
	.asciz	"cluster"
	.size	.L.str, 8

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"0"
	.size	.L.str1, 2

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	"1"
	.size	.L.str2, 2

	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	"numObjects"
	.size	.L.str3, 11

	.type	.L.str4,@object         # @.str4
.L.str4:
	.asciz	"phi"
	.size	.L.str4, 4

	.type	.L.str5,@object         # @.str5
.L.str5:
	.asciz	"1"
	.size	.L.str5, 2

	.type	.L.str6,@object         # @.str6
.L.str6:
	.asciz	"phi"
	.size	.L.str6, 4

	.type	.L.str7,@object         # @.str7
.L.str7:
	.asciz	"cluster"
	.size	.L.str7, 8

	.type	.L.str8,@object         # @.str8
.L.str8:
	.asciz	"0"
	.size	.L.str8, 2

	.type	.L.str9,@object         # @.str9
.L.str9:
	.asciz	"2"
	.size	.L.str9, 2

	.type	.L.str10,@object        # @.str10
.L.str10:
	.zero	1
	.size	.L.str10, 1

	.type	.L.str11,@object        # @.str11
.L.str11:
	.asciz	"phi"
	.size	.L.str11, 4

	.type	.L.str12,@object        # @.str12
.L.str12:
	.asciz	"1"
	.size	.L.str12, 2

	.type	.L.str13,@object        # @.str13
.L.str13:
	.asciz	"phi"
	.size	.L.str13, 4

	.type	.L.str14,@object        # @.str14
.L.str14:
	.asciz	"2"
	.size	.L.str14, 2

	.type	.L.str15,@object        # @.str15
.L.str15:
	.asciz	"phi"
	.size	.L.str15, 4

	.type	.L.str16,@object        # @.str16
.L.str16:
	.asciz	"cluster"
	.size	.L.str16, 8

	.type	.L.str17,@object        # @.str17
.L.str17:
	.asciz	"0"
	.size	.L.str17, 2

	.type	.L.str18,@object        # @.str18
.L.str18:
	.asciz	"3"
	.size	.L.str18, 2

	.type	.L.str19,@object        # @.str19
.L.str19:
	.asciz	"malloc"
	.size	.L.str19, 7

	.type	.L.str20,@object        # @.str20
.L.str20:
	.asciz	"phi"
	.size	.L.str20, 4

	.type	.L.str21,@object        # @.str21
.L.str21:
	.asciz	"2"
	.size	.L.str21, 2

	.type	.L.str22,@object        # @.str22
.L.str22:
	.asciz	"phi"
	.size	.L.str22, 4

	.type	.L.str23,@object        # @.str23
.L.str23:
	.zero	1
	.size	.L.str23, 1

	.type	.L.str24,@object        # @.str24
.L.str24:
	.asciz	"phi"
	.size	.L.str24, 4

	.type	.L.str25,@object        # @.str25
.L.str25:
	.asciz	"3"
	.size	.L.str25, 2

	.type	.L.str26,@object        # @.str26
.L.str26:
	.asciz	"phi"
	.size	.L.str26, 4

	.type	.L.str27,@object        # @.str27
.L.str27:
	.asciz	"cluster"
	.size	.L.str27, 8

	.type	.L.str28,@object        # @.str28
.L.str28:
	.asciz	"0"
	.size	.L.str28, 2

	.type	.L.str29,@object        # @.str29
.L.str29:
	.asciz	"4"
	.size	.L.str29, 2

	.type	.L.str30,@object        # @.str30
.L.str30:
	.asciz	"3"
	.size	.L.str30, 2

	.type	.L.str31,@object        # @.str31
.L.str31:
	.asciz	"phi"
	.size	.L.str31, 4

	.type	.L.str32,@object        # @.str32
.L.str32:
	.asciz	"4"
	.size	.L.str32, 2

	.type	.L.str33,@object        # @.str33
.L.str33:
	.asciz	"phi"
	.size	.L.str33, 4

	.type	.L.str34,@object        # @.str34
.L.str34:
	.asciz	"cluster"
	.size	.L.str34, 8

	.type	.L.str35,@object        # @.str35
.L.str35:
	.asciz	"0"
	.size	.L.str35, 2

	.type	.L.str36,@object        # @.str36
.L.str36:
	.asciz	"0-8"
	.size	.L.str36, 4

	.type	.L.str37,@object        # @.str37
.L.str37:
	.asciz	"srand"
	.size	.L.str37, 6

	.type	.L.str38,@object        # @.str38
.L.str38:
	.asciz	"phi"
	.size	.L.str38, 4

	.type	.L.str39,@object        # @.str39
.L.str39:
	.zero	1
	.size	.L.str39, 1

	.type	.L.str40,@object        # @.str40
.L.str40:
	.asciz	"phi"
	.size	.L.str40, 4

	.type	.L.str41,@object        # @.str41
.L.str41:
	.zero	1
	.size	.L.str41, 1

	.type	.L.str42,@object        # @.str42
.L.str42:
	.asciz	"phi"
	.size	.L.str42, 4

	.type	.L.str43,@object        # @.str43
.L.str43:
	.asciz	"cluster"
	.size	.L.str43, 8

	.type	.L.str44,@object        # @.str44
.L.str44:
	.asciz	"0"
	.size	.L.str44, 2

	.type	.L.str45,@object        # @.str45
.L.str45:
	.asciz	"5"
	.size	.L.str45, 2

	.type	.L.str46,@object        # @.str46
	.align	16
.L.str46:
	.asciz	"kmeans_clustering"
	.size	.L.str46, 18

	.type	.L.str47,@object        # @.str47
.L.str47:
	.asciz	"phi"
	.size	.L.str47, 4

	.type	.L.str48,@object        # @.str48
.L.str48:
	.asciz	"attributes"
	.size	.L.str48, 11

	.type	.L.str49,@object        # @.str49
.L.str49:
	.asciz	"phi"
	.size	.L.str49, 4

	.type	.L.str50,@object        # @.str50
.L.str50:
	.zero	1
	.size	.L.str50, 1

	.type	.L.str51,@object        # @.str51
.L.str51:
	.asciz	"phi"
	.size	.L.str51, 4

	.type	.L.str52,@object        # @.str52
.L.str52:
	.asciz	"numAttributes"
	.size	.L.str52, 14

	.type	.L.str53,@object        # @.str53
.L.str53:
	.asciz	"phi"
	.size	.L.str53, 4

	.type	.L.str54,@object        # @.str54
.L.str54:
	.zero	1
	.size	.L.str54, 1

	.type	.L.str55,@object        # @.str55
.L.str55:
	.asciz	"phi"
	.size	.L.str55, 4

	.type	.L.str56,@object        # @.str56
.L.str56:
	.asciz	"numObjects"
	.size	.L.str56, 11

	.type	.L.str57,@object        # @.str57
.L.str57:
	.asciz	"phi"
	.size	.L.str57, 4

	.type	.L.str58,@object        # @.str58
.L.str58:
	.zero	1
	.size	.L.str58, 1

	.type	.L.str59,@object        # @.str59
.L.str59:
	.asciz	"phi"
	.size	.L.str59, 4

	.type	.L.str60,@object        # @.str60
.L.str60:
	.asciz	"num_nclusters"
	.size	.L.str60, 14

	.type	.L.str61,@object        # @.str61
.L.str61:
	.asciz	"phi"
	.size	.L.str61, 4

	.type	.L.str62,@object        # @.str62
.L.str62:
	.zero	1
	.size	.L.str62, 1

	.type	.L.str63,@object        # @.str63
.L.str63:
	.asciz	"phi"
	.size	.L.str63, 4

	.type	.L.str64,@object        # @.str64
.L.str64:
	.asciz	"threshold"
	.size	.L.str64, 10

	.type	.L.str65,@object        # @.str65
.L.str65:
	.asciz	"phi"
	.size	.L.str65, 4

	.type	.L.str66,@object        # @.str66
.L.str66:
	.zero	1
	.size	.L.str66, 1

	.type	.L.str67,@object        # @.str67
.L.str67:
	.asciz	"phi"
	.size	.L.str67, 4

	.type	.L.str68,@object        # @.str68
.L.str68:
	.asciz	"4"
	.size	.L.str68, 2

	.type	.L.str69,@object        # @.str69
.L.str69:
	.asciz	"phi"
	.size	.L.str69, 4

	.type	.L.str70,@object        # @.str70
.L.str70:
	.zero	1
	.size	.L.str70, 1

	.type	.L.str71,@object        # @.str71
.L.str71:
	.asciz	"phi"
	.size	.L.str71, 4

	.type	.L.str72,@object        # @.str72
.L.str72:
	.asciz	"5"
	.size	.L.str72, 2

	.type	.L.str73,@object        # @.str73
.L.str73:
	.asciz	"phi"
	.size	.L.str73, 4

	.type	.L.str74,@object        # @.str74
.L.str74:
	.asciz	"cluster"
	.size	.L.str74, 8

	.type	.L.str75,@object        # @.str75
.L.str75:
	.asciz	"0"
	.size	.L.str75, 2

	.type	.L.str76,@object        # @.str76
.L.str76:
	.asciz	"6"
	.size	.L.str76, 2

	.type	.L.str77,@object        # @.str77
.L.str77:
	.asciz	"cluster_centres"
	.size	.L.str77, 16

	.type	.L.str78,@object        # @.str78
.L.str78:
	.asciz	"phi"
	.size	.L.str78, 4

	.type	.L.str79,@object        # @.str79
.L.str79:
	.asciz	"6"
	.size	.L.str79, 2

	.type	.L.str80,@object        # @.str80
.L.str80:
	.asciz	"phi"
	.size	.L.str80, 4

	.type	.L.str81,@object        # @.str81
.L.str81:
	.asciz	"cluster"
	.size	.L.str81, 8

	.type	.L.str82,@object        # @.str82
.L.str82:
	.asciz	"0"
	.size	.L.str82, 2

	.type	.L.str83,@object        # @.str83
.L.str83:
	.asciz	"7"
	.size	.L.str83, 2

	.type	.L.str84,@object        # @.str84
.L.str84:
	.zero	1
	.size	.L.str84, 1

	.type	.L.str85,@object        # @.str85
.L.str85:
	.asciz	"phi"
	.size	.L.str85, 4

	.type	.L.str86,@object        # @.str86
.L.str86:
	.asciz	"6"
	.size	.L.str86, 2

	.type	.L.str87,@object        # @.str87
.L.str87:
	.asciz	"phi"
	.size	.L.str87, 4

	.type	.L.str88,@object        # @.str88
.L.str88:
	.asciz	"7"
	.size	.L.str88, 2

	.type	.L.str89,@object        # @.str89
.L.str89:
	.asciz	"phi"
	.size	.L.str89, 4

	.type	.L.str90,@object        # @.str90
.L.str90:
	.asciz	"cluster"
	.size	.L.str90, 8

	.type	.L.str91,@object        # @.str91
.L.str91:
	.asciz	"0"
	.size	.L.str91, 2

	.type	.L.str92,@object        # @.str92
.L.str92:
	.asciz	"0-10"
	.size	.L.str92, 5

	.type	.L.str93,@object        # @.str93
.L.str93:
	.asciz	"13"
	.size	.L.str93, 3

	.type	.L.str94,@object        # @.str94
.L.str94:
	.asciz	"phi"
	.size	.L.str94, 4

	.type	.L.str95,@object        # @.str95
.L.str95:
	.asciz	"8"
	.size	.L.str95, 2

	.type	.L.str96,@object        # @.str96
.L.str96:
	.asciz	"phi"
	.size	.L.str96, 4

	.type	.L.str97,@object        # @.str97
.L.str97:
	.asciz	"7"
	.size	.L.str97, 2

	.type	.L.str98,@object        # @.str98
.L.str98:
	.asciz	"phi"
	.size	.L.str98, 4

	.type	.L.str99,@object        # @.str99
.L.str99:
	.asciz	"cluster"
	.size	.L.str99, 8

	.type	.L.str100,@object       # @.str100
.L.str100:
	.asciz	"8"
	.size	.L.str100, 2

	.type	.L.str101,@object       # @.str101
.L.str101:
	.asciz	"9"
	.size	.L.str101, 2

	.type	.L.str102,@object       # @.str102
.L.str102:
	.asciz	"6"
	.size	.L.str102, 2

	.type	.L.str103,@object       # @.str103
.L.str103:
	.asciz	"phi"
	.size	.L.str103, 4

	.type	.L.str104,@object       # @.str104
.L.str104:
	.asciz	"9"
	.size	.L.str104, 2

	.type	.L.str105,@object       # @.str105
.L.str105:
	.asciz	"phi"
	.size	.L.str105, 4

	.type	.L.str106,@object       # @.str106
.L.str106:
	.asciz	"cluster"
	.size	.L.str106, 8

	.type	.L.str107,@object       # @.str107
.L.str107:
	.asciz	"8"
	.size	.L.str107, 2

	.type	.L.str108,@object       # @.str108
.L.str108:
	.asciz	"10"
	.size	.L.str108, 3

	.type	.L.str109,@object       # @.str109
.L.str109:
	.asciz	"9"
	.size	.L.str109, 2

	.type	.L.str110,@object       # @.str110
.L.str110:
	.asciz	"phi"
	.size	.L.str110, 4

	.type	.L.str111,@object       # @.str111
.L.str111:
	.asciz	"10"
	.size	.L.str111, 3

	.type	.L.str112,@object       # @.str112
.L.str112:
	.asciz	"phi"
	.size	.L.str112, 4

	.type	.L.str113,@object       # @.str113
.L.str113:
	.asciz	"cluster"
	.size	.L.str113, 8

	.type	.L.str114,@object       # @.str114
.L.str114:
	.asciz	"8"
	.size	.L.str114, 2

	.type	.L.str115,@object       # @.str115
.L.str115:
	.asciz	"8-0"
	.size	.L.str115, 4

	.type	.L.str116,@object       # @.str116
.L.str116:
	.asciz	"free"
	.size	.L.str116, 5

	.type	.L.str117,@object       # @.str117
.L.str117:
	.asciz	"phi"
	.size	.L.str117, 4

	.type	.L.str118,@object       # @.str118
.L.str118:
	.asciz	"10"
	.size	.L.str118, 3

	.type	.L.str119,@object       # @.str119
.L.str119:
	.asciz	"phi"
	.size	.L.str119, 4

	.type	.L.str120,@object       # @.str120
.L.str120:
	.zero	1
	.size	.L.str120, 1

	.type	.L.str121,@object       # @.str121
.L.str121:
	.asciz	"phi"
	.size	.L.str121, 4

	.type	.L.str122,@object       # @.str122
.L.str122:
	.asciz	"cluster"
	.size	.L.str122, 8

	.type	.L.str123,@object       # @.str123
.L.str123:
	.asciz	"8"
	.size	.L.str123, 2

	.type	.L.str124,@object       # @.str124
.L.str124:
	.asciz	"11"
	.size	.L.str124, 3

	.type	.L.str125,@object       # @.str125
.L.str125:
	.asciz	"cluster_centres"
	.size	.L.str125, 16

	.type	.L.str126,@object       # @.str126
.L.str126:
	.asciz	"phi"
	.size	.L.str126, 4

	.type	.L.str127,@object       # @.str127
.L.str127:
	.asciz	"11"
	.size	.L.str127, 3

	.type	.L.str128,@object       # @.str128
.L.str128:
	.asciz	"phi"
	.size	.L.str128, 4

	.type	.L.str129,@object       # @.str129
.L.str129:
	.asciz	"cluster"
	.size	.L.str129, 8

	.type	.L.str130,@object       # @.str130
.L.str130:
	.asciz	"8"
	.size	.L.str130, 2

	.type	.L.str131,@object       # @.str131
.L.str131:
	.asciz	"12"
	.size	.L.str131, 3

	.type	.L.str132,@object       # @.str132
.L.str132:
	.asciz	"11"
	.size	.L.str132, 3

	.type	.L.str133,@object       # @.str133
.L.str133:
	.asciz	"phi"
	.size	.L.str133, 4

	.type	.L.str134,@object       # @.str134
.L.str134:
	.asciz	"12"
	.size	.L.str134, 3

	.type	.L.str135,@object       # @.str135
.L.str135:
	.asciz	"phi"
	.size	.L.str135, 4

	.type	.L.str136,@object       # @.str136
.L.str136:
	.asciz	"cluster"
	.size	.L.str136, 8

	.type	.L.str137,@object       # @.str137
.L.str137:
	.asciz	"8"
	.size	.L.str137, 2

	.type	.L.str138,@object       # @.str138
.L.str138:
	.asciz	"8-1"
	.size	.L.str138, 4

	.type	.L.str139,@object       # @.str139
.L.str139:
	.asciz	"free"
	.size	.L.str139, 5

	.type	.L.str140,@object       # @.str140
.L.str140:
	.asciz	"phi"
	.size	.L.str140, 4

	.type	.L.str141,@object       # @.str141
.L.str141:
	.asciz	"12"
	.size	.L.str141, 3

	.type	.L.str142,@object       # @.str142
.L.str142:
	.asciz	"phi"
	.size	.L.str142, 4

	.type	.L.str143,@object       # @.str143
.L.str143:
	.zero	1
	.size	.L.str143, 1

	.type	.L.str144,@object       # @.str144
.L.str144:
	.asciz	"phi"
	.size	.L.str144, 4

	.type	.L.str145,@object       # @.str145
.L.str145:
	.asciz	"cluster"
	.size	.L.str145, 8

	.type	.L.str146,@object       # @.str146
.L.str146:
	.asciz	"8"
	.size	.L.str146, 2

	.type	.L.str147,@object       # @.str147
.L.str147:
	.asciz	"8-2"
	.size	.L.str147, 4

	.type	.L.str148,@object       # @.str148
.L.str148:
	.asciz	"13"
	.size	.L.str148, 3

	.type	.L.str149,@object       # @.str149
.L.str149:
	.asciz	"phi"
	.size	.L.str149, 4

	.type	.L.str150,@object       # @.str150
.L.str150:
	.asciz	"cluster"
	.size	.L.str150, 8

	.type	.L.str151,@object       # @.str151
.L.str151:
	.asciz	"13"
	.size	.L.str151, 3

	.type	.L.str152,@object       # @.str152
.L.str152:
	.asciz	"13-0"
	.size	.L.str152, 5

	.type	.L.str153,@object       # @.str153
.L.str153:
	.asciz	"cluster_centres"
	.size	.L.str153, 16

	.type	.L.str154,@object       # @.str154
.L.str154:
	.asciz	"phi"
	.size	.L.str154, 4

	.type	.L.str155,@object       # @.str155
.L.str155:
	.asciz	"5"
	.size	.L.str155, 2

	.type	.L.str156,@object       # @.str156
.L.str156:
	.asciz	"phi"
	.size	.L.str156, 4

	.type	.L.str157,@object       # @.str157
.L.str157:
	.asciz	"cluster"
	.size	.L.str157, 8

	.type	.L.str158,@object       # @.str158
.L.str158:
	.asciz	"13"
	.size	.L.str158, 3

	.type	.L.str159,@object       # @.str159
.L.str159:
	.asciz	"13-1"
	.size	.L.str159, 5

	.type	.L.str160,@object       # @.str160
.L.str160:
	.asciz	"free"
	.size	.L.str160, 5

	.type	.L.str161,@object       # @.str161
.L.str161:
	.asciz	"phi"
	.size	.L.str161, 4

	.type	.L.str162,@object       # @.str162
.L.str162:
	.asciz	"3"
	.size	.L.str162, 2

	.type	.L.str163,@object       # @.str163
.L.str163:
	.asciz	"phi"
	.size	.L.str163, 4

	.type	.L.str164,@object       # @.str164
.L.str164:
	.zero	1
	.size	.L.str164, 1

	.type	.L.str165,@object       # @.str165
.L.str165:
	.asciz	"phi"
	.size	.L.str165, 4

	.type	.L.str166,@object       # @.str166
.L.str166:
	.asciz	"cluster"
	.size	.L.str166, 8

	.type	.L.str167,@object       # @.str167
.L.str167:
	.asciz	"13"
	.size	.L.str167, 3

	.type	.L.str168,@object       # @.str168
.L.str168:
	.asciz	"13-2"
	.size	.L.str168, 5

	.type	.L.str169,@object       # @.str169
.L.str169:
	.zero	1
	.size	.L.str169, 1

	.type	.L.str170,@object       # @.str170
.L.str170:
	.asciz	"phi"
	.size	.L.str170, 4

	.type	.L.str171,@object       # @.str171
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str171:
	.asciz	"Usage: %s [switches] -i filename\n       -i filename     :  file containing data to be clustered\n       -b                 :input file is in binary format\n       -k                 : number of clusters (default is 8) \n       -t threshold    : threshold value\n"
	.size	.L.str171, 259

	.type	.L.str1172,@object      # @.str1172
.L.str1172:
	.asciz	"i:k:t:b"
	.size	.L.str1172, 8

	.type	.L.str2173,@object      # @.str2173
.L.str2173:
	.asciz	"0600"
	.size	.L.str2173, 5

	.type	.L.str3174,@object      # @.str3174
.L.str3174:
	.asciz	"Error: no such file (%s)\n"
	.size	.L.str3174, 26

	.type	.L.str4175,@object      # @.str4175
.L.str4175:
	.asciz	"r"
	.size	.L.str4175, 2

	.type	.L.str5176,@object      # @.str5176
.L.str5176:
	.asciz	" \t\n"
	.size	.L.str5176, 4

	.type	.L.str6177,@object      # @.str6177
.L.str6177:
	.asciz	" ,\t\n"
	.size	.L.str6177, 5

	.type	.L.str7178,@object      # @.str7178
.L.str7178:
	.asciz	"I/O completed\n"
	.size	.L.str7178, 15

	.type	.L.str8179,@object      # @.str8179
.L.str8179:
	.asciz	"number of Clusters %d\n"
	.size	.L.str8179, 23

	.type	.L.str9180,@object      # @.str9180
.L.str9180:
	.asciz	"number of Attributes %d\n\n"
	.size	.L.str9180, 26

	.type	.Lstr,@object           # @str
.Lstr:
	.asciz	"I/O completed"
	.size	.Lstr, 14

	.type	.L.str10181,@object     # @.str10181
	.section	.rodata,"a",@progbits
.L.str10181:
	.asciz	"usage"
	.size	.L.str10181, 6

	.type	.L.str11182,@object     # @.str11182
.L.str11182:
	.asciz	"0"
	.size	.L.str11182, 2

	.type	.L.str12183,@object     # @.str12183
.L.str12183:
	.asciz	"1"
	.size	.L.str12183, 2

	.type	.L.str13184,@object     # @.str13184
.L.str13184:
	.asciz	"stderr"
	.size	.L.str13184, 7

	.type	.L.str14185,@object     # @.str14185
.L.str14185:
	.asciz	"phi"
	.size	.L.str14185, 4

	.type	.L.str15186,@object     # @.str15186
.L.str15186:
	.asciz	"1"
	.size	.L.str15186, 2

	.type	.L.str16187,@object     # @.str16187
.L.str16187:
	.asciz	"phi"
	.size	.L.str16187, 4

	.type	.L.str17188,@object     # @.str17188
.L.str17188:
	.asciz	"usage"
	.size	.L.str17188, 6

	.type	.L.str18189,@object     # @.str18189
.L.str18189:
	.asciz	"0"
	.size	.L.str18189, 2

	.type	.L.str19190,@object     # @.str19190
.L.str19190:
	.asciz	"2"
	.size	.L.str19190, 2

	.type	.L.str20191,@object     # @.str20191
.L.str20191:
	.asciz	"fprintf"
	.size	.L.str20191, 8

	.type	.L.str21192,@object     # @.str21192
.L.str21192:
	.asciz	"phi"
	.size	.L.str21192, 4

	.type	.L.str22193,@object     # @.str22193
.L.str22193:
	.asciz	"1"
	.size	.L.str22193, 2

	.type	.L.str23194,@object     # @.str23194
.L.str23194:
	.asciz	"phi"
	.size	.L.str23194, 4

	.type	.L.str24195,@object     # @.str24195
.L.str24195:
	.zero	1
	.size	.L.str24195, 1

	.type	.L.str25196,@object     # @.str25196
.L.str25196:
	.asciz	"phi"
	.size	.L.str25196, 4

	.type	.L.str26197,@object     # @.str26197
.L.str26197:
	.zero	1
	.size	.L.str26197, 1

	.type	.L.str27198,@object     # @.str27198
.L.str27198:
	.asciz	"phi"
	.size	.L.str27198, 4

	.type	.L.str28199,@object     # @.str28199
.L.str28199:
	.zero	1
	.size	.L.str28199, 1

	.type	.L.str29200,@object     # @.str29200
.L.str29200:
	.asciz	"phi"
	.size	.L.str29200, 4

	.type	.L.str30201,@object     # @.str30201
.L.str30201:
	.asciz	"2"
	.size	.L.str30201, 2

	.type	.L.str31202,@object     # @.str31202
.L.str31202:
	.asciz	"phi"
	.size	.L.str31202, 4

	.type	.L.str32203,@object     # @.str32203
.L.str32203:
	.asciz	"usage"
	.size	.L.str32203, 6

	.type	.L.str33204,@object     # @.str33204
.L.str33204:
	.asciz	"0"
	.size	.L.str33204, 2

	.type	.L.str34205,@object     # @.str34205
.L.str34205:
	.asciz	"0-2"
	.size	.L.str34205, 4

	.type	.L.str35206,@object     # @.str35206
.L.str35206:
	.asciz	"exit"
	.size	.L.str35206, 5

	.type	.L.str36207,@object     # @.str36207
.L.str36207:
	.asciz	"phi"
	.size	.L.str36207, 4

	.type	.L.str37208,@object     # @.str37208
.L.str37208:
	.zero	1
	.size	.L.str37208, 1

	.type	.L.str38209,@object     # @.str38209
.L.str38209:
	.asciz	"phi"
	.size	.L.str38209, 4

	.type	.L.str39210,@object     # @.str39210
.L.str39210:
	.zero	1
	.size	.L.str39210, 1

	.type	.L.str40211,@object     # @.str40211
.L.str40211:
	.asciz	"phi"
	.size	.L.str40211, 4

	.type	.L.str41212,@object     # @.str41212
.L.str41212:
	.asciz	"usage"
	.size	.L.str41212, 6

	.type	.L.str42213,@object     # @.str42213
.L.str42213:
	.asciz	"0"
	.size	.L.str42213, 2

	.type	.L.str43214,@object     # @.str43214
.L.str43214:
	.asciz	"0-3"
	.size	.L.str43214, 4

	.type	.L.str44215,@object     # @.str44215
.L.str44215:
	.asciz	"main"
	.size	.L.str44215, 5

	.type	.L.str45216,@object     # @.str45216
.L.str45216:
	.asciz	"0"
	.size	.L.str45216, 2

	.type	.L.str46217,@object     # @.str46217
.L.str46217:
	.asciz	"cluster_centres"
	.size	.L.str46217, 16

	.type	.L.str47218,@object     # @.str47218
.L.str47218:
	.zero	1
	.size	.L.str47218, 1

	.type	.L.str48219,@object     # @.str48219
.L.str48219:
	.asciz	"phi"
	.size	.L.str48219, 4

	.type	.L.str49220,@object     # @.str49220
.L.str49220:
	.asciz	"cluster_centres"
	.size	.L.str49220, 16

	.type	.L.str50221,@object     # @.str50221
.L.str50221:
	.asciz	"phi"
	.size	.L.str50221, 4

	.type	.L.str51222,@object     # @.str51222
.L.str51222:
	.asciz	"main"
	.size	.L.str51222, 5

	.type	.L.str52223,@object     # @.str52223
.L.str52223:
	.asciz	"0"
	.size	.L.str52223, 2

	.type	.L.str53224,@object     # @.str53224
.L.str53224:
	.asciz	"numAttributes"
	.size	.L.str53224, 14

	.type	.L.str54225,@object     # @.str54225
.L.str54225:
	.zero	1
	.size	.L.str54225, 1

	.type	.L.str55226,@object     # @.str55226
.L.str55226:
	.asciz	"phi"
	.size	.L.str55226, 4

	.type	.L.str56227,@object     # @.str56227
.L.str56227:
	.asciz	"numAttributes"
	.size	.L.str56227, 14

	.type	.L.str57228,@object     # @.str57228
.L.str57228:
	.asciz	"phi"
	.size	.L.str57228, 4

	.type	.L.str58229,@object     # @.str58229
.L.str58229:
	.asciz	"main"
	.size	.L.str58229, 5

	.type	.L.str59230,@object     # @.str59230
.L.str59230:
	.asciz	"0"
	.size	.L.str59230, 2

	.type	.L.str60231,@object     # @.str60231
.L.str60231:
	.asciz	"numObjects"
	.size	.L.str60231, 11

	.type	.L.str61232,@object     # @.str61232
.L.str61232:
	.zero	1
	.size	.L.str61232, 1

	.type	.L.str62233,@object     # @.str62233
.L.str62233:
	.asciz	"phi"
	.size	.L.str62233, 4

	.type	.L.str63234,@object     # @.str63234
.L.str63234:
	.asciz	"numObjects"
	.size	.L.str63234, 11

	.type	.L.str64235,@object     # @.str64235
.L.str64235:
	.asciz	"phi"
	.size	.L.str64235, 4

	.type	.L.str65236,@object     # @.str65236
.L.str65236:
	.asciz	"main"
	.size	.L.str65236, 5

	.type	.L.str66237,@object     # @.str66237
.L.str66237:
	.asciz	"0"
	.size	.L.str66237, 2

	.type	.L.str67238,@object     # @.str67238
.L.str67238:
	.asciz	"line"
	.size	.L.str67238, 5

	.type	.L.str68239,@object     # @.str68239
.L.str68239:
	.zero	1
	.size	.L.str68239, 1

	.type	.L.str69240,@object     # @.str69240
.L.str69240:
	.asciz	"phi"
	.size	.L.str69240, 4

	.type	.L.str70241,@object     # @.str70241
.L.str70241:
	.asciz	"line"
	.size	.L.str70241, 5

	.type	.L.str71242,@object     # @.str71242
.L.str71242:
	.asciz	"phi"
	.size	.L.str71242, 4

	.type	.L.str72243,@object     # @.str72243
.L.str72243:
	.asciz	"main"
	.size	.L.str72243, 5

	.type	.L.str73244,@object     # @.str73244
.L.str73244:
	.asciz	"0"
	.size	.L.str73244, 2

	.type	.L.str74245,@object     # @.str74245
.L.str74245:
	.asciz	"0-6"
	.size	.L.str74245, 4

	.type	.L.str75246,@object     # @.str75246
.L.str75246:
	.asciz	"cluster_centres"
	.size	.L.str75246, 16

	.type	.L.str76247,@object     # @.str76247
.L.str76247:
	.asciz	"phi"
	.size	.L.str76247, 4

	.type	.L.str77248,@object     # @.str77248
.L.str77248:
	.zero	1
	.size	.L.str77248, 1

	.type	.L.str78249,@object     # @.str78249
.L.str78249:
	.asciz	"phi"
	.size	.L.str78249, 4

	.type	.L.str79250,@object     # @.str79250
.L.str79250:
	.asciz	"main"
	.size	.L.str79250, 5

	.type	.L.str80251,@object     # @.str80251
.L.str80251:
	.asciz	"0"
	.size	.L.str80251, 2

	.type	.L.str81252,@object     # @.str81252
.L.str81252:
	.asciz	"1"
	.size	.L.str81252, 2

	.type	.L.str82253,@object     # @.str82253
.L.str82253:
	.zero	1
	.size	.L.str82253, 1

	.type	.L.str83254,@object     # @.str83254
.L.str83254:
	.asciz	"phi"
	.size	.L.str83254, 4

	.type	.L.str84255,@object     # @.str84255
.L.str84255:
	.zero	1
	.size	.L.str84255, 1

	.type	.L.str85256,@object     # @.str85256
.L.str85256:
	.asciz	"phi"
	.size	.L.str85256, 4

	.type	.L.str86257,@object     # @.str86257
.L.str86257:
	.asciz	"line"
	.size	.L.str86257, 5

	.type	.L.str87258,@object     # @.str87258
.L.str87258:
	.asciz	"phi"
	.size	.L.str87258, 4

	.type	.L.str88259,@object     # @.str88259
.L.str88259:
	.asciz	"1"
	.size	.L.str88259, 2

	.type	.L.str89260,@object     # @.str89260
.L.str89260:
	.asciz	"phi"
	.size	.L.str89260, 4

	.type	.L.str90261,@object     # @.str90261
.L.str90261:
	.asciz	"main"
	.size	.L.str90261, 5

	.type	.L.str91262,@object     # @.str91262
.L.str91262:
	.asciz	"0"
	.size	.L.str91262, 2

	.type	.L.str92263,@object     # @.str92263
.L.str92263:
	.asciz	"0-13"
	.size	.L.str92263, 5

	.type	.L.str93264,@object     # @.str93264
.L.str93264:
	.asciz	".outer19"
	.size	.L.str93264, 9

	.type	.L.str94265,@object     # @.str94265
.L.str94265:
	.asciz	"phi"
	.size	.L.str94265, 4

	.type	.L.str95266,@object     # @.str95266
.L.str95266:
	.asciz	"main"
	.size	.L.str95266, 5

	.type	.L.str96267,@object     # @.str96267
.L.str96267:
	.asciz	".outer19"
	.size	.L.str96267, 9

	.type	.L.str97268,@object     # @.str97268
	.align	16
.L.str97268:
	.asciz	"isBinaryFile.0.ph"
	.size	.L.str97268, 18

	.type	.L.str98269,@object     # @.str98269
.L.str98269:
	.zero	1
	.size	.L.str98269, 1

	.type	.L.str99270,@object     # @.str99270
.L.str99270:
	.asciz	"2"
	.size	.L.str99270, 2

	.type	.L.str100271,@object    # @.str100271
.L.str100271:
	.zero	1
	.size	.L.str100271, 1

	.type	.L.str101272,@object    # @.str101272
.L.str101272:
	.asciz	"0"
	.size	.L.str101272, 2

	.type	.L.str102273,@object    # @.str102273
	.align	16
.L.str102273:
	.asciz	"isBinaryFile.0.ph"
	.size	.L.str102273, 18

	.type	.L.str103274,@object    # @.str103274
.L.str103274:
	.asciz	"phi"
	.size	.L.str103274, 4

	.type	.L.str104275,@object    # @.str104275
.L.str104275:
	.asciz	"main"
	.size	.L.str104275, 5

	.type	.L.str105276,@object    # @.str105276
.L.str105276:
	.asciz	".outer19"
	.size	.L.str105276, 9

	.type	.L.str106277,@object    # @.str106277
.L.str106277:
	.asciz	"threshold.0.ph"
	.size	.L.str106277, 15

	.type	.L.str107278,@object    # @.str107278
	.align	16
.L.str107278:
	.asciz	"threshold.0.ph21"
	.size	.L.str107278, 17

	.type	.L.str108279,@object    # @.str108279
.L.str108279:
	.asciz	"2"
	.size	.L.str108279, 2

	.type	.L.str109280,@object    # @.str109280
.L.str109280:
	.zero	1
	.size	.L.str109280, 1

	.type	.L.str110281,@object    # @.str110281
.L.str110281:
	.asciz	"0"
	.size	.L.str110281, 2

	.type	.L.str111282,@object    # @.str111282
.L.str111282:
	.asciz	"threshold.0.ph"
	.size	.L.str111282, 15

	.type	.L.str112283,@object    # @.str112283
.L.str112283:
	.asciz	"phi"
	.size	.L.str112283, 4

	.type	.L.str113284,@object    # @.str113284
.L.str113284:
	.asciz	"main"
	.size	.L.str113284, 5

	.type	.L.str114285,@object    # @.str114285
.L.str114285:
	.asciz	".outer19"
	.size	.L.str114285, 9

	.type	.L.str115286,@object    # @.str115286
.L.str115286:
	.asciz	"filename.0.ph"
	.size	.L.str115286, 14

	.type	.L.str116287,@object    # @.str116287
.L.str116287:
	.asciz	"filename.0.ph25"
	.size	.L.str116287, 16

	.type	.L.str117288,@object    # @.str117288
.L.str117288:
	.asciz	"2"
	.size	.L.str117288, 2

	.type	.L.str118289,@object    # @.str118289
.L.str118289:
	.zero	1
	.size	.L.str118289, 1

	.type	.L.str119290,@object    # @.str119290
.L.str119290:
	.asciz	"0"
	.size	.L.str119290, 2

	.type	.L.str120291,@object    # @.str120291
.L.str120291:
	.asciz	"filename.0.ph"
	.size	.L.str120291, 14

	.type	.L.str121292,@object    # @.str121292
.L.str121292:
	.asciz	"phi"
	.size	.L.str121292, 4

	.type	.L.str122293,@object    # @.str122293
.L.str122293:
	.asciz	"main"
	.size	.L.str122293, 5

	.type	.L.str123294,@object    # @.str123294
.L.str123294:
	.asciz	".outer19"
	.size	.L.str123294, 9

	.type	.L.str124295,@object    # @.str124295
.L.str124295:
	.asciz	"nclusters.0.ph"
	.size	.L.str124295, 15

	.type	.L.str125296,@object    # @.str125296
.L.str125296:
	.asciz	"nclusters.0"
	.size	.L.str125296, 12

	.type	.L.str126297,@object    # @.str126297
.L.str126297:
	.asciz	"2"
	.size	.L.str126297, 2

	.type	.L.str127298,@object    # @.str127298
.L.str127298:
	.zero	1
	.size	.L.str127298, 1

	.type	.L.str128299,@object    # @.str128299
.L.str128299:
	.asciz	"0"
	.size	.L.str128299, 2

	.type	.L.str129300,@object    # @.str129300
.L.str129300:
	.asciz	"nclusters.0.ph"
	.size	.L.str129300, 15

	.type	.L.str130301,@object    # @.str130301
.L.str130301:
	.asciz	"phi"
	.size	.L.str130301, 4

	.type	.L.str131302,@object    # @.str131302
.L.str131302:
	.asciz	"main"
	.size	.L.str131302, 5

	.type	.L.str132303,@object    # @.str132303
.L.str132303:
	.asciz	".outer19"
	.size	.L.str132303, 9

	.type	.L.str133304,@object    # @.str133304
.L.str133304:
	.asciz	".outer19-0"
	.size	.L.str133304, 11

	.type	.L.str134305,@object    # @.str134305
.L.str134305:
	.asciz	".outer20"
	.size	.L.str134305, 9

	.type	.L.str135306,@object    # @.str135306
.L.str135306:
	.asciz	"phi"
	.size	.L.str135306, 4

	.type	.L.str136307,@object    # @.str136307
.L.str136307:
	.asciz	"main"
	.size	.L.str136307, 5

	.type	.L.str137308,@object    # @.str137308
.L.str137308:
	.asciz	".outer20"
	.size	.L.str137308, 9

	.type	.L.str138309,@object    # @.str138309
	.align	16
.L.str138309:
	.asciz	"threshold.0.ph21"
	.size	.L.str138309, 17

	.type	.L.str139310,@object    # @.str139310
.L.str139310:
	.asciz	"threshold.0.ph"
	.size	.L.str139310, 15

	.type	.L.str140311,@object    # @.str140311
.L.str140311:
	.asciz	".outer19"
	.size	.L.str140311, 9

	.type	.L.str141312,@object    # @.str141312
.L.str141312:
	.asciz	"9"
	.size	.L.str141312, 2

	.type	.L.str142313,@object    # @.str142313
.L.str142313:
	.asciz	"6"
	.size	.L.str142313, 2

	.type	.L.str143314,@object    # @.str143314
	.align	16
.L.str143314:
	.asciz	"threshold.0.ph21"
	.size	.L.str143314, 17

	.type	.L.str144315,@object    # @.str144315
.L.str144315:
	.asciz	"phi"
	.size	.L.str144315, 4

	.type	.L.str145316,@object    # @.str145316
.L.str145316:
	.asciz	"main"
	.size	.L.str145316, 5

	.type	.L.str146317,@object    # @.str146317
.L.str146317:
	.asciz	".outer20"
	.size	.L.str146317, 9

	.type	.L.str147318,@object    # @.str147318
.L.str147318:
	.asciz	"filename.0.ph22"
	.size	.L.str147318, 16

	.type	.L.str148319,@object    # @.str148319
.L.str148319:
	.asciz	"filename.0.ph"
	.size	.L.str148319, 14

	.type	.L.str149320,@object    # @.str149320
.L.str149320:
	.asciz	".outer19"
	.size	.L.str149320, 9

	.type	.L.str150321,@object    # @.str150321
.L.str150321:
	.asciz	"filename.0.ph25"
	.size	.L.str150321, 16

	.type	.L.str151322,@object    # @.str151322
.L.str151322:
	.asciz	"6"
	.size	.L.str151322, 2

	.type	.L.str152323,@object    # @.str152323
.L.str152323:
	.asciz	"filename.0.ph22"
	.size	.L.str152323, 16

	.type	.L.str153324,@object    # @.str153324
.L.str153324:
	.asciz	"phi"
	.size	.L.str153324, 4

	.type	.L.str154325,@object    # @.str154325
.L.str154325:
	.asciz	"main"
	.size	.L.str154325, 5

	.type	.L.str155326,@object    # @.str155326
.L.str155326:
	.asciz	".outer20"
	.size	.L.str155326, 9

	.type	.L.str156327,@object    # @.str156327
	.align	16
.L.str156327:
	.asciz	"nclusters.0.ph23"
	.size	.L.str156327, 17

	.type	.L.str157328,@object    # @.str157328
.L.str157328:
	.asciz	"nclusters.0.ph"
	.size	.L.str157328, 15

	.type	.L.str158329,@object    # @.str158329
.L.str158329:
	.asciz	".outer19"
	.size	.L.str158329, 9

	.type	.L.str159330,@object    # @.str159330
.L.str159330:
	.asciz	"nclusters.0"
	.size	.L.str159330, 12

	.type	.L.str160331,@object    # @.str160331
.L.str160331:
	.asciz	"6"
	.size	.L.str160331, 2

	.type	.L.str161332,@object    # @.str161332
	.align	16
.L.str161332:
	.asciz	"nclusters.0.ph23"
	.size	.L.str161332, 17

	.type	.L.str162333,@object    # @.str162333
.L.str162333:
	.asciz	"phi"
	.size	.L.str162333, 4

	.type	.L.str163334,@object    # @.str163334
.L.str163334:
	.asciz	"main"
	.size	.L.str163334, 5

	.type	.L.str164335,@object    # @.str164335
.L.str164335:
	.asciz	".outer20"
	.size	.L.str164335, 9

	.type	.L.str165336,@object    # @.str165336
.L.str165336:
	.asciz	".outer20-0"
	.size	.L.str165336, 11

	.type	.L.str166337,@object    # @.str166337
.L.str166337:
	.asciz	".outer24"
	.size	.L.str166337, 9

	.type	.L.str167338,@object    # @.str167338
.L.str167338:
	.asciz	"phi"
	.size	.L.str167338, 4

	.type	.L.str168339,@object    # @.str168339
.L.str168339:
	.asciz	"main"
	.size	.L.str168339, 5

	.type	.L.str169340,@object    # @.str169340
.L.str169340:
	.asciz	".outer24"
	.size	.L.str169340, 9

	.type	.L.str170341,@object    # @.str170341
.L.str170341:
	.asciz	"filename.0.ph25"
	.size	.L.str170341, 16

	.type	.L.str171342,@object    # @.str171342
.L.str171342:
	.asciz	"filename.0.ph22"
	.size	.L.str171342, 16

	.type	.L.str172,@object       # @.str172
.L.str172:
	.asciz	".outer20"
	.size	.L.str172, 9

	.type	.L.str173,@object       # @.str173
.L.str173:
	.asciz	"5"
	.size	.L.str173, 2

	.type	.L.str174,@object       # @.str174
.L.str174:
	.asciz	"4"
	.size	.L.str174, 2

	.type	.L.str175,@object       # @.str175
.L.str175:
	.asciz	"filename.0.ph25"
	.size	.L.str175, 16

	.type	.L.str176,@object       # @.str176
.L.str176:
	.asciz	"phi"
	.size	.L.str176, 4

	.type	.L.str177,@object       # @.str177
.L.str177:
	.asciz	"main"
	.size	.L.str177, 5

	.type	.L.str178,@object       # @.str178
.L.str178:
	.asciz	".outer24"
	.size	.L.str178, 9

	.type	.L.str179,@object       # @.str179
	.align	16
.L.str179:
	.asciz	"nclusters.0.ph26"
	.size	.L.str179, 17

	.type	.L.str180,@object       # @.str180
	.align	16
.L.str180:
	.asciz	"nclusters.0.ph23"
	.size	.L.str180, 17

	.type	.L.str181,@object       # @.str181
.L.str181:
	.asciz	".outer20"
	.size	.L.str181, 9

	.type	.L.str182,@object       # @.str182
.L.str182:
	.asciz	"nclusters.0"
	.size	.L.str182, 12

	.type	.L.str183,@object       # @.str183
.L.str183:
	.asciz	"4"
	.size	.L.str183, 2

	.type	.L.str184,@object       # @.str184
	.align	16
.L.str184:
	.asciz	"nclusters.0.ph26"
	.size	.L.str184, 17

	.type	.L.str185,@object       # @.str185
.L.str185:
	.asciz	"phi"
	.size	.L.str185, 4

	.type	.L.str186,@object       # @.str186
.L.str186:
	.asciz	"main"
	.size	.L.str186, 5

	.type	.L.str187,@object       # @.str187
.L.str187:
	.asciz	".outer24"
	.size	.L.str187, 9

	.type	.L.str188,@object       # @.str188
.L.str188:
	.asciz	".outer24-0"
	.size	.L.str188, 11

	.type	.L.str189,@object       # @.str189
.L.str189:
	.asciz	"2"
	.size	.L.str189, 2

	.type	.L.str190,@object       # @.str190
.L.str190:
	.asciz	"phi"
	.size	.L.str190, 4

	.type	.L.str191,@object       # @.str191
.L.str191:
	.asciz	"main"
	.size	.L.str191, 5

	.type	.L.str192,@object       # @.str192
.L.str192:
	.asciz	"2"
	.size	.L.str192, 2

	.type	.L.str193,@object       # @.str193
.L.str193:
	.asciz	"nclusters.0"
	.size	.L.str193, 12

	.type	.L.str194,@object       # @.str194
	.align	16
.L.str194:
	.asciz	"nclusters.0.ph26"
	.size	.L.str194, 17

	.type	.L.str195,@object       # @.str195
.L.str195:
	.asciz	".outer24"
	.size	.L.str195, 9

	.type	.L.str196,@object       # @.str196
.L.str196:
	.asciz	"12"
	.size	.L.str196, 3

	.type	.L.str197,@object       # @.str197
.L.str197:
	.asciz	"10"
	.size	.L.str197, 3

	.type	.L.str198,@object       # @.str198
.L.str198:
	.asciz	"nclusters.0"
	.size	.L.str198, 12

	.type	.L.str199,@object       # @.str199
.L.str199:
	.asciz	"phi"
	.size	.L.str199, 4

	.type	.L.str200,@object       # @.str200
.L.str200:
	.asciz	"main"
	.size	.L.str200, 5

	.type	.L.str201,@object       # @.str201
.L.str201:
	.asciz	"2"
	.size	.L.str201, 2

	.type	.L.str202,@object       # @.str202
.L.str202:
	.asciz	"3"
	.size	.L.str202, 2

	.type	.L.str203,@object       # @.str203
.L.str203:
	.asciz	"getopt"
	.size	.L.str203, 7

	.type	.L.str204,@object       # @.str204
.L.str204:
	.asciz	"phi"
	.size	.L.str204, 4

	.type	.L.str205,@object       # @.str205
.L.str205:
	.asciz	"argc"
	.size	.L.str205, 5

	.type	.L.str206,@object       # @.str206
.L.str206:
	.asciz	"phi"
	.size	.L.str206, 4

	.type	.L.str207,@object       # @.str207
.L.str207:
	.zero	1
	.size	.L.str207, 1

	.type	.L.str208,@object       # @.str208
.L.str208:
	.asciz	"phi"
	.size	.L.str208, 4

	.type	.L.str209,@object       # @.str209
.L.str209:
	.asciz	"argv"
	.size	.L.str209, 5

	.type	.L.str210,@object       # @.str210
.L.str210:
	.asciz	"phi"
	.size	.L.str210, 4

	.type	.L.str211,@object       # @.str211
.L.str211:
	.zero	1
	.size	.L.str211, 1

	.type	.L.str212,@object       # @.str212
.L.str212:
	.asciz	"phi"
	.size	.L.str212, 4

	.type	.L.str213,@object       # @.str213
.L.str213:
	.zero	1
	.size	.L.str213, 1

	.type	.L.str214,@object       # @.str214
.L.str214:
	.asciz	"phi"
	.size	.L.str214, 4

	.type	.L.str215,@object       # @.str215
.L.str215:
	.zero	1
	.size	.L.str215, 1

	.type	.L.str216,@object       # @.str216
.L.str216:
	.asciz	"phi"
	.size	.L.str216, 4

	.type	.L.str217,@object       # @.str217
.L.str217:
	.asciz	"3"
	.size	.L.str217, 2

	.type	.L.str218,@object       # @.str218
.L.str218:
	.asciz	"phi"
	.size	.L.str218, 4

	.type	.L.str219,@object       # @.str219
.L.str219:
	.asciz	"main"
	.size	.L.str219, 5

	.type	.L.str220,@object       # @.str220
.L.str220:
	.asciz	"2"
	.size	.L.str220, 2

	.type	.L.str221,@object       # @.str221
.L.str221:
	.asciz	"2-1"
	.size	.L.str221, 4

	.type	.L.str222,@object       # @.str222
.L.str222:
	.asciz	"13"
	.size	.L.str222, 3

	.type	.L.str223,@object       # @.str223
.L.str223:
	.asciz	"phi"
	.size	.L.str223, 4

	.type	.L.str224,@object       # @.str224
.L.str224:
	.zero	1
	.size	.L.str224, 1

	.type	.L.str225,@object       # @.str225
.L.str225:
	.asciz	"phi"
	.size	.L.str225, 4

	.type	.L.str226,@object       # @.str226
.L.str226:
	.asciz	"10"
	.size	.L.str226, 3

	.type	.L.str227,@object       # @.str227
.L.str227:
	.asciz	"phi"
	.size	.L.str227, 4

	.type	.L.str228,@object       # @.str228
.L.str228:
	.zero	1
	.size	.L.str228, 1

	.type	.L.str229,@object       # @.str229
.L.str229:
	.asciz	"phi"
	.size	.L.str229, 4

	.type	.L.str230,@object       # @.str230
.L.str230:
	.asciz	"6"
	.size	.L.str230, 2

	.type	.L.str231,@object       # @.str231
.L.str231:
	.asciz	"phi"
	.size	.L.str231, 4

	.type	.L.str232,@object       # @.str232
.L.str232:
	.zero	1
	.size	.L.str232, 1

	.type	.L.str233,@object       # @.str233
.L.str233:
	.asciz	"phi"
	.size	.L.str233, 4

	.type	.L.str234,@object       # @.str234
.L.str234:
	.asciz	".outer19"
	.size	.L.str234, 9

	.type	.L.str235,@object       # @.str235
.L.str235:
	.asciz	"phi"
	.size	.L.str235, 4

	.type	.L.str236,@object       # @.str236
.L.str236:
	.zero	1
	.size	.L.str236, 1

	.type	.L.str237,@object       # @.str237
.L.str237:
	.asciz	"phi"
	.size	.L.str237, 4

	.type	.L.str238,@object       # @.str238
.L.str238:
	.asciz	"4"
	.size	.L.str238, 2

	.type	.L.str239,@object       # @.str239
.L.str239:
	.asciz	"phi"
	.size	.L.str239, 4

	.type	.L.str240,@object       # @.str240
.L.str240:
	.zero	1
	.size	.L.str240, 1

	.type	.L.str241,@object       # @.str241
.L.str241:
	.asciz	"phi"
	.size	.L.str241, 4

	.type	.L.str242,@object       # @.str242
.L.str242:
	.asciz	"17"
	.size	.L.str242, 3

	.type	.L.str243,@object       # @.str243
.L.str243:
	.asciz	"phi"
	.size	.L.str243, 4

	.type	.L.str244,@object       # @.str244
.L.str244:
	.zero	1
	.size	.L.str244, 1

	.type	.L.str245,@object       # @.str245
.L.str245:
	.asciz	"phi"
	.size	.L.str245, 4

	.type	.L.str246,@object       # @.str246
.L.str246:
	.asciz	"15"
	.size	.L.str246, 3

	.type	.L.str247,@object       # @.str247
.L.str247:
	.asciz	"phi"
	.size	.L.str247, 4

	.type	.L.str248,@object       # @.str248
.L.str248:
	.asciz	"3"
	.size	.L.str248, 2

	.type	.L.str249,@object       # @.str249
.L.str249:
	.asciz	"phi"
	.size	.L.str249, 4

	.type	.L.str250,@object       # @.str250
.L.str250:
	.asciz	"main"
	.size	.L.str250, 5

	.type	.L.str251,@object       # @.str251
.L.str251:
	.asciz	"4"
	.size	.L.str251, 2

	.type	.L.str252,@object       # @.str252
.L.str252:
	.asciz	"5"
	.size	.L.str252, 2

	.type	.L.str253,@object       # @.str253
.L.str253:
	.asciz	"optarg"
	.size	.L.str253, 7

	.type	.L.str254,@object       # @.str254
.L.str254:
	.asciz	"phi"
	.size	.L.str254, 4

	.type	.L.str255,@object       # @.str255
.L.str255:
	.asciz	"5"
	.size	.L.str255, 2

	.type	.L.str256,@object       # @.str256
.L.str256:
	.asciz	"phi"
	.size	.L.str256, 4

	.type	.L.str257,@object       # @.str257
.L.str257:
	.asciz	"main"
	.size	.L.str257, 5

	.type	.L.str258,@object       # @.str258
.L.str258:
	.asciz	"4"
	.size	.L.str258, 2

	.type	.L.str259,@object       # @.str259
.L.str259:
	.asciz	"4-1"
	.size	.L.str259, 4

	.type	.L.str260,@object       # @.str260
.L.str260:
	.asciz	".outer24"
	.size	.L.str260, 9

	.type	.L.str261,@object       # @.str261
.L.str261:
	.asciz	"phi"
	.size	.L.str261, 4

	.type	.L.str262,@object       # @.str262
.L.str262:
	.asciz	"main"
	.size	.L.str262, 5

	.type	.L.str263,@object       # @.str263
.L.str263:
	.asciz	"6"
	.size	.L.str263, 2

	.type	.L.str264,@object       # @.str264
.L.str264:
	.asciz	"7"
	.size	.L.str264, 2

	.type	.L.str265,@object       # @.str265
.L.str265:
	.asciz	"optarg"
	.size	.L.str265, 7

	.type	.L.str266,@object       # @.str266
.L.str266:
	.asciz	"phi"
	.size	.L.str266, 4

	.type	.L.str267,@object       # @.str267
.L.str267:
	.asciz	"7"
	.size	.L.str267, 2

	.type	.L.str268,@object       # @.str268
.L.str268:
	.asciz	"phi"
	.size	.L.str268, 4

	.type	.L.str269,@object       # @.str269
.L.str269:
	.asciz	"main"
	.size	.L.str269, 5

	.type	.L.str270,@object       # @.str270
.L.str270:
	.asciz	"6"
	.size	.L.str270, 2

	.type	.L.str271,@object       # @.str271
.L.str271:
	.asciz	"8"
	.size	.L.str271, 2

	.type	.L.str272,@object       # @.str272
.L.str272:
	.asciz	"atof"
	.size	.L.str272, 5

	.type	.L.str273,@object       # @.str273
.L.str273:
	.asciz	"phi"
	.size	.L.str273, 4

	.type	.L.str274,@object       # @.str274
.L.str274:
	.asciz	"7"
	.size	.L.str274, 2

	.type	.L.str275,@object       # @.str275
.L.str275:
	.asciz	"phi"
	.size	.L.str275, 4

	.type	.L.str276,@object       # @.str276
.L.str276:
	.asciz	"__nptr"
	.size	.L.str276, 7

	.type	.L.str277,@object       # @.str277
.L.str277:
	.asciz	"phi"
	.size	.L.str277, 4

	.type	.L.str278,@object       # @.str278
.L.str278:
	.asciz	"8"
	.size	.L.str278, 2

	.type	.L.str279,@object       # @.str279
.L.str279:
	.asciz	"phi"
	.size	.L.str279, 4

	.type	.L.str280,@object       # @.str280
.L.str280:
	.asciz	"main"
	.size	.L.str280, 5

	.type	.L.str281,@object       # @.str281
.L.str281:
	.asciz	"6"
	.size	.L.str281, 2

	.type	.L.str282,@object       # @.str282
.L.str282:
	.asciz	"9"
	.size	.L.str282, 2

	.type	.L.str283,@object       # @.str283
.L.str283:
	.asciz	"8"
	.size	.L.str283, 2

	.type	.L.str284,@object       # @.str284
.L.str284:
	.asciz	"phi"
	.size	.L.str284, 4

	.type	.L.str285,@object       # @.str285
.L.str285:
	.asciz	"9"
	.size	.L.str285, 2

	.type	.L.str286,@object       # @.str286
.L.str286:
	.asciz	"phi"
	.size	.L.str286, 4

	.type	.L.str287,@object       # @.str287
.L.str287:
	.asciz	"main"
	.size	.L.str287, 5

	.type	.L.str288,@object       # @.str288
.L.str288:
	.asciz	"6"
	.size	.L.str288, 2

	.type	.L.str289,@object       # @.str289
.L.str289:
	.asciz	"6-1"
	.size	.L.str289, 4

	.type	.L.str290,@object       # @.str290
.L.str290:
	.asciz	".outer20"
	.size	.L.str290, 9

	.type	.L.str291,@object       # @.str291
.L.str291:
	.asciz	"phi"
	.size	.L.str291, 4

	.type	.L.str292,@object       # @.str292
.L.str292:
	.asciz	"main"
	.size	.L.str292, 5

	.type	.L.str293,@object       # @.str293
.L.str293:
	.asciz	"10"
	.size	.L.str293, 3

	.type	.L.str294,@object       # @.str294
.L.str294:
	.asciz	"11"
	.size	.L.str294, 3

	.type	.L.str295,@object       # @.str295
.L.str295:
	.asciz	"optarg"
	.size	.L.str295, 7

	.type	.L.str296,@object       # @.str296
.L.str296:
	.asciz	"phi"
	.size	.L.str296, 4

	.type	.L.str297,@object       # @.str297
.L.str297:
	.asciz	"11"
	.size	.L.str297, 3

	.type	.L.str298,@object       # @.str298
.L.str298:
	.asciz	"phi"
	.size	.L.str298, 4

	.type	.L.str299,@object       # @.str299
.L.str299:
	.asciz	"main"
	.size	.L.str299, 5

	.type	.L.str300,@object       # @.str300
.L.str300:
	.asciz	"10"
	.size	.L.str300, 3

	.type	.L.str301,@object       # @.str301
.L.str301:
	.asciz	"12"
	.size	.L.str301, 3

	.type	.L.str302,@object       # @.str302
.L.str302:
	.asciz	"atoi"
	.size	.L.str302, 5

	.type	.L.str303,@object       # @.str303
.L.str303:
	.asciz	"phi"
	.size	.L.str303, 4

	.type	.L.str304,@object       # @.str304
.L.str304:
	.asciz	"11"
	.size	.L.str304, 3

	.type	.L.str305,@object       # @.str305
.L.str305:
	.asciz	"phi"
	.size	.L.str305, 4

	.type	.L.str306,@object       # @.str306
.L.str306:
	.asciz	"__nptr"
	.size	.L.str306, 7

	.type	.L.str307,@object       # @.str307
.L.str307:
	.asciz	"phi"
	.size	.L.str307, 4

	.type	.L.str308,@object       # @.str308
.L.str308:
	.asciz	"12"
	.size	.L.str308, 3

	.type	.L.str309,@object       # @.str309
.L.str309:
	.asciz	"phi"
	.size	.L.str309, 4

	.type	.L.str310,@object       # @.str310
.L.str310:
	.asciz	"main"
	.size	.L.str310, 5

	.type	.L.str311,@object       # @.str311
.L.str311:
	.asciz	"10"
	.size	.L.str311, 3

	.type	.L.str312,@object       # @.str312
.L.str312:
	.asciz	"10-1"
	.size	.L.str312, 5

	.type	.L.str313,@object       # @.str313
.L.str313:
	.asciz	"2"
	.size	.L.str313, 2

	.type	.L.str314,@object       # @.str314
.L.str314:
	.asciz	"phi"
	.size	.L.str314, 4

	.type	.L.str315,@object       # @.str315
.L.str315:
	.asciz	"main"
	.size	.L.str315, 5

	.type	.L.str316,@object       # @.str316
.L.str316:
	.asciz	"13"
	.size	.L.str316, 3

	.type	.L.str317,@object       # @.str317
.L.str317:
	.asciz	"14"
	.size	.L.str317, 3

	.type	.L.str318,@object       # @.str318
.L.str318:
	.asciz	"argv"
	.size	.L.str318, 5

	.type	.L.str319,@object       # @.str319
.L.str319:
	.asciz	"phi"
	.size	.L.str319, 4

	.type	.L.str320,@object       # @.str320
.L.str320:
	.asciz	"14"
	.size	.L.str320, 3

	.type	.L.str321,@object       # @.str321
.L.str321:
	.asciz	"phi"
	.size	.L.str321, 4

	.type	.L.str322,@object       # @.str322
.L.str322:
	.asciz	"main"
	.size	.L.str322, 5

	.type	.L.str323,@object       # @.str323
.L.str323:
	.asciz	"13"
	.size	.L.str323, 3

	.type	.L.str324,@object       # @.str324
.L.str324:
	.asciz	"13-0"
	.size	.L.str324, 5

	.type	.L.str325,@object       # @.str325
.L.str325:
	.asciz	"usage"
	.size	.L.str325, 6

	.type	.L.str326,@object       # @.str326
.L.str326:
	.asciz	"phi"
	.size	.L.str326, 4

	.type	.L.str327,@object       # @.str327
.L.str327:
	.asciz	"14"
	.size	.L.str327, 3

	.type	.L.str328,@object       # @.str328
.L.str328:
	.asciz	"phi"
	.size	.L.str328, 4

	.type	.L.str329,@object       # @.str329
.L.str329:
	.asciz	"argv0"
	.size	.L.str329, 6

	.type	.L.str330,@object       # @.str330
.L.str330:
	.asciz	"phi"
	.size	.L.str330, 4

	.type	.L.str331,@object       # @.str331
.L.str331:
	.asciz	"main"
	.size	.L.str331, 5

	.type	.L.str332,@object       # @.str332
.L.str332:
	.asciz	"13"
	.size	.L.str332, 3

	.type	.L.str333,@object       # @.str333
.L.str333:
	.asciz	"13-1"
	.size	.L.str333, 5

	.type	.L.str334,@object       # @.str334
.L.str334:
	.asciz	"main"
	.size	.L.str334, 5

	.type	.L.str335,@object       # @.str335
.L.str335:
	.asciz	"15"
	.size	.L.str335, 3

	.type	.L.str336,@object       # @.str336
.L.str336:
	.asciz	"16"
	.size	.L.str336, 3

	.type	.L.str337,@object       # @.str337
.L.str337:
	.asciz	"argv"
	.size	.L.str337, 5

	.type	.L.str338,@object       # @.str338
.L.str338:
	.asciz	"phi"
	.size	.L.str338, 4

	.type	.L.str339,@object       # @.str339
.L.str339:
	.asciz	"16"
	.size	.L.str339, 3

	.type	.L.str340,@object       # @.str340
.L.str340:
	.asciz	"phi"
	.size	.L.str340, 4

	.type	.L.str341,@object       # @.str341
.L.str341:
	.asciz	"main"
	.size	.L.str341, 5

	.type	.L.str342,@object       # @.str342
.L.str342:
	.asciz	"15"
	.size	.L.str342, 3

	.type	.L.str343,@object       # @.str343
.L.str343:
	.asciz	"15-0"
	.size	.L.str343, 5

	.type	.L.str344,@object       # @.str344
.L.str344:
	.asciz	"usage"
	.size	.L.str344, 6

	.type	.L.str345,@object       # @.str345
.L.str345:
	.asciz	"phi"
	.size	.L.str345, 4

	.type	.L.str346,@object       # @.str346
.L.str346:
	.asciz	"16"
	.size	.L.str346, 3

	.type	.L.str347,@object       # @.str347
.L.str347:
	.asciz	"phi"
	.size	.L.str347, 4

	.type	.L.str348,@object       # @.str348
.L.str348:
	.asciz	"argv0"
	.size	.L.str348, 6

	.type	.L.str349,@object       # @.str349
.L.str349:
	.asciz	"phi"
	.size	.L.str349, 4

	.type	.L.str350,@object       # @.str350
.L.str350:
	.asciz	"main"
	.size	.L.str350, 5

	.type	.L.str351,@object       # @.str351
.L.str351:
	.asciz	"15"
	.size	.L.str351, 3

	.type	.L.str352,@object       # @.str352
.L.str352:
	.asciz	"15-1"
	.size	.L.str352, 5

	.type	.L.str353,@object       # @.str353
.L.str353:
	.asciz	"main"
	.size	.L.str353, 5

	.type	.L.str354,@object       # @.str354
.L.str354:
	.asciz	"17"
	.size	.L.str354, 3

	.type	.L.str355,@object       # @.str355
.L.str355:
	.asciz	"18"
	.size	.L.str355, 3

	.type	.L.str356,@object       # @.str356
.L.str356:
	.zero	1
	.size	.L.str356, 1

	.type	.L.str357,@object       # @.str357
.L.str357:
	.asciz	"phi"
	.size	.L.str357, 4

	.type	.L.str358,@object       # @.str358
.L.str358:
	.asciz	"filename.0.ph25"
	.size	.L.str358, 16

	.type	.L.str359,@object       # @.str359
.L.str359:
	.asciz	"phi"
	.size	.L.str359, 4

	.type	.L.str360,@object       # @.str360
.L.str360:
	.asciz	"18"
	.size	.L.str360, 3

	.type	.L.str361,@object       # @.str361
.L.str361:
	.asciz	"phi"
	.size	.L.str361, 4

	.type	.L.str362,@object       # @.str362
.L.str362:
	.asciz	"main"
	.size	.L.str362, 5

	.type	.L.str363,@object       # @.str363
.L.str363:
	.asciz	"17"
	.size	.L.str363, 3

	.type	.L.str364,@object       # @.str364
.L.str364:
	.asciz	"17-0"
	.size	.L.str364, 5

	.type	.L.str365,@object       # @.str365
.L.str365:
	.asciz	"19"
	.size	.L.str365, 3

	.type	.L.str366,@object       # @.str366
.L.str366:
	.asciz	"phi"
	.size	.L.str366, 4

	.type	.L.str367,@object       # @.str367
.L.str367:
	.asciz	"21"
	.size	.L.str367, 3

	.type	.L.str368,@object       # @.str368
.L.str368:
	.asciz	"phi"
	.size	.L.str368, 4

	.type	.L.str369,@object       # @.str369
.L.str369:
	.asciz	"18"
	.size	.L.str369, 3

	.type	.L.str370,@object       # @.str370
.L.str370:
	.asciz	"phi"
	.size	.L.str370, 4

	.type	.L.str371,@object       # @.str371
.L.str371:
	.asciz	"main"
	.size	.L.str371, 5

	.type	.L.str372,@object       # @.str372
.L.str372:
	.asciz	"19"
	.size	.L.str372, 3

	.type	.L.str373,@object       # @.str373
.L.str373:
	.asciz	"20"
	.size	.L.str373, 3

	.type	.L.str374,@object       # @.str374
.L.str374:
	.asciz	"argv"
	.size	.L.str374, 5

	.type	.L.str375,@object       # @.str375
.L.str375:
	.asciz	"phi"
	.size	.L.str375, 4

	.type	.L.str376,@object       # @.str376
.L.str376:
	.asciz	"20"
	.size	.L.str376, 3

	.type	.L.str377,@object       # @.str377
.L.str377:
	.asciz	"phi"
	.size	.L.str377, 4

	.type	.L.str378,@object       # @.str378
.L.str378:
	.asciz	"main"
	.size	.L.str378, 5

	.type	.L.str379,@object       # @.str379
.L.str379:
	.asciz	"19"
	.size	.L.str379, 3

	.type	.L.str380,@object       # @.str380
.L.str380:
	.asciz	"19-0"
	.size	.L.str380, 5

	.type	.L.str381,@object       # @.str381
.L.str381:
	.asciz	"usage"
	.size	.L.str381, 6

	.type	.L.str382,@object       # @.str382
.L.str382:
	.asciz	"phi"
	.size	.L.str382, 4

	.type	.L.str383,@object       # @.str383
.L.str383:
	.asciz	"20"
	.size	.L.str383, 3

	.type	.L.str384,@object       # @.str384
.L.str384:
	.asciz	"phi"
	.size	.L.str384, 4

	.type	.L.str385,@object       # @.str385
.L.str385:
	.asciz	"argv0"
	.size	.L.str385, 6

	.type	.L.str386,@object       # @.str386
.L.str386:
	.asciz	"phi"
	.size	.L.str386, 4

	.type	.L.str387,@object       # @.str387
.L.str387:
	.asciz	"main"
	.size	.L.str387, 5

	.type	.L.str388,@object       # @.str388
.L.str388:
	.asciz	"19"
	.size	.L.str388, 3

	.type	.L.str389,@object       # @.str389
.L.str389:
	.asciz	"19-1"
	.size	.L.str389, 5

	.type	.L.str390,@object       # @.str390
.L.str390:
	.asciz	"main"
	.size	.L.str390, 5

	.type	.L.str391,@object       # @.str391
.L.str391:
	.asciz	"21"
	.size	.L.str391, 3

	.type	.L.str392,@object       # @.str392
.L.str392:
	.asciz	"21-1"
	.size	.L.str392, 5

	.type	.L.str393,@object       # @.str393
.L.str393:
	.asciz	"numObjects"
	.size	.L.str393, 11

	.type	.L.str394,@object       # @.str394
.L.str394:
	.asciz	"phi"
	.size	.L.str394, 4

	.type	.L.str395,@object       # @.str395
.L.str395:
	.zero	1
	.size	.L.str395, 1

	.type	.L.str396,@object       # @.str396
.L.str396:
	.asciz	"phi"
	.size	.L.str396, 4

	.type	.L.str397,@object       # @.str397
.L.str397:
	.asciz	"main"
	.size	.L.str397, 5

	.type	.L.str398,@object       # @.str398
.L.str398:
	.asciz	"21"
	.size	.L.str398, 3

	.type	.L.str399,@object       # @.str399
.L.str399:
	.asciz	"21-3"
	.size	.L.str399, 5

	.type	.L.str400,@object       # @.str400
.L.str400:
	.asciz	"numAttributes"
	.size	.L.str400, 14

	.type	.L.str401,@object       # @.str401
.L.str401:
	.asciz	"phi"
	.size	.L.str401, 4

	.type	.L.str402,@object       # @.str402
.L.str402:
	.zero	1
	.size	.L.str402, 1

	.type	.L.str403,@object       # @.str403
.L.str403:
	.asciz	"phi"
	.size	.L.str403, 4

	.type	.L.str404,@object       # @.str404
.L.str404:
	.asciz	"main"
	.size	.L.str404, 5

	.type	.L.str405,@object       # @.str405
.L.str405:
	.asciz	"21"
	.size	.L.str405, 3

	.type	.L.str406,@object       # @.str406
.L.str406:
	.asciz	"22"
	.size	.L.str406, 3

	.type	.L.str407,@object       # @.str407
.L.str407:
	.zero	1
	.size	.L.str407, 1

	.type	.L.str408,@object       # @.str408
.L.str408:
	.asciz	"phi"
	.size	.L.str408, 4

	.type	.L.str409,@object       # @.str409
	.align	16
.L.str409:
	.asciz	"isBinaryFile.0.ph"
	.size	.L.str409, 18

	.type	.L.str410,@object       # @.str410
.L.str410:
	.asciz	"phi"
	.size	.L.str410, 4

	.type	.L.str411,@object       # @.str411
.L.str411:
	.asciz	"22"
	.size	.L.str411, 3

	.type	.L.str412,@object       # @.str412
.L.str412:
	.asciz	"phi"
	.size	.L.str412, 4

	.type	.L.str413,@object       # @.str413
.L.str413:
	.asciz	"main"
	.size	.L.str413, 5

	.type	.L.str414,@object       # @.str414
.L.str414:
	.asciz	"21"
	.size	.L.str414, 3

	.type	.L.str415,@object       # @.str415
.L.str415:
	.asciz	"21-4"
	.size	.L.str415, 5

	.type	.L.str416,@object       # @.str416
.L.str416:
	.asciz	"70"
	.size	.L.str416, 3

	.type	.L.str417,@object       # @.str417
.L.str417:
	.asciz	"phi"
	.size	.L.str417, 4

	.type	.L.str418,@object       # @.str418
.L.str418:
	.asciz	"23"
	.size	.L.str418, 3

	.type	.L.str419,@object       # @.str419
.L.str419:
	.asciz	"phi"
	.size	.L.str419, 4

	.type	.L.str420,@object       # @.str420
.L.str420:
	.asciz	"22"
	.size	.L.str420, 3

	.type	.L.str421,@object       # @.str421
.L.str421:
	.asciz	"phi"
	.size	.L.str421, 4

	.type	.L.str422,@object       # @.str422
.L.str422:
	.asciz	"main"
	.size	.L.str422, 5

	.type	.L.str423,@object       # @.str423
.L.str423:
	.asciz	"23"
	.size	.L.str423, 3

	.type	.L.str424,@object       # @.str424
.L.str424:
	.asciz	"24"
	.size	.L.str424, 3

	.type	.L.str425,@object       # @.str425
.L.str425:
	.asciz	"open"
	.size	.L.str425, 5

	.type	.L.str426,@object       # @.str426
.L.str426:
	.asciz	"phi"
	.size	.L.str426, 4

	.type	.L.str427,@object       # @.str427
.L.str427:
	.asciz	"filename.0.ph25"
	.size	.L.str427, 16

	.type	.L.str428,@object       # @.str428
.L.str428:
	.asciz	"phi"
	.size	.L.str428, 4

	.type	.L.str429,@object       # @.str429
.L.str429:
	.zero	1
	.size	.L.str429, 1

	.type	.L.str430,@object       # @.str430
.L.str430:
	.asciz	"phi"
	.size	.L.str430, 4

	.type	.L.str431,@object       # @.str431
.L.str431:
	.zero	1
	.size	.L.str431, 1

	.type	.L.str432,@object       # @.str432
.L.str432:
	.asciz	"phi"
	.size	.L.str432, 4

	.type	.L.str433,@object       # @.str433
.L.str433:
	.zero	1
	.size	.L.str433, 1

	.type	.L.str434,@object       # @.str434
.L.str434:
	.asciz	"phi"
	.size	.L.str434, 4

	.type	.L.str435,@object       # @.str435
.L.str435:
	.asciz	"24"
	.size	.L.str435, 3

	.type	.L.str436,@object       # @.str436
.L.str436:
	.asciz	"phi"
	.size	.L.str436, 4

	.type	.L.str437,@object       # @.str437
.L.str437:
	.asciz	"main"
	.size	.L.str437, 5

	.type	.L.str438,@object       # @.str438
.L.str438:
	.asciz	"23"
	.size	.L.str438, 3

	.type	.L.str439,@object       # @.str439
.L.str439:
	.asciz	"25"
	.size	.L.str439, 3

	.type	.L.str440,@object       # @.str440
.L.str440:
	.zero	1
	.size	.L.str440, 1

	.type	.L.str441,@object       # @.str441
.L.str441:
	.asciz	"phi"
	.size	.L.str441, 4

	.type	.L.str442,@object       # @.str442
.L.str442:
	.asciz	"24"
	.size	.L.str442, 3

	.type	.L.str443,@object       # @.str443
.L.str443:
	.asciz	"phi"
	.size	.L.str443, 4

	.type	.L.str444,@object       # @.str444
.L.str444:
	.asciz	"25"
	.size	.L.str444, 3

	.type	.L.str445,@object       # @.str445
.L.str445:
	.asciz	"phi"
	.size	.L.str445, 4

	.type	.L.str446,@object       # @.str446
.L.str446:
	.asciz	"main"
	.size	.L.str446, 5

	.type	.L.str447,@object       # @.str447
.L.str447:
	.asciz	"23"
	.size	.L.str447, 3

	.type	.L.str448,@object       # @.str448
.L.str448:
	.asciz	"23-1"
	.size	.L.str448, 5

	.type	.L.str449,@object       # @.str449
.L.str449:
	.asciz	"26"
	.size	.L.str449, 3

	.type	.L.str450,@object       # @.str450
.L.str450:
	.asciz	"phi"
	.size	.L.str450, 4

	.type	.L.str451,@object       # @.str451
.L.str451:
	.asciz	"29"
	.size	.L.str451, 3

	.type	.L.str452,@object       # @.str452
.L.str452:
	.asciz	"phi"
	.size	.L.str452, 4

	.type	.L.str453,@object       # @.str453
.L.str453:
	.asciz	"25"
	.size	.L.str453, 3

	.type	.L.str454,@object       # @.str454
.L.str454:
	.asciz	"phi"
	.size	.L.str454, 4

	.type	.L.str455,@object       # @.str455
.L.str455:
	.asciz	"main"
	.size	.L.str455, 5

	.type	.L.str456,@object       # @.str456
.L.str456:
	.asciz	"26"
	.size	.L.str456, 3

	.type	.L.str457,@object       # @.str457
.L.str457:
	.asciz	"27"
	.size	.L.str457, 3

	.type	.L.str458,@object       # @.str458
.L.str458:
	.asciz	"stderr"
	.size	.L.str458, 7

	.type	.L.str459,@object       # @.str459
.L.str459:
	.asciz	"phi"
	.size	.L.str459, 4

	.type	.L.str460,@object       # @.str460
.L.str460:
	.asciz	"27"
	.size	.L.str460, 3

	.type	.L.str461,@object       # @.str461
.L.str461:
	.asciz	"phi"
	.size	.L.str461, 4

	.type	.L.str462,@object       # @.str462
.L.str462:
	.asciz	"main"
	.size	.L.str462, 5

	.type	.L.str463,@object       # @.str463
.L.str463:
	.asciz	"26"
	.size	.L.str463, 3

	.type	.L.str464,@object       # @.str464
.L.str464:
	.asciz	"28"
	.size	.L.str464, 3

	.type	.L.str465,@object       # @.str465
.L.str465:
	.asciz	"fprintf"
	.size	.L.str465, 8

	.type	.L.str466,@object       # @.str466
.L.str466:
	.asciz	"phi"
	.size	.L.str466, 4

	.type	.L.str467,@object       # @.str467
.L.str467:
	.asciz	"27"
	.size	.L.str467, 3

	.type	.L.str468,@object       # @.str468
.L.str468:
	.asciz	"phi"
	.size	.L.str468, 4

	.type	.L.str469,@object       # @.str469
.L.str469:
	.zero	1
	.size	.L.str469, 1

	.type	.L.str470,@object       # @.str470
.L.str470:
	.asciz	"phi"
	.size	.L.str470, 4

	.type	.L.str471,@object       # @.str471
.L.str471:
	.zero	1
	.size	.L.str471, 1

	.type	.L.str472,@object       # @.str472
.L.str472:
	.asciz	"phi"
	.size	.L.str472, 4

	.type	.L.str473,@object       # @.str473
.L.str473:
	.zero	1
	.size	.L.str473, 1

	.type	.L.str474,@object       # @.str474
.L.str474:
	.asciz	"phi"
	.size	.L.str474, 4

	.type	.L.str475,@object       # @.str475
.L.str475:
	.asciz	"28"
	.size	.L.str475, 3

	.type	.L.str476,@object       # @.str476
.L.str476:
	.asciz	"phi"
	.size	.L.str476, 4

	.type	.L.str477,@object       # @.str477
.L.str477:
	.asciz	"main"
	.size	.L.str477, 5

	.type	.L.str478,@object       # @.str478
.L.str478:
	.asciz	"26"
	.size	.L.str478, 3

	.type	.L.str479,@object       # @.str479
.L.str479:
	.asciz	"26-0"
	.size	.L.str479, 5

	.type	.L.str480,@object       # @.str480
.L.str480:
	.asciz	"exit"
	.size	.L.str480, 5

	.type	.L.str481,@object       # @.str481
.L.str481:
	.asciz	"phi"
	.size	.L.str481, 4

	.type	.L.str482,@object       # @.str482
.L.str482:
	.zero	1
	.size	.L.str482, 1

	.type	.L.str483,@object       # @.str483
.L.str483:
	.asciz	"phi"
	.size	.L.str483, 4

	.type	.L.str484,@object       # @.str484
.L.str484:
	.zero	1
	.size	.L.str484, 1

	.type	.L.str485,@object       # @.str485
.L.str485:
	.asciz	"phi"
	.size	.L.str485, 4

	.type	.L.str486,@object       # @.str486
.L.str486:
	.asciz	"main"
	.size	.L.str486, 5

	.type	.L.str487,@object       # @.str487
.L.str487:
	.asciz	"26"
	.size	.L.str487, 3

	.type	.L.str488,@object       # @.str488
.L.str488:
	.asciz	"26-1"
	.size	.L.str488, 5

	.type	.L.str489,@object       # @.str489
.L.str489:
	.asciz	"main"
	.size	.L.str489, 5

	.type	.L.str490,@object       # @.str490
.L.str490:
	.asciz	"29"
	.size	.L.str490, 3

	.type	.L.str491,@object       # @.str491
.L.str491:
	.asciz	"32"
	.size	.L.str491, 3

	.type	.L.str492,@object       # @.str492
.L.str492:
	.asciz	"numObjects"
	.size	.L.str492, 11

	.type	.L.str493,@object       # @.str493
.L.str493:
	.asciz	"phi"
	.size	.L.str493, 4

	.type	.L.str494,@object       # @.str494
.L.str494:
	.asciz	"32"
	.size	.L.str494, 3

	.type	.L.str495,@object       # @.str495
.L.str495:
	.asciz	"phi"
	.size	.L.str495, 4

	.type	.L.str496,@object       # @.str496
.L.str496:
	.asciz	"main"
	.size	.L.str496, 5

	.type	.L.str497,@object       # @.str497
.L.str497:
	.asciz	"29"
	.size	.L.str497, 3

	.type	.L.str498,@object       # @.str498
.L.str498:
	.asciz	"33"
	.size	.L.str498, 3

	.type	.L.str499,@object       # @.str499
.L.str499:
	.asciz	"numAttributes"
	.size	.L.str499, 14

	.type	.L.str500,@object       # @.str500
.L.str500:
	.asciz	"phi"
	.size	.L.str500, 4

	.type	.L.str501,@object       # @.str501
.L.str501:
	.asciz	"33"
	.size	.L.str501, 3

	.type	.L.str502,@object       # @.str502
.L.str502:
	.asciz	"phi"
	.size	.L.str502, 4

	.type	.L.str503,@object       # @.str503
.L.str503:
	.asciz	"main"
	.size	.L.str503, 5

	.type	.L.str504,@object       # @.str504
.L.str504:
	.asciz	"29"
	.size	.L.str504, 3

	.type	.L.str505,@object       # @.str505
.L.str505:
	.asciz	"34"
	.size	.L.str505, 3

	.type	.L.str506,@object       # @.str506
.L.str506:
	.asciz	"32"
	.size	.L.str506, 3

	.type	.L.str507,@object       # @.str507
.L.str507:
	.asciz	"phi"
	.size	.L.str507, 4

	.type	.L.str508,@object       # @.str508
.L.str508:
	.asciz	"33"
	.size	.L.str508, 3

	.type	.L.str509,@object       # @.str509
.L.str509:
	.asciz	"phi"
	.size	.L.str509, 4

	.type	.L.str510,@object       # @.str510
.L.str510:
	.asciz	"34"
	.size	.L.str510, 3

	.type	.L.str511,@object       # @.str511
.L.str511:
	.asciz	"phi"
	.size	.L.str511, 4

	.type	.L.str512,@object       # @.str512
.L.str512:
	.asciz	"main"
	.size	.L.str512, 5

	.type	.L.str513,@object       # @.str513
.L.str513:
	.asciz	"29"
	.size	.L.str513, 3

	.type	.L.str514,@object       # @.str514
.L.str514:
	.asciz	"35"
	.size	.L.str514, 3

	.type	.L.str515,@object       # @.str515
.L.str515:
	.asciz	"34"
	.size	.L.str515, 3

	.type	.L.str516,@object       # @.str516
.L.str516:
	.asciz	"phi"
	.size	.L.str516, 4

	.type	.L.str517,@object       # @.str517
.L.str517:
	.asciz	"35"
	.size	.L.str517, 3

	.type	.L.str518,@object       # @.str518
.L.str518:
	.asciz	"phi"
	.size	.L.str518, 4

	.type	.L.str519,@object       # @.str519
.L.str519:
	.asciz	"main"
	.size	.L.str519, 5

	.type	.L.str520,@object       # @.str520
.L.str520:
	.asciz	"29"
	.size	.L.str520, 3

	.type	.L.str521,@object       # @.str521
.L.str521:
	.asciz	"36"
	.size	.L.str521, 3

	.type	.L.str522,@object       # @.str522
.L.str522:
	.zero	1
	.size	.L.str522, 1

	.type	.L.str523,@object       # @.str523
.L.str523:
	.asciz	"phi"
	.size	.L.str523, 4

	.type	.L.str524,@object       # @.str524
.L.str524:
	.asciz	"35"
	.size	.L.str524, 3

	.type	.L.str525,@object       # @.str525
.L.str525:
	.asciz	"phi"
	.size	.L.str525, 4

	.type	.L.str526,@object       # @.str526
.L.str526:
	.asciz	"36"
	.size	.L.str526, 3

	.type	.L.str527,@object       # @.str527
.L.str527:
	.asciz	"phi"
	.size	.L.str527, 4

	.type	.L.str528,@object       # @.str528
.L.str528:
	.asciz	"main"
	.size	.L.str528, 5

	.type	.L.str529,@object       # @.str529
.L.str529:
	.asciz	"29"
	.size	.L.str529, 3

	.type	.L.str530,@object       # @.str530
.L.str530:
	.asciz	"37"
	.size	.L.str530, 3

	.type	.L.str531,@object       # @.str531
.L.str531:
	.asciz	"malloc"
	.size	.L.str531, 7

	.type	.L.str532,@object       # @.str532
.L.str532:
	.asciz	"phi"
	.size	.L.str532, 4

	.type	.L.str533,@object       # @.str533
.L.str533:
	.asciz	"36"
	.size	.L.str533, 3

	.type	.L.str534,@object       # @.str534
.L.str534:
	.asciz	"phi"
	.size	.L.str534, 4

	.type	.L.str535,@object       # @.str535
.L.str535:
	.zero	1
	.size	.L.str535, 1

	.type	.L.str536,@object       # @.str536
.L.str536:
	.asciz	"phi"
	.size	.L.str536, 4

	.type	.L.str537,@object       # @.str537
.L.str537:
	.asciz	"37"
	.size	.L.str537, 3

	.type	.L.str538,@object       # @.str538
.L.str538:
	.asciz	"phi"
	.size	.L.str538, 4

	.type	.L.str539,@object       # @.str539
.L.str539:
	.asciz	"main"
	.size	.L.str539, 5

	.type	.L.str540,@object       # @.str540
.L.str540:
	.asciz	"29"
	.size	.L.str540, 3

	.type	.L.str541,@object       # @.str541
.L.str541:
	.asciz	"38"
	.size	.L.str541, 3

	.type	.L.str542,@object       # @.str542
.L.str542:
	.asciz	"37"
	.size	.L.str542, 3

	.type	.L.str543,@object       # @.str543
.L.str543:
	.asciz	"phi"
	.size	.L.str543, 4

	.type	.L.str544,@object       # @.str544
.L.str544:
	.asciz	"38"
	.size	.L.str544, 3

	.type	.L.str545,@object       # @.str545
.L.str545:
	.asciz	"phi"
	.size	.L.str545, 4

	.type	.L.str546,@object       # @.str546
.L.str546:
	.asciz	"main"
	.size	.L.str546, 5

	.type	.L.str547,@object       # @.str547
.L.str547:
	.asciz	"29"
	.size	.L.str547, 3

	.type	.L.str548,@object       # @.str548
.L.str548:
	.asciz	"39"
	.size	.L.str548, 3

	.type	.L.str549,@object       # @.str549
.L.str549:
	.asciz	"numObjects"
	.size	.L.str549, 11

	.type	.L.str550,@object       # @.str550
.L.str550:
	.asciz	"phi"
	.size	.L.str550, 4

	.type	.L.str551,@object       # @.str551
.L.str551:
	.asciz	"39"
	.size	.L.str551, 3

	.type	.L.str552,@object       # @.str552
.L.str552:
	.asciz	"phi"
	.size	.L.str552, 4

	.type	.L.str553,@object       # @.str553
.L.str553:
	.asciz	"main"
	.size	.L.str553, 5

	.type	.L.str554,@object       # @.str554
.L.str554:
	.asciz	"29"
	.size	.L.str554, 3

	.type	.L.str555,@object       # @.str555
.L.str555:
	.asciz	"40"
	.size	.L.str555, 3

	.type	.L.str556,@object       # @.str556
.L.str556:
	.asciz	"39"
	.size	.L.str556, 3

	.type	.L.str557,@object       # @.str557
.L.str557:
	.asciz	"phi"
	.size	.L.str557, 4

	.type	.L.str558,@object       # @.str558
.L.str558:
	.asciz	"40"
	.size	.L.str558, 3

	.type	.L.str559,@object       # @.str559
.L.str559:
	.asciz	"phi"
	.size	.L.str559, 4

	.type	.L.str560,@object       # @.str560
.L.str560:
	.asciz	"main"
	.size	.L.str560, 5

	.type	.L.str561,@object       # @.str561
.L.str561:
	.asciz	"29"
	.size	.L.str561, 3

	.type	.L.str562,@object       # @.str562
.L.str562:
	.asciz	"41"
	.size	.L.str562, 3

	.type	.L.str563,@object       # @.str563
.L.str563:
	.zero	1
	.size	.L.str563, 1

	.type	.L.str564,@object       # @.str564
.L.str564:
	.asciz	"phi"
	.size	.L.str564, 4

	.type	.L.str565,@object       # @.str565
.L.str565:
	.asciz	"40"
	.size	.L.str565, 3

	.type	.L.str566,@object       # @.str566
.L.str566:
	.asciz	"phi"
	.size	.L.str566, 4

	.type	.L.str567,@object       # @.str567
.L.str567:
	.asciz	"41"
	.size	.L.str567, 3

	.type	.L.str568,@object       # @.str568
.L.str568:
	.asciz	"phi"
	.size	.L.str568, 4

	.type	.L.str569,@object       # @.str569
.L.str569:
	.asciz	"main"
	.size	.L.str569, 5

	.type	.L.str570,@object       # @.str570
.L.str570:
	.asciz	"29"
	.size	.L.str570, 3

	.type	.L.str571,@object       # @.str571
.L.str571:
	.asciz	"42"
	.size	.L.str571, 3

	.type	.L.str572,@object       # @.str572
.L.str572:
	.asciz	"malloc"
	.size	.L.str572, 7

	.type	.L.str573,@object       # @.str573
.L.str573:
	.asciz	"phi"
	.size	.L.str573, 4

	.type	.L.str574,@object       # @.str574
.L.str574:
	.asciz	"41"
	.size	.L.str574, 3

	.type	.L.str575,@object       # @.str575
.L.str575:
	.asciz	"phi"
	.size	.L.str575, 4

	.type	.L.str576,@object       # @.str576
.L.str576:
	.zero	1
	.size	.L.str576, 1

	.type	.L.str577,@object       # @.str577
.L.str577:
	.asciz	"phi"
	.size	.L.str577, 4

	.type	.L.str578,@object       # @.str578
.L.str578:
	.asciz	"42"
	.size	.L.str578, 3

	.type	.L.str579,@object       # @.str579
.L.str579:
	.asciz	"phi"
	.size	.L.str579, 4

	.type	.L.str580,@object       # @.str580
.L.str580:
	.asciz	"main"
	.size	.L.str580, 5

	.type	.L.str581,@object       # @.str581
.L.str581:
	.asciz	"29"
	.size	.L.str581, 3

	.type	.L.str582,@object       # @.str582
.L.str582:
	.asciz	"43"
	.size	.L.str582, 3

	.type	.L.str583,@object       # @.str583
.L.str583:
	.asciz	"42"
	.size	.L.str583, 3

	.type	.L.str584,@object       # @.str584
.L.str584:
	.asciz	"phi"
	.size	.L.str584, 4

	.type	.L.str585,@object       # @.str585
.L.str585:
	.asciz	"43"
	.size	.L.str585, 3

	.type	.L.str586,@object       # @.str586
.L.str586:
	.asciz	"phi"
	.size	.L.str586, 4

	.type	.L.str587,@object       # @.str587
.L.str587:
	.asciz	"main"
	.size	.L.str587, 5

	.type	.L.str588,@object       # @.str588
.L.str588:
	.asciz	"29"
	.size	.L.str588, 3

	.type	.L.str589,@object       # @.str589
.L.str589:
	.asciz	"44"
	.size	.L.str589, 3

	.type	.L.str590,@object       # @.str590
.L.str590:
	.asciz	"numObjects"
	.size	.L.str590, 11

	.type	.L.str591,@object       # @.str591
.L.str591:
	.asciz	"phi"
	.size	.L.str591, 4

	.type	.L.str592,@object       # @.str592
.L.str592:
	.asciz	"44"
	.size	.L.str592, 3

	.type	.L.str593,@object       # @.str593
.L.str593:
	.asciz	"phi"
	.size	.L.str593, 4

	.type	.L.str594,@object       # @.str594
.L.str594:
	.asciz	"main"
	.size	.L.str594, 5

	.type	.L.str595,@object       # @.str595
.L.str595:
	.asciz	"29"
	.size	.L.str595, 3

	.type	.L.str596,@object       # @.str596
.L.str596:
	.asciz	"45"
	.size	.L.str596, 3

	.type	.L.str597,@object       # @.str597
.L.str597:
	.asciz	"numAttributes"
	.size	.L.str597, 14

	.type	.L.str598,@object       # @.str598
.L.str598:
	.asciz	"phi"
	.size	.L.str598, 4

	.type	.L.str599,@object       # @.str599
.L.str599:
	.asciz	"45"
	.size	.L.str599, 3

	.type	.L.str600,@object       # @.str600
.L.str600:
	.asciz	"phi"
	.size	.L.str600, 4

	.type	.L.str601,@object       # @.str601
.L.str601:
	.asciz	"main"
	.size	.L.str601, 5

	.type	.L.str602,@object       # @.str602
.L.str602:
	.asciz	"29"
	.size	.L.str602, 3

	.type	.L.str603,@object       # @.str603
.L.str603:
	.asciz	"46"
	.size	.L.str603, 3

	.type	.L.str604,@object       # @.str604
.L.str604:
	.asciz	"44"
	.size	.L.str604, 3

	.type	.L.str605,@object       # @.str605
.L.str605:
	.asciz	"phi"
	.size	.L.str605, 4

	.type	.L.str606,@object       # @.str606
.L.str606:
	.asciz	"45"
	.size	.L.str606, 3

	.type	.L.str607,@object       # @.str607
.L.str607:
	.asciz	"phi"
	.size	.L.str607, 4

	.type	.L.str608,@object       # @.str608
.L.str608:
	.asciz	"46"
	.size	.L.str608, 3

	.type	.L.str609,@object       # @.str609
.L.str609:
	.asciz	"phi"
	.size	.L.str609, 4

	.type	.L.str610,@object       # @.str610
.L.str610:
	.asciz	"main"
	.size	.L.str610, 5

	.type	.L.str611,@object       # @.str611
.L.str611:
	.asciz	"29"
	.size	.L.str611, 3

	.type	.L.str612,@object       # @.str612
.L.str612:
	.asciz	"47"
	.size	.L.str612, 3

	.type	.L.str613,@object       # @.str613
.L.str613:
	.asciz	"46"
	.size	.L.str613, 3

	.type	.L.str614,@object       # @.str614
.L.str614:
	.asciz	"phi"
	.size	.L.str614, 4

	.type	.L.str615,@object       # @.str615
.L.str615:
	.asciz	"47"
	.size	.L.str615, 3

	.type	.L.str616,@object       # @.str616
.L.str616:
	.asciz	"phi"
	.size	.L.str616, 4

	.type	.L.str617,@object       # @.str617
.L.str617:
	.asciz	"main"
	.size	.L.str617, 5

	.type	.L.str618,@object       # @.str618
.L.str618:
	.asciz	"29"
	.size	.L.str618, 3

	.type	.L.str619,@object       # @.str619
.L.str619:
	.asciz	"48"
	.size	.L.str619, 3

	.type	.L.str620,@object       # @.str620
.L.str620:
	.zero	1
	.size	.L.str620, 1

	.type	.L.str621,@object       # @.str621
.L.str621:
	.asciz	"phi"
	.size	.L.str621, 4

	.type	.L.str622,@object       # @.str622
.L.str622:
	.asciz	"47"
	.size	.L.str622, 3

	.type	.L.str623,@object       # @.str623
.L.str623:
	.asciz	"phi"
	.size	.L.str623, 4

	.type	.L.str624,@object       # @.str624
.L.str624:
	.asciz	"48"
	.size	.L.str624, 3

	.type	.L.str625,@object       # @.str625
.L.str625:
	.asciz	"phi"
	.size	.L.str625, 4

	.type	.L.str626,@object       # @.str626
.L.str626:
	.asciz	"main"
	.size	.L.str626, 5

	.type	.L.str627,@object       # @.str627
.L.str627:
	.asciz	"29"
	.size	.L.str627, 3

	.type	.L.str628,@object       # @.str628
.L.str628:
	.asciz	"49"
	.size	.L.str628, 3

	.type	.L.str629,@object       # @.str629
.L.str629:
	.asciz	"malloc"
	.size	.L.str629, 7

	.type	.L.str630,@object       # @.str630
.L.str630:
	.asciz	"phi"
	.size	.L.str630, 4

	.type	.L.str631,@object       # @.str631
.L.str631:
	.asciz	"48"
	.size	.L.str631, 3

	.type	.L.str632,@object       # @.str632
.L.str632:
	.asciz	"phi"
	.size	.L.str632, 4

	.type	.L.str633,@object       # @.str633
.L.str633:
	.zero	1
	.size	.L.str633, 1

	.type	.L.str634,@object       # @.str634
.L.str634:
	.asciz	"phi"
	.size	.L.str634, 4

	.type	.L.str635,@object       # @.str635
.L.str635:
	.asciz	"49"
	.size	.L.str635, 3

	.type	.L.str636,@object       # @.str636
.L.str636:
	.asciz	"phi"
	.size	.L.str636, 4

	.type	.L.str637,@object       # @.str637
.L.str637:
	.asciz	"main"
	.size	.L.str637, 5

	.type	.L.str638,@object       # @.str638
.L.str638:
	.asciz	"29"
	.size	.L.str638, 3

	.type	.L.str639,@object       # @.str639
.L.str639:
	.asciz	"50"
	.size	.L.str639, 3

	.type	.L.str640,@object       # @.str640
.L.str640:
	.asciz	"49"
	.size	.L.str640, 3

	.type	.L.str641,@object       # @.str641
.L.str641:
	.asciz	"phi"
	.size	.L.str641, 4

	.type	.L.str642,@object       # @.str642
.L.str642:
	.asciz	"50"
	.size	.L.str642, 3

	.type	.L.str643,@object       # @.str643
.L.str643:
	.asciz	"phi"
	.size	.L.str643, 4

	.type	.L.str644,@object       # @.str644
.L.str644:
	.asciz	"main"
	.size	.L.str644, 5

	.type	.L.str645,@object       # @.str645
.L.str645:
	.asciz	"29"
	.size	.L.str645, 3

	.type	.L.str646,@object       # @.str646
.L.str646:
	.asciz	"29-7"
	.size	.L.str646, 5

	.type	.L.str647,@object       # @.str647
.L.str647:
	.asciz	"43"
	.size	.L.str647, 3

	.type	.L.str648,@object       # @.str648
.L.str648:
	.asciz	"phi"
	.size	.L.str648, 4

	.type	.L.str649,@object       # @.str649
.L.str649:
	.asciz	"50"
	.size	.L.str649, 3

	.type	.L.str650,@object       # @.str650
.L.str650:
	.asciz	"phi"
	.size	.L.str650, 4

	.type	.L.str651,@object       # @.str651
.L.str651:
	.asciz	"main"
	.size	.L.str651, 5

	.type	.L.str652,@object       # @.str652
.L.str652:
	.asciz	"29"
	.size	.L.str652, 3

	.type	.L.str653,@object       # @.str653
.L.str653:
	.asciz	"51"
	.size	.L.str653, 3

	.type	.L.str654,@object       # @.str654
.L.str654:
	.asciz	"numObjects"
	.size	.L.str654, 11

	.type	.L.str655,@object       # @.str655
.L.str655:
	.asciz	"phi"
	.size	.L.str655, 4

	.type	.L.str656,@object       # @.str656
.L.str656:
	.asciz	"51"
	.size	.L.str656, 3

	.type	.L.str657,@object       # @.str657
.L.str657:
	.asciz	"phi"
	.size	.L.str657, 4

	.type	.L.str658,@object       # @.str658
.L.str658:
	.asciz	"main"
	.size	.L.str658, 5

	.type	.L.str659,@object       # @.str659
.L.str659:
	.asciz	"29"
	.size	.L.str659, 3

	.type	.L.str660,@object       # @.str660
.L.str660:
	.asciz	"52"
	.size	.L.str660, 3

	.type	.L.str661,@object       # @.str661
.L.str661:
	.zero	1
	.size	.L.str661, 1

	.type	.L.str662,@object       # @.str662
.L.str662:
	.asciz	"phi"
	.size	.L.str662, 4

	.type	.L.str663,@object       # @.str663
.L.str663:
	.asciz	"51"
	.size	.L.str663, 3

	.type	.L.str664,@object       # @.str664
.L.str664:
	.asciz	"phi"
	.size	.L.str664, 4

	.type	.L.str665,@object       # @.str665
.L.str665:
	.asciz	"52"
	.size	.L.str665, 3

	.type	.L.str666,@object       # @.str666
.L.str666:
	.asciz	"phi"
	.size	.L.str666, 4

	.type	.L.str667,@object       # @.str667
.L.str667:
	.asciz	"main"
	.size	.L.str667, 5

	.type	.L.str668,@object       # @.str668
.L.str668:
	.asciz	"29"
	.size	.L.str668, 3

	.type	.L.str669,@object       # @.str669
.L.str669:
	.asciz	"29-10"
	.size	.L.str669, 6

	.type	.L.str670,@object       # @.str670
.L.str670:
	.asciz	".lr.ph16"
	.size	.L.str670, 9

	.type	.L.str671,@object       # @.str671
.L.str671:
	.asciz	"phi"
	.size	.L.str671, 4

	.type	.L.str672,@object       # @.str672
.L.str672:
	.asciz	"._crit_edge17"
	.size	.L.str672, 14

	.type	.L.str673,@object       # @.str673
.L.str673:
	.asciz	"phi"
	.size	.L.str673, 4

	.type	.L.str674,@object       # @.str674
.L.str674:
	.asciz	"52"
	.size	.L.str674, 3

	.type	.L.str675,@object       # @.str675
.L.str675:
	.asciz	"phi"
	.size	.L.str675, 4

	.type	.L.str676,@object       # @.str676
.L.str676:
	.asciz	"main"
	.size	.L.str676, 5

	.type	.L.str677,@object       # @.str677
.L.str677:
	.asciz	".lr.ph16"
	.size	.L.str677, 9

	.type	.L.str678,@object       # @.str678
.L.str678:
	.asciz	"53"
	.size	.L.str678, 3

	.type	.L.str679,@object       # @.str679
.L.str679:
	.asciz	"numAttributes"
	.size	.L.str679, 14

	.type	.L.str680,@object       # @.str680
.L.str680:
	.asciz	"phi"
	.size	.L.str680, 4

	.type	.L.str681,@object       # @.str681
.L.str681:
	.asciz	"53"
	.size	.L.str681, 3

	.type	.L.str682,@object       # @.str682
.L.str682:
	.asciz	"phi"
	.size	.L.str682, 4

	.type	.L.str683,@object       # @.str683
.L.str683:
	.asciz	"main"
	.size	.L.str683, 5

	.type	.L.str684,@object       # @.str684
.L.str684:
	.asciz	".lr.ph16"
	.size	.L.str684, 9

	.type	.L.str685,@object       # @.str685
.L.str685:
	.asciz	"54"
	.size	.L.str685, 3

	.type	.L.str686,@object       # @.str686
.L.str686:
	.asciz	"53"
	.size	.L.str686, 3

	.type	.L.str687,@object       # @.str687
.L.str687:
	.asciz	"phi"
	.size	.L.str687, 4

	.type	.L.str688,@object       # @.str688
.L.str688:
	.asciz	"54"
	.size	.L.str688, 3

	.type	.L.str689,@object       # @.str689
.L.str689:
	.asciz	"phi"
	.size	.L.str689, 4

	.type	.L.str690,@object       # @.str690
.L.str690:
	.asciz	"main"
	.size	.L.str690, 5

	.type	.L.str691,@object       # @.str691
.L.str691:
	.asciz	".lr.ph16"
	.size	.L.str691, 9

	.type	.L.str692,@object       # @.str692
.L.str692:
	.asciz	"55"
	.size	.L.str692, 3

	.type	.L.str693,@object       # @.str693
.L.str693:
	.asciz	"numObjects"
	.size	.L.str693, 11

	.type	.L.str694,@object       # @.str694
.L.str694:
	.asciz	"phi"
	.size	.L.str694, 4

	.type	.L.str695,@object       # @.str695
.L.str695:
	.asciz	"55"
	.size	.L.str695, 3

	.type	.L.str696,@object       # @.str696
.L.str696:
	.asciz	"phi"
	.size	.L.str696, 4

	.type	.L.str697,@object       # @.str697
.L.str697:
	.asciz	"main"
	.size	.L.str697, 5

	.type	.L.str698,@object       # @.str698
.L.str698:
	.asciz	".lr.ph16"
	.size	.L.str698, 9

	.type	.L.str699,@object       # @.str699
.L.str699:
	.asciz	".lr.ph16-2"
	.size	.L.str699, 11

	.type	.L.str700,@object       # @.str700
.L.str700:
	.asciz	"56"
	.size	.L.str700, 3

	.type	.L.str701,@object       # @.str701
.L.str701:
	.asciz	"phi"
	.size	.L.str701, 4

	.type	.L.str702,@object       # @.str702
.L.str702:
	.asciz	"main"
	.size	.L.str702, 5

	.type	.L.str703,@object       # @.str703
.L.str703:
	.asciz	"56"
	.size	.L.str703, 3

	.type	.L.str704,@object       # @.str704
.L.str704:
	.asciz	"indvars.iv44"
	.size	.L.str704, 13

	.type	.L.str705,@object       # @.str705
	.align	16
.L.str705:
	.asciz	"indvars.iv.next45"
	.size	.L.str705, 18

	.type	.L.str706,@object       # @.str706
.L.str706:
	.asciz	"56"
	.size	.L.str706, 3

	.type	.L.str707,@object       # @.str707
.L.str707:
	.zero	1
	.size	.L.str707, 1

	.type	.L.str708,@object       # @.str708
.L.str708:
	.asciz	".lr.ph16"
	.size	.L.str708, 9

	.type	.L.str709,@object       # @.str709
.L.str709:
	.asciz	"indvars.iv44"
	.size	.L.str709, 13

	.type	.L.str710,@object       # @.str710
.L.str710:
	.asciz	"phi"
	.size	.L.str710, 4

	.type	.L.str711,@object       # @.str711
.L.str711:
	.asciz	"main"
	.size	.L.str711, 5

	.type	.L.str712,@object       # @.str712
.L.str712:
	.asciz	"56"
	.size	.L.str712, 3

	.type	.L.str713,@object       # @.str713
.L.str713:
	.asciz	"57"
	.size	.L.str713, 3

	.type	.L.str714,@object       # @.str714
.L.str714:
	.zero	1
	.size	.L.str714, 1

	.type	.L.str715,@object       # @.str715
.L.str715:
	.asciz	"phi"
	.size	.L.str715, 4

	.type	.L.str716,@object       # @.str716
.L.str716:
	.asciz	"indvars.iv44"
	.size	.L.str716, 13

	.type	.L.str717,@object       # @.str717
.L.str717:
	.asciz	"phi"
	.size	.L.str717, 4

	.type	.L.str718,@object       # @.str718
.L.str718:
	.asciz	"57"
	.size	.L.str718, 3

	.type	.L.str719,@object       # @.str719
.L.str719:
	.asciz	"phi"
	.size	.L.str719, 4

	.type	.L.str720,@object       # @.str720
.L.str720:
	.asciz	"main"
	.size	.L.str720, 5

	.type	.L.str721,@object       # @.str721
.L.str721:
	.asciz	"56"
	.size	.L.str721, 3

	.type	.L.str722,@object       # @.str722
.L.str722:
	.asciz	"58"
	.size	.L.str722, 3

	.type	.L.str723,@object       # @.str723
.L.str723:
	.asciz	"57"
	.size	.L.str723, 3

	.type	.L.str724,@object       # @.str724
.L.str724:
	.asciz	"phi"
	.size	.L.str724, 4

	.type	.L.str725,@object       # @.str725
.L.str725:
	.asciz	"43"
	.size	.L.str725, 3

	.type	.L.str726,@object       # @.str726
.L.str726:
	.asciz	"phi"
	.size	.L.str726, 4

	.type	.L.str727,@object       # @.str727
.L.str727:
	.asciz	"58"
	.size	.L.str727, 3

	.type	.L.str728,@object       # @.str728
.L.str728:
	.asciz	"phi"
	.size	.L.str728, 4

	.type	.L.str729,@object       # @.str729
.L.str729:
	.asciz	"main"
	.size	.L.str729, 5

	.type	.L.str730,@object       # @.str730
.L.str730:
	.asciz	"56"
	.size	.L.str730, 3

	.type	.L.str731,@object       # @.str731
.L.str731:
	.asciz	"59"
	.size	.L.str731, 3

	.type	.L.str732,@object       # @.str732
.L.str732:
	.asciz	"58"
	.size	.L.str732, 3

	.type	.L.str733,@object       # @.str733
.L.str733:
	.asciz	"phi"
	.size	.L.str733, 4

	.type	.L.str734,@object       # @.str734
.L.str734:
	.asciz	"59"
	.size	.L.str734, 3

	.type	.L.str735,@object       # @.str735
.L.str735:
	.asciz	"phi"
	.size	.L.str735, 4

	.type	.L.str736,@object       # @.str736
.L.str736:
	.asciz	"main"
	.size	.L.str736, 5

	.type	.L.str737,@object       # @.str737
.L.str737:
	.asciz	"56"
	.size	.L.str737, 3

	.type	.L.str738,@object       # @.str738
.L.str738:
	.asciz	"60"
	.size	.L.str738, 3

	.type	.L.str739,@object       # @.str739
.L.str739:
	.asciz	"54"
	.size	.L.str739, 3

	.type	.L.str740,@object       # @.str740
.L.str740:
	.asciz	"phi"
	.size	.L.str740, 4

	.type	.L.str741,@object       # @.str741
.L.str741:
	.asciz	"59"
	.size	.L.str741, 3

	.type	.L.str742,@object       # @.str742
.L.str742:
	.asciz	"phi"
	.size	.L.str742, 4

	.type	.L.str743,@object       # @.str743
.L.str743:
	.asciz	"60"
	.size	.L.str743, 3

	.type	.L.str744,@object       # @.str744
.L.str744:
	.asciz	"phi"
	.size	.L.str744, 4

	.type	.L.str745,@object       # @.str745
.L.str745:
	.asciz	"main"
	.size	.L.str745, 5

	.type	.L.str746,@object       # @.str746
.L.str746:
	.asciz	"56"
	.size	.L.str746, 3

	.type	.L.str747,@object       # @.str747
.L.str747:
	.asciz	"61"
	.size	.L.str747, 3

	.type	.L.str748,@object       # @.str748
.L.str748:
	.asciz	"indvars.iv44"
	.size	.L.str748, 13

	.type	.L.str749,@object       # @.str749
.L.str749:
	.asciz	"phi"
	.size	.L.str749, 4

	.type	.L.str750,@object       # @.str750
.L.str750:
	.asciz	"43"
	.size	.L.str750, 3

	.type	.L.str751,@object       # @.str751
.L.str751:
	.asciz	"phi"
	.size	.L.str751, 4

	.type	.L.str752,@object       # @.str752
.L.str752:
	.asciz	"61"
	.size	.L.str752, 3

	.type	.L.str753,@object       # @.str753
.L.str753:
	.asciz	"phi"
	.size	.L.str753, 4

	.type	.L.str754,@object       # @.str754
.L.str754:
	.asciz	"main"
	.size	.L.str754, 5

	.type	.L.str755,@object       # @.str755
.L.str755:
	.asciz	"56"
	.size	.L.str755, 3

	.type	.L.str756,@object       # @.str756
.L.str756:
	.asciz	"56-1"
	.size	.L.str756, 5

	.type	.L.str757,@object       # @.str757
.L.str757:
	.asciz	"61"
	.size	.L.str757, 3

	.type	.L.str758,@object       # @.str758
.L.str758:
	.asciz	"phi"
	.size	.L.str758, 4

	.type	.L.str759,@object       # @.str759
.L.str759:
	.asciz	"60"
	.size	.L.str759, 3

	.type	.L.str760,@object       # @.str760
.L.str760:
	.asciz	"phi"
	.size	.L.str760, 4

	.type	.L.str761,@object       # @.str761
.L.str761:
	.asciz	"main"
	.size	.L.str761, 5

	.type	.L.str762,@object       # @.str762
.L.str762:
	.asciz	"56"
	.size	.L.str762, 3

	.type	.L.str763,@object       # @.str763
	.align	16
.L.str763:
	.asciz	"indvars.iv.next45"
	.size	.L.str763, 18

	.type	.L.str764,@object       # @.str764
.L.str764:
	.zero	1
	.size	.L.str764, 1

	.type	.L.str765,@object       # @.str765
.L.str765:
	.asciz	"phi"
	.size	.L.str765, 4

	.type	.L.str766,@object       # @.str766
.L.str766:
	.asciz	"indvars.iv44"
	.size	.L.str766, 13

	.type	.L.str767,@object       # @.str767
.L.str767:
	.asciz	"phi"
	.size	.L.str767, 4

	.type	.L.str768,@object       # @.str768
	.align	16
.L.str768:
	.asciz	"indvars.iv.next45"
	.size	.L.str768, 18

	.type	.L.str769,@object       # @.str769
.L.str769:
	.asciz	"phi"
	.size	.L.str769, 4

	.type	.L.str770,@object       # @.str770
.L.str770:
	.asciz	"main"
	.size	.L.str770, 5

	.type	.L.str771,@object       # @.str771
.L.str771:
	.asciz	"56"
	.size	.L.str771, 3

	.type	.L.str772,@object       # @.str772
.L.str772:
	.asciz	"62"
	.size	.L.str772, 3

	.type	.L.str773,@object       # @.str773
	.align	16
.L.str773:
	.asciz	"indvars.iv.next45"
	.size	.L.str773, 18

	.type	.L.str774,@object       # @.str774
.L.str774:
	.asciz	"phi"
	.size	.L.str774, 4

	.type	.L.str775,@object       # @.str775
.L.str775:
	.asciz	"62"
	.size	.L.str775, 3

	.type	.L.str776,@object       # @.str776
.L.str776:
	.asciz	"phi"
	.size	.L.str776, 4

	.type	.L.str777,@object       # @.str777
.L.str777:
	.asciz	"main"
	.size	.L.str777, 5

	.type	.L.str778,@object       # @.str778
.L.str778:
	.asciz	"56"
	.size	.L.str778, 3

	.type	.L.str779,@object       # @.str779
.L.str779:
	.asciz	"63"
	.size	.L.str779, 3

	.type	.L.str780,@object       # @.str780
.L.str780:
	.asciz	"55"
	.size	.L.str780, 3

	.type	.L.str781,@object       # @.str781
.L.str781:
	.asciz	"phi"
	.size	.L.str781, 4

	.type	.L.str782,@object       # @.str782
.L.str782:
	.asciz	"62"
	.size	.L.str782, 3

	.type	.L.str783,@object       # @.str783
.L.str783:
	.asciz	"phi"
	.size	.L.str783, 4

	.type	.L.str784,@object       # @.str784
.L.str784:
	.asciz	"63"
	.size	.L.str784, 3

	.type	.L.str785,@object       # @.str785
.L.str785:
	.asciz	"phi"
	.size	.L.str785, 4

	.type	.L.str786,@object       # @.str786
.L.str786:
	.asciz	"main"
	.size	.L.str786, 5

	.type	.L.str787,@object       # @.str787
.L.str787:
	.asciz	"56"
	.size	.L.str787, 3

	.type	.L.str788,@object       # @.str788
.L.str788:
	.asciz	"56-3"
	.size	.L.str788, 5

	.type	.L.str789,@object       # @.str789
.L.str789:
	.asciz	"56"
	.size	.L.str789, 3

	.type	.L.str790,@object       # @.str790
.L.str790:
	.asciz	"phi"
	.size	.L.str790, 4

	.type	.L.str791,@object       # @.str791
.L.str791:
	.asciz	"._crit_edge17"
	.size	.L.str791, 14

	.type	.L.str792,@object       # @.str792
.L.str792:
	.asciz	"phi"
	.size	.L.str792, 4

	.type	.L.str793,@object       # @.str793
.L.str793:
	.asciz	"63"
	.size	.L.str793, 3

	.type	.L.str794,@object       # @.str794
.L.str794:
	.asciz	"phi"
	.size	.L.str794, 4

	.type	.L.str795,@object       # @.str795
.L.str795:
	.asciz	"main"
	.size	.L.str795, 5

	.type	.L.str796,@object       # @.str796
.L.str796:
	.asciz	"._crit_edge17"
	.size	.L.str796, 14

	.type	.L.str797,@object       # @.str797
.L.str797:
	.asciz	".lcssa"
	.size	.L.str797, 7

	.type	.L.str798,@object       # @.str798
.L.str798:
	.asciz	"55"
	.size	.L.str798, 3

	.type	.L.str799,@object       # @.str799
.L.str799:
	.asciz	"56"
	.size	.L.str799, 3

	.type	.L.str800,@object       # @.str800
.L.str800:
	.asciz	"51"
	.size	.L.str800, 3

	.type	.L.str801,@object       # @.str801
.L.str801:
	.asciz	"29"
	.size	.L.str801, 3

	.type	.L.str802,@object       # @.str802
.L.str802:
	.asciz	".lcssa"
	.size	.L.str802, 7

	.type	.L.str803,@object       # @.str803
.L.str803:
	.asciz	"phi"
	.size	.L.str803, 4

	.type	.L.str804,@object       # @.str804
.L.str804:
	.asciz	"main"
	.size	.L.str804, 5

	.type	.L.str805,@object       # @.str805
.L.str805:
	.asciz	"._crit_edge17"
	.size	.L.str805, 14

	.type	.L.str806,@object       # @.str806
.L.str806:
	.asciz	"64"
	.size	.L.str806, 3

	.type	.L.str807,@object       # @.str807
.L.str807:
	.asciz	"numAttributes"
	.size	.L.str807, 14

	.type	.L.str808,@object       # @.str808
.L.str808:
	.asciz	"phi"
	.size	.L.str808, 4

	.type	.L.str809,@object       # @.str809
.L.str809:
	.asciz	"64"
	.size	.L.str809, 3

	.type	.L.str810,@object       # @.str810
.L.str810:
	.asciz	"phi"
	.size	.L.str810, 4

	.type	.L.str811,@object       # @.str811
.L.str811:
	.asciz	"main"
	.size	.L.str811, 5

	.type	.L.str812,@object       # @.str812
.L.str812:
	.asciz	"._crit_edge17"
	.size	.L.str812, 14

	.type	.L.str813,@object       # @.str813
.L.str813:
	.asciz	"65"
	.size	.L.str813, 3

	.type	.L.str814,@object       # @.str814
.L.str814:
	.asciz	".lcssa"
	.size	.L.str814, 7

	.type	.L.str815,@object       # @.str815
.L.str815:
	.asciz	"phi"
	.size	.L.str815, 4

	.type	.L.str816,@object       # @.str816
.L.str816:
	.asciz	"64"
	.size	.L.str816, 3

	.type	.L.str817,@object       # @.str817
.L.str817:
	.asciz	"phi"
	.size	.L.str817, 4

	.type	.L.str818,@object       # @.str818
.L.str818:
	.asciz	"65"
	.size	.L.str818, 3

	.type	.L.str819,@object       # @.str819
.L.str819:
	.asciz	"phi"
	.size	.L.str819, 4

	.type	.L.str820,@object       # @.str820
.L.str820:
	.asciz	"main"
	.size	.L.str820, 5

	.type	.L.str821,@object       # @.str821
.L.str821:
	.asciz	"._crit_edge17"
	.size	.L.str821, 14

	.type	.L.str822,@object       # @.str822
.L.str822:
	.asciz	"66"
	.size	.L.str822, 3

	.type	.L.str823,@object       # @.str823
.L.str823:
	.asciz	"65"
	.size	.L.str823, 3

	.type	.L.str824,@object       # @.str824
.L.str824:
	.asciz	"phi"
	.size	.L.str824, 4

	.type	.L.str825,@object       # @.str825
.L.str825:
	.asciz	"66"
	.size	.L.str825, 3

	.type	.L.str826,@object       # @.str826
.L.str826:
	.asciz	"phi"
	.size	.L.str826, 4

	.type	.L.str827,@object       # @.str827
.L.str827:
	.asciz	"main"
	.size	.L.str827, 5

	.type	.L.str828,@object       # @.str828
.L.str828:
	.asciz	"._crit_edge17"
	.size	.L.str828, 14

	.type	.L.str829,@object       # @.str829
.L.str829:
	.asciz	"67"
	.size	.L.str829, 3

	.type	.L.str830,@object       # @.str830
.L.str830:
	.zero	1
	.size	.L.str830, 1

	.type	.L.str831,@object       # @.str831
.L.str831:
	.asciz	"phi"
	.size	.L.str831, 4

	.type	.L.str832,@object       # @.str832
.L.str832:
	.asciz	"66"
	.size	.L.str832, 3

	.type	.L.str833,@object       # @.str833
.L.str833:
	.asciz	"phi"
	.size	.L.str833, 4

	.type	.L.str834,@object       # @.str834
.L.str834:
	.asciz	"67"
	.size	.L.str834, 3

	.type	.L.str835,@object       # @.str835
.L.str835:
	.asciz	"phi"
	.size	.L.str835, 4

	.type	.L.str836,@object       # @.str836
.L.str836:
	.asciz	"main"
	.size	.L.str836, 5

	.type	.L.str837,@object       # @.str837
.L.str837:
	.asciz	"._crit_edge17"
	.size	.L.str837, 14

	.type	.L.str838,@object       # @.str838
.L.str838:
	.asciz	"._crit_edge17-1"
	.size	.L.str838, 16

	.type	.L.str839,@object       # @.str839
.L.str839:
	.asciz	"149"
	.size	.L.str839, 4

	.type	.L.str840,@object       # @.str840
.L.str840:
	.asciz	"phi"
	.size	.L.str840, 4

	.type	.L.str841,@object       # @.str841
.L.str841:
	.asciz	"main"
	.size	.L.str841, 5

	.type	.L.str842,@object       # @.str842
.L.str842:
	.asciz	"70"
	.size	.L.str842, 3

	.type	.L.str843,@object       # @.str843
.L.str843:
	.asciz	"71"
	.size	.L.str843, 3

	.type	.L.str844,@object       # @.str844
.L.str844:
	.asciz	"fopen"
	.size	.L.str844, 6

	.type	.L.str845,@object       # @.str845
.L.str845:
	.asciz	"phi"
	.size	.L.str845, 4

	.type	.L.str846,@object       # @.str846
.L.str846:
	.asciz	"filename.0.ph25"
	.size	.L.str846, 16

	.type	.L.str847,@object       # @.str847
.L.str847:
	.asciz	"phi"
	.size	.L.str847, 4

	.type	.L.str848,@object       # @.str848
.L.str848:
	.zero	1
	.size	.L.str848, 1

	.type	.L.str849,@object       # @.str849
.L.str849:
	.asciz	"phi"
	.size	.L.str849, 4

	.type	.L.str850,@object       # @.str850
.L.str850:
	.zero	1
	.size	.L.str850, 1

	.type	.L.str851,@object       # @.str851
.L.str851:
	.asciz	"phi"
	.size	.L.str851, 4

	.type	.L.str852,@object       # @.str852
.L.str852:
	.zero	1
	.size	.L.str852, 1

	.type	.L.str853,@object       # @.str853
.L.str853:
	.asciz	"phi"
	.size	.L.str853, 4

	.type	.L.str854,@object       # @.str854
.L.str854:
	.asciz	"71"
	.size	.L.str854, 3

	.type	.L.str855,@object       # @.str855
.L.str855:
	.asciz	"phi"
	.size	.L.str855, 4

	.type	.L.str856,@object       # @.str856
.L.str856:
	.asciz	"main"
	.size	.L.str856, 5

	.type	.L.str857,@object       # @.str857
.L.str857:
	.asciz	"70"
	.size	.L.str857, 3

	.type	.L.str858,@object       # @.str858
.L.str858:
	.asciz	"72"
	.size	.L.str858, 3

	.type	.L.str859,@object       # @.str859
.L.str859:
	.zero	1
	.size	.L.str859, 1

	.type	.L.str860,@object       # @.str860
.L.str860:
	.asciz	"phi"
	.size	.L.str860, 4

	.type	.L.str861,@object       # @.str861
.L.str861:
	.asciz	"71"
	.size	.L.str861, 3

	.type	.L.str862,@object       # @.str862
.L.str862:
	.asciz	"phi"
	.size	.L.str862, 4

	.type	.L.str863,@object       # @.str863
.L.str863:
	.asciz	"72"
	.size	.L.str863, 3

	.type	.L.str864,@object       # @.str864
.L.str864:
	.asciz	"phi"
	.size	.L.str864, 4

	.type	.L.str865,@object       # @.str865
.L.str865:
	.asciz	"main"
	.size	.L.str865, 5

	.type	.L.str866,@object       # @.str866
.L.str866:
	.asciz	"70"
	.size	.L.str866, 3

	.type	.L.str867,@object       # @.str867
.L.str867:
	.asciz	"70-1"
	.size	.L.str867, 5

	.type	.L.str868,@object       # @.str868
.L.str868:
	.asciz	"75"
	.size	.L.str868, 3

	.type	.L.str869,@object       # @.str869
.L.str869:
	.asciz	"phi"
	.size	.L.str869, 4

	.type	.L.str870,@object       # @.str870
.L.str870:
	.asciz	".preheader11"
	.size	.L.str870, 13

	.type	.L.str871,@object       # @.str871
.L.str871:
	.asciz	"phi"
	.size	.L.str871, 4

	.type	.L.str872,@object       # @.str872
.L.str872:
	.asciz	"72"
	.size	.L.str872, 3

	.type	.L.str873,@object       # @.str873
.L.str873:
	.asciz	"phi"
	.size	.L.str873, 4

	.type	.L.str874,@object       # @.str874
.L.str874:
	.asciz	"main"
	.size	.L.str874, 5

	.type	.L.str875,@object       # @.str875
.L.str875:
	.asciz	".preheader11"
	.size	.L.str875, 13

	.type	.L.str876,@object       # @.str876
.L.str876:
	.asciz	"73"
	.size	.L.str876, 3

	.type	.L.str877,@object       # @.str877
.L.str877:
	.asciz	"fgets"
	.size	.L.str877, 6

	.type	.L.str878,@object       # @.str878
.L.str878:
	.asciz	"phi"
	.size	.L.str878, 4

	.type	.L.str879,@object       # @.str879
.L.str879:
	.asciz	"1"
	.size	.L.str879, 2

	.type	.L.str880,@object       # @.str880
.L.str880:
	.asciz	"phi"
	.size	.L.str880, 4

	.type	.L.str881,@object       # @.str881
.L.str881:
	.zero	1
	.size	.L.str881, 1

	.type	.L.str882,@object       # @.str882
.L.str882:
	.asciz	"phi"
	.size	.L.str882, 4

	.type	.L.str883,@object       # @.str883
.L.str883:
	.zero	1
	.size	.L.str883, 1

	.type	.L.str884,@object       # @.str884
.L.str884:
	.asciz	"phi"
	.size	.L.str884, 4

	.type	.L.str885,@object       # @.str885
.L.str885:
	.zero	1
	.size	.L.str885, 1

	.type	.L.str886,@object       # @.str886
.L.str886:
	.asciz	"phi"
	.size	.L.str886, 4

	.type	.L.str887,@object       # @.str887
.L.str887:
	.asciz	"71"
	.size	.L.str887, 3

	.type	.L.str888,@object       # @.str888
.L.str888:
	.asciz	"phi"
	.size	.L.str888, 4

	.type	.L.str889,@object       # @.str889
.L.str889:
	.zero	1
	.size	.L.str889, 1

	.type	.L.str890,@object       # @.str890
.L.str890:
	.asciz	"phi"
	.size	.L.str890, 4

	.type	.L.str891,@object       # @.str891
.L.str891:
	.asciz	"73"
	.size	.L.str891, 3

	.type	.L.str892,@object       # @.str892
.L.str892:
	.asciz	"phi"
	.size	.L.str892, 4

	.type	.L.str893,@object       # @.str893
.L.str893:
	.asciz	"main"
	.size	.L.str893, 5

	.type	.L.str894,@object       # @.str894
.L.str894:
	.asciz	".preheader11"
	.size	.L.str894, 13

	.type	.L.str895,@object       # @.str895
.L.str895:
	.asciz	"74"
	.size	.L.str895, 3

	.type	.L.str896,@object       # @.str896
.L.str896:
	.zero	1
	.size	.L.str896, 1

	.type	.L.str897,@object       # @.str897
.L.str897:
	.asciz	"phi"
	.size	.L.str897, 4

	.type	.L.str898,@object       # @.str898
.L.str898:
	.asciz	"73"
	.size	.L.str898, 3

	.type	.L.str899,@object       # @.str899
.L.str899:
	.asciz	"phi"
	.size	.L.str899, 4

	.type	.L.str900,@object       # @.str900
.L.str900:
	.asciz	"74"
	.size	.L.str900, 3

	.type	.L.str901,@object       # @.str901
.L.str901:
	.asciz	"phi"
	.size	.L.str901, 4

	.type	.L.str902,@object       # @.str902
.L.str902:
	.asciz	"main"
	.size	.L.str902, 5

	.type	.L.str903,@object       # @.str903
.L.str903:
	.asciz	".preheader11"
	.size	.L.str903, 13

	.type	.L.str904,@object       # @.str904
.L.str904:
	.asciz	".preheader11-0"
	.size	.L.str904, 15

	.type	.L.str905,@object       # @.str905
.L.str905:
	.asciz	"._crit_edge13"
	.size	.L.str905, 14

	.type	.L.str906,@object       # @.str906
.L.str906:
	.asciz	"phi"
	.size	.L.str906, 4

	.type	.L.str907,@object       # @.str907
.L.str907:
	.asciz	".lr.ph12"
	.size	.L.str907, 9

	.type	.L.str908,@object       # @.str908
.L.str908:
	.asciz	"phi"
	.size	.L.str908, 4

	.type	.L.str909,@object       # @.str909
.L.str909:
	.asciz	"74"
	.size	.L.str909, 3

	.type	.L.str910,@object       # @.str910
.L.str910:
	.asciz	"phi"
	.size	.L.str910, 4

	.type	.L.str911,@object       # @.str911
.L.str911:
	.asciz	"main"
	.size	.L.str911, 5

	.type	.L.str912,@object       # @.str912
.L.str912:
	.asciz	"75"
	.size	.L.str912, 3

	.type	.L.str913,@object       # @.str913
.L.str913:
	.asciz	"76"
	.size	.L.str913, 3

	.type	.L.str914,@object       # @.str914
.L.str914:
	.asciz	"stderr"
	.size	.L.str914, 7

	.type	.L.str915,@object       # @.str915
.L.str915:
	.asciz	"phi"
	.size	.L.str915, 4

	.type	.L.str916,@object       # @.str916
.L.str916:
	.asciz	"76"
	.size	.L.str916, 3

	.type	.L.str917,@object       # @.str917
.L.str917:
	.asciz	"phi"
	.size	.L.str917, 4

	.type	.L.str918,@object       # @.str918
.L.str918:
	.asciz	"main"
	.size	.L.str918, 5

	.type	.L.str919,@object       # @.str919
.L.str919:
	.asciz	"75"
	.size	.L.str919, 3

	.type	.L.str920,@object       # @.str920
.L.str920:
	.asciz	"77"
	.size	.L.str920, 3

	.type	.L.str921,@object       # @.str921
.L.str921:
	.asciz	"fprintf"
	.size	.L.str921, 8

	.type	.L.str922,@object       # @.str922
.L.str922:
	.asciz	"phi"
	.size	.L.str922, 4

	.type	.L.str923,@object       # @.str923
.L.str923:
	.asciz	"76"
	.size	.L.str923, 3

	.type	.L.str924,@object       # @.str924
.L.str924:
	.asciz	"phi"
	.size	.L.str924, 4

	.type	.L.str925,@object       # @.str925
.L.str925:
	.zero	1
	.size	.L.str925, 1

	.type	.L.str926,@object       # @.str926
.L.str926:
	.asciz	"phi"
	.size	.L.str926, 4

	.type	.L.str927,@object       # @.str927
.L.str927:
	.zero	1
	.size	.L.str927, 1

	.type	.L.str928,@object       # @.str928
.L.str928:
	.asciz	"phi"
	.size	.L.str928, 4

	.type	.L.str929,@object       # @.str929
.L.str929:
	.zero	1
	.size	.L.str929, 1

	.type	.L.str930,@object       # @.str930
.L.str930:
	.asciz	"phi"
	.size	.L.str930, 4

	.type	.L.str931,@object       # @.str931
.L.str931:
	.asciz	"77"
	.size	.L.str931, 3

	.type	.L.str932,@object       # @.str932
.L.str932:
	.asciz	"phi"
	.size	.L.str932, 4

	.type	.L.str933,@object       # @.str933
.L.str933:
	.asciz	"main"
	.size	.L.str933, 5

	.type	.L.str934,@object       # @.str934
.L.str934:
	.asciz	"75"
	.size	.L.str934, 3

	.type	.L.str935,@object       # @.str935
.L.str935:
	.asciz	"75-0"
	.size	.L.str935, 5

	.type	.L.str936,@object       # @.str936
.L.str936:
	.asciz	"exit"
	.size	.L.str936, 5

	.type	.L.str937,@object       # @.str937
.L.str937:
	.asciz	"phi"
	.size	.L.str937, 4

	.type	.L.str938,@object       # @.str938
.L.str938:
	.zero	1
	.size	.L.str938, 1

	.type	.L.str939,@object       # @.str939
.L.str939:
	.asciz	"phi"
	.size	.L.str939, 4

	.type	.L.str940,@object       # @.str940
.L.str940:
	.zero	1
	.size	.L.str940, 1

	.type	.L.str941,@object       # @.str941
.L.str941:
	.asciz	"phi"
	.size	.L.str941, 4

	.type	.L.str942,@object       # @.str942
.L.str942:
	.asciz	"main"
	.size	.L.str942, 5

	.type	.L.str943,@object       # @.str943
.L.str943:
	.asciz	"75"
	.size	.L.str943, 3

	.type	.L.str944,@object       # @.str944
.L.str944:
	.asciz	"75-1"
	.size	.L.str944, 5

	.type	.L.str945,@object       # @.str945
.L.str945:
	.asciz	"main"
	.size	.L.str945, 5

	.type	.L.str946,@object       # @.str946
.L.str946:
	.asciz	".lr.ph12"
	.size	.L.str946, 9

	.type	.L.str947,@object       # @.str947
.L.str947:
	.asciz	"78"
	.size	.L.str947, 3

	.type	.L.str948,@object       # @.str948
.L.str948:
	.asciz	"strtok"
	.size	.L.str948, 7

	.type	.L.str949,@object       # @.str949
.L.str949:
	.asciz	"phi"
	.size	.L.str949, 4

	.type	.L.str950,@object       # @.str950
.L.str950:
	.asciz	"1"
	.size	.L.str950, 2

	.type	.L.str951,@object       # @.str951
.L.str951:
	.asciz	"phi"
	.size	.L.str951, 4

	.type	.L.str952,@object       # @.str952
.L.str952:
	.zero	1
	.size	.L.str952, 1

	.type	.L.str953,@object       # @.str953
.L.str953:
	.asciz	"phi"
	.size	.L.str953, 4

	.type	.L.str954,@object       # @.str954
.L.str954:
	.zero	1
	.size	.L.str954, 1

	.type	.L.str955,@object       # @.str955
.L.str955:
	.asciz	"phi"
	.size	.L.str955, 4

	.type	.L.str956,@object       # @.str956
.L.str956:
	.zero	1
	.size	.L.str956, 1

	.type	.L.str957,@object       # @.str957
.L.str957:
	.asciz	"phi"
	.size	.L.str957, 4

	.type	.L.str958,@object       # @.str958
.L.str958:
	.asciz	"78"
	.size	.L.str958, 3

	.type	.L.str959,@object       # @.str959
.L.str959:
	.asciz	"phi"
	.size	.L.str959, 4

	.type	.L.str960,@object       # @.str960
.L.str960:
	.asciz	"main"
	.size	.L.str960, 5

	.type	.L.str961,@object       # @.str961
.L.str961:
	.asciz	".lr.ph12"
	.size	.L.str961, 9

	.type	.L.str962,@object       # @.str962
.L.str962:
	.asciz	"79"
	.size	.L.str962, 3

	.type	.L.str963,@object       # @.str963
.L.str963:
	.zero	1
	.size	.L.str963, 1

	.type	.L.str964,@object       # @.str964
.L.str964:
	.asciz	"phi"
	.size	.L.str964, 4

	.type	.L.str965,@object       # @.str965
.L.str965:
	.asciz	"78"
	.size	.L.str965, 3

	.type	.L.str966,@object       # @.str966
.L.str966:
	.asciz	"phi"
	.size	.L.str966, 4

	.type	.L.str967,@object       # @.str967
.L.str967:
	.asciz	"79"
	.size	.L.str967, 3

	.type	.L.str968,@object       # @.str968
.L.str968:
	.asciz	"phi"
	.size	.L.str968, 4

	.type	.L.str969,@object       # @.str969
.L.str969:
	.asciz	"main"
	.size	.L.str969, 5

	.type	.L.str970,@object       # @.str970
.L.str970:
	.asciz	".lr.ph12"
	.size	.L.str970, 9

	.type	.L.str971,@object       # @.str971
.L.str971:
	.asciz	".lr.ph12-0"
	.size	.L.str971, 11

	.type	.L.str972,@object       # @.str972
.L.str972:
	.asciz	".backedge"
	.size	.L.str972, 10

	.type	.L.str973,@object       # @.str973
.L.str973:
	.asciz	"phi"
	.size	.L.str973, 4

	.type	.L.str974,@object       # @.str974
.L.str974:
	.asciz	"80"
	.size	.L.str974, 3

	.type	.L.str975,@object       # @.str975
.L.str975:
	.asciz	"phi"
	.size	.L.str975, 4

	.type	.L.str976,@object       # @.str976
.L.str976:
	.asciz	"79"
	.size	.L.str976, 3

	.type	.L.str977,@object       # @.str977
.L.str977:
	.asciz	"phi"
	.size	.L.str977, 4

	.type	.L.str978,@object       # @.str978
.L.str978:
	.asciz	"main"
	.size	.L.str978, 5

	.type	.L.str979,@object       # @.str979
.L.str979:
	.asciz	"80"
	.size	.L.str979, 3

	.type	.L.str980,@object       # @.str980
.L.str980:
	.asciz	"81"
	.size	.L.str980, 3

	.type	.L.str981,@object       # @.str981
.L.str981:
	.asciz	"numObjects"
	.size	.L.str981, 11

	.type	.L.str982,@object       # @.str982
.L.str982:
	.asciz	"phi"
	.size	.L.str982, 4

	.type	.L.str983,@object       # @.str983
.L.str983:
	.asciz	"81"
	.size	.L.str983, 3

	.type	.L.str984,@object       # @.str984
.L.str984:
	.asciz	"phi"
	.size	.L.str984, 4

	.type	.L.str985,@object       # @.str985
.L.str985:
	.asciz	"main"
	.size	.L.str985, 5

	.type	.L.str986,@object       # @.str986
.L.str986:
	.asciz	"80"
	.size	.L.str986, 3

	.type	.L.str987,@object       # @.str987
.L.str987:
	.asciz	"82"
	.size	.L.str987, 3

	.type	.L.str988,@object       # @.str988
.L.str988:
	.zero	1
	.size	.L.str988, 1

	.type	.L.str989,@object       # @.str989
.L.str989:
	.asciz	"phi"
	.size	.L.str989, 4

	.type	.L.str990,@object       # @.str990
.L.str990:
	.asciz	"81"
	.size	.L.str990, 3

	.type	.L.str991,@object       # @.str991
.L.str991:
	.asciz	"phi"
	.size	.L.str991, 4

	.type	.L.str992,@object       # @.str992
.L.str992:
	.asciz	"82"
	.size	.L.str992, 3

	.type	.L.str993,@object       # @.str993
.L.str993:
	.asciz	"phi"
	.size	.L.str993, 4

	.type	.L.str994,@object       # @.str994
.L.str994:
	.asciz	"main"
	.size	.L.str994, 5

	.type	.L.str995,@object       # @.str995
.L.str995:
	.asciz	"80"
	.size	.L.str995, 3

	.type	.L.str996,@object       # @.str996
.L.str996:
	.asciz	"80-2"
	.size	.L.str996, 5

	.type	.L.str997,@object       # @.str997
.L.str997:
	.asciz	"numObjects"
	.size	.L.str997, 11

	.type	.L.str998,@object       # @.str998
.L.str998:
	.asciz	"phi"
	.size	.L.str998, 4

	.type	.L.str999,@object       # @.str999
.L.str999:
	.asciz	"82"
	.size	.L.str999, 3

	.type	.L.str1000,@object      # @.str1000
.L.str1000:
	.asciz	"phi"
	.size	.L.str1000, 4

	.type	.L.str1001,@object      # @.str1001
.L.str1001:
	.asciz	"main"
	.size	.L.str1001, 5

	.type	.L.str1002,@object      # @.str1002
.L.str1002:
	.asciz	"80"
	.size	.L.str1002, 3

	.type	.L.str1003,@object      # @.str1003
.L.str1003:
	.asciz	"80-3"
	.size	.L.str1003, 5

	.type	.L.str1004,@object      # @.str1004
.L.str1004:
	.asciz	".backedge"
	.size	.L.str1004, 10

	.type	.L.str1005,@object      # @.str1005
.L.str1005:
	.asciz	"phi"
	.size	.L.str1005, 4

	.type	.L.str1006,@object      # @.str1006
.L.str1006:
	.asciz	"main"
	.size	.L.str1006, 5

	.type	.L.str1007,@object      # @.str1007
.L.str1007:
	.asciz	".backedge"
	.size	.L.str1007, 10

	.type	.L.str1008,@object      # @.str1008
.L.str1008:
	.asciz	"83"
	.size	.L.str1008, 3

	.type	.L.str1009,@object      # @.str1009
.L.str1009:
	.asciz	"fgets"
	.size	.L.str1009, 6

	.type	.L.str1010,@object      # @.str1010
.L.str1010:
	.asciz	"phi"
	.size	.L.str1010, 4

	.type	.L.str1011,@object      # @.str1011
.L.str1011:
	.asciz	"1"
	.size	.L.str1011, 2

	.type	.L.str1012,@object      # @.str1012
.L.str1012:
	.asciz	"phi"
	.size	.L.str1012, 4

	.type	.L.str1013,@object      # @.str1013
.L.str1013:
	.zero	1
	.size	.L.str1013, 1

	.type	.L.str1014,@object      # @.str1014
.L.str1014:
	.asciz	"phi"
	.size	.L.str1014, 4

	.type	.L.str1015,@object      # @.str1015
.L.str1015:
	.zero	1
	.size	.L.str1015, 1

	.type	.L.str1016,@object      # @.str1016
.L.str1016:
	.asciz	"phi"
	.size	.L.str1016, 4

	.type	.L.str1017,@object      # @.str1017
.L.str1017:
	.zero	1
	.size	.L.str1017, 1

	.type	.L.str1018,@object      # @.str1018
.L.str1018:
	.asciz	"phi"
	.size	.L.str1018, 4

	.type	.L.str1019,@object      # @.str1019
.L.str1019:
	.asciz	"71"
	.size	.L.str1019, 3

	.type	.L.str1020,@object      # @.str1020
.L.str1020:
	.asciz	"phi"
	.size	.L.str1020, 4

	.type	.L.str1021,@object      # @.str1021
.L.str1021:
	.zero	1
	.size	.L.str1021, 1

	.type	.L.str1022,@object      # @.str1022
.L.str1022:
	.asciz	"phi"
	.size	.L.str1022, 4

	.type	.L.str1023,@object      # @.str1023
.L.str1023:
	.asciz	"83"
	.size	.L.str1023, 3

	.type	.L.str1024,@object      # @.str1024
.L.str1024:
	.asciz	"phi"
	.size	.L.str1024, 4

	.type	.L.str1025,@object      # @.str1025
.L.str1025:
	.asciz	"main"
	.size	.L.str1025, 5

	.type	.L.str1026,@object      # @.str1026
.L.str1026:
	.asciz	".backedge"
	.size	.L.str1026, 10

	.type	.L.str1027,@object      # @.str1027
.L.str1027:
	.asciz	"84"
	.size	.L.str1027, 3

	.type	.L.str1028,@object      # @.str1028
.L.str1028:
	.zero	1
	.size	.L.str1028, 1

	.type	.L.str1029,@object      # @.str1029
.L.str1029:
	.asciz	"phi"
	.size	.L.str1029, 4

	.type	.L.str1030,@object      # @.str1030
.L.str1030:
	.asciz	"83"
	.size	.L.str1030, 3

	.type	.L.str1031,@object      # @.str1031
.L.str1031:
	.asciz	"phi"
	.size	.L.str1031, 4

	.type	.L.str1032,@object      # @.str1032
.L.str1032:
	.asciz	"84"
	.size	.L.str1032, 3

	.type	.L.str1033,@object      # @.str1033
.L.str1033:
	.asciz	"phi"
	.size	.L.str1033, 4

	.type	.L.str1034,@object      # @.str1034
.L.str1034:
	.asciz	"main"
	.size	.L.str1034, 5

	.type	.L.str1035,@object      # @.str1035
.L.str1035:
	.asciz	".backedge"
	.size	.L.str1035, 10

	.type	.L.str1036,@object      # @.str1036
.L.str1036:
	.asciz	".backedge-0"
	.size	.L.str1036, 12

	.type	.L.str1037,@object      # @.str1037
.L.str1037:
	.asciz	"._crit_edge13"
	.size	.L.str1037, 14

	.type	.L.str1038,@object      # @.str1038
.L.str1038:
	.asciz	"phi"
	.size	.L.str1038, 4

	.type	.L.str1039,@object      # @.str1039
.L.str1039:
	.asciz	".lr.ph12"
	.size	.L.str1039, 9

	.type	.L.str1040,@object      # @.str1040
.L.str1040:
	.asciz	"phi"
	.size	.L.str1040, 4

	.type	.L.str1041,@object      # @.str1041
.L.str1041:
	.asciz	"84"
	.size	.L.str1041, 3

	.type	.L.str1042,@object      # @.str1042
.L.str1042:
	.asciz	"phi"
	.size	.L.str1042, 4

	.type	.L.str1043,@object      # @.str1043
.L.str1043:
	.asciz	"main"
	.size	.L.str1043, 5

	.type	.L.str1044,@object      # @.str1044
.L.str1044:
	.asciz	"._crit_edge13"
	.size	.L.str1044, 14

	.type	.L.str1045,@object      # @.str1045
.L.str1045:
	.asciz	"._crit_edge13-0"
	.size	.L.str1045, 16

	.type	.L.str1046,@object      # @.str1046
.L.str1046:
	.asciz	"rewind"
	.size	.L.str1046, 7

	.type	.L.str1047,@object      # @.str1047
.L.str1047:
	.asciz	"phi"
	.size	.L.str1047, 4

	.type	.L.str1048,@object      # @.str1048
.L.str1048:
	.asciz	"71"
	.size	.L.str1048, 3

	.type	.L.str1049,@object      # @.str1049
.L.str1049:
	.asciz	"phi"
	.size	.L.str1049, 4

	.type	.L.str1050,@object      # @.str1050
.L.str1050:
	.zero	1
	.size	.L.str1050, 1

	.type	.L.str1051,@object      # @.str1051
.L.str1051:
	.asciz	"phi"
	.size	.L.str1051, 4

	.type	.L.str1052,@object      # @.str1052
.L.str1052:
	.asciz	"main"
	.size	.L.str1052, 5

	.type	.L.str1053,@object      # @.str1053
.L.str1053:
	.asciz	"._crit_edge13"
	.size	.L.str1053, 14

	.type	.L.str1054,@object      # @.str1054
.L.str1054:
	.asciz	"._crit_edge13-1"
	.size	.L.str1054, 16

	.type	.L.str1055,@object      # @.str1055
.L.str1055:
	.asciz	"85"
	.size	.L.str1055, 3

	.type	.L.str1056,@object      # @.str1056
.L.str1056:
	.asciz	"phi"
	.size	.L.str1056, 4

	.type	.L.str1057,@object      # @.str1057
.L.str1057:
	.asciz	"main"
	.size	.L.str1057, 5

	.type	.L.str1058,@object      # @.str1058
.L.str1058:
	.asciz	"85"
	.size	.L.str1058, 3

	.type	.L.str1059,@object      # @.str1059
.L.str1059:
	.asciz	"86"
	.size	.L.str1059, 3

	.type	.L.str1060,@object      # @.str1060
.L.str1060:
	.asciz	"fgets"
	.size	.L.str1060, 6

	.type	.L.str1061,@object      # @.str1061
.L.str1061:
	.asciz	"phi"
	.size	.L.str1061, 4

	.type	.L.str1062,@object      # @.str1062
.L.str1062:
	.asciz	"1"
	.size	.L.str1062, 2

	.type	.L.str1063,@object      # @.str1063
.L.str1063:
	.asciz	"phi"
	.size	.L.str1063, 4

	.type	.L.str1064,@object      # @.str1064
.L.str1064:
	.zero	1
	.size	.L.str1064, 1

	.type	.L.str1065,@object      # @.str1065
.L.str1065:
	.asciz	"phi"
	.size	.L.str1065, 4

	.type	.L.str1066,@object      # @.str1066
.L.str1066:
	.zero	1
	.size	.L.str1066, 1

	.type	.L.str1067,@object      # @.str1067
.L.str1067:
	.asciz	"phi"
	.size	.L.str1067, 4

	.type	.L.str1068,@object      # @.str1068
.L.str1068:
	.zero	1
	.size	.L.str1068, 1

	.type	.L.str1069,@object      # @.str1069
.L.str1069:
	.asciz	"phi"
	.size	.L.str1069, 4

	.type	.L.str1070,@object      # @.str1070
.L.str1070:
	.asciz	"71"
	.size	.L.str1070, 3

	.type	.L.str1071,@object      # @.str1071
.L.str1071:
	.asciz	"phi"
	.size	.L.str1071, 4

	.type	.L.str1072,@object      # @.str1072
.L.str1072:
	.zero	1
	.size	.L.str1072, 1

	.type	.L.str1073,@object      # @.str1073
.L.str1073:
	.asciz	"phi"
	.size	.L.str1073, 4

	.type	.L.str1074,@object      # @.str1074
.L.str1074:
	.asciz	"86"
	.size	.L.str1074, 3

	.type	.L.str1075,@object      # @.str1075
.L.str1075:
	.asciz	"phi"
	.size	.L.str1075, 4

	.type	.L.str1076,@object      # @.str1076
.L.str1076:
	.asciz	"main"
	.size	.L.str1076, 5

	.type	.L.str1077,@object      # @.str1077
.L.str1077:
	.asciz	"85"
	.size	.L.str1077, 3

	.type	.L.str1078,@object      # @.str1078
.L.str1078:
	.asciz	"87"
	.size	.L.str1078, 3

	.type	.L.str1079,@object      # @.str1079
.L.str1079:
	.zero	1
	.size	.L.str1079, 1

	.type	.L.str1080,@object      # @.str1080
.L.str1080:
	.asciz	"phi"
	.size	.L.str1080, 4

	.type	.L.str1081,@object      # @.str1081
.L.str1081:
	.asciz	"86"
	.size	.L.str1081, 3

	.type	.L.str1082,@object      # @.str1082
.L.str1082:
	.asciz	"phi"
	.size	.L.str1082, 4

	.type	.L.str1083,@object      # @.str1083
.L.str1083:
	.asciz	"87"
	.size	.L.str1083, 3

	.type	.L.str1084,@object      # @.str1084
.L.str1084:
	.asciz	"phi"
	.size	.L.str1084, 4

	.type	.L.str1085,@object      # @.str1085
.L.str1085:
	.asciz	"main"
	.size	.L.str1085, 5

	.type	.L.str1086,@object      # @.str1086
.L.str1086:
	.asciz	"85"
	.size	.L.str1086, 3

	.type	.L.str1087,@object      # @.str1087
.L.str1087:
	.asciz	"85-0"
	.size	.L.str1087, 5

	.type	.L.str1088,@object      # @.str1088
.L.str1088:
	.asciz	".loopexit8"
	.size	.L.str1088, 11

	.type	.L.str1089,@object      # @.str1089
.L.str1089:
	.asciz	"phi"
	.size	.L.str1089, 4

	.type	.L.str1090,@object      # @.str1090
.L.str1090:
	.asciz	"88"
	.size	.L.str1090, 3

	.type	.L.str1091,@object      # @.str1091
.L.str1091:
	.asciz	"phi"
	.size	.L.str1091, 4

	.type	.L.str1092,@object      # @.str1092
.L.str1092:
	.asciz	"87"
	.size	.L.str1092, 3

	.type	.L.str1093,@object      # @.str1093
.L.str1093:
	.asciz	"phi"
	.size	.L.str1093, 4

	.type	.L.str1094,@object      # @.str1094
.L.str1094:
	.asciz	"main"
	.size	.L.str1094, 5

	.type	.L.str1095,@object      # @.str1095
.L.str1095:
	.asciz	"88"
	.size	.L.str1095, 3

	.type	.L.str1096,@object      # @.str1096
.L.str1096:
	.asciz	"89"
	.size	.L.str1096, 3

	.type	.L.str1097,@object      # @.str1097
.L.str1097:
	.asciz	"strtok"
	.size	.L.str1097, 7

	.type	.L.str1098,@object      # @.str1098
.L.str1098:
	.asciz	"phi"
	.size	.L.str1098, 4

	.type	.L.str1099,@object      # @.str1099
.L.str1099:
	.asciz	"1"
	.size	.L.str1099, 2

	.type	.L.str1100,@object      # @.str1100
.L.str1100:
	.asciz	"phi"
	.size	.L.str1100, 4

	.type	.L.str1101,@object      # @.str1101
.L.str1101:
	.zero	1
	.size	.L.str1101, 1

	.type	.L.str1102,@object      # @.str1102
.L.str1102:
	.asciz	"phi"
	.size	.L.str1102, 4

	.type	.L.str1103,@object      # @.str1103
.L.str1103:
	.zero	1
	.size	.L.str1103, 1

	.type	.L.str1104,@object      # @.str1104
.L.str1104:
	.asciz	"phi"
	.size	.L.str1104, 4

	.type	.L.str1105,@object      # @.str1105
.L.str1105:
	.zero	1
	.size	.L.str1105, 1

	.type	.L.str1106,@object      # @.str1106
.L.str1106:
	.asciz	"phi"
	.size	.L.str1106, 4

	.type	.L.str1107,@object      # @.str1107
.L.str1107:
	.asciz	"89"
	.size	.L.str1107, 3

	.type	.L.str1108,@object      # @.str1108
.L.str1108:
	.asciz	"phi"
	.size	.L.str1108, 4

	.type	.L.str1109,@object      # @.str1109
.L.str1109:
	.asciz	"main"
	.size	.L.str1109, 5

	.type	.L.str1110,@object      # @.str1110
.L.str1110:
	.asciz	"88"
	.size	.L.str1110, 3

	.type	.L.str1111,@object      # @.str1111
.L.str1111:
	.asciz	"90"
	.size	.L.str1111, 3

	.type	.L.str1112,@object      # @.str1112
.L.str1112:
	.zero	1
	.size	.L.str1112, 1

	.type	.L.str1113,@object      # @.str1113
.L.str1113:
	.asciz	"phi"
	.size	.L.str1113, 4

	.type	.L.str1114,@object      # @.str1114
.L.str1114:
	.asciz	"89"
	.size	.L.str1114, 3

	.type	.L.str1115,@object      # @.str1115
.L.str1115:
	.asciz	"phi"
	.size	.L.str1115, 4

	.type	.L.str1116,@object      # @.str1116
.L.str1116:
	.asciz	"90"
	.size	.L.str1116, 3

	.type	.L.str1117,@object      # @.str1117
.L.str1117:
	.asciz	"phi"
	.size	.L.str1117, 4

	.type	.L.str1118,@object      # @.str1118
.L.str1118:
	.asciz	"main"
	.size	.L.str1118, 5

	.type	.L.str1119,@object      # @.str1119
.L.str1119:
	.asciz	"88"
	.size	.L.str1119, 3

	.type	.L.str1120,@object      # @.str1120
.L.str1120:
	.asciz	"88-0"
	.size	.L.str1120, 5

	.type	.L.str1121,@object      # @.str1121
.L.str1121:
	.asciz	"85"
	.size	.L.str1121, 3

	.type	.L.str1122,@object      # @.str1122
.L.str1122:
	.asciz	"phi"
	.size	.L.str1122, 4

	.type	.L.str1123,@object      # @.str1123
.L.str1123:
	.asciz	".preheader7"
	.size	.L.str1123, 12

	.type	.L.str1124,@object      # @.str1124
.L.str1124:
	.asciz	"phi"
	.size	.L.str1124, 4

	.type	.L.str1125,@object      # @.str1125
.L.str1125:
	.asciz	"90"
	.size	.L.str1125, 3

	.type	.L.str1126,@object      # @.str1126
.L.str1126:
	.asciz	"phi"
	.size	.L.str1126, 4

	.type	.L.str1127,@object      # @.str1127
.L.str1127:
	.asciz	"main"
	.size	.L.str1127, 5

	.type	.L.str1128,@object      # @.str1128
.L.str1128:
	.asciz	".preheader7"
	.size	.L.str1128, 12

	.type	.L.str1129,@object      # @.str1129
.L.str1129:
	.asciz	"91"
	.size	.L.str1129, 3

	.type	.L.str1130,@object      # @.str1130
.L.str1130:
	.asciz	"strtok"
	.size	.L.str1130, 7

	.type	.L.str1131,@object      # @.str1131
.L.str1131:
	.asciz	"phi"
	.size	.L.str1131, 4

	.type	.L.str1132,@object      # @.str1132
.L.str1132:
	.zero	1
	.size	.L.str1132, 1

	.type	.L.str1133,@object      # @.str1133
.L.str1133:
	.asciz	"phi"
	.size	.L.str1133, 4

	.type	.L.str1134,@object      # @.str1134
.L.str1134:
	.zero	1
	.size	.L.str1134, 1

	.type	.L.str1135,@object      # @.str1135
.L.str1135:
	.asciz	"phi"
	.size	.L.str1135, 4

	.type	.L.str1136,@object      # @.str1136
.L.str1136:
	.zero	1
	.size	.L.str1136, 1

	.type	.L.str1137,@object      # @.str1137
.L.str1137:
	.asciz	"phi"
	.size	.L.str1137, 4

	.type	.L.str1138,@object      # @.str1138
.L.str1138:
	.zero	1
	.size	.L.str1138, 1

	.type	.L.str1139,@object      # @.str1139
.L.str1139:
	.asciz	"phi"
	.size	.L.str1139, 4

	.type	.L.str1140,@object      # @.str1140
.L.str1140:
	.asciz	"91"
	.size	.L.str1140, 3

	.type	.L.str1141,@object      # @.str1141
.L.str1141:
	.asciz	"phi"
	.size	.L.str1141, 4

	.type	.L.str1142,@object      # @.str1142
.L.str1142:
	.asciz	"main"
	.size	.L.str1142, 5

	.type	.L.str1143,@object      # @.str1143
.L.str1143:
	.asciz	".preheader7"
	.size	.L.str1143, 12

	.type	.L.str1144,@object      # @.str1144
.L.str1144:
	.asciz	"92"
	.size	.L.str1144, 3

	.type	.L.str1145,@object      # @.str1145
.L.str1145:
	.zero	1
	.size	.L.str1145, 1

	.type	.L.str1146,@object      # @.str1146
.L.str1146:
	.asciz	"phi"
	.size	.L.str1146, 4

	.type	.L.str1147,@object      # @.str1147
.L.str1147:
	.asciz	"91"
	.size	.L.str1147, 3

	.type	.L.str1148,@object      # @.str1148
.L.str1148:
	.asciz	"phi"
	.size	.L.str1148, 4

	.type	.L.str1149,@object      # @.str1149
.L.str1149:
	.asciz	"92"
	.size	.L.str1149, 3

	.type	.L.str1150,@object      # @.str1150
.L.str1150:
	.asciz	"phi"
	.size	.L.str1150, 4

	.type	.L.str1151,@object      # @.str1151
.L.str1151:
	.asciz	"main"
	.size	.L.str1151, 5

	.type	.L.str1152,@object      # @.str1152
.L.str1152:
	.asciz	".preheader7"
	.size	.L.str1152, 12

	.type	.L.str1153,@object      # @.str1153
.L.str1153:
	.asciz	".preheader7-0"
	.size	.L.str1153, 14

	.type	.L.str1154,@object      # @.str1154
.L.str1154:
	.asciz	".loopexit8"
	.size	.L.str1154, 11

	.type	.L.str1155,@object      # @.str1155
.L.str1155:
	.asciz	"phi"
	.size	.L.str1155, 4

	.type	.L.str1156,@object      # @.str1156
.L.str1156:
	.asciz	".lr.ph9"
	.size	.L.str1156, 8

	.type	.L.str1157,@object      # @.str1157
.L.str1157:
	.asciz	"phi"
	.size	.L.str1157, 4

	.type	.L.str1158,@object      # @.str1158
.L.str1158:
	.asciz	"92"
	.size	.L.str1158, 3

	.type	.L.str1159,@object      # @.str1159
.L.str1159:
	.asciz	"phi"
	.size	.L.str1159, 4

	.type	.L.str1160,@object      # @.str1160
.L.str1160:
	.asciz	"main"
	.size	.L.str1160, 5

	.type	.L.str1161,@object      # @.str1161
.L.str1161:
	.asciz	".lr.ph9"
	.size	.L.str1161, 8

	.type	.L.str1162,@object      # @.str1162
.L.str1162:
	.asciz	"93"
	.size	.L.str1162, 3

	.type	.L.str1163,@object      # @.str1163
.L.str1163:
	.asciz	"numAttributes"
	.size	.L.str1163, 14

	.type	.L.str1164,@object      # @.str1164
.L.str1164:
	.asciz	"phi"
	.size	.L.str1164, 4

	.type	.L.str1165,@object      # @.str1165
.L.str1165:
	.asciz	"93"
	.size	.L.str1165, 3

	.type	.L.str1166,@object      # @.str1166
.L.str1166:
	.asciz	"phi"
	.size	.L.str1166, 4

	.type	.L.str1167,@object      # @.str1167
.L.str1167:
	.asciz	"main"
	.size	.L.str1167, 5

	.type	.L.str1168,@object      # @.str1168
.L.str1168:
	.asciz	".lr.ph9"
	.size	.L.str1168, 8

	.type	.L.str1169,@object      # @.str1169
.L.str1169:
	.asciz	"94"
	.size	.L.str1169, 3

	.type	.L.str1170,@object      # @.str1170
.L.str1170:
	.zero	1
	.size	.L.str1170, 1

	.type	.L.str1171,@object      # @.str1171
.L.str1171:
	.asciz	"phi"
	.size	.L.str1171, 4

	.type	.L.str1172343,@object   # @.str1172343
.L.str1172343:
	.asciz	"93"
	.size	.L.str1172343, 3

	.type	.L.str1173,@object      # @.str1173
.L.str1173:
	.asciz	"phi"
	.size	.L.str1173, 4

	.type	.L.str1174,@object      # @.str1174
.L.str1174:
	.asciz	"94"
	.size	.L.str1174, 3

	.type	.L.str1175,@object      # @.str1175
.L.str1175:
	.asciz	"phi"
	.size	.L.str1175, 4

	.type	.L.str1176,@object      # @.str1176
.L.str1176:
	.asciz	"main"
	.size	.L.str1176, 5

	.type	.L.str1177,@object      # @.str1177
.L.str1177:
	.asciz	".lr.ph9"
	.size	.L.str1177, 8

	.type	.L.str1178,@object      # @.str1178
.L.str1178:
	.asciz	".lr.ph9-2"
	.size	.L.str1178, 10

	.type	.L.str1179,@object      # @.str1179
.L.str1179:
	.asciz	"numAttributes"
	.size	.L.str1179, 14

	.type	.L.str1180,@object      # @.str1180
.L.str1180:
	.asciz	"phi"
	.size	.L.str1180, 4

	.type	.L.str1181,@object      # @.str1181
.L.str1181:
	.asciz	"94"
	.size	.L.str1181, 3

	.type	.L.str1182,@object      # @.str1182
.L.str1182:
	.asciz	"phi"
	.size	.L.str1182, 4

	.type	.L.str1183,@object      # @.str1183
.L.str1183:
	.asciz	"main"
	.size	.L.str1183, 5

	.type	.L.str1184,@object      # @.str1184
.L.str1184:
	.asciz	".lr.ph9"
	.size	.L.str1184, 8

	.type	.L.str1185,@object      # @.str1185
.L.str1185:
	.asciz	"95"
	.size	.L.str1185, 3

	.type	.L.str1186,@object      # @.str1186
.L.str1186:
	.asciz	"strtok"
	.size	.L.str1186, 7

	.type	.L.str1187,@object      # @.str1187
.L.str1187:
	.asciz	"phi"
	.size	.L.str1187, 4

	.type	.L.str1188,@object      # @.str1188
.L.str1188:
	.zero	1
	.size	.L.str1188, 1

	.type	.L.str1189,@object      # @.str1189
.L.str1189:
	.asciz	"phi"
	.size	.L.str1189, 4

	.type	.L.str1190,@object      # @.str1190
.L.str1190:
	.zero	1
	.size	.L.str1190, 1

	.type	.L.str1191,@object      # @.str1191
.L.str1191:
	.asciz	"phi"
	.size	.L.str1191, 4

	.type	.L.str1192,@object      # @.str1192
.L.str1192:
	.zero	1
	.size	.L.str1192, 1

	.type	.L.str1193,@object      # @.str1193
.L.str1193:
	.asciz	"phi"
	.size	.L.str1193, 4

	.type	.L.str1194,@object      # @.str1194
.L.str1194:
	.zero	1
	.size	.L.str1194, 1

	.type	.L.str1195,@object      # @.str1195
.L.str1195:
	.asciz	"phi"
	.size	.L.str1195, 4

	.type	.L.str1196,@object      # @.str1196
.L.str1196:
	.asciz	"95"
	.size	.L.str1196, 3

	.type	.L.str1197,@object      # @.str1197
.L.str1197:
	.asciz	"phi"
	.size	.L.str1197, 4

	.type	.L.str1198,@object      # @.str1198
.L.str1198:
	.asciz	"main"
	.size	.L.str1198, 5

	.type	.L.str1199,@object      # @.str1199
.L.str1199:
	.asciz	".lr.ph9"
	.size	.L.str1199, 8

	.type	.L.str1200,@object      # @.str1200
.L.str1200:
	.asciz	"96"
	.size	.L.str1200, 3

	.type	.L.str1201,@object      # @.str1201
.L.str1201:
	.zero	1
	.size	.L.str1201, 1

	.type	.L.str1202,@object      # @.str1202
.L.str1202:
	.asciz	"phi"
	.size	.L.str1202, 4

	.type	.L.str1203,@object      # @.str1203
.L.str1203:
	.asciz	"95"
	.size	.L.str1203, 3

	.type	.L.str1204,@object      # @.str1204
.L.str1204:
	.asciz	"phi"
	.size	.L.str1204, 4

	.type	.L.str1205,@object      # @.str1205
.L.str1205:
	.asciz	"96"
	.size	.L.str1205, 3

	.type	.L.str1206,@object      # @.str1206
.L.str1206:
	.asciz	"phi"
	.size	.L.str1206, 4

	.type	.L.str1207,@object      # @.str1207
.L.str1207:
	.asciz	"main"
	.size	.L.str1207, 5

	.type	.L.str1208,@object      # @.str1208
.L.str1208:
	.asciz	".lr.ph9"
	.size	.L.str1208, 8

	.type	.L.str1209,@object      # @.str1209
.L.str1209:
	.asciz	".lr.ph9-3"
	.size	.L.str1209, 10

	.type	.L.str1210,@object      # @.str1210
.L.str1210:
	.asciz	".loopexit8"
	.size	.L.str1210, 11

	.type	.L.str1211,@object      # @.str1211
.L.str1211:
	.asciz	"phi"
	.size	.L.str1211, 4

	.type	.L.str1212,@object      # @.str1212
.L.str1212:
	.asciz	".lr.ph9"
	.size	.L.str1212, 8

	.type	.L.str1213,@object      # @.str1213
.L.str1213:
	.asciz	"phi"
	.size	.L.str1213, 4

	.type	.L.str1214,@object      # @.str1214
.L.str1214:
	.asciz	"96"
	.size	.L.str1214, 3

	.type	.L.str1215,@object      # @.str1215
.L.str1215:
	.asciz	"phi"
	.size	.L.str1215, 4

	.type	.L.str1216,@object      # @.str1216
.L.str1216:
	.asciz	"main"
	.size	.L.str1216, 5

	.type	.L.str1217,@object      # @.str1217
.L.str1217:
	.asciz	".loopexit8"
	.size	.L.str1217, 11

	.type	.L.str1218,@object      # @.str1218
.L.str1218:
	.asciz	"97"
	.size	.L.str1218, 3

	.type	.L.str1219,@object      # @.str1219
.L.str1219:
	.asciz	"numObjects"
	.size	.L.str1219, 11

	.type	.L.str1220,@object      # @.str1220
.L.str1220:
	.asciz	"phi"
	.size	.L.str1220, 4

	.type	.L.str1221,@object      # @.str1221
.L.str1221:
	.asciz	"97"
	.size	.L.str1221, 3

	.type	.L.str1222,@object      # @.str1222
.L.str1222:
	.asciz	"phi"
	.size	.L.str1222, 4

	.type	.L.str1223,@object      # @.str1223
.L.str1223:
	.asciz	"main"
	.size	.L.str1223, 5

	.type	.L.str1224,@object      # @.str1224
.L.str1224:
	.asciz	".loopexit8"
	.size	.L.str1224, 11

	.type	.L.str1225,@object      # @.str1225
.L.str1225:
	.asciz	"98"
	.size	.L.str1225, 3

	.type	.L.str1226,@object      # @.str1226
.L.str1226:
	.asciz	"numAttributes"
	.size	.L.str1226, 14

	.type	.L.str1227,@object      # @.str1227
.L.str1227:
	.asciz	"phi"
	.size	.L.str1227, 4

	.type	.L.str1228,@object      # @.str1228
.L.str1228:
	.asciz	"98"
	.size	.L.str1228, 3

	.type	.L.str1229,@object      # @.str1229
.L.str1229:
	.asciz	"phi"
	.size	.L.str1229, 4

	.type	.L.str1230,@object      # @.str1230
.L.str1230:
	.asciz	"main"
	.size	.L.str1230, 5

	.type	.L.str1231,@object      # @.str1231
.L.str1231:
	.asciz	".loopexit8"
	.size	.L.str1231, 11

	.type	.L.str1232,@object      # @.str1232
.L.str1232:
	.asciz	"99"
	.size	.L.str1232, 3

	.type	.L.str1233,@object      # @.str1233
.L.str1233:
	.asciz	"97"
	.size	.L.str1233, 3

	.type	.L.str1234,@object      # @.str1234
.L.str1234:
	.asciz	"phi"
	.size	.L.str1234, 4

	.type	.L.str1235,@object      # @.str1235
.L.str1235:
	.asciz	"98"
	.size	.L.str1235, 3

	.type	.L.str1236,@object      # @.str1236
.L.str1236:
	.asciz	"phi"
	.size	.L.str1236, 4

	.type	.L.str1237,@object      # @.str1237
.L.str1237:
	.asciz	"99"
	.size	.L.str1237, 3

	.type	.L.str1238,@object      # @.str1238
.L.str1238:
	.asciz	"phi"
	.size	.L.str1238, 4

	.type	.L.str1239,@object      # @.str1239
.L.str1239:
	.asciz	"main"
	.size	.L.str1239, 5

	.type	.L.str1240,@object      # @.str1240
.L.str1240:
	.asciz	".loopexit8"
	.size	.L.str1240, 11

	.type	.L.str1241,@object      # @.str1241
.L.str1241:
	.asciz	"100"
	.size	.L.str1241, 4

	.type	.L.str1242,@object      # @.str1242
.L.str1242:
	.asciz	"99"
	.size	.L.str1242, 3

	.type	.L.str1243,@object      # @.str1243
.L.str1243:
	.asciz	"phi"
	.size	.L.str1243, 4

	.type	.L.str1244,@object      # @.str1244
.L.str1244:
	.asciz	"100"
	.size	.L.str1244, 4

	.type	.L.str1245,@object      # @.str1245
.L.str1245:
	.asciz	"phi"
	.size	.L.str1245, 4

	.type	.L.str1246,@object      # @.str1246
.L.str1246:
	.asciz	"main"
	.size	.L.str1246, 5

	.type	.L.str1247,@object      # @.str1247
.L.str1247:
	.asciz	".loopexit8"
	.size	.L.str1247, 11

	.type	.L.str1248,@object      # @.str1248
.L.str1248:
	.asciz	"101"
	.size	.L.str1248, 4

	.type	.L.str1249,@object      # @.str1249
.L.str1249:
	.zero	1
	.size	.L.str1249, 1

	.type	.L.str1250,@object      # @.str1250
.L.str1250:
	.asciz	"phi"
	.size	.L.str1250, 4

	.type	.L.str1251,@object      # @.str1251
.L.str1251:
	.asciz	"100"
	.size	.L.str1251, 4

	.type	.L.str1252,@object      # @.str1252
.L.str1252:
	.asciz	"phi"
	.size	.L.str1252, 4

	.type	.L.str1253,@object      # @.str1253
.L.str1253:
	.asciz	"101"
	.size	.L.str1253, 4

	.type	.L.str1254,@object      # @.str1254
.L.str1254:
	.asciz	"phi"
	.size	.L.str1254, 4

	.type	.L.str1255,@object      # @.str1255
.L.str1255:
	.asciz	"main"
	.size	.L.str1255, 5

	.type	.L.str1256,@object      # @.str1256
.L.str1256:
	.asciz	".loopexit8"
	.size	.L.str1256, 11

	.type	.L.str1257,@object      # @.str1257
.L.str1257:
	.asciz	"102"
	.size	.L.str1257, 4

	.type	.L.str1258,@object      # @.str1258
.L.str1258:
	.asciz	"malloc"
	.size	.L.str1258, 7

	.type	.L.str1259,@object      # @.str1259
.L.str1259:
	.asciz	"phi"
	.size	.L.str1259, 4

	.type	.L.str1260,@object      # @.str1260
.L.str1260:
	.asciz	"101"
	.size	.L.str1260, 4

	.type	.L.str1261,@object      # @.str1261
.L.str1261:
	.asciz	"phi"
	.size	.L.str1261, 4

	.type	.L.str1262,@object      # @.str1262
.L.str1262:
	.zero	1
	.size	.L.str1262, 1

	.type	.L.str1263,@object      # @.str1263
.L.str1263:
	.asciz	"phi"
	.size	.L.str1263, 4

	.type	.L.str1264,@object      # @.str1264
.L.str1264:
	.asciz	"102"
	.size	.L.str1264, 4

	.type	.L.str1265,@object      # @.str1265
.L.str1265:
	.asciz	"phi"
	.size	.L.str1265, 4

	.type	.L.str1266,@object      # @.str1266
.L.str1266:
	.asciz	"main"
	.size	.L.str1266, 5

	.type	.L.str1267,@object      # @.str1267
.L.str1267:
	.asciz	".loopexit8"
	.size	.L.str1267, 11

	.type	.L.str1268,@object      # @.str1268
.L.str1268:
	.asciz	"103"
	.size	.L.str1268, 4

	.type	.L.str1269,@object      # @.str1269
.L.str1269:
	.asciz	"102"
	.size	.L.str1269, 4

	.type	.L.str1270,@object      # @.str1270
.L.str1270:
	.asciz	"phi"
	.size	.L.str1270, 4

	.type	.L.str1271,@object      # @.str1271
.L.str1271:
	.asciz	"103"
	.size	.L.str1271, 4

	.type	.L.str1272,@object      # @.str1272
.L.str1272:
	.asciz	"phi"
	.size	.L.str1272, 4

	.type	.L.str1273,@object      # @.str1273
.L.str1273:
	.asciz	"main"
	.size	.L.str1273, 5

	.type	.L.str1274,@object      # @.str1274
.L.str1274:
	.asciz	".loopexit8"
	.size	.L.str1274, 11

	.type	.L.str1275,@object      # @.str1275
.L.str1275:
	.asciz	"104"
	.size	.L.str1275, 4

	.type	.L.str1276,@object      # @.str1276
.L.str1276:
	.asciz	"numObjects"
	.size	.L.str1276, 11

	.type	.L.str1277,@object      # @.str1277
.L.str1277:
	.asciz	"phi"
	.size	.L.str1277, 4

	.type	.L.str1278,@object      # @.str1278
.L.str1278:
	.asciz	"104"
	.size	.L.str1278, 4

	.type	.L.str1279,@object      # @.str1279
.L.str1279:
	.asciz	"phi"
	.size	.L.str1279, 4

	.type	.L.str1280,@object      # @.str1280
.L.str1280:
	.asciz	"main"
	.size	.L.str1280, 5

	.type	.L.str1281,@object      # @.str1281
.L.str1281:
	.asciz	".loopexit8"
	.size	.L.str1281, 11

	.type	.L.str1282,@object      # @.str1282
.L.str1282:
	.asciz	"105"
	.size	.L.str1282, 4

	.type	.L.str1283,@object      # @.str1283
.L.str1283:
	.asciz	"104"
	.size	.L.str1283, 4

	.type	.L.str1284,@object      # @.str1284
.L.str1284:
	.asciz	"phi"
	.size	.L.str1284, 4

	.type	.L.str1285,@object      # @.str1285
.L.str1285:
	.asciz	"105"
	.size	.L.str1285, 4

	.type	.L.str1286,@object      # @.str1286
.L.str1286:
	.asciz	"phi"
	.size	.L.str1286, 4

	.type	.L.str1287,@object      # @.str1287
.L.str1287:
	.asciz	"main"
	.size	.L.str1287, 5

	.type	.L.str1288,@object      # @.str1288
.L.str1288:
	.asciz	".loopexit8"
	.size	.L.str1288, 11

	.type	.L.str1289,@object      # @.str1289
.L.str1289:
	.asciz	"106"
	.size	.L.str1289, 4

	.type	.L.str1290,@object      # @.str1290
.L.str1290:
	.zero	1
	.size	.L.str1290, 1

	.type	.L.str1291,@object      # @.str1291
.L.str1291:
	.asciz	"phi"
	.size	.L.str1291, 4

	.type	.L.str1292,@object      # @.str1292
.L.str1292:
	.asciz	"105"
	.size	.L.str1292, 4

	.type	.L.str1293,@object      # @.str1293
.L.str1293:
	.asciz	"phi"
	.size	.L.str1293, 4

	.type	.L.str1294,@object      # @.str1294
.L.str1294:
	.asciz	"106"
	.size	.L.str1294, 4

	.type	.L.str1295,@object      # @.str1295
.L.str1295:
	.asciz	"phi"
	.size	.L.str1295, 4

	.type	.L.str1296,@object      # @.str1296
.L.str1296:
	.asciz	"main"
	.size	.L.str1296, 5

	.type	.L.str1297,@object      # @.str1297
.L.str1297:
	.asciz	".loopexit8"
	.size	.L.str1297, 11

	.type	.L.str1298,@object      # @.str1298
.L.str1298:
	.asciz	"107"
	.size	.L.str1298, 4

	.type	.L.str1299,@object      # @.str1299
.L.str1299:
	.asciz	"malloc"
	.size	.L.str1299, 7

	.type	.L.str1300,@object      # @.str1300
.L.str1300:
	.asciz	"phi"
	.size	.L.str1300, 4

	.type	.L.str1301,@object      # @.str1301
.L.str1301:
	.asciz	"106"
	.size	.L.str1301, 4

	.type	.L.str1302,@object      # @.str1302
.L.str1302:
	.asciz	"phi"
	.size	.L.str1302, 4

	.type	.L.str1303,@object      # @.str1303
.L.str1303:
	.zero	1
	.size	.L.str1303, 1

	.type	.L.str1304,@object      # @.str1304
.L.str1304:
	.asciz	"phi"
	.size	.L.str1304, 4

	.type	.L.str1305,@object      # @.str1305
.L.str1305:
	.asciz	"107"
	.size	.L.str1305, 4

	.type	.L.str1306,@object      # @.str1306
.L.str1306:
	.asciz	"phi"
	.size	.L.str1306, 4

	.type	.L.str1307,@object      # @.str1307
.L.str1307:
	.asciz	"main"
	.size	.L.str1307, 5

	.type	.L.str1308,@object      # @.str1308
.L.str1308:
	.asciz	".loopexit8"
	.size	.L.str1308, 11

	.type	.L.str1309,@object      # @.str1309
.L.str1309:
	.asciz	"108"
	.size	.L.str1309, 4

	.type	.L.str1310,@object      # @.str1310
.L.str1310:
	.asciz	"107"
	.size	.L.str1310, 4

	.type	.L.str1311,@object      # @.str1311
.L.str1311:
	.asciz	"phi"
	.size	.L.str1311, 4

	.type	.L.str1312,@object      # @.str1312
.L.str1312:
	.asciz	"108"
	.size	.L.str1312, 4

	.type	.L.str1313,@object      # @.str1313
.L.str1313:
	.asciz	"phi"
	.size	.L.str1313, 4

	.type	.L.str1314,@object      # @.str1314
.L.str1314:
	.asciz	"main"
	.size	.L.str1314, 5

	.type	.L.str1315,@object      # @.str1315
.L.str1315:
	.asciz	".loopexit8"
	.size	.L.str1315, 11

	.type	.L.str1316,@object      # @.str1316
.L.str1316:
	.asciz	"109"
	.size	.L.str1316, 4

	.type	.L.str1317,@object      # @.str1317
.L.str1317:
	.asciz	"numObjects"
	.size	.L.str1317, 11

	.type	.L.str1318,@object      # @.str1318
.L.str1318:
	.asciz	"phi"
	.size	.L.str1318, 4

	.type	.L.str1319,@object      # @.str1319
.L.str1319:
	.asciz	"109"
	.size	.L.str1319, 4

	.type	.L.str1320,@object      # @.str1320
.L.str1320:
	.asciz	"phi"
	.size	.L.str1320, 4

	.type	.L.str1321,@object      # @.str1321
.L.str1321:
	.asciz	"main"
	.size	.L.str1321, 5

	.type	.L.str1322,@object      # @.str1322
.L.str1322:
	.asciz	".loopexit8"
	.size	.L.str1322, 11

	.type	.L.str1323,@object      # @.str1323
.L.str1323:
	.asciz	"110"
	.size	.L.str1323, 4

	.type	.L.str1324,@object      # @.str1324
.L.str1324:
	.asciz	"numAttributes"
	.size	.L.str1324, 14

	.type	.L.str1325,@object      # @.str1325
.L.str1325:
	.asciz	"phi"
	.size	.L.str1325, 4

	.type	.L.str1326,@object      # @.str1326
.L.str1326:
	.asciz	"110"
	.size	.L.str1326, 4

	.type	.L.str1327,@object      # @.str1327
.L.str1327:
	.asciz	"phi"
	.size	.L.str1327, 4

	.type	.L.str1328,@object      # @.str1328
.L.str1328:
	.asciz	"main"
	.size	.L.str1328, 5

	.type	.L.str1329,@object      # @.str1329
.L.str1329:
	.asciz	".loopexit8"
	.size	.L.str1329, 11

	.type	.L.str1330,@object      # @.str1330
.L.str1330:
	.asciz	"111"
	.size	.L.str1330, 4

	.type	.L.str1331,@object      # @.str1331
.L.str1331:
	.asciz	"109"
	.size	.L.str1331, 4

	.type	.L.str1332,@object      # @.str1332
.L.str1332:
	.asciz	"phi"
	.size	.L.str1332, 4

	.type	.L.str1333,@object      # @.str1333
.L.str1333:
	.asciz	"110"
	.size	.L.str1333, 4

	.type	.L.str1334,@object      # @.str1334
.L.str1334:
	.asciz	"phi"
	.size	.L.str1334, 4

	.type	.L.str1335,@object      # @.str1335
.L.str1335:
	.asciz	"111"
	.size	.L.str1335, 4

	.type	.L.str1336,@object      # @.str1336
.L.str1336:
	.asciz	"phi"
	.size	.L.str1336, 4

	.type	.L.str1337,@object      # @.str1337
.L.str1337:
	.asciz	"main"
	.size	.L.str1337, 5

	.type	.L.str1338,@object      # @.str1338
.L.str1338:
	.asciz	".loopexit8"
	.size	.L.str1338, 11

	.type	.L.str1339,@object      # @.str1339
.L.str1339:
	.asciz	"112"
	.size	.L.str1339, 4

	.type	.L.str1340,@object      # @.str1340
.L.str1340:
	.asciz	"111"
	.size	.L.str1340, 4

	.type	.L.str1341,@object      # @.str1341
.L.str1341:
	.asciz	"phi"
	.size	.L.str1341, 4

	.type	.L.str1342,@object      # @.str1342
.L.str1342:
	.asciz	"112"
	.size	.L.str1342, 4

	.type	.L.str1343,@object      # @.str1343
.L.str1343:
	.asciz	"phi"
	.size	.L.str1343, 4

	.type	.L.str1344,@object      # @.str1344
.L.str1344:
	.asciz	"main"
	.size	.L.str1344, 5

	.type	.L.str1345,@object      # @.str1345
.L.str1345:
	.asciz	".loopexit8"
	.size	.L.str1345, 11

	.type	.L.str1346,@object      # @.str1346
.L.str1346:
	.asciz	"113"
	.size	.L.str1346, 4

	.type	.L.str1347,@object      # @.str1347
.L.str1347:
	.zero	1
	.size	.L.str1347, 1

	.type	.L.str1348,@object      # @.str1348
.L.str1348:
	.asciz	"phi"
	.size	.L.str1348, 4

	.type	.L.str1349,@object      # @.str1349
.L.str1349:
	.asciz	"112"
	.size	.L.str1349, 4

	.type	.L.str1350,@object      # @.str1350
.L.str1350:
	.asciz	"phi"
	.size	.L.str1350, 4

	.type	.L.str1351,@object      # @.str1351
.L.str1351:
	.asciz	"113"
	.size	.L.str1351, 4

	.type	.L.str1352,@object      # @.str1352
.L.str1352:
	.asciz	"phi"
	.size	.L.str1352, 4

	.type	.L.str1353,@object      # @.str1353
.L.str1353:
	.asciz	"main"
	.size	.L.str1353, 5

	.type	.L.str1354,@object      # @.str1354
.L.str1354:
	.asciz	".loopexit8"
	.size	.L.str1354, 11

	.type	.L.str1355,@object      # @.str1355
.L.str1355:
	.asciz	"114"
	.size	.L.str1355, 4

	.type	.L.str1356,@object      # @.str1356
.L.str1356:
	.asciz	"malloc"
	.size	.L.str1356, 7

	.type	.L.str1357,@object      # @.str1357
.L.str1357:
	.asciz	"phi"
	.size	.L.str1357, 4

	.type	.L.str1358,@object      # @.str1358
.L.str1358:
	.asciz	"113"
	.size	.L.str1358, 4

	.type	.L.str1359,@object      # @.str1359
.L.str1359:
	.asciz	"phi"
	.size	.L.str1359, 4

	.type	.L.str1360,@object      # @.str1360
.L.str1360:
	.zero	1
	.size	.L.str1360, 1

	.type	.L.str1361,@object      # @.str1361
.L.str1361:
	.asciz	"phi"
	.size	.L.str1361, 4

	.type	.L.str1362,@object      # @.str1362
.L.str1362:
	.asciz	"114"
	.size	.L.str1362, 4

	.type	.L.str1363,@object      # @.str1363
.L.str1363:
	.asciz	"phi"
	.size	.L.str1363, 4

	.type	.L.str1364,@object      # @.str1364
.L.str1364:
	.asciz	"main"
	.size	.L.str1364, 5

	.type	.L.str1365,@object      # @.str1365
.L.str1365:
	.asciz	".loopexit8"
	.size	.L.str1365, 11

	.type	.L.str1366,@object      # @.str1366
.L.str1366:
	.asciz	"115"
	.size	.L.str1366, 4

	.type	.L.str1367,@object      # @.str1367
.L.str1367:
	.asciz	"114"
	.size	.L.str1367, 4

	.type	.L.str1368,@object      # @.str1368
.L.str1368:
	.asciz	"phi"
	.size	.L.str1368, 4

	.type	.L.str1369,@object      # @.str1369
.L.str1369:
	.asciz	"115"
	.size	.L.str1369, 4

	.type	.L.str1370,@object      # @.str1370
.L.str1370:
	.asciz	"phi"
	.size	.L.str1370, 4

	.type	.L.str1371,@object      # @.str1371
.L.str1371:
	.asciz	"main"
	.size	.L.str1371, 5

	.type	.L.str1372,@object      # @.str1372
.L.str1372:
	.asciz	".loopexit8"
	.size	.L.str1372, 11

	.type	.L.str1373,@object      # @.str1373
.L.str1373:
	.asciz	".loopexit8-7"
	.size	.L.str1373, 13

	.type	.L.str1374,@object      # @.str1374
.L.str1374:
	.asciz	"108"
	.size	.L.str1374, 4

	.type	.L.str1375,@object      # @.str1375
.L.str1375:
	.asciz	"phi"
	.size	.L.str1375, 4

	.type	.L.str1376,@object      # @.str1376
.L.str1376:
	.asciz	"115"
	.size	.L.str1376, 4

	.type	.L.str1377,@object      # @.str1377
.L.str1377:
	.asciz	"phi"
	.size	.L.str1377, 4

	.type	.L.str1378,@object      # @.str1378
.L.str1378:
	.asciz	"main"
	.size	.L.str1378, 5

	.type	.L.str1379,@object      # @.str1379
.L.str1379:
	.asciz	".loopexit8"
	.size	.L.str1379, 11

	.type	.L.str1380,@object      # @.str1380
.L.str1380:
	.asciz	"116"
	.size	.L.str1380, 4

	.type	.L.str1381,@object      # @.str1381
.L.str1381:
	.asciz	"numObjects"
	.size	.L.str1381, 11

	.type	.L.str1382,@object      # @.str1382
.L.str1382:
	.asciz	"phi"
	.size	.L.str1382, 4

	.type	.L.str1383,@object      # @.str1383
.L.str1383:
	.asciz	"116"
	.size	.L.str1383, 4

	.type	.L.str1384,@object      # @.str1384
.L.str1384:
	.asciz	"phi"
	.size	.L.str1384, 4

	.type	.L.str1385,@object      # @.str1385
.L.str1385:
	.asciz	"main"
	.size	.L.str1385, 5

	.type	.L.str1386,@object      # @.str1386
.L.str1386:
	.asciz	".loopexit8"
	.size	.L.str1386, 11

	.type	.L.str1387,@object      # @.str1387
.L.str1387:
	.asciz	"117"
	.size	.L.str1387, 4

	.type	.L.str1388,@object      # @.str1388
.L.str1388:
	.zero	1
	.size	.L.str1388, 1

	.type	.L.str1389,@object      # @.str1389
.L.str1389:
	.asciz	"phi"
	.size	.L.str1389, 4

	.type	.L.str1390,@object      # @.str1390
.L.str1390:
	.asciz	"116"
	.size	.L.str1390, 4

	.type	.L.str1391,@object      # @.str1391
.L.str1391:
	.asciz	"phi"
	.size	.L.str1391, 4

	.type	.L.str1392,@object      # @.str1392
.L.str1392:
	.asciz	"117"
	.size	.L.str1392, 4

	.type	.L.str1393,@object      # @.str1393
.L.str1393:
	.asciz	"phi"
	.size	.L.str1393, 4

	.type	.L.str1394,@object      # @.str1394
.L.str1394:
	.asciz	"main"
	.size	.L.str1394, 5

	.type	.L.str1395,@object      # @.str1395
.L.str1395:
	.asciz	".loopexit8"
	.size	.L.str1395, 11

	.type	.L.str1396,@object      # @.str1396
.L.str1396:
	.asciz	".loopexit8-10"
	.size	.L.str1396, 14

	.type	.L.str1397,@object      # @.str1397
.L.str1397:
	.asciz	".lr.ph6"
	.size	.L.str1397, 8

	.type	.L.str1398,@object      # @.str1398
.L.str1398:
	.asciz	"phi"
	.size	.L.str1398, 4

	.type	.L.str1399,@object      # @.str1399
.L.str1399:
	.asciz	"._crit_edge"
	.size	.L.str1399, 12

	.type	.L.str1400,@object      # @.str1400
.L.str1400:
	.asciz	"phi"
	.size	.L.str1400, 4

	.type	.L.str1401,@object      # @.str1401
.L.str1401:
	.asciz	"117"
	.size	.L.str1401, 4

	.type	.L.str1402,@object      # @.str1402
.L.str1402:
	.asciz	"phi"
	.size	.L.str1402, 4

	.type	.L.str1403,@object      # @.str1403
.L.str1403:
	.asciz	"main"
	.size	.L.str1403, 5

	.type	.L.str1404,@object      # @.str1404
.L.str1404:
	.asciz	".lr.ph6"
	.size	.L.str1404, 8

	.type	.L.str1405,@object      # @.str1405
.L.str1405:
	.asciz	"118"
	.size	.L.str1405, 4

	.type	.L.str1406,@object      # @.str1406
.L.str1406:
	.asciz	"numAttributes"
	.size	.L.str1406, 14

	.type	.L.str1407,@object      # @.str1407
.L.str1407:
	.asciz	"phi"
	.size	.L.str1407, 4

	.type	.L.str1408,@object      # @.str1408
.L.str1408:
	.asciz	"118"
	.size	.L.str1408, 4

	.type	.L.str1409,@object      # @.str1409
.L.str1409:
	.asciz	"phi"
	.size	.L.str1409, 4

	.type	.L.str1410,@object      # @.str1410
.L.str1410:
	.asciz	"main"
	.size	.L.str1410, 5

	.type	.L.str1411,@object      # @.str1411
.L.str1411:
	.asciz	".lr.ph6"
	.size	.L.str1411, 8

	.type	.L.str1412,@object      # @.str1412
.L.str1412:
	.asciz	"119"
	.size	.L.str1412, 4

	.type	.L.str1413,@object      # @.str1413
.L.str1413:
	.asciz	"118"
	.size	.L.str1413, 4

	.type	.L.str1414,@object      # @.str1414
.L.str1414:
	.asciz	"phi"
	.size	.L.str1414, 4

	.type	.L.str1415,@object      # @.str1415
.L.str1415:
	.asciz	"119"
	.size	.L.str1415, 4

	.type	.L.str1416,@object      # @.str1416
.L.str1416:
	.asciz	"phi"
	.size	.L.str1416, 4

	.type	.L.str1417,@object      # @.str1417
.L.str1417:
	.asciz	"main"
	.size	.L.str1417, 5

	.type	.L.str1418,@object      # @.str1418
.L.str1418:
	.asciz	".lr.ph6"
	.size	.L.str1418, 8

	.type	.L.str1419,@object      # @.str1419
.L.str1419:
	.asciz	"120"
	.size	.L.str1419, 4

	.type	.L.str1420,@object      # @.str1420
.L.str1420:
	.asciz	"numObjects"
	.size	.L.str1420, 11

	.type	.L.str1421,@object      # @.str1421
.L.str1421:
	.asciz	"phi"
	.size	.L.str1421, 4

	.type	.L.str1422,@object      # @.str1422
.L.str1422:
	.asciz	"120"
	.size	.L.str1422, 4

	.type	.L.str1423,@object      # @.str1423
.L.str1423:
	.asciz	"phi"
	.size	.L.str1423, 4

	.type	.L.str1424,@object      # @.str1424
.L.str1424:
	.asciz	"main"
	.size	.L.str1424, 5

	.type	.L.str1425,@object      # @.str1425
.L.str1425:
	.asciz	".lr.ph6"
	.size	.L.str1425, 8

	.type	.L.str1426,@object      # @.str1426
.L.str1426:
	.asciz	".lr.ph6-2"
	.size	.L.str1426, 10

	.type	.L.str1427,@object      # @.str1427
.L.str1427:
	.asciz	"121"
	.size	.L.str1427, 4

	.type	.L.str1428,@object      # @.str1428
.L.str1428:
	.asciz	"phi"
	.size	.L.str1428, 4

	.type	.L.str1429,@object      # @.str1429
.L.str1429:
	.asciz	"main"
	.size	.L.str1429, 5

	.type	.L.str1430,@object      # @.str1430
.L.str1430:
	.asciz	"121"
	.size	.L.str1430, 4

	.type	.L.str1431,@object      # @.str1431
.L.str1431:
	.asciz	"indvars.iv42"
	.size	.L.str1431, 13

	.type	.L.str1432,@object      # @.str1432
	.align	16
.L.str1432:
	.asciz	"indvars.iv.next43"
	.size	.L.str1432, 18

	.type	.L.str1433,@object      # @.str1433
.L.str1433:
	.asciz	"121"
	.size	.L.str1433, 4

	.type	.L.str1434,@object      # @.str1434
.L.str1434:
	.zero	1
	.size	.L.str1434, 1

	.type	.L.str1435,@object      # @.str1435
.L.str1435:
	.asciz	".lr.ph6"
	.size	.L.str1435, 8

	.type	.L.str1436,@object      # @.str1436
.L.str1436:
	.asciz	"indvars.iv42"
	.size	.L.str1436, 13

	.type	.L.str1437,@object      # @.str1437
.L.str1437:
	.asciz	"phi"
	.size	.L.str1437, 4

	.type	.L.str1438,@object      # @.str1438
.L.str1438:
	.asciz	"main"
	.size	.L.str1438, 5

	.type	.L.str1439,@object      # @.str1439
.L.str1439:
	.asciz	"121"
	.size	.L.str1439, 4

	.type	.L.str1440,@object      # @.str1440
.L.str1440:
	.asciz	"122"
	.size	.L.str1440, 4

	.type	.L.str1441,@object      # @.str1441
.L.str1441:
	.zero	1
	.size	.L.str1441, 1

	.type	.L.str1442,@object      # @.str1442
.L.str1442:
	.asciz	"phi"
	.size	.L.str1442, 4

	.type	.L.str1443,@object      # @.str1443
.L.str1443:
	.asciz	"indvars.iv42"
	.size	.L.str1443, 13

	.type	.L.str1444,@object      # @.str1444
.L.str1444:
	.asciz	"phi"
	.size	.L.str1444, 4

	.type	.L.str1445,@object      # @.str1445
.L.str1445:
	.asciz	"122"
	.size	.L.str1445, 4

	.type	.L.str1446,@object      # @.str1446
.L.str1446:
	.asciz	"phi"
	.size	.L.str1446, 4

	.type	.L.str1447,@object      # @.str1447
.L.str1447:
	.asciz	"main"
	.size	.L.str1447, 5

	.type	.L.str1448,@object      # @.str1448
.L.str1448:
	.asciz	"121"
	.size	.L.str1448, 4

	.type	.L.str1449,@object      # @.str1449
.L.str1449:
	.asciz	"123"
	.size	.L.str1449, 4

	.type	.L.str1450,@object      # @.str1450
.L.str1450:
	.asciz	"122"
	.size	.L.str1450, 4

	.type	.L.str1451,@object      # @.str1451
.L.str1451:
	.asciz	"phi"
	.size	.L.str1451, 4

	.type	.L.str1452,@object      # @.str1452
.L.str1452:
	.asciz	"108"
	.size	.L.str1452, 4

	.type	.L.str1453,@object      # @.str1453
.L.str1453:
	.asciz	"phi"
	.size	.L.str1453, 4

	.type	.L.str1454,@object      # @.str1454
.L.str1454:
	.asciz	"123"
	.size	.L.str1454, 4

	.type	.L.str1455,@object      # @.str1455
.L.str1455:
	.asciz	"phi"
	.size	.L.str1455, 4

	.type	.L.str1456,@object      # @.str1456
.L.str1456:
	.asciz	"main"
	.size	.L.str1456, 5

	.type	.L.str1457,@object      # @.str1457
.L.str1457:
	.asciz	"121"
	.size	.L.str1457, 4

	.type	.L.str1458,@object      # @.str1458
.L.str1458:
	.asciz	"124"
	.size	.L.str1458, 4

	.type	.L.str1459,@object      # @.str1459
.L.str1459:
	.asciz	"123"
	.size	.L.str1459, 4

	.type	.L.str1460,@object      # @.str1460
.L.str1460:
	.asciz	"phi"
	.size	.L.str1460, 4

	.type	.L.str1461,@object      # @.str1461
.L.str1461:
	.asciz	"124"
	.size	.L.str1461, 4

	.type	.L.str1462,@object      # @.str1462
.L.str1462:
	.asciz	"phi"
	.size	.L.str1462, 4

	.type	.L.str1463,@object      # @.str1463
.L.str1463:
	.asciz	"main"
	.size	.L.str1463, 5

	.type	.L.str1464,@object      # @.str1464
.L.str1464:
	.asciz	"121"
	.size	.L.str1464, 4

	.type	.L.str1465,@object      # @.str1465
.L.str1465:
	.asciz	"125"
	.size	.L.str1465, 4

	.type	.L.str1466,@object      # @.str1466
.L.str1466:
	.asciz	"119"
	.size	.L.str1466, 4

	.type	.L.str1467,@object      # @.str1467
.L.str1467:
	.asciz	"phi"
	.size	.L.str1467, 4

	.type	.L.str1468,@object      # @.str1468
.L.str1468:
	.asciz	"124"
	.size	.L.str1468, 4

	.type	.L.str1469,@object      # @.str1469
.L.str1469:
	.asciz	"phi"
	.size	.L.str1469, 4

	.type	.L.str1470,@object      # @.str1470
.L.str1470:
	.asciz	"125"
	.size	.L.str1470, 4

	.type	.L.str1471,@object      # @.str1471
.L.str1471:
	.asciz	"phi"
	.size	.L.str1471, 4

	.type	.L.str1472,@object      # @.str1472
.L.str1472:
	.asciz	"main"
	.size	.L.str1472, 5

	.type	.L.str1473,@object      # @.str1473
.L.str1473:
	.asciz	"121"
	.size	.L.str1473, 4

	.type	.L.str1474,@object      # @.str1474
.L.str1474:
	.asciz	"126"
	.size	.L.str1474, 4

	.type	.L.str1475,@object      # @.str1475
.L.str1475:
	.asciz	"indvars.iv42"
	.size	.L.str1475, 13

	.type	.L.str1476,@object      # @.str1476
.L.str1476:
	.asciz	"phi"
	.size	.L.str1476, 4

	.type	.L.str1477,@object      # @.str1477
.L.str1477:
	.asciz	"108"
	.size	.L.str1477, 4

	.type	.L.str1478,@object      # @.str1478
.L.str1478:
	.asciz	"phi"
	.size	.L.str1478, 4

	.type	.L.str1479,@object      # @.str1479
.L.str1479:
	.asciz	"126"
	.size	.L.str1479, 4

	.type	.L.str1480,@object      # @.str1480
.L.str1480:
	.asciz	"phi"
	.size	.L.str1480, 4

	.type	.L.str1481,@object      # @.str1481
.L.str1481:
	.asciz	"main"
	.size	.L.str1481, 5

	.type	.L.str1482,@object      # @.str1482
.L.str1482:
	.asciz	"121"
	.size	.L.str1482, 4

	.type	.L.str1483,@object      # @.str1483
.L.str1483:
	.asciz	"121-1"
	.size	.L.str1483, 6

	.type	.L.str1484,@object      # @.str1484
.L.str1484:
	.asciz	"126"
	.size	.L.str1484, 4

	.type	.L.str1485,@object      # @.str1485
.L.str1485:
	.asciz	"phi"
	.size	.L.str1485, 4

	.type	.L.str1486,@object      # @.str1486
.L.str1486:
	.asciz	"125"
	.size	.L.str1486, 4

	.type	.L.str1487,@object      # @.str1487
.L.str1487:
	.asciz	"phi"
	.size	.L.str1487, 4

	.type	.L.str1488,@object      # @.str1488
.L.str1488:
	.asciz	"main"
	.size	.L.str1488, 5

	.type	.L.str1489,@object      # @.str1489
.L.str1489:
	.asciz	"121"
	.size	.L.str1489, 4

	.type	.L.str1490,@object      # @.str1490
	.align	16
.L.str1490:
	.asciz	"indvars.iv.next43"
	.size	.L.str1490, 18

	.type	.L.str1491,@object      # @.str1491
.L.str1491:
	.zero	1
	.size	.L.str1491, 1

	.type	.L.str1492,@object      # @.str1492
.L.str1492:
	.asciz	"phi"
	.size	.L.str1492, 4

	.type	.L.str1493,@object      # @.str1493
.L.str1493:
	.asciz	"indvars.iv42"
	.size	.L.str1493, 13

	.type	.L.str1494,@object      # @.str1494
.L.str1494:
	.asciz	"phi"
	.size	.L.str1494, 4

	.type	.L.str1495,@object      # @.str1495
	.align	16
.L.str1495:
	.asciz	"indvars.iv.next43"
	.size	.L.str1495, 18

	.type	.L.str1496,@object      # @.str1496
.L.str1496:
	.asciz	"phi"
	.size	.L.str1496, 4

	.type	.L.str1497,@object      # @.str1497
.L.str1497:
	.asciz	"main"
	.size	.L.str1497, 5

	.type	.L.str1498,@object      # @.str1498
.L.str1498:
	.asciz	"121"
	.size	.L.str1498, 4

	.type	.L.str1499,@object      # @.str1499
.L.str1499:
	.asciz	"127"
	.size	.L.str1499, 4

	.type	.L.str1500,@object      # @.str1500
	.align	16
.L.str1500:
	.asciz	"indvars.iv.next43"
	.size	.L.str1500, 18

	.type	.L.str1501,@object      # @.str1501
.L.str1501:
	.asciz	"phi"
	.size	.L.str1501, 4

	.type	.L.str1502,@object      # @.str1502
.L.str1502:
	.asciz	"127"
	.size	.L.str1502, 4

	.type	.L.str1503,@object      # @.str1503
.L.str1503:
	.asciz	"phi"
	.size	.L.str1503, 4

	.type	.L.str1504,@object      # @.str1504
.L.str1504:
	.asciz	"main"
	.size	.L.str1504, 5

	.type	.L.str1505,@object      # @.str1505
.L.str1505:
	.asciz	"121"
	.size	.L.str1505, 4

	.type	.L.str1506,@object      # @.str1506
.L.str1506:
	.asciz	"128"
	.size	.L.str1506, 4

	.type	.L.str1507,@object      # @.str1507
.L.str1507:
	.asciz	"120"
	.size	.L.str1507, 4

	.type	.L.str1508,@object      # @.str1508
.L.str1508:
	.asciz	"phi"
	.size	.L.str1508, 4

	.type	.L.str1509,@object      # @.str1509
.L.str1509:
	.asciz	"127"
	.size	.L.str1509, 4

	.type	.L.str1510,@object      # @.str1510
.L.str1510:
	.asciz	"phi"
	.size	.L.str1510, 4

	.type	.L.str1511,@object      # @.str1511
.L.str1511:
	.asciz	"128"
	.size	.L.str1511, 4

	.type	.L.str1512,@object      # @.str1512
.L.str1512:
	.asciz	"phi"
	.size	.L.str1512, 4

	.type	.L.str1513,@object      # @.str1513
.L.str1513:
	.asciz	"main"
	.size	.L.str1513, 5

	.type	.L.str1514,@object      # @.str1514
.L.str1514:
	.asciz	"121"
	.size	.L.str1514, 4

	.type	.L.str1515,@object      # @.str1515
.L.str1515:
	.asciz	"121-3"
	.size	.L.str1515, 6

	.type	.L.str1516,@object      # @.str1516
.L.str1516:
	.asciz	"121"
	.size	.L.str1516, 4

	.type	.L.str1517,@object      # @.str1517
.L.str1517:
	.asciz	"phi"
	.size	.L.str1517, 4

	.type	.L.str1518,@object      # @.str1518
.L.str1518:
	.asciz	"._crit_edge"
	.size	.L.str1518, 12

	.type	.L.str1519,@object      # @.str1519
.L.str1519:
	.asciz	"phi"
	.size	.L.str1519, 4

	.type	.L.str1520,@object      # @.str1520
.L.str1520:
	.asciz	"128"
	.size	.L.str1520, 4

	.type	.L.str1521,@object      # @.str1521
.L.str1521:
	.asciz	"phi"
	.size	.L.str1521, 4

	.type	.L.str1522,@object      # @.str1522
.L.str1522:
	.asciz	"main"
	.size	.L.str1522, 5

	.type	.L.str1523,@object      # @.str1523
.L.str1523:
	.asciz	"._crit_edge"
	.size	.L.str1523, 12

	.type	.L.str1524,@object      # @.str1524
.L.str1524:
	.asciz	"._crit_edge-0"
	.size	.L.str1524, 14

	.type	.L.str1525,@object      # @.str1525
.L.str1525:
	.asciz	"rewind"
	.size	.L.str1525, 7

	.type	.L.str1526,@object      # @.str1526
.L.str1526:
	.asciz	"phi"
	.size	.L.str1526, 4

	.type	.L.str1527,@object      # @.str1527
.L.str1527:
	.asciz	"71"
	.size	.L.str1527, 3

	.type	.L.str1528,@object      # @.str1528
.L.str1528:
	.asciz	"phi"
	.size	.L.str1528, 4

	.type	.L.str1529,@object      # @.str1529
.L.str1529:
	.zero	1
	.size	.L.str1529, 1

	.type	.L.str1530,@object      # @.str1530
.L.str1530:
	.asciz	"phi"
	.size	.L.str1530, 4

	.type	.L.str1531,@object      # @.str1531
.L.str1531:
	.asciz	"main"
	.size	.L.str1531, 5

	.type	.L.str1532,@object      # @.str1532
.L.str1532:
	.asciz	"._crit_edge"
	.size	.L.str1532, 12

	.type	.L.str1533,@object      # @.str1533
.L.str1533:
	.asciz	"._crit_edge-2"
	.size	.L.str1533, 14

	.type	.L.str1534,@object      # @.str1534
.L.str1534:
	.asciz	".outer"
	.size	.L.str1534, 7

	.type	.L.str1535,@object      # @.str1535
.L.str1535:
	.asciz	"phi"
	.size	.L.str1535, 4

	.type	.L.str1536,@object      # @.str1536
.L.str1536:
	.asciz	"main"
	.size	.L.str1536, 5

	.type	.L.str1537,@object      # @.str1537
.L.str1537:
	.asciz	".outer"
	.size	.L.str1537, 7

	.type	.L.str1538,@object      # @.str1538
.L.str1538:
	.asciz	"i.2.ph"
	.size	.L.str1538, 7

	.type	.L.str1539,@object      # @.str1539
.L.str1539:
	.asciz	"143"
	.size	.L.str1539, 4

	.type	.L.str1540,@object      # @.str1540
.L.str1540:
	.asciz	"138"
	.size	.L.str1540, 4

	.type	.L.str1541,@object      # @.str1541
.L.str1541:
	.asciz	"i.2.ph"
	.size	.L.str1541, 7

	.type	.L.str1542,@object      # @.str1542
.L.str1542:
	.asciz	".preheader"
	.size	.L.str1542, 11

	.type	.L.str1543,@object      # @.str1543
.L.str1543:
	.zero	1
	.size	.L.str1543, 1

	.type	.L.str1544,@object      # @.str1544
.L.str1544:
	.asciz	"._crit_edge"
	.size	.L.str1544, 12

	.type	.L.str1545,@object      # @.str1545
.L.str1545:
	.asciz	"i.2.ph"
	.size	.L.str1545, 7

	.type	.L.str1546,@object      # @.str1546
.L.str1546:
	.asciz	"phi"
	.size	.L.str1546, 4

	.type	.L.str1547,@object      # @.str1547
.L.str1547:
	.asciz	"main"
	.size	.L.str1547, 5

	.type	.L.str1548,@object      # @.str1548
.L.str1548:
	.asciz	".outer"
	.size	.L.str1548, 7

	.type	.L.str1549,@object      # @.str1549
.L.str1549:
	.asciz	".outer-0"
	.size	.L.str1549, 9

	.type	.L.str1550,@object      # @.str1550
.L.str1550:
	.asciz	"129"
	.size	.L.str1550, 4

	.type	.L.str1551,@object      # @.str1551
.L.str1551:
	.asciz	"phi"
	.size	.L.str1551, 4

	.type	.L.str1552,@object      # @.str1552
.L.str1552:
	.asciz	"main"
	.size	.L.str1552, 5

	.type	.L.str1553,@object      # @.str1553
.L.str1553:
	.asciz	"129"
	.size	.L.str1553, 4

	.type	.L.str1554,@object      # @.str1554
.L.str1554:
	.asciz	"130"
	.size	.L.str1554, 4

	.type	.L.str1555,@object      # @.str1555
.L.str1555:
	.asciz	"fgets"
	.size	.L.str1555, 6

	.type	.L.str1556,@object      # @.str1556
.L.str1556:
	.asciz	"phi"
	.size	.L.str1556, 4

	.type	.L.str1557,@object      # @.str1557
.L.str1557:
	.asciz	"1"
	.size	.L.str1557, 2

	.type	.L.str1558,@object      # @.str1558
.L.str1558:
	.asciz	"phi"
	.size	.L.str1558, 4

	.type	.L.str1559,@object      # @.str1559
.L.str1559:
	.zero	1
	.size	.L.str1559, 1

	.type	.L.str1560,@object      # @.str1560
.L.str1560:
	.asciz	"phi"
	.size	.L.str1560, 4

	.type	.L.str1561,@object      # @.str1561
.L.str1561:
	.zero	1
	.size	.L.str1561, 1

	.type	.L.str1562,@object      # @.str1562
.L.str1562:
	.asciz	"phi"
	.size	.L.str1562, 4

	.type	.L.str1563,@object      # @.str1563
.L.str1563:
	.zero	1
	.size	.L.str1563, 1

	.type	.L.str1564,@object      # @.str1564
.L.str1564:
	.asciz	"phi"
	.size	.L.str1564, 4

	.type	.L.str1565,@object      # @.str1565
.L.str1565:
	.asciz	"71"
	.size	.L.str1565, 3

	.type	.L.str1566,@object      # @.str1566
.L.str1566:
	.asciz	"phi"
	.size	.L.str1566, 4

	.type	.L.str1567,@object      # @.str1567
.L.str1567:
	.zero	1
	.size	.L.str1567, 1

	.type	.L.str1568,@object      # @.str1568
.L.str1568:
	.asciz	"phi"
	.size	.L.str1568, 4

	.type	.L.str1569,@object      # @.str1569
.L.str1569:
	.asciz	"130"
	.size	.L.str1569, 4

	.type	.L.str1570,@object      # @.str1570
.L.str1570:
	.asciz	"phi"
	.size	.L.str1570, 4

	.type	.L.str1571,@object      # @.str1571
.L.str1571:
	.asciz	"main"
	.size	.L.str1571, 5

	.type	.L.str1572,@object      # @.str1572
.L.str1572:
	.asciz	"129"
	.size	.L.str1572, 4

	.type	.L.str1573,@object      # @.str1573
.L.str1573:
	.asciz	"131"
	.size	.L.str1573, 4

	.type	.L.str1574,@object      # @.str1574
.L.str1574:
	.zero	1
	.size	.L.str1574, 1

	.type	.L.str1575,@object      # @.str1575
.L.str1575:
	.asciz	"phi"
	.size	.L.str1575, 4

	.type	.L.str1576,@object      # @.str1576
.L.str1576:
	.asciz	"130"
	.size	.L.str1576, 4

	.type	.L.str1577,@object      # @.str1577
.L.str1577:
	.asciz	"phi"
	.size	.L.str1577, 4

	.type	.L.str1578,@object      # @.str1578
.L.str1578:
	.asciz	"131"
	.size	.L.str1578, 4

	.type	.L.str1579,@object      # @.str1579
.L.str1579:
	.asciz	"phi"
	.size	.L.str1579, 4

	.type	.L.str1580,@object      # @.str1580
.L.str1580:
	.asciz	"main"
	.size	.L.str1580, 5

	.type	.L.str1581,@object      # @.str1581
.L.str1581:
	.asciz	"129"
	.size	.L.str1581, 4

	.type	.L.str1582,@object      # @.str1582
.L.str1582:
	.asciz	"129-0"
	.size	.L.str1582, 6

	.type	.L.str1583,@object      # @.str1583
.L.str1583:
	.asciz	"147"
	.size	.L.str1583, 4

	.type	.L.str1584,@object      # @.str1584
.L.str1584:
	.asciz	"phi"
	.size	.L.str1584, 4

	.type	.L.str1585,@object      # @.str1585
.L.str1585:
	.asciz	"132"
	.size	.L.str1585, 4

	.type	.L.str1586,@object      # @.str1586
.L.str1586:
	.asciz	"phi"
	.size	.L.str1586, 4

	.type	.L.str1587,@object      # @.str1587
.L.str1587:
	.asciz	"131"
	.size	.L.str1587, 4

	.type	.L.str1588,@object      # @.str1588
.L.str1588:
	.asciz	"phi"
	.size	.L.str1588, 4

	.type	.L.str1589,@object      # @.str1589
.L.str1589:
	.asciz	"main"
	.size	.L.str1589, 5

	.type	.L.str1590,@object      # @.str1590
.L.str1590:
	.asciz	"132"
	.size	.L.str1590, 4

	.type	.L.str1591,@object      # @.str1591
.L.str1591:
	.asciz	"133"
	.size	.L.str1591, 4

	.type	.L.str1592,@object      # @.str1592
.L.str1592:
	.asciz	"strtok"
	.size	.L.str1592, 7

	.type	.L.str1593,@object      # @.str1593
.L.str1593:
	.asciz	"phi"
	.size	.L.str1593, 4

	.type	.L.str1594,@object      # @.str1594
.L.str1594:
	.asciz	"1"
	.size	.L.str1594, 2

	.type	.L.str1595,@object      # @.str1595
.L.str1595:
	.asciz	"phi"
	.size	.L.str1595, 4

	.type	.L.str1596,@object      # @.str1596
.L.str1596:
	.zero	1
	.size	.L.str1596, 1

	.type	.L.str1597,@object      # @.str1597
.L.str1597:
	.asciz	"phi"
	.size	.L.str1597, 4

	.type	.L.str1598,@object      # @.str1598
.L.str1598:
	.zero	1
	.size	.L.str1598, 1

	.type	.L.str1599,@object      # @.str1599
.L.str1599:
	.asciz	"phi"
	.size	.L.str1599, 4

	.type	.L.str1600,@object      # @.str1600
.L.str1600:
	.zero	1
	.size	.L.str1600, 1

	.type	.L.str1601,@object      # @.str1601
.L.str1601:
	.asciz	"phi"
	.size	.L.str1601, 4

	.type	.L.str1602,@object      # @.str1602
.L.str1602:
	.asciz	"133"
	.size	.L.str1602, 4

	.type	.L.str1603,@object      # @.str1603
.L.str1603:
	.asciz	"phi"
	.size	.L.str1603, 4

	.type	.L.str1604,@object      # @.str1604
.L.str1604:
	.asciz	"main"
	.size	.L.str1604, 5

	.type	.L.str1605,@object      # @.str1605
.L.str1605:
	.asciz	"132"
	.size	.L.str1605, 4

	.type	.L.str1606,@object      # @.str1606
.L.str1606:
	.asciz	"134"
	.size	.L.str1606, 4

	.type	.L.str1607,@object      # @.str1607
.L.str1607:
	.zero	1
	.size	.L.str1607, 1

	.type	.L.str1608,@object      # @.str1608
.L.str1608:
	.asciz	"phi"
	.size	.L.str1608, 4

	.type	.L.str1609,@object      # @.str1609
.L.str1609:
	.asciz	"133"
	.size	.L.str1609, 4

	.type	.L.str1610,@object      # @.str1610
.L.str1610:
	.asciz	"phi"
	.size	.L.str1610, 4

	.type	.L.str1611,@object      # @.str1611
.L.str1611:
	.asciz	"134"
	.size	.L.str1611, 4

	.type	.L.str1612,@object      # @.str1612
.L.str1612:
	.asciz	"phi"
	.size	.L.str1612, 4

	.type	.L.str1613,@object      # @.str1613
.L.str1613:
	.asciz	"main"
	.size	.L.str1613, 5

	.type	.L.str1614,@object      # @.str1614
.L.str1614:
	.asciz	"132"
	.size	.L.str1614, 4

	.type	.L.str1615,@object      # @.str1615
.L.str1615:
	.asciz	"132-0"
	.size	.L.str1615, 6

	.type	.L.str1616,@object      # @.str1616
.L.str1616:
	.asciz	"129"
	.size	.L.str1616, 4

	.type	.L.str1617,@object      # @.str1617
.L.str1617:
	.asciz	"phi"
	.size	.L.str1617, 4

	.type	.L.str1618,@object      # @.str1618
.L.str1618:
	.asciz	".preheader"
	.size	.L.str1618, 11

	.type	.L.str1619,@object      # @.str1619
.L.str1619:
	.asciz	"phi"
	.size	.L.str1619, 4

	.type	.L.str1620,@object      # @.str1620
.L.str1620:
	.asciz	"134"
	.size	.L.str1620, 4

	.type	.L.str1621,@object      # @.str1621
.L.str1621:
	.asciz	"phi"
	.size	.L.str1621, 4

	.type	.L.str1622,@object      # @.str1622
.L.str1622:
	.asciz	"main"
	.size	.L.str1622, 5

	.type	.L.str1623,@object      # @.str1623
.L.str1623:
	.asciz	".preheader"
	.size	.L.str1623, 11

	.type	.L.str1624,@object      # @.str1624
.L.str1624:
	.asciz	"135"
	.size	.L.str1624, 4

	.type	.L.str1625,@object      # @.str1625
.L.str1625:
	.asciz	"numAttributes"
	.size	.L.str1625, 14

	.type	.L.str1626,@object      # @.str1626
.L.str1626:
	.asciz	"phi"
	.size	.L.str1626, 4

	.type	.L.str1627,@object      # @.str1627
.L.str1627:
	.asciz	"135"
	.size	.L.str1627, 4

	.type	.L.str1628,@object      # @.str1628
.L.str1628:
	.asciz	"phi"
	.size	.L.str1628, 4

	.type	.L.str1629,@object      # @.str1629
.L.str1629:
	.asciz	"main"
	.size	.L.str1629, 5

	.type	.L.str1630,@object      # @.str1630
.L.str1630:
	.asciz	".preheader"
	.size	.L.str1630, 11

	.type	.L.str1631,@object      # @.str1631
.L.str1631:
	.asciz	"136"
	.size	.L.str1631, 4

	.type	.L.str1632,@object      # @.str1632
.L.str1632:
	.zero	1
	.size	.L.str1632, 1

	.type	.L.str1633,@object      # @.str1633
.L.str1633:
	.asciz	"phi"
	.size	.L.str1633, 4

	.type	.L.str1634,@object      # @.str1634
.L.str1634:
	.asciz	"135"
	.size	.L.str1634, 4

	.type	.L.str1635,@object      # @.str1635
.L.str1635:
	.asciz	"phi"
	.size	.L.str1635, 4

	.type	.L.str1636,@object      # @.str1636
.L.str1636:
	.asciz	"136"
	.size	.L.str1636, 4

	.type	.L.str1637,@object      # @.str1637
.L.str1637:
	.asciz	"phi"
	.size	.L.str1637, 4

	.type	.L.str1638,@object      # @.str1638
.L.str1638:
	.asciz	"main"
	.size	.L.str1638, 5

	.type	.L.str1639,@object      # @.str1639
.L.str1639:
	.asciz	".preheader"
	.size	.L.str1639, 11

	.type	.L.str1640,@object      # @.str1640
.L.str1640:
	.asciz	".preheader-1"
	.size	.L.str1640, 13

	.type	.L.str1641,@object      # @.str1641
.L.str1641:
	.asciz	".lr.ph"
	.size	.L.str1641, 7

	.type	.L.str1642,@object      # @.str1642
.L.str1642:
	.asciz	"phi"
	.size	.L.str1642, 4

	.type	.L.str1643,@object      # @.str1643
.L.str1643:
	.asciz	".outer"
	.size	.L.str1643, 7

	.type	.L.str1644,@object      # @.str1644
.L.str1644:
	.asciz	"phi"
	.size	.L.str1644, 4

	.type	.L.str1645,@object      # @.str1645
.L.str1645:
	.asciz	"136"
	.size	.L.str1645, 4

	.type	.L.str1646,@object      # @.str1646
.L.str1646:
	.asciz	"phi"
	.size	.L.str1646, 4

	.type	.L.str1647,@object      # @.str1647
.L.str1647:
	.asciz	"main"
	.size	.L.str1647, 5

	.type	.L.str1648,@object      # @.str1648
.L.str1648:
	.asciz	".lr.ph"
	.size	.L.str1648, 7

	.type	.L.str1649,@object      # @.str1649
.L.str1649:
	.asciz	"137"
	.size	.L.str1649, 4

	.type	.L.str1650,@object      # @.str1650
.L.str1650:
	.asciz	"i.2.ph"
	.size	.L.str1650, 7

	.type	.L.str1651,@object      # @.str1651
.L.str1651:
	.asciz	"phi"
	.size	.L.str1651, 4

	.type	.L.str1652,@object      # @.str1652
.L.str1652:
	.asciz	"137"
	.size	.L.str1652, 4

	.type	.L.str1653,@object      # @.str1653
.L.str1653:
	.asciz	"phi"
	.size	.L.str1653, 4

	.type	.L.str1654,@object      # @.str1654
.L.str1654:
	.asciz	"main"
	.size	.L.str1654, 5

	.type	.L.str1655,@object      # @.str1655
.L.str1655:
	.asciz	".lr.ph"
	.size	.L.str1655, 7

	.type	.L.str1656,@object      # @.str1656
.L.str1656:
	.asciz	".lr.ph-0"
	.size	.L.str1656, 9

	.type	.L.str1657,@object      # @.str1657
.L.str1657:
	.asciz	"138"
	.size	.L.str1657, 4

	.type	.L.str1658,@object      # @.str1658
.L.str1658:
	.asciz	"phi"
	.size	.L.str1658, 4

	.type	.L.str1659,@object      # @.str1659
.L.str1659:
	.asciz	"main"
	.size	.L.str1659, 5

	.type	.L.str1660,@object      # @.str1660
.L.str1660:
	.asciz	"138"
	.size	.L.str1660, 4

	.type	.L.str1661,@object      # @.str1661
.L.str1661:
	.asciz	"indvars.iv"
	.size	.L.str1661, 11

	.type	.L.str1662,@object      # @.str1662
.L.str1662:
	.asciz	"indvars.iv.next"
	.size	.L.str1662, 16

	.type	.L.str1663,@object      # @.str1663
.L.str1663:
	.asciz	"138"
	.size	.L.str1663, 4

	.type	.L.str1664,@object      # @.str1664
.L.str1664:
	.asciz	"137"
	.size	.L.str1664, 4

	.type	.L.str1665,@object      # @.str1665
.L.str1665:
	.asciz	".lr.ph"
	.size	.L.str1665, 7

	.type	.L.str1666,@object      # @.str1666
.L.str1666:
	.asciz	"indvars.iv"
	.size	.L.str1666, 11

	.type	.L.str1667,@object      # @.str1667
.L.str1667:
	.asciz	"phi"
	.size	.L.str1667, 4

	.type	.L.str1668,@object      # @.str1668
.L.str1668:
	.asciz	"main"
	.size	.L.str1668, 5

	.type	.L.str1669,@object      # @.str1669
.L.str1669:
	.asciz	"138"
	.size	.L.str1669, 4

	.type	.L.str1670,@object      # @.str1670
.L.str1670:
	.asciz	"j.04"
	.size	.L.str1670, 5

	.type	.L.str1671,@object      # @.str1671
.L.str1671:
	.asciz	"144"
	.size	.L.str1671, 4

	.type	.L.str1672,@object      # @.str1672
.L.str1672:
	.asciz	"138"
	.size	.L.str1672, 4

	.type	.L.str1673,@object      # @.str1673
.L.str1673:
	.zero	1
	.size	.L.str1673, 1

	.type	.L.str1674,@object      # @.str1674
.L.str1674:
	.asciz	".lr.ph"
	.size	.L.str1674, 7

	.type	.L.str1675,@object      # @.str1675
.L.str1675:
	.asciz	"j.04"
	.size	.L.str1675, 5

	.type	.L.str1676,@object      # @.str1676
.L.str1676:
	.asciz	"phi"
	.size	.L.str1676, 4

	.type	.L.str1677,@object      # @.str1677
.L.str1677:
	.asciz	"main"
	.size	.L.str1677, 5

	.type	.L.str1678,@object      # @.str1678
.L.str1678:
	.asciz	"138"
	.size	.L.str1678, 4

	.type	.L.str1679,@object      # @.str1679
.L.str1679:
	.asciz	"i.33"
	.size	.L.str1679, 5

	.type	.L.str1680,@object      # @.str1680
.L.str1680:
	.asciz	"143"
	.size	.L.str1680, 4

	.type	.L.str1681,@object      # @.str1681
.L.str1681:
	.asciz	"138"
	.size	.L.str1681, 4

	.type	.L.str1682,@object      # @.str1682
.L.str1682:
	.asciz	"i.2.ph"
	.size	.L.str1682, 7

	.type	.L.str1683,@object      # @.str1683
.L.str1683:
	.asciz	".lr.ph"
	.size	.L.str1683, 7

	.type	.L.str1684,@object      # @.str1684
.L.str1684:
	.asciz	"i.33"
	.size	.L.str1684, 5

	.type	.L.str1685,@object      # @.str1685
.L.str1685:
	.asciz	"phi"
	.size	.L.str1685, 4

	.type	.L.str1686,@object      # @.str1686
.L.str1686:
	.asciz	"main"
	.size	.L.str1686, 5

	.type	.L.str1687,@object      # @.str1687
.L.str1687:
	.asciz	"138"
	.size	.L.str1687, 4

	.type	.L.str1688,@object      # @.str1688
.L.str1688:
	.asciz	"139"
	.size	.L.str1688, 4

	.type	.L.str1689,@object      # @.str1689
.L.str1689:
	.asciz	"strtok"
	.size	.L.str1689, 7

	.type	.L.str1690,@object      # @.str1690
.L.str1690:
	.asciz	"phi"
	.size	.L.str1690, 4

	.type	.L.str1691,@object      # @.str1691
.L.str1691:
	.zero	1
	.size	.L.str1691, 1

	.type	.L.str1692,@object      # @.str1692
.L.str1692:
	.asciz	"phi"
	.size	.L.str1692, 4

	.type	.L.str1693,@object      # @.str1693
.L.str1693:
	.zero	1
	.size	.L.str1693, 1

	.type	.L.str1694,@object      # @.str1694
.L.str1694:
	.asciz	"phi"
	.size	.L.str1694, 4

	.type	.L.str1695,@object      # @.str1695
.L.str1695:
	.zero	1
	.size	.L.str1695, 1

	.type	.L.str1696,@object      # @.str1696
.L.str1696:
	.asciz	"phi"
	.size	.L.str1696, 4

	.type	.L.str1697,@object      # @.str1697
.L.str1697:
	.zero	1
	.size	.L.str1697, 1

	.type	.L.str1698,@object      # @.str1698
.L.str1698:
	.asciz	"phi"
	.size	.L.str1698, 4

	.type	.L.str1699,@object      # @.str1699
.L.str1699:
	.asciz	"139"
	.size	.L.str1699, 4

	.type	.L.str1700,@object      # @.str1700
.L.str1700:
	.asciz	"phi"
	.size	.L.str1700, 4

	.type	.L.str1701,@object      # @.str1701
.L.str1701:
	.asciz	"main"
	.size	.L.str1701, 5

	.type	.L.str1702,@object      # @.str1702
.L.str1702:
	.asciz	"138"
	.size	.L.str1702, 4

	.type	.L.str1703,@object      # @.str1703
.L.str1703:
	.asciz	"140"
	.size	.L.str1703, 4

	.type	.L.str1704,@object      # @.str1704
.L.str1704:
	.asciz	"atof"
	.size	.L.str1704, 5

	.type	.L.str1705,@object      # @.str1705
.L.str1705:
	.asciz	"phi"
	.size	.L.str1705, 4

	.type	.L.str1706,@object      # @.str1706
.L.str1706:
	.asciz	"139"
	.size	.L.str1706, 4

	.type	.L.str1707,@object      # @.str1707
.L.str1707:
	.asciz	"phi"
	.size	.L.str1707, 4

	.type	.L.str1708,@object      # @.str1708
.L.str1708:
	.asciz	"__nptr"
	.size	.L.str1708, 7

	.type	.L.str1709,@object      # @.str1709
.L.str1709:
	.asciz	"phi"
	.size	.L.str1709, 4

	.type	.L.str1710,@object      # @.str1710
.L.str1710:
	.asciz	"140"
	.size	.L.str1710, 4

	.type	.L.str1711,@object      # @.str1711
.L.str1711:
	.asciz	"phi"
	.size	.L.str1711, 4

	.type	.L.str1712,@object      # @.str1712
.L.str1712:
	.asciz	"main"
	.size	.L.str1712, 5

	.type	.L.str1713,@object      # @.str1713
.L.str1713:
	.asciz	"138"
	.size	.L.str1713, 4

	.type	.L.str1714,@object      # @.str1714
.L.str1714:
	.asciz	"141"
	.size	.L.str1714, 4

	.type	.L.str1715,@object      # @.str1715
.L.str1715:
	.asciz	"140"
	.size	.L.str1715, 4

	.type	.L.str1716,@object      # @.str1716
.L.str1716:
	.asciz	"phi"
	.size	.L.str1716, 4

	.type	.L.str1717,@object      # @.str1717
.L.str1717:
	.asciz	"141"
	.size	.L.str1717, 4

	.type	.L.str1718,@object      # @.str1718
.L.str1718:
	.asciz	"phi"
	.size	.L.str1718, 4

	.type	.L.str1719,@object      # @.str1719
.L.str1719:
	.asciz	"main"
	.size	.L.str1719, 5

	.type	.L.str1720,@object      # @.str1720
.L.str1720:
	.asciz	"138"
	.size	.L.str1720, 4

	.type	.L.str1721,@object      # @.str1721
.L.str1721:
	.asciz	"142"
	.size	.L.str1721, 4

	.type	.L.str1722,@object      # @.str1722
.L.str1722:
	.asciz	"indvars.iv"
	.size	.L.str1722, 11

	.type	.L.str1723,@object      # @.str1723
.L.str1723:
	.asciz	"phi"
	.size	.L.str1723, 4

	.type	.L.str1724,@object      # @.str1724
.L.str1724:
	.asciz	"103"
	.size	.L.str1724, 4

	.type	.L.str1725,@object      # @.str1725
.L.str1725:
	.asciz	"phi"
	.size	.L.str1725, 4

	.type	.L.str1726,@object      # @.str1726
.L.str1726:
	.asciz	"142"
	.size	.L.str1726, 4

	.type	.L.str1727,@object      # @.str1727
.L.str1727:
	.asciz	"phi"
	.size	.L.str1727, 4

	.type	.L.str1728,@object      # @.str1728
.L.str1728:
	.asciz	"main"
	.size	.L.str1728, 5

	.type	.L.str1729,@object      # @.str1729
.L.str1729:
	.asciz	"138"
	.size	.L.str1729, 4

	.type	.L.str1730,@object      # @.str1730
.L.str1730:
	.asciz	"138-0"
	.size	.L.str1730, 6

	.type	.L.str1731,@object      # @.str1731
.L.str1731:
	.asciz	"142"
	.size	.L.str1731, 4

	.type	.L.str1732,@object      # @.str1732
.L.str1732:
	.asciz	"phi"
	.size	.L.str1732, 4

	.type	.L.str1733,@object      # @.str1733
.L.str1733:
	.asciz	"141"
	.size	.L.str1733, 4

	.type	.L.str1734,@object      # @.str1734
.L.str1734:
	.asciz	"phi"
	.size	.L.str1734, 4

	.type	.L.str1735,@object      # @.str1735
.L.str1735:
	.asciz	"main"
	.size	.L.str1735, 5

	.type	.L.str1736,@object      # @.str1736
.L.str1736:
	.asciz	"138"
	.size	.L.str1736, 4

	.type	.L.str1737,@object      # @.str1737
.L.str1737:
	.asciz	"indvars.iv.next"
	.size	.L.str1737, 16

	.type	.L.str1738,@object      # @.str1738
.L.str1738:
	.zero	1
	.size	.L.str1738, 1

	.type	.L.str1739,@object      # @.str1739
.L.str1739:
	.asciz	"phi"
	.size	.L.str1739, 4

	.type	.L.str1740,@object      # @.str1740
.L.str1740:
	.asciz	"indvars.iv"
	.size	.L.str1740, 11

	.type	.L.str1741,@object      # @.str1741
.L.str1741:
	.asciz	"phi"
	.size	.L.str1741, 4

	.type	.L.str1742,@object      # @.str1742
.L.str1742:
	.asciz	"indvars.iv.next"
	.size	.L.str1742, 16

	.type	.L.str1743,@object      # @.str1743
.L.str1743:
	.asciz	"phi"
	.size	.L.str1743, 4

	.type	.L.str1744,@object      # @.str1744
.L.str1744:
	.asciz	"main"
	.size	.L.str1744, 5

	.type	.L.str1745,@object      # @.str1745
.L.str1745:
	.asciz	"138"
	.size	.L.str1745, 4

	.type	.L.str1746,@object      # @.str1746
.L.str1746:
	.asciz	"143"
	.size	.L.str1746, 4

	.type	.L.str1747,@object      # @.str1747
.L.str1747:
	.zero	1
	.size	.L.str1747, 1

	.type	.L.str1748,@object      # @.str1748
.L.str1748:
	.asciz	"phi"
	.size	.L.str1748, 4

	.type	.L.str1749,@object      # @.str1749
.L.str1749:
	.asciz	"i.33"
	.size	.L.str1749, 5

	.type	.L.str1750,@object      # @.str1750
.L.str1750:
	.asciz	"phi"
	.size	.L.str1750, 4

	.type	.L.str1751,@object      # @.str1751
.L.str1751:
	.asciz	"143"
	.size	.L.str1751, 4

	.type	.L.str1752,@object      # @.str1752
.L.str1752:
	.asciz	"phi"
	.size	.L.str1752, 4

	.type	.L.str1753,@object      # @.str1753
.L.str1753:
	.asciz	"main"
	.size	.L.str1753, 5

	.type	.L.str1754,@object      # @.str1754
.L.str1754:
	.asciz	"138"
	.size	.L.str1754, 4

	.type	.L.str1755,@object      # @.str1755
.L.str1755:
	.asciz	"144"
	.size	.L.str1755, 4

	.type	.L.str1756,@object      # @.str1756
.L.str1756:
	.zero	1
	.size	.L.str1756, 1

	.type	.L.str1757,@object      # @.str1757
.L.str1757:
	.asciz	"phi"
	.size	.L.str1757, 4

	.type	.L.str1758,@object      # @.str1758
.L.str1758:
	.asciz	"j.04"
	.size	.L.str1758, 5

	.type	.L.str1759,@object      # @.str1759
.L.str1759:
	.asciz	"phi"
	.size	.L.str1759, 4

	.type	.L.str1760,@object      # @.str1760
.L.str1760:
	.asciz	"144"
	.size	.L.str1760, 4

	.type	.L.str1761,@object      # @.str1761
.L.str1761:
	.asciz	"phi"
	.size	.L.str1761, 4

	.type	.L.str1762,@object      # @.str1762
.L.str1762:
	.asciz	"main"
	.size	.L.str1762, 5

	.type	.L.str1763,@object      # @.str1763
.L.str1763:
	.asciz	"138"
	.size	.L.str1763, 4

	.type	.L.str1764,@object      # @.str1764
.L.str1764:
	.asciz	"145"
	.size	.L.str1764, 4

	.type	.L.str1765,@object      # @.str1765
.L.str1765:
	.asciz	"numAttributes"
	.size	.L.str1765, 14

	.type	.L.str1766,@object      # @.str1766
.L.str1766:
	.asciz	"phi"
	.size	.L.str1766, 4

	.type	.L.str1767,@object      # @.str1767
.L.str1767:
	.asciz	"145"
	.size	.L.str1767, 4

	.type	.L.str1768,@object      # @.str1768
.L.str1768:
	.asciz	"phi"
	.size	.L.str1768, 4

	.type	.L.str1769,@object      # @.str1769
.L.str1769:
	.asciz	"main"
	.size	.L.str1769, 5

	.type	.L.str1770,@object      # @.str1770
.L.str1770:
	.asciz	"138"
	.size	.L.str1770, 4

	.type	.L.str1771,@object      # @.str1771
.L.str1771:
	.asciz	"146"
	.size	.L.str1771, 4

	.type	.L.str1772,@object      # @.str1772
.L.str1772:
	.asciz	"145"
	.size	.L.str1772, 4

	.type	.L.str1773,@object      # @.str1773
.L.str1773:
	.asciz	"phi"
	.size	.L.str1773, 4

	.type	.L.str1774,@object      # @.str1774
.L.str1774:
	.asciz	"144"
	.size	.L.str1774, 4

	.type	.L.str1775,@object      # @.str1775
.L.str1775:
	.asciz	"phi"
	.size	.L.str1775, 4

	.type	.L.str1776,@object      # @.str1776
.L.str1776:
	.asciz	"146"
	.size	.L.str1776, 4

	.type	.L.str1777,@object      # @.str1777
.L.str1777:
	.asciz	"phi"
	.size	.L.str1777, 4

	.type	.L.str1778,@object      # @.str1778
.L.str1778:
	.asciz	"main"
	.size	.L.str1778, 5

	.type	.L.str1779,@object      # @.str1779
.L.str1779:
	.asciz	"138"
	.size	.L.str1779, 4

	.type	.L.str1780,@object      # @.str1780
.L.str1780:
	.asciz	"138-4"
	.size	.L.str1780, 6

	.type	.L.str1781,@object      # @.str1781
.L.str1781:
	.asciz	"138"
	.size	.L.str1781, 4

	.type	.L.str1782,@object      # @.str1782
.L.str1782:
	.asciz	"phi"
	.size	.L.str1782, 4

	.type	.L.str1783,@object      # @.str1783
.L.str1783:
	.asciz	".outer"
	.size	.L.str1783, 7

	.type	.L.str1784,@object      # @.str1784
.L.str1784:
	.asciz	"phi"
	.size	.L.str1784, 4

	.type	.L.str1785,@object      # @.str1785
.L.str1785:
	.asciz	"146"
	.size	.L.str1785, 4

	.type	.L.str1786,@object      # @.str1786
.L.str1786:
	.asciz	"phi"
	.size	.L.str1786, 4

	.type	.L.str1787,@object      # @.str1787
.L.str1787:
	.asciz	"main"
	.size	.L.str1787, 5

	.type	.L.str1788,@object      # @.str1788
.L.str1788:
	.asciz	"147"
	.size	.L.str1788, 4

	.type	.L.str1789,@object      # @.str1789
.L.str1789:
	.asciz	"148"
	.size	.L.str1789, 4

	.type	.L.str1790,@object      # @.str1790
.L.str1790:
	.asciz	"fclose"
	.size	.L.str1790, 7

	.type	.L.str1791,@object      # @.str1791
.L.str1791:
	.asciz	"phi"
	.size	.L.str1791, 4

	.type	.L.str1792,@object      # @.str1792
.L.str1792:
	.asciz	"71"
	.size	.L.str1792, 3

	.type	.L.str1793,@object      # @.str1793
.L.str1793:
	.asciz	"phi"
	.size	.L.str1793, 4

	.type	.L.str1794,@object      # @.str1794
.L.str1794:
	.zero	1
	.size	.L.str1794, 1

	.type	.L.str1795,@object      # @.str1795
.L.str1795:
	.asciz	"phi"
	.size	.L.str1795, 4

	.type	.L.str1796,@object      # @.str1796
.L.str1796:
	.asciz	"148"
	.size	.L.str1796, 4

	.type	.L.str1797,@object      # @.str1797
.L.str1797:
	.asciz	"phi"
	.size	.L.str1797, 4

	.type	.L.str1798,@object      # @.str1798
.L.str1798:
	.asciz	"main"
	.size	.L.str1798, 5

	.type	.L.str1799,@object      # @.str1799
.L.str1799:
	.asciz	"147"
	.size	.L.str1799, 4

	.type	.L.str1800,@object      # @.str1800
.L.str1800:
	.asciz	"147-0"
	.size	.L.str1800, 6

	.type	.L.str1801,@object      # @.str1801
.L.str1801:
	.asciz	"149"
	.size	.L.str1801, 4

	.type	.L.str1802,@object      # @.str1802
.L.str1802:
	.asciz	"phi"
	.size	.L.str1802, 4

	.type	.L.str1803,@object      # @.str1803
.L.str1803:
	.asciz	"main"
	.size	.L.str1803, 5

	.type	.L.str1804,@object      # @.str1804
.L.str1804:
	.asciz	"149"
	.size	.L.str1804, 4

	.type	.L.str1805,@object      # @.str1805
.L.str1805:
	.asciz	"attributes.0"
	.size	.L.str1805, 13

	.type	.L.str1806,@object      # @.str1806
.L.str1806:
	.asciz	"108"
	.size	.L.str1806, 4

	.type	.L.str1807,@object      # @.str1807
.L.str1807:
	.asciz	"147"
	.size	.L.str1807, 4

	.type	.L.str1808,@object      # @.str1808
.L.str1808:
	.asciz	"43"
	.size	.L.str1808, 3

	.type	.L.str1809,@object      # @.str1809
.L.str1809:
	.asciz	"._crit_edge17"
	.size	.L.str1809, 14

	.type	.L.str1810,@object      # @.str1810
.L.str1810:
	.asciz	"attributes.0"
	.size	.L.str1810, 13

	.type	.L.str1811,@object      # @.str1811
.L.str1811:
	.asciz	"phi"
	.size	.L.str1811, 4

	.type	.L.str1812,@object      # @.str1812
.L.str1812:
	.asciz	"main"
	.size	.L.str1812, 5

	.type	.L.str1813,@object      # @.str1813
.L.str1813:
	.asciz	"149"
	.size	.L.str1813, 4

	.type	.L.str1814,@object      # @.str1814
.L.str1814:
	.asciz	"buf.0"
	.size	.L.str1814, 6

	.type	.L.str1815,@object      # @.str1815
.L.str1815:
	.asciz	"103"
	.size	.L.str1815, 4

	.type	.L.str1816,@object      # @.str1816
.L.str1816:
	.asciz	"147"
	.size	.L.str1816, 4

	.type	.L.str1817,@object      # @.str1817
.L.str1817:
	.asciz	"38"
	.size	.L.str1817, 3

	.type	.L.str1818,@object      # @.str1818
.L.str1818:
	.asciz	"._crit_edge17"
	.size	.L.str1818, 14

	.type	.L.str1819,@object      # @.str1819
.L.str1819:
	.asciz	"buf.0"
	.size	.L.str1819, 6

	.type	.L.str1820,@object      # @.str1820
.L.str1820:
	.asciz	"phi"
	.size	.L.str1820, 4

	.type	.L.str1821,@object      # @.str1821
.L.str1821:
	.asciz	"main"
	.size	.L.str1821, 5

	.type	.L.str1822,@object      # @.str1822
.L.str1822:
	.asciz	"149"
	.size	.L.str1822, 4

	.type	.L.str1823,@object      # @.str1823
.L.str1823:
	.asciz	"puts"
	.size	.L.str1823, 5

	.type	.L.str1824,@object      # @.str1824
.L.str1824:
	.asciz	"puts"
	.size	.L.str1824, 5

	.type	.L.str1825,@object      # @.str1825
.L.str1825:
	.asciz	"phi"
	.size	.L.str1825, 4

	.type	.L.str1826,@object      # @.str1826
.L.str1826:
	.zero	1
	.size	.L.str1826, 1

	.type	.L.str1827,@object      # @.str1827
.L.str1827:
	.asciz	"phi"
	.size	.L.str1827, 4

	.type	.L.str1828,@object      # @.str1828
.L.str1828:
	.zero	1
	.size	.L.str1828, 1

	.type	.L.str1829,@object      # @.str1829
.L.str1829:
	.asciz	"phi"
	.size	.L.str1829, 4

	.type	.L.str1830,@object      # @.str1830
.L.str1830:
	.asciz	"puts"
	.size	.L.str1830, 5

	.type	.L.str1831,@object      # @.str1831
.L.str1831:
	.asciz	"phi"
	.size	.L.str1831, 4

	.type	.L.str1832,@object      # @.str1832
.L.str1832:
	.asciz	"main"
	.size	.L.str1832, 5

	.type	.L.str1833,@object      # @.str1833
.L.str1833:
	.asciz	"149"
	.size	.L.str1833, 4

	.type	.L.str1834,@object      # @.str1834
.L.str1834:
	.asciz	"150"
	.size	.L.str1834, 4

	.type	.L.str1835,@object      # @.str1835
.L.str1835:
	.asciz	"attributes.0"
	.size	.L.str1835, 13

	.type	.L.str1836,@object      # @.str1836
.L.str1836:
	.asciz	"phi"
	.size	.L.str1836, 4

	.type	.L.str1837,@object      # @.str1837
.L.str1837:
	.asciz	"150"
	.size	.L.str1837, 4

	.type	.L.str1838,@object      # @.str1838
.L.str1838:
	.asciz	"phi"
	.size	.L.str1838, 4

	.type	.L.str1839,@object      # @.str1839
.L.str1839:
	.asciz	"main"
	.size	.L.str1839, 5

	.type	.L.str1840,@object      # @.str1840
.L.str1840:
	.asciz	"149"
	.size	.L.str1840, 4

	.type	.L.str1841,@object      # @.str1841
.L.str1841:
	.asciz	"151"
	.size	.L.str1841, 4

	.type	.L.str1842,@object      # @.str1842
.L.str1842:
	.asciz	"150"
	.size	.L.str1842, 4

	.type	.L.str1843,@object      # @.str1843
.L.str1843:
	.asciz	"phi"
	.size	.L.str1843, 4

	.type	.L.str1844,@object      # @.str1844
.L.str1844:
	.asciz	"151"
	.size	.L.str1844, 4

	.type	.L.str1845,@object      # @.str1845
.L.str1845:
	.asciz	"phi"
	.size	.L.str1845, 4

	.type	.L.str1846,@object      # @.str1846
.L.str1846:
	.asciz	"main"
	.size	.L.str1846, 5

	.type	.L.str1847,@object      # @.str1847
.L.str1847:
	.asciz	"149"
	.size	.L.str1847, 4

	.type	.L.str1848,@object      # @.str1848
.L.str1848:
	.asciz	"152"
	.size	.L.str1848, 4

	.type	.L.str1849,@object      # @.str1849
.L.str1849:
	.asciz	"buf.0"
	.size	.L.str1849, 6

	.type	.L.str1850,@object      # @.str1850
.L.str1850:
	.asciz	"phi"
	.size	.L.str1850, 4

	.type	.L.str1851,@object      # @.str1851
.L.str1851:
	.asciz	"152"
	.size	.L.str1851, 4

	.type	.L.str1852,@object      # @.str1852
.L.str1852:
	.asciz	"phi"
	.size	.L.str1852, 4

	.type	.L.str1853,@object      # @.str1853
.L.str1853:
	.asciz	"main"
	.size	.L.str1853, 5

	.type	.L.str1854,@object      # @.str1854
.L.str1854:
	.asciz	"149"
	.size	.L.str1854, 4

	.type	.L.str1855,@object      # @.str1855
.L.str1855:
	.asciz	"153"
	.size	.L.str1855, 4

	.type	.L.str1856,@object      # @.str1856
.L.str1856:
	.asciz	"numObjects"
	.size	.L.str1856, 11

	.type	.L.str1857,@object      # @.str1857
.L.str1857:
	.asciz	"phi"
	.size	.L.str1857, 4

	.type	.L.str1858,@object      # @.str1858
.L.str1858:
	.asciz	"153"
	.size	.L.str1858, 4

	.type	.L.str1859,@object      # @.str1859
.L.str1859:
	.asciz	"phi"
	.size	.L.str1859, 4

	.type	.L.str1860,@object      # @.str1860
.L.str1860:
	.asciz	"main"
	.size	.L.str1860, 5

	.type	.L.str1861,@object      # @.str1861
.L.str1861:
	.asciz	"149"
	.size	.L.str1861, 4

	.type	.L.str1862,@object      # @.str1862
.L.str1862:
	.asciz	"154"
	.size	.L.str1862, 4

	.type	.L.str1863,@object      # @.str1863
.L.str1863:
	.asciz	"numAttributes"
	.size	.L.str1863, 14

	.type	.L.str1864,@object      # @.str1864
.L.str1864:
	.asciz	"phi"
	.size	.L.str1864, 4

	.type	.L.str1865,@object      # @.str1865
.L.str1865:
	.asciz	"154"
	.size	.L.str1865, 4

	.type	.L.str1866,@object      # @.str1866
.L.str1866:
	.asciz	"phi"
	.size	.L.str1866, 4

	.type	.L.str1867,@object      # @.str1867
.L.str1867:
	.asciz	"main"
	.size	.L.str1867, 5

	.type	.L.str1868,@object      # @.str1868
.L.str1868:
	.asciz	"149"
	.size	.L.str1868, 4

	.type	.L.str1869,@object      # @.str1869
.L.str1869:
	.asciz	"155"
	.size	.L.str1869, 4

	.type	.L.str1870,@object      # @.str1870
.L.str1870:
	.asciz	"153"
	.size	.L.str1870, 4

	.type	.L.str1871,@object      # @.str1871
.L.str1871:
	.asciz	"phi"
	.size	.L.str1871, 4

	.type	.L.str1872,@object      # @.str1872
.L.str1872:
	.asciz	"154"
	.size	.L.str1872, 4

	.type	.L.str1873,@object      # @.str1873
.L.str1873:
	.asciz	"phi"
	.size	.L.str1873, 4

	.type	.L.str1874,@object      # @.str1874
.L.str1874:
	.asciz	"155"
	.size	.L.str1874, 4

	.type	.L.str1875,@object      # @.str1875
.L.str1875:
	.asciz	"phi"
	.size	.L.str1875, 4

	.type	.L.str1876,@object      # @.str1876
.L.str1876:
	.asciz	"main"
	.size	.L.str1876, 5

	.type	.L.str1877,@object      # @.str1877
.L.str1877:
	.asciz	"149"
	.size	.L.str1877, 4

	.type	.L.str1878,@object      # @.str1878
.L.str1878:
	.asciz	"156"
	.size	.L.str1878, 4

	.type	.L.str1879,@object      # @.str1879
.L.str1879:
	.asciz	"155"
	.size	.L.str1879, 4

	.type	.L.str1880,@object      # @.str1880
.L.str1880:
	.asciz	"phi"
	.size	.L.str1880, 4

	.type	.L.str1881,@object      # @.str1881
.L.str1881:
	.asciz	"156"
	.size	.L.str1881, 4

	.type	.L.str1882,@object      # @.str1882
.L.str1882:
	.asciz	"phi"
	.size	.L.str1882, 4

	.type	.L.str1883,@object      # @.str1883
.L.str1883:
	.asciz	"main"
	.size	.L.str1883, 5

	.type	.L.str1884,@object      # @.str1884
.L.str1884:
	.asciz	"149"
	.size	.L.str1884, 4

	.type	.L.str1885,@object      # @.str1885
.L.str1885:
	.asciz	"157"
	.size	.L.str1885, 4

	.type	.L.str1886,@object      # @.str1886
.L.str1886:
	.zero	1
	.size	.L.str1886, 1

	.type	.L.str1887,@object      # @.str1887
.L.str1887:
	.asciz	"phi"
	.size	.L.str1887, 4

	.type	.L.str1888,@object      # @.str1888
.L.str1888:
	.asciz	"156"
	.size	.L.str1888, 4

	.type	.L.str1889,@object      # @.str1889
.L.str1889:
	.asciz	"phi"
	.size	.L.str1889, 4

	.type	.L.str1890,@object      # @.str1890
.L.str1890:
	.asciz	"157"
	.size	.L.str1890, 4

	.type	.L.str1891,@object      # @.str1891
.L.str1891:
	.asciz	"phi"
	.size	.L.str1891, 4

	.type	.L.str1892,@object      # @.str1892
.L.str1892:
	.asciz	"main"
	.size	.L.str1892, 5

	.type	.L.str1893,@object      # @.str1893
.L.str1893:
	.asciz	"149"
	.size	.L.str1893, 4

	.type	.L.str1894,@object      # @.str1894
.L.str1894:
	.asciz	"149-6"
	.size	.L.str1894, 6

	.type	.L.str1895,@object      # @.str1895
.L.str1895:
	.asciz	"cluster_centres"
	.size	.L.str1895, 16

	.type	.L.str1896,@object      # @.str1896
.L.str1896:
	.asciz	"phi"
	.size	.L.str1896, 4

	.type	.L.str1897,@object      # @.str1897
.L.str1897:
	.zero	1
	.size	.L.str1897, 1

	.type	.L.str1898,@object      # @.str1898
.L.str1898:
	.asciz	"phi"
	.size	.L.str1898, 4

	.type	.L.str1899,@object      # @.str1899
.L.str1899:
	.asciz	"main"
	.size	.L.str1899, 5

	.type	.L.str1900,@object      # @.str1900
.L.str1900:
	.asciz	"149"
	.size	.L.str1900, 4

	.type	.L.str1901,@object      # @.str1901
.L.str1901:
	.asciz	"158"
	.size	.L.str1901, 4

	.type	.L.str1902,@object      # @.str1902
.L.str1902:
	.asciz	"numObjects"
	.size	.L.str1902, 11

	.type	.L.str1903,@object      # @.str1903
.L.str1903:
	.asciz	"phi"
	.size	.L.str1903, 4

	.type	.L.str1904,@object      # @.str1904
.L.str1904:
	.asciz	"158"
	.size	.L.str1904, 4

	.type	.L.str1905,@object      # @.str1905
.L.str1905:
	.asciz	"phi"
	.size	.L.str1905, 4

	.type	.L.str1906,@object      # @.str1906
.L.str1906:
	.asciz	"main"
	.size	.L.str1906, 5

	.type	.L.str1907,@object      # @.str1907
.L.str1907:
	.asciz	"149"
	.size	.L.str1907, 4

	.type	.L.str1908,@object      # @.str1908
.L.str1908:
	.asciz	"159"
	.size	.L.str1908, 4

	.type	.L.str1909,@object      # @.str1909
.L.str1909:
	.asciz	"numAttributes"
	.size	.L.str1909, 14

	.type	.L.str1910,@object      # @.str1910
.L.str1910:
	.asciz	"phi"
	.size	.L.str1910, 4

	.type	.L.str1911,@object      # @.str1911
.L.str1911:
	.asciz	"159"
	.size	.L.str1911, 4

	.type	.L.str1912,@object      # @.str1912
.L.str1912:
	.asciz	"phi"
	.size	.L.str1912, 4

	.type	.L.str1913,@object      # @.str1913
.L.str1913:
	.asciz	"main"
	.size	.L.str1913, 5

	.type	.L.str1914,@object      # @.str1914
.L.str1914:
	.asciz	"149"
	.size	.L.str1914, 4

	.type	.L.str1915,@object      # @.str1915
.L.str1915:
	.asciz	"160"
	.size	.L.str1915, 4

	.type	.L.str1916,@object      # @.str1916
.L.str1916:
	.asciz	"cluster"
	.size	.L.str1916, 8

	.type	.L.str1917,@object      # @.str1917
.L.str1917:
	.asciz	"phi"
	.size	.L.str1917, 4

	.type	.L.str1918,@object      # @.str1918
.L.str1918:
	.asciz	"158"
	.size	.L.str1918, 4

	.type	.L.str1919,@object      # @.str1919
.L.str1919:
	.asciz	"phi"
	.size	.L.str1919, 4

	.type	.L.str1920,@object      # @.str1920
.L.str1920:
	.zero	1
	.size	.L.str1920, 1

	.type	.L.str1921,@object      # @.str1921
.L.str1921:
	.asciz	"phi"
	.size	.L.str1921, 4

	.type	.L.str1922,@object      # @.str1922
.L.str1922:
	.asciz	"159"
	.size	.L.str1922, 4

	.type	.L.str1923,@object      # @.str1923
.L.str1923:
	.asciz	"phi"
	.size	.L.str1923, 4

	.type	.L.str1924,@object      # @.str1924
.L.str1924:
	.zero	1
	.size	.L.str1924, 1

	.type	.L.str1925,@object      # @.str1925
.L.str1925:
	.asciz	"phi"
	.size	.L.str1925, 4

	.type	.L.str1926,@object      # @.str1926
.L.str1926:
	.asciz	"attributes.0"
	.size	.L.str1926, 13

	.type	.L.str1927,@object      # @.str1927
.L.str1927:
	.asciz	"phi"
	.size	.L.str1927, 4

	.type	.L.str1928,@object      # @.str1928
.L.str1928:
	.zero	1
	.size	.L.str1928, 1

	.type	.L.str1929,@object      # @.str1929
.L.str1929:
	.asciz	"phi"
	.size	.L.str1929, 4

	.type	.L.str1930,@object      # @.str1930
.L.str1930:
	.asciz	"nclusters.0"
	.size	.L.str1930, 12

	.type	.L.str1931,@object      # @.str1931
.L.str1931:
	.asciz	"phi"
	.size	.L.str1931, 4

	.type	.L.str1932,@object      # @.str1932
.L.str1932:
	.zero	1
	.size	.L.str1932, 1

	.type	.L.str1933,@object      # @.str1933
.L.str1933:
	.asciz	"phi"
	.size	.L.str1933, 4

	.type	.L.str1934,@object      # @.str1934
	.align	16
.L.str1934:
	.asciz	"threshold.0.ph21"
	.size	.L.str1934, 17

	.type	.L.str1935,@object      # @.str1935
.L.str1935:
	.asciz	"phi"
	.size	.L.str1935, 4

	.type	.L.str1936,@object      # @.str1936
.L.str1936:
	.zero	1
	.size	.L.str1936, 1

	.type	.L.str1937,@object      # @.str1937
.L.str1937:
	.asciz	"phi"
	.size	.L.str1937, 4

	.type	.L.str1938,@object      # @.str1938
.L.str1938:
	.asciz	"cluster_centres"
	.size	.L.str1938, 16

	.type	.L.str1939,@object      # @.str1939
.L.str1939:
	.asciz	"phi"
	.size	.L.str1939, 4

	.type	.L.str1940,@object      # @.str1940
.L.str1940:
	.zero	1
	.size	.L.str1940, 1

	.type	.L.str1941,@object      # @.str1941
.L.str1941:
	.asciz	"phi"
	.size	.L.str1941, 4

	.type	.L.str1942,@object      # @.str1942
.L.str1942:
	.asciz	"160"
	.size	.L.str1942, 4

	.type	.L.str1943,@object      # @.str1943
.L.str1943:
	.asciz	"phi"
	.size	.L.str1943, 4

	.type	.L.str1944,@object      # @.str1944
.L.str1944:
	.asciz	"main"
	.size	.L.str1944, 5

	.type	.L.str1945,@object      # @.str1945
.L.str1945:
	.asciz	"149"
	.size	.L.str1945, 4

	.type	.L.str1946,@object      # @.str1946
.L.str1946:
	.asciz	"161"
	.size	.L.str1946, 4

	.type	.L.str1947,@object      # @.str1947
.L.str1947:
	.asciz	"printf"
	.size	.L.str1947, 7

	.type	.L.str1948,@object      # @.str1948
.L.str1948:
	.asciz	"phi"
	.size	.L.str1948, 4

	.type	.L.str1949,@object      # @.str1949
.L.str1949:
	.zero	1
	.size	.L.str1949, 1

	.type	.L.str1950,@object      # @.str1950
.L.str1950:
	.asciz	"phi"
	.size	.L.str1950, 4

	.type	.L.str1951,@object      # @.str1951
.L.str1951:
	.zero	1
	.size	.L.str1951, 1

	.type	.L.str1952,@object      # @.str1952
.L.str1952:
	.asciz	"phi"
	.size	.L.str1952, 4

	.type	.L.str1953,@object      # @.str1953
.L.str1953:
	.asciz	"161"
	.size	.L.str1953, 4

	.type	.L.str1954,@object      # @.str1954
.L.str1954:
	.asciz	"phi"
	.size	.L.str1954, 4

	.type	.L.str1955,@object      # @.str1955
.L.str1955:
	.asciz	"main"
	.size	.L.str1955, 5

	.type	.L.str1956,@object      # @.str1956
.L.str1956:
	.asciz	"149"
	.size	.L.str1956, 4

	.type	.L.str1957,@object      # @.str1957
.L.str1957:
	.asciz	"162"
	.size	.L.str1957, 4

	.type	.L.str1958,@object      # @.str1958
.L.str1958:
	.asciz	"numAttributes"
	.size	.L.str1958, 14

	.type	.L.str1959,@object      # @.str1959
.L.str1959:
	.asciz	"phi"
	.size	.L.str1959, 4

	.type	.L.str1960,@object      # @.str1960
.L.str1960:
	.asciz	"162"
	.size	.L.str1960, 4

	.type	.L.str1961,@object      # @.str1961
.L.str1961:
	.asciz	"phi"
	.size	.L.str1961, 4

	.type	.L.str1962,@object      # @.str1962
.L.str1962:
	.asciz	"main"
	.size	.L.str1962, 5

	.type	.L.str1963,@object      # @.str1963
.L.str1963:
	.asciz	"149"
	.size	.L.str1963, 4

	.type	.L.str1964,@object      # @.str1964
.L.str1964:
	.asciz	"163"
	.size	.L.str1964, 4

	.type	.L.str1965,@object      # @.str1965
.L.str1965:
	.asciz	"printf"
	.size	.L.str1965, 7

	.type	.L.str1966,@object      # @.str1966
.L.str1966:
	.asciz	"phi"
	.size	.L.str1966, 4

	.type	.L.str1967,@object      # @.str1967
.L.str1967:
	.zero	1
	.size	.L.str1967, 1

	.type	.L.str1968,@object      # @.str1968
.L.str1968:
	.asciz	"phi"
	.size	.L.str1968, 4

	.type	.L.str1969,@object      # @.str1969
.L.str1969:
	.zero	1
	.size	.L.str1969, 1

	.type	.L.str1970,@object      # @.str1970
.L.str1970:
	.asciz	"phi"
	.size	.L.str1970, 4

	.type	.L.str1971,@object      # @.str1971
.L.str1971:
	.asciz	"163"
	.size	.L.str1971, 4

	.type	.L.str1972,@object      # @.str1972
.L.str1972:
	.asciz	"phi"
	.size	.L.str1972, 4

	.type	.L.str1973,@object      # @.str1973
.L.str1973:
	.asciz	"main"
	.size	.L.str1973, 5

	.type	.L.str1974,@object      # @.str1974
.L.str1974:
	.asciz	"149"
	.size	.L.str1974, 4

	.type	.L.str1975,@object      # @.str1975
.L.str1975:
	.asciz	"164"
	.size	.L.str1975, 4

	.type	.L.str1976,@object      # @.str1976
.L.str1976:
	.asciz	"attributes.0"
	.size	.L.str1976, 13

	.type	.L.str1977,@object      # @.str1977
.L.str1977:
	.asciz	"phi"
	.size	.L.str1977, 4

	.type	.L.str1978,@object      # @.str1978
.L.str1978:
	.asciz	"164"
	.size	.L.str1978, 4

	.type	.L.str1979,@object      # @.str1979
.L.str1979:
	.asciz	"phi"
	.size	.L.str1979, 4

	.type	.L.str1980,@object      # @.str1980
.L.str1980:
	.asciz	"main"
	.size	.L.str1980, 5

	.type	.L.str1981,@object      # @.str1981
.L.str1981:
	.asciz	"149"
	.size	.L.str1981, 4

	.type	.L.str1982,@object      # @.str1982
.L.str1982:
	.asciz	"149-10"
	.size	.L.str1982, 7

	.type	.L.str1983,@object      # @.str1983
.L.str1983:
	.asciz	"free"
	.size	.L.str1983, 5

	.type	.L.str1984,@object      # @.str1984
.L.str1984:
	.asciz	"phi"
	.size	.L.str1984, 4

	.type	.L.str1985,@object      # @.str1985
.L.str1985:
	.asciz	"164"
	.size	.L.str1985, 4

	.type	.L.str1986,@object      # @.str1986
.L.str1986:
	.asciz	"phi"
	.size	.L.str1986, 4

	.type	.L.str1987,@object      # @.str1987
.L.str1987:
	.zero	1
	.size	.L.str1987, 1

	.type	.L.str1988,@object      # @.str1988
.L.str1988:
	.asciz	"phi"
	.size	.L.str1988, 4

	.type	.L.str1989,@object      # @.str1989
.L.str1989:
	.asciz	"main"
	.size	.L.str1989, 5

	.type	.L.str1990,@object      # @.str1990
.L.str1990:
	.asciz	"149"
	.size	.L.str1990, 4

	.type	.L.str1991,@object      # @.str1991
.L.str1991:
	.asciz	"165"
	.size	.L.str1991, 4

	.type	.L.str1992,@object      # @.str1992
.L.str1992:
	.asciz	"cluster_centres"
	.size	.L.str1992, 16

	.type	.L.str1993,@object      # @.str1993
.L.str1993:
	.asciz	"phi"
	.size	.L.str1993, 4

	.type	.L.str1994,@object      # @.str1994
.L.str1994:
	.asciz	"165"
	.size	.L.str1994, 4

	.type	.L.str1995,@object      # @.str1995
.L.str1995:
	.asciz	"phi"
	.size	.L.str1995, 4

	.type	.L.str1996,@object      # @.str1996
.L.str1996:
	.asciz	"main"
	.size	.L.str1996, 5

	.type	.L.str1997,@object      # @.str1997
.L.str1997:
	.asciz	"149"
	.size	.L.str1997, 4

	.type	.L.str1998,@object      # @.str1998
.L.str1998:
	.asciz	"166"
	.size	.L.str1998, 4

	.type	.L.str1999,@object      # @.str1999
.L.str1999:
	.asciz	"165"
	.size	.L.str1999, 4

	.type	.L.str2000,@object      # @.str2000
.L.str2000:
	.asciz	"phi"
	.size	.L.str2000, 4

	.type	.L.str2001,@object      # @.str2001
.L.str2001:
	.asciz	"166"
	.size	.L.str2001, 4

	.type	.L.str2002,@object      # @.str2002
.L.str2002:
	.asciz	"phi"
	.size	.L.str2002, 4

	.type	.L.str2003,@object      # @.str2003
.L.str2003:
	.asciz	"main"
	.size	.L.str2003, 5

	.type	.L.str2004,@object      # @.str2004
.L.str2004:
	.asciz	"149"
	.size	.L.str2004, 4

	.type	.L.str2005,@object      # @.str2005
.L.str2005:
	.asciz	"167"
	.size	.L.str2005, 4

	.type	.L.str2006,@object      # @.str2006
.L.str2006:
	.asciz	"166"
	.size	.L.str2006, 4

	.type	.L.str2007,@object      # @.str2007
.L.str2007:
	.asciz	"phi"
	.size	.L.str2007, 4

	.type	.L.str2008,@object      # @.str2008
.L.str2008:
	.asciz	"167"
	.size	.L.str2008, 4

	.type	.L.str2009,@object      # @.str2009
.L.str2009:
	.asciz	"phi"
	.size	.L.str2009, 4

	.type	.L.str2010,@object      # @.str2010
.L.str2010:
	.asciz	"main"
	.size	.L.str2010, 5

	.type	.L.str2011,@object      # @.str2011
.L.str2011:
	.asciz	"149"
	.size	.L.str2011, 4

	.type	.L.str2012,@object      # @.str2012
.L.str2012:
	.asciz	"149-12"
	.size	.L.str2012, 7

	.type	.L.str2013,@object      # @.str2013
.L.str2013:
	.asciz	"free"
	.size	.L.str2013, 5

	.type	.L.str2014,@object      # @.str2014
.L.str2014:
	.asciz	"phi"
	.size	.L.str2014, 4

	.type	.L.str2015,@object      # @.str2015
.L.str2015:
	.asciz	"167"
	.size	.L.str2015, 4

	.type	.L.str2016,@object      # @.str2016
.L.str2016:
	.asciz	"phi"
	.size	.L.str2016, 4

	.type	.L.str2017,@object      # @.str2017
.L.str2017:
	.zero	1
	.size	.L.str2017, 1

	.type	.L.str2018,@object      # @.str2018
.L.str2018:
	.asciz	"phi"
	.size	.L.str2018, 4

	.type	.L.str2019,@object      # @.str2019
.L.str2019:
	.asciz	"main"
	.size	.L.str2019, 5

	.type	.L.str2020,@object      # @.str2020
.L.str2020:
	.asciz	"149"
	.size	.L.str2020, 4

	.type	.L.str2021,@object      # @.str2021
.L.str2021:
	.asciz	"168"
	.size	.L.str2021, 4

	.type	.L.str2022,@object      # @.str2022
.L.str2022:
	.asciz	"cluster_centres"
	.size	.L.str2022, 16

	.type	.L.str2023,@object      # @.str2023
.L.str2023:
	.asciz	"phi"
	.size	.L.str2023, 4

	.type	.L.str2024,@object      # @.str2024
.L.str2024:
	.asciz	"168"
	.size	.L.str2024, 4

	.type	.L.str2025,@object      # @.str2025
.L.str2025:
	.asciz	"phi"
	.size	.L.str2025, 4

	.type	.L.str2026,@object      # @.str2026
.L.str2026:
	.asciz	"main"
	.size	.L.str2026, 5

	.type	.L.str2027,@object      # @.str2027
.L.str2027:
	.asciz	"149"
	.size	.L.str2027, 4

	.type	.L.str2028,@object      # @.str2028
.L.str2028:
	.asciz	"169"
	.size	.L.str2028, 4

	.type	.L.str2029,@object      # @.str2029
.L.str2029:
	.asciz	"168"
	.size	.L.str2029, 4

	.type	.L.str2030,@object      # @.str2030
.L.str2030:
	.asciz	"phi"
	.size	.L.str2030, 4

	.type	.L.str2031,@object      # @.str2031
.L.str2031:
	.asciz	"169"
	.size	.L.str2031, 4

	.type	.L.str2032,@object      # @.str2032
.L.str2032:
	.asciz	"phi"
	.size	.L.str2032, 4

	.type	.L.str2033,@object      # @.str2033
.L.str2033:
	.asciz	"main"
	.size	.L.str2033, 5

	.type	.L.str2034,@object      # @.str2034
.L.str2034:
	.asciz	"149"
	.size	.L.str2034, 4

	.type	.L.str2035,@object      # @.str2035
.L.str2035:
	.asciz	"149-14"
	.size	.L.str2035, 7

	.type	.L.str2036,@object      # @.str2036
.L.str2036:
	.asciz	"free"
	.size	.L.str2036, 5

	.type	.L.str2037,@object      # @.str2037
.L.str2037:
	.asciz	"phi"
	.size	.L.str2037, 4

	.type	.L.str2038,@object      # @.str2038
.L.str2038:
	.asciz	"169"
	.size	.L.str2038, 4

	.type	.L.str2039,@object      # @.str2039
.L.str2039:
	.asciz	"phi"
	.size	.L.str2039, 4

	.type	.L.str2040,@object      # @.str2040
.L.str2040:
	.zero	1
	.size	.L.str2040, 1

	.type	.L.str2041,@object      # @.str2041
.L.str2041:
	.asciz	"phi"
	.size	.L.str2041, 4

	.type	.L.str2042,@object      # @.str2042
.L.str2042:
	.asciz	"main"
	.size	.L.str2042, 5

	.type	.L.str2043,@object      # @.str2043
.L.str2043:
	.asciz	"149"
	.size	.L.str2043, 4

	.type	.L.str2044,@object      # @.str2044
.L.str2044:
	.asciz	"149-15"
	.size	.L.str2044, 7

	.type	.L.str2045,@object      # @.str2045
.L.str2045:
	.asciz	"free"
	.size	.L.str2045, 5

	.type	.L.str2046,@object      # @.str2046
.L.str2046:
	.asciz	"phi"
	.size	.L.str2046, 4

	.type	.L.str2047,@object      # @.str2047
.L.str2047:
	.asciz	"152"
	.size	.L.str2047, 4

	.type	.L.str2048,@object      # @.str2048
.L.str2048:
	.asciz	"phi"
	.size	.L.str2048, 4

	.type	.L.str2049,@object      # @.str2049
.L.str2049:
	.zero	1
	.size	.L.str2049, 1

	.type	.L.str2050,@object      # @.str2050
.L.str2050:
	.asciz	"phi"
	.size	.L.str2050, 4

	.type	.L.str2051,@object      # @.str2051
.L.str2051:
	.asciz	"main"
	.size	.L.str2051, 5

	.type	.L.str2052,@object      # @.str2052
.L.str2052:
	.asciz	"149"
	.size	.L.str2052, 4

	.type	.L.str2053,@object      # @.str2053
.L.str2053:
	.asciz	"149-17"
	.size	.L.str2053, 7

	.type	.L.str2054,@object      # @.str2054
.L.str2054:
	.zero	1
	.size	.L.str2054, 1

	.type	.L.str2055,@object      # @.str2055
.L.str2055:
	.asciz	"phi"
	.size	.L.str2055, 4

	.type	.L.str2056,@object      # @.str2056
.L.str2056:
	.asciz	"atof"
	.size	.L.str2056, 5

	.type	.L.str2057,@object      # @.str2057
.L.str2057:
	.asciz	"0"
	.size	.L.str2057, 2

	.type	.L.str2058,@object      # @.str2058
.L.str2058:
	.asciz	"1"
	.size	.L.str2058, 2

	.type	.L.str2059,@object      # @.str2059
.L.str2059:
	.asciz	"strtod"
	.size	.L.str2059, 7

	.type	.L.str2060,@object      # @.str2060
.L.str2060:
	.asciz	"phi"
	.size	.L.str2060, 4

	.type	.L.str2061,@object      # @.str2061
.L.str2061:
	.asciz	"__nptr"
	.size	.L.str2061, 7

	.type	.L.str2062,@object      # @.str2062
.L.str2062:
	.asciz	"phi"
	.size	.L.str2062, 4

	.type	.L.str2063,@object      # @.str2063
.L.str2063:
	.zero	1
	.size	.L.str2063, 1

	.type	.L.str2064,@object      # @.str2064
.L.str2064:
	.asciz	"phi"
	.size	.L.str2064, 4

	.type	.L.str2065,@object      # @.str2065
.L.str2065:
	.zero	1
	.size	.L.str2065, 1

	.type	.L.str2066,@object      # @.str2066
.L.str2066:
	.asciz	"phi"
	.size	.L.str2066, 4

	.type	.L.str2067,@object      # @.str2067
.L.str2067:
	.zero	1
	.size	.L.str2067, 1

	.type	.L.str2068,@object      # @.str2068
.L.str2068:
	.asciz	"phi"
	.size	.L.str2068, 4

	.type	.L.str2069,@object      # @.str2069
.L.str2069:
	.asciz	"1"
	.size	.L.str2069, 2

	.type	.L.str2070,@object      # @.str2070
.L.str2070:
	.asciz	"phi"
	.size	.L.str2070, 4

	.type	.L.str2071,@object      # @.str2071
.L.str2071:
	.asciz	"atof"
	.size	.L.str2071, 5

	.type	.L.str2072,@object      # @.str2072
.L.str2072:
	.asciz	"0"
	.size	.L.str2072, 2

	.type	.L.str2073,@object      # @.str2073
.L.str2073:
	.asciz	"0-1"
	.size	.L.str2073, 4

	.type	.L.str2074,@object      # @.str2074
.L.str2074:
	.asciz	"1"
	.size	.L.str2074, 2

	.type	.L.str2075,@object      # @.str2075
.L.str2075:
	.asciz	"phi"
	.size	.L.str2075, 4

	.type	.L.str2076,@object      # @.str2076
.L.str2076:
	.asciz	"atoi"
	.size	.L.str2076, 5

	.type	.L.str2077,@object      # @.str2077
.L.str2077:
	.asciz	"0"
	.size	.L.str2077, 2

	.type	.L.str2078,@object      # @.str2078
.L.str2078:
	.asciz	"1"
	.size	.L.str2078, 2

	.type	.L.str2079,@object      # @.str2079
.L.str2079:
	.asciz	"strtol"
	.size	.L.str2079, 7

	.type	.L.str2080,@object      # @.str2080
.L.str2080:
	.asciz	"phi"
	.size	.L.str2080, 4

	.type	.L.str2081,@object      # @.str2081
.L.str2081:
	.asciz	"__nptr"
	.size	.L.str2081, 7

	.type	.L.str2082,@object      # @.str2082
.L.str2082:
	.asciz	"phi"
	.size	.L.str2082, 4

	.type	.L.str2083,@object      # @.str2083
.L.str2083:
	.zero	1
	.size	.L.str2083, 1

	.type	.L.str2084,@object      # @.str2084
.L.str2084:
	.asciz	"phi"
	.size	.L.str2084, 4

	.type	.L.str2085,@object      # @.str2085
.L.str2085:
	.zero	1
	.size	.L.str2085, 1

	.type	.L.str2086,@object      # @.str2086
.L.str2086:
	.asciz	"phi"
	.size	.L.str2086, 4

	.type	.L.str2087,@object      # @.str2087
.L.str2087:
	.zero	1
	.size	.L.str2087, 1

	.type	.L.str2088,@object      # @.str2088
.L.str2088:
	.asciz	"phi"
	.size	.L.str2088, 4

	.type	.L.str2089,@object      # @.str2089
.L.str2089:
	.zero	1
	.size	.L.str2089, 1

	.type	.L.str2090,@object      # @.str2090
.L.str2090:
	.asciz	"phi"
	.size	.L.str2090, 4

	.type	.L.str2091,@object      # @.str2091
.L.str2091:
	.zero	1
	.size	.L.str2091, 1

	.type	.L.str2092,@object      # @.str2092
.L.str2092:
	.asciz	"phi"
	.size	.L.str2092, 4

	.type	.L.str2093,@object      # @.str2093
.L.str2093:
	.asciz	"1"
	.size	.L.str2093, 2

	.type	.L.str2094,@object      # @.str2094
.L.str2094:
	.asciz	"phi"
	.size	.L.str2094, 4

	.type	.L.str2095,@object      # @.str2095
.L.str2095:
	.asciz	"atoi"
	.size	.L.str2095, 5

	.type	.L.str2096,@object      # @.str2096
.L.str2096:
	.asciz	"0"
	.size	.L.str2096, 2

	.type	.L.str2097,@object      # @.str2097
.L.str2097:
	.asciz	"2"
	.size	.L.str2097, 2

	.type	.L.str2098,@object      # @.str2098
.L.str2098:
	.asciz	"1"
	.size	.L.str2098, 2

	.type	.L.str2099,@object      # @.str2099
.L.str2099:
	.asciz	"phi"
	.size	.L.str2099, 4

	.type	.L.str2100,@object      # @.str2100
.L.str2100:
	.asciz	"2"
	.size	.L.str2100, 2

	.type	.L.str2101,@object      # @.str2101
.L.str2101:
	.asciz	"phi"
	.size	.L.str2101, 4

	.type	.L.str2102,@object      # @.str2102
.L.str2102:
	.asciz	"atoi"
	.size	.L.str2102, 5

	.type	.L.str2103,@object      # @.str2103
.L.str2103:
	.asciz	"0"
	.size	.L.str2103, 2

	.type	.L.str2104,@object      # @.str2104
.L.str2104:
	.asciz	"0-1"
	.size	.L.str2104, 4

	.type	.L.str2105,@object      # @.str2105
.L.str2105:
	.asciz	"2"
	.size	.L.str2105, 2

	.type	.L.str2106,@object      # @.str2106
.L.str2106:
	.asciz	"phi"
	.size	.L.str2106, 4

	.type	.L.str2107,@object      # @.str2107
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str2107:
	.asciz	"INI_ADDR_ON_TDD.txt"
	.size	.L.str2107, 20

	.type	.L.str12108,@object     # @.str12108
.L.str12108:
	.asciz	"w+"
	.size	.L.str12108, 3

	.type	.L.str22109,@object     # @.str22109
.L.str22109:
	.asciz	"%ld"
	.size	.L.str22109, 4

	.type	.L.str32110,@object     # @.str32110
	.section	.rodata,"a",@progbits
	.align	16
.L.str32110:
	.asciz	"find_nearest_point"
	.size	.L.str32110, 19

	.type	.L.str42111,@object     # @.str42111
.L.str42111:
	.asciz	"0"
	.size	.L.str42111, 2

	.type	.L.str52112,@object     # @.str52112
.L.str52112:
	.asciz	"1"
	.size	.L.str52112, 2

	.type	.L.str62113,@object     # @.str62113
.L.str62113:
	.zero	1
	.size	.L.str62113, 1

	.type	.L.str72114,@object     # @.str72114
.L.str72114:
	.asciz	"phi"
	.size	.L.str72114, 4

	.type	.L.str82115,@object     # @.str82115
.L.str82115:
	.asciz	"npts"
	.size	.L.str82115, 5

	.type	.L.str92116,@object     # @.str92116
.L.str92116:
	.asciz	"phi"
	.size	.L.str92116, 4

	.type	.L.str102117,@object    # @.str102117
.L.str102117:
	.asciz	"1"
	.size	.L.str102117, 2

	.type	.L.str112118,@object    # @.str112118
.L.str112118:
	.asciz	"phi"
	.size	.L.str112118, 4

	.type	.L.str122119,@object    # @.str122119
	.align	16
.L.str122119:
	.asciz	"find_nearest_point"
	.size	.L.str122119, 19

	.type	.L.str132120,@object    # @.str132120
.L.str132120:
	.asciz	"0"
	.size	.L.str132120, 2

	.type	.L.str142121,@object    # @.str142121
.L.str142121:
	.asciz	"0-6"
	.size	.L.str142121, 4

	.type	.L.str152122,@object    # @.str152122
.L.str152122:
	.asciz	".lr.ph"
	.size	.L.str152122, 7

	.type	.L.str162123,@object    # @.str162123
.L.str162123:
	.asciz	"phi"
	.size	.L.str162123, 4

	.type	.L.str172124,@object    # @.str172124
.L.str172124:
	.asciz	"._crit_edge"
	.size	.L.str172124, 12

	.type	.L.str182125,@object    # @.str182125
.L.str182125:
	.asciz	"phi"
	.size	.L.str182125, 4

	.type	.L.str192126,@object    # @.str192126
.L.str192126:
	.asciz	"1"
	.size	.L.str192126, 2

	.type	.L.str202127,@object    # @.str202127
.L.str202127:
	.asciz	"phi"
	.size	.L.str202127, 4

	.type	.L.str212128,@object    # @.str212128
	.align	16
.L.str212128:
	.asciz	"find_nearest_point"
	.size	.L.str212128, 19

	.type	.L.str222129,@object    # @.str222129
.L.str222129:
	.asciz	".lr.ph"
	.size	.L.str222129, 7

	.type	.L.str232130,@object    # @.str232130
.L.str232130:
	.asciz	"indvars.iv"
	.size	.L.str232130, 11

	.type	.L.str242131,@object    # @.str242131
.L.str242131:
	.zero	1
	.size	.L.str242131, 1

	.type	.L.str252132,@object    # @.str252132
.L.str252132:
	.asciz	"0"
	.size	.L.str252132, 2

	.type	.L.str262133,@object    # @.str262133
.L.str262133:
	.asciz	"indvars.iv.next"
	.size	.L.str262133, 16

	.type	.L.str272134,@object    # @.str272134
.L.str272134:
	.asciz	".lr.ph"
	.size	.L.str272134, 7

	.type	.L.str282135,@object    # @.str282135
.L.str282135:
	.asciz	"indvars.iv"
	.size	.L.str282135, 11

	.type	.L.str292136,@object    # @.str292136
.L.str292136:
	.asciz	"phi"
	.size	.L.str292136, 4

	.type	.L.str302137,@object    # @.str302137
	.align	16
.L.str302137:
	.asciz	"find_nearest_point"
	.size	.L.str302137, 19

	.type	.L.str312138,@object    # @.str312138
.L.str312138:
	.asciz	".lr.ph"
	.size	.L.str312138, 7

	.type	.L.str322139,@object    # @.str322139
.L.str322139:
	.asciz	"index.03"
	.size	.L.str322139, 9

	.type	.L.str332140,@object    # @.str332140
.L.str332140:
	.zero	1
	.size	.L.str332140, 1

	.type	.L.str342141,@object    # @.str342141
.L.str342141:
	.asciz	"0"
	.size	.L.str342141, 2

	.type	.L.str352142,@object    # @.str352142
.L.str352142:
	.asciz	"index.1"
	.size	.L.str352142, 8

	.type	.L.str362143,@object    # @.str362143
.L.str362143:
	.asciz	".lr.ph"
	.size	.L.str362143, 7

	.type	.L.str372144,@object    # @.str372144
.L.str372144:
	.asciz	"index.03"
	.size	.L.str372144, 9

	.type	.L.str382145,@object    # @.str382145
.L.str382145:
	.asciz	"phi"
	.size	.L.str382145, 4

	.type	.L.str392146,@object    # @.str392146
	.align	16
.L.str392146:
	.asciz	"find_nearest_point"
	.size	.L.str392146, 19

	.type	.L.str402147,@object    # @.str402147
.L.str402147:
	.asciz	".lr.ph"
	.size	.L.str402147, 7

	.type	.L.str412148,@object    # @.str412148
.L.str412148:
	.asciz	"max_dist.02"
	.size	.L.str412148, 12

	.type	.L.str422149,@object    # @.str422149
.L.str422149:
	.zero	1
	.size	.L.str422149, 1

	.type	.L.str432150,@object    # @.str432150
.L.str432150:
	.asciz	"0"
	.size	.L.str432150, 2

	.type	.L.str442151,@object    # @.str442151
.L.str442151:
	.asciz	"max_dist.1"
	.size	.L.str442151, 11

	.type	.L.str452152,@object    # @.str452152
.L.str452152:
	.asciz	".lr.ph"
	.size	.L.str452152, 7

	.type	.L.str462153,@object    # @.str462153
.L.str462153:
	.asciz	"max_dist.02"
	.size	.L.str462153, 12

	.type	.L.str472154,@object    # @.str472154
.L.str472154:
	.asciz	"phi"
	.size	.L.str472154, 4

	.type	.L.str482155,@object    # @.str482155
	.align	16
.L.str482155:
	.asciz	"find_nearest_point"
	.size	.L.str482155, 19

	.type	.L.str492156,@object    # @.str492156
.L.str492156:
	.asciz	".lr.ph"
	.size	.L.str492156, 7

	.type	.L.str502157,@object    # @.str502157
.L.str502157:
	.asciz	"2"
	.size	.L.str502157, 2

	.type	.L.str512158,@object    # @.str512158
.L.str512158:
	.asciz	"indvars.iv"
	.size	.L.str512158, 11

	.type	.L.str522159,@object    # @.str522159
.L.str522159:
	.asciz	"phi"
	.size	.L.str522159, 4

	.type	.L.str532160,@object    # @.str532160
.L.str532160:
	.asciz	"pts"
	.size	.L.str532160, 4

	.type	.L.str542161,@object    # @.str542161
.L.str542161:
	.asciz	"phi"
	.size	.L.str542161, 4

	.type	.L.str552162,@object    # @.str552162
.L.str552162:
	.asciz	"2"
	.size	.L.str552162, 2

	.type	.L.str562163,@object    # @.str562163
.L.str562163:
	.asciz	"phi"
	.size	.L.str562163, 4

	.type	.L.str572164,@object    # @.str572164
	.align	16
.L.str572164:
	.asciz	"find_nearest_point"
	.size	.L.str572164, 19

	.type	.L.str582165,@object    # @.str582165
.L.str582165:
	.asciz	".lr.ph"
	.size	.L.str582165, 7

	.type	.L.str592166,@object    # @.str592166
.L.str592166:
	.asciz	"3"
	.size	.L.str592166, 2

	.type	.L.str602167,@object    # @.str602167
.L.str602167:
	.asciz	"2"
	.size	.L.str602167, 2

	.type	.L.str612168,@object    # @.str612168
.L.str612168:
	.asciz	"phi"
	.size	.L.str612168, 4

	.type	.L.str622169,@object    # @.str622169
.L.str622169:
	.asciz	"3"
	.size	.L.str622169, 2

	.type	.L.str632170,@object    # @.str632170
.L.str632170:
	.asciz	"phi"
	.size	.L.str632170, 4

	.type	.L.str642171,@object    # @.str642171
	.align	16
.L.str642171:
	.asciz	"find_nearest_point"
	.size	.L.str642171, 19

	.type	.L.str652172,@object    # @.str652172
.L.str652172:
	.asciz	".lr.ph"
	.size	.L.str652172, 7

	.type	.L.str662173,@object    # @.str662173
.L.str662173:
	.asciz	"4"
	.size	.L.str662173, 2

	.type	.L.str672174,@object    # @.str672174
.L.str672174:
	.asciz	"euclid_dist_2"
	.size	.L.str672174, 14

	.type	.L.str682175,@object    # @.str682175
.L.str682175:
	.asciz	"phi"
	.size	.L.str682175, 4

	.type	.L.str692176,@object    # @.str692176
.L.str692176:
	.asciz	"pt"
	.size	.L.str692176, 3

	.type	.L.str702177,@object    # @.str702177
.L.str702177:
	.asciz	"phi"
	.size	.L.str702177, 4

	.type	.L.str712178,@object    # @.str712178
.L.str712178:
	.asciz	"pt1"
	.size	.L.str712178, 4

	.type	.L.str722179,@object    # @.str722179
.L.str722179:
	.asciz	"phi"
	.size	.L.str722179, 4

	.type	.L.str732180,@object    # @.str732180
.L.str732180:
	.asciz	"3"
	.size	.L.str732180, 2

	.type	.L.str742181,@object    # @.str742181
.L.str742181:
	.asciz	"phi"
	.size	.L.str742181, 4

	.type	.L.str752182,@object    # @.str752182
.L.str752182:
	.asciz	"pt2"
	.size	.L.str752182, 4

	.type	.L.str762183,@object    # @.str762183
.L.str762183:
	.asciz	"phi"
	.size	.L.str762183, 4

	.type	.L.str772184,@object    # @.str772184
.L.str772184:
	.asciz	"nfeatures"
	.size	.L.str772184, 10

	.type	.L.str782185,@object    # @.str782185
.L.str782185:
	.asciz	"phi"
	.size	.L.str782185, 4

	.type	.L.str792186,@object    # @.str792186
.L.str792186:
	.asciz	"numdims"
	.size	.L.str792186, 8

	.type	.L.str802187,@object    # @.str802187
.L.str802187:
	.asciz	"phi"
	.size	.L.str802187, 4

	.type	.L.str812188,@object    # @.str812188
.L.str812188:
	.asciz	"4"
	.size	.L.str812188, 2

	.type	.L.str822189,@object    # @.str822189
.L.str822189:
	.asciz	"phi"
	.size	.L.str822189, 4

	.type	.L.str832190,@object    # @.str832190
	.align	16
.L.str832190:
	.asciz	"find_nearest_point"
	.size	.L.str832190, 19

	.type	.L.str842191,@object    # @.str842191
.L.str842191:
	.asciz	".lr.ph"
	.size	.L.str842191, 7

	.type	.L.str852192,@object    # @.str852192
.L.str852192:
	.asciz	"5"
	.size	.L.str852192, 2

	.type	.L.str862193,@object    # @.str862193
.L.str862193:
	.asciz	"max_dist.02"
	.size	.L.str862193, 12

	.type	.L.str872194,@object    # @.str872194
.L.str872194:
	.asciz	"phi"
	.size	.L.str872194, 4

	.type	.L.str882195,@object    # @.str882195
.L.str882195:
	.asciz	"4"
	.size	.L.str882195, 2

	.type	.L.str892196,@object    # @.str892196
.L.str892196:
	.asciz	"phi"
	.size	.L.str892196, 4

	.type	.L.str902197,@object    # @.str902197
.L.str902197:
	.asciz	"5"
	.size	.L.str902197, 2

	.type	.L.str912198,@object    # @.str912198
.L.str912198:
	.asciz	"phi"
	.size	.L.str912198, 4

	.type	.L.str922199,@object    # @.str922199
	.align	16
.L.str922199:
	.asciz	"find_nearest_point"
	.size	.L.str922199, 19

	.type	.L.str932200,@object    # @.str932200
.L.str932200:
	.asciz	".lr.ph"
	.size	.L.str932200, 7

	.type	.L.str942201,@object    # @.str942201
.L.str942201:
	.asciz	"max_dist.1"
	.size	.L.str942201, 11

	.type	.L.str952202,@object    # @.str952202
.L.str952202:
	.asciz	"max_dist.02"
	.size	.L.str952202, 12

	.type	.L.str962203,@object    # @.str962203
.L.str962203:
	.asciz	"phi"
	.size	.L.str962203, 4

	.type	.L.str972204,@object    # @.str972204
.L.str972204:
	.asciz	"4"
	.size	.L.str972204, 2

	.type	.L.str982205,@object    # @.str982205
.L.str982205:
	.asciz	"phi"
	.size	.L.str982205, 4

	.type	.L.str992206,@object    # @.str992206
.L.str992206:
	.asciz	"5"
	.size	.L.str992206, 2

	.type	.L.str1002207,@object   # @.str1002207
.L.str1002207:
	.asciz	"phi"
	.size	.L.str1002207, 4

	.type	.L.str1012208,@object   # @.str1012208
.L.str1012208:
	.asciz	"max_dist.1"
	.size	.L.str1012208, 11

	.type	.L.str1022209,@object   # @.str1022209
.L.str1022209:
	.asciz	"phi"
	.size	.L.str1022209, 4

	.type	.L.str1032210,@object   # @.str1032210
	.align	16
.L.str1032210:
	.asciz	"find_nearest_point"
	.size	.L.str1032210, 19

	.type	.L.str1042211,@object   # @.str1042211
.L.str1042211:
	.asciz	".lr.ph"
	.size	.L.str1042211, 7

	.type	.L.str1052212,@object   # @.str1052212
.L.str1052212:
	.asciz	"6"
	.size	.L.str1052212, 2

	.type	.L.str1062213,@object   # @.str1062213
.L.str1062213:
	.asciz	"indvars.iv"
	.size	.L.str1062213, 11

	.type	.L.str1072214,@object   # @.str1072214
.L.str1072214:
	.asciz	"phi"
	.size	.L.str1072214, 4

	.type	.L.str1082215,@object   # @.str1082215
.L.str1082215:
	.asciz	"6"
	.size	.L.str1082215, 2

	.type	.L.str1092216,@object   # @.str1092216
.L.str1092216:
	.asciz	"phi"
	.size	.L.str1092216, 4

	.type	.L.str1102217,@object   # @.str1102217
	.align	16
.L.str1102217:
	.asciz	"find_nearest_point"
	.size	.L.str1102217, 19

	.type	.L.str1112218,@object   # @.str1112218
.L.str1112218:
	.asciz	".lr.ph"
	.size	.L.str1112218, 7

	.type	.L.str1122219,@object   # @.str1122219
.L.str1122219:
	.asciz	"index.1"
	.size	.L.str1122219, 8

	.type	.L.str1132220,@object   # @.str1132220
.L.str1132220:
	.asciz	"index.03"
	.size	.L.str1132220, 9

	.type	.L.str1142221,@object   # @.str1142221
.L.str1142221:
	.asciz	"phi"
	.size	.L.str1142221, 4

	.type	.L.str1152222,@object   # @.str1152222
.L.str1152222:
	.asciz	"6"
	.size	.L.str1152222, 2

	.type	.L.str1162223,@object   # @.str1162223
.L.str1162223:
	.asciz	"phi"
	.size	.L.str1162223, 4

	.type	.L.str1172224,@object   # @.str1172224
.L.str1172224:
	.asciz	"5"
	.size	.L.str1172224, 2

	.type	.L.str1182225,@object   # @.str1182225
.L.str1182225:
	.asciz	"phi"
	.size	.L.str1182225, 4

	.type	.L.str1192226,@object   # @.str1192226
.L.str1192226:
	.asciz	"index.1"
	.size	.L.str1192226, 8

	.type	.L.str1202227,@object   # @.str1202227
.L.str1202227:
	.asciz	"phi"
	.size	.L.str1202227, 4

	.type	.L.str1212228,@object   # @.str1212228
	.align	16
.L.str1212228:
	.asciz	"find_nearest_point"
	.size	.L.str1212228, 19

	.type	.L.str1222229,@object   # @.str1222229
.L.str1222229:
	.asciz	".lr.ph"
	.size	.L.str1222229, 7

	.type	.L.str1232230,@object   # @.str1232230
.L.str1232230:
	.asciz	"indvars.iv.next"
	.size	.L.str1232230, 16

	.type	.L.str1242231,@object   # @.str1242231
.L.str1242231:
	.zero	1
	.size	.L.str1242231, 1

	.type	.L.str1252232,@object   # @.str1252232
.L.str1252232:
	.asciz	"phi"
	.size	.L.str1252232, 4

	.type	.L.str1262233,@object   # @.str1262233
.L.str1262233:
	.asciz	"indvars.iv"
	.size	.L.str1262233, 11

	.type	.L.str1272234,@object   # @.str1272234
.L.str1272234:
	.asciz	"phi"
	.size	.L.str1272234, 4

	.type	.L.str1282235,@object   # @.str1282235
.L.str1282235:
	.asciz	"indvars.iv.next"
	.size	.L.str1282235, 16

	.type	.L.str1292236,@object   # @.str1292236
.L.str1292236:
	.asciz	"phi"
	.size	.L.str1292236, 4

	.type	.L.str1302237,@object   # @.str1302237
	.align	16
.L.str1302237:
	.asciz	"find_nearest_point"
	.size	.L.str1302237, 19

	.type	.L.str1312238,@object   # @.str1312238
.L.str1312238:
	.asciz	".lr.ph"
	.size	.L.str1312238, 7

	.type	.L.str1322239,@object   # @.str1322239
.L.str1322239:
	.asciz	"lftr.wideiv"
	.size	.L.str1322239, 12

	.type	.L.str1332240,@object   # @.str1332240
.L.str1332240:
	.asciz	"indvars.iv.next"
	.size	.L.str1332240, 16

	.type	.L.str1342241,@object   # @.str1342241
.L.str1342241:
	.asciz	"phi"
	.size	.L.str1342241, 4

	.type	.L.str1352242,@object   # @.str1352242
.L.str1352242:
	.asciz	"lftr.wideiv"
	.size	.L.str1352242, 12

	.type	.L.str1362243,@object   # @.str1362243
.L.str1362243:
	.asciz	"phi"
	.size	.L.str1362243, 4

	.type	.L.str1372244,@object   # @.str1372244
	.align	16
.L.str1372244:
	.asciz	"find_nearest_point"
	.size	.L.str1372244, 19

	.type	.L.str1382245,@object   # @.str1382245
.L.str1382245:
	.asciz	".lr.ph"
	.size	.L.str1382245, 7

	.type	.L.str1392246,@object   # @.str1392246
.L.str1392246:
	.asciz	"exitcond"
	.size	.L.str1392246, 9

	.type	.L.str1402247,@object   # @.str1402247
.L.str1402247:
	.asciz	"npts"
	.size	.L.str1402247, 5

	.type	.L.str1412248,@object   # @.str1412248
.L.str1412248:
	.asciz	"phi"
	.size	.L.str1412248, 4

	.type	.L.str1422249,@object   # @.str1422249
.L.str1422249:
	.asciz	"lftr.wideiv"
	.size	.L.str1422249, 12

	.type	.L.str1432250,@object   # @.str1432250
.L.str1432250:
	.asciz	"phi"
	.size	.L.str1432250, 4

	.type	.L.str1442251,@object   # @.str1442251
.L.str1442251:
	.asciz	"exitcond"
	.size	.L.str1442251, 9

	.type	.L.str1452252,@object   # @.str1452252
.L.str1452252:
	.asciz	"phi"
	.size	.L.str1452252, 4

	.type	.L.str1462253,@object   # @.str1462253
	.align	16
.L.str1462253:
	.asciz	"find_nearest_point"
	.size	.L.str1462253, 19

	.type	.L.str1472254,@object   # @.str1472254
.L.str1472254:
	.asciz	".lr.ph"
	.size	.L.str1472254, 7

	.type	.L.str1482255,@object   # @.str1482255
.L.str1482255:
	.asciz	".lr.ph-3"
	.size	.L.str1482255, 9

	.type	.L.str1492256,@object   # @.str1492256
.L.str1492256:
	.asciz	"._crit_edge"
	.size	.L.str1492256, 12

	.type	.L.str1502257,@object   # @.str1502257
.L.str1502257:
	.asciz	"phi"
	.size	.L.str1502257, 4

	.type	.L.str1512258,@object   # @.str1512258
.L.str1512258:
	.asciz	".lr.ph"
	.size	.L.str1512258, 7

	.type	.L.str1522259,@object   # @.str1522259
.L.str1522259:
	.asciz	"phi"
	.size	.L.str1522259, 4

	.type	.L.str1532260,@object   # @.str1532260
.L.str1532260:
	.asciz	"exitcond"
	.size	.L.str1532260, 9

	.type	.L.str1542261,@object   # @.str1542261
.L.str1542261:
	.asciz	"phi"
	.size	.L.str1542261, 4

	.type	.L.str1552262,@object   # @.str1552262
	.align	16
.L.str1552262:
	.asciz	"find_nearest_point"
	.size	.L.str1552262, 19

	.type	.L.str1562263,@object   # @.str1562263
.L.str1562263:
	.asciz	"._crit_edge"
	.size	.L.str1562263, 12

	.type	.L.str1572264,@object   # @.str1572264
.L.str1572264:
	.asciz	"index.0.lcssa"
	.size	.L.str1572264, 14

	.type	.L.str1582265,@object   # @.str1582265
.L.str1582265:
	.asciz	"index.1"
	.size	.L.str1582265, 8

	.type	.L.str1592266,@object   # @.str1592266
.L.str1592266:
	.asciz	".lr.ph"
	.size	.L.str1592266, 7

	.type	.L.str1602267,@object   # @.str1602267
.L.str1602267:
	.zero	1
	.size	.L.str1602267, 1

	.type	.L.str1612268,@object   # @.str1612268
.L.str1612268:
	.asciz	"0"
	.size	.L.str1612268, 2

	.type	.L.str1622269,@object   # @.str1622269
.L.str1622269:
	.asciz	"index.0.lcssa"
	.size	.L.str1622269, 14

	.type	.L.str1632270,@object   # @.str1632270
.L.str1632270:
	.asciz	"phi"
	.size	.L.str1632270, 4

	.type	.L.str1642271,@object   # @.str1642271
	.align	16
.L.str1642271:
	.asciz	"find_nearest_point"
	.size	.L.str1642271, 19

	.type	.L.str1652272,@object   # @.str1652272
.L.str1652272:
	.asciz	"._crit_edge"
	.size	.L.str1652272, 12

	.type	.L.str1662273,@object   # @.str1662273
.L.str1662273:
	.asciz	"._crit_edge-0"
	.size	.L.str1662273, 14

	.type	.L.str1672274,@object   # @.str1672274
.L.str1672274:
	.asciz	"index.0.lcssa"
	.size	.L.str1672274, 14

	.type	.L.str1682275,@object   # @.str1682275
.L.str1682275:
	.asciz	"phi"
	.size	.L.str1682275, 4

	.type	.L.str1692276,@object   # @.str1692276
.L.str1692276:
	.asciz	"euclid_dist_2"
	.size	.L.str1692276, 14

	.type	.L.str1702277,@object   # @.str1702277
.L.str1702277:
	.asciz	"0"
	.size	.L.str1702277, 2

	.type	.L.str1712278,@object   # @.str1712278
.L.str1712278:
	.asciz	"1"
	.size	.L.str1712278, 2

	.type	.L.str1722279,@object   # @.str1722279
.L.str1722279:
	.zero	1
	.size	.L.str1722279, 1

	.type	.L.str1732280,@object   # @.str1732280
.L.str1732280:
	.asciz	"phi"
	.size	.L.str1732280, 4

	.type	.L.str1742281,@object   # @.str1742281
.L.str1742281:
	.asciz	"numdims"
	.size	.L.str1742281, 8

	.type	.L.str1752282,@object   # @.str1752282
.L.str1752282:
	.asciz	"phi"
	.size	.L.str1752282, 4

	.type	.L.str1762283,@object   # @.str1762283
.L.str1762283:
	.asciz	"1"
	.size	.L.str1762283, 2

	.type	.L.str1772284,@object   # @.str1772284
.L.str1772284:
	.asciz	"phi"
	.size	.L.str1772284, 4

	.type	.L.str1782285,@object   # @.str1782285
.L.str1782285:
	.asciz	"euclid_dist_2"
	.size	.L.str1782285, 14

	.type	.L.str1792286,@object   # @.str1792286
.L.str1792286:
	.asciz	"0"
	.size	.L.str1792286, 2

	.type	.L.str1802287,@object   # @.str1802287
.L.str1802287:
	.asciz	"0-5"
	.size	.L.str1802287, 4

	.type	.L.str1812288,@object   # @.str1812288
.L.str1812288:
	.asciz	".lr.ph"
	.size	.L.str1812288, 7

	.type	.L.str1822289,@object   # @.str1822289
.L.str1822289:
	.asciz	"phi"
	.size	.L.str1822289, 4

	.type	.L.str1832290,@object   # @.str1832290
.L.str1832290:
	.asciz	"._crit_edge"
	.size	.L.str1832290, 12

	.type	.L.str1842291,@object   # @.str1842291
.L.str1842291:
	.asciz	"phi"
	.size	.L.str1842291, 4

	.type	.L.str1852292,@object   # @.str1852292
.L.str1852292:
	.asciz	"1"
	.size	.L.str1852292, 2

	.type	.L.str1862293,@object   # @.str1862293
.L.str1862293:
	.asciz	"phi"
	.size	.L.str1862293, 4

	.type	.L.str1872294,@object   # @.str1872294
.L.str1872294:
	.asciz	"euclid_dist_2"
	.size	.L.str1872294, 14

	.type	.L.str1882295,@object   # @.str1882295
.L.str1882295:
	.asciz	".lr.ph"
	.size	.L.str1882295, 7

	.type	.L.str1892296,@object   # @.str1892296
.L.str1892296:
	.asciz	"indvars.iv"
	.size	.L.str1892296, 11

	.type	.L.str1902297,@object   # @.str1902297
.L.str1902297:
	.zero	1
	.size	.L.str1902297, 1

	.type	.L.str1912298,@object   # @.str1912298
.L.str1912298:
	.asciz	"0"
	.size	.L.str1912298, 2

	.type	.L.str1922299,@object   # @.str1922299
.L.str1922299:
	.asciz	"indvars.iv.next"
	.size	.L.str1922299, 16

	.type	.L.str1932300,@object   # @.str1932300
.L.str1932300:
	.asciz	".lr.ph"
	.size	.L.str1932300, 7

	.type	.L.str1942301,@object   # @.str1942301
.L.str1942301:
	.asciz	"indvars.iv"
	.size	.L.str1942301, 11

	.type	.L.str1952302,@object   # @.str1952302
.L.str1952302:
	.asciz	"phi"
	.size	.L.str1952302, 4

	.type	.L.str1962303,@object   # @.str1962303
.L.str1962303:
	.asciz	"euclid_dist_2"
	.size	.L.str1962303, 14

	.type	.L.str1972304,@object   # @.str1972304
.L.str1972304:
	.asciz	".lr.ph"
	.size	.L.str1972304, 7

	.type	.L.str1982305,@object   # @.str1982305
.L.str1982305:
	.asciz	"ans.02"
	.size	.L.str1982305, 7

	.type	.L.str1992306,@object   # @.str1992306
.L.str1992306:
	.zero	1
	.size	.L.str1992306, 1

	.type	.L.str2002307,@object   # @.str2002307
.L.str2002307:
	.asciz	"0"
	.size	.L.str2002307, 2

	.type	.L.str2012308,@object   # @.str2012308
.L.str2012308:
	.asciz	"8"
	.size	.L.str2012308, 2

	.type	.L.str2022309,@object   # @.str2022309
.L.str2022309:
	.asciz	".lr.ph"
	.size	.L.str2022309, 7

	.type	.L.str2032310,@object   # @.str2032310
.L.str2032310:
	.asciz	"ans.02"
	.size	.L.str2032310, 7

	.type	.L.str2042311,@object   # @.str2042311
.L.str2042311:
	.asciz	"phi"
	.size	.L.str2042311, 4

	.type	.L.str2052312,@object   # @.str2052312
.L.str2052312:
	.asciz	"euclid_dist_2"
	.size	.L.str2052312, 14

	.type	.L.str2062313,@object   # @.str2062313
.L.str2062313:
	.asciz	".lr.ph"
	.size	.L.str2062313, 7

	.type	.L.str2072314,@object   # @.str2072314
.L.str2072314:
	.asciz	"2"
	.size	.L.str2072314, 2

	.type	.L.str2082315,@object   # @.str2082315
.L.str2082315:
	.asciz	"indvars.iv"
	.size	.L.str2082315, 11

	.type	.L.str2092316,@object   # @.str2092316
.L.str2092316:
	.asciz	"phi"
	.size	.L.str2092316, 4

	.type	.L.str2102317,@object   # @.str2102317
.L.str2102317:
	.asciz	"pt1"
	.size	.L.str2102317, 4

	.type	.L.str2112318,@object   # @.str2112318
.L.str2112318:
	.asciz	"phi"
	.size	.L.str2112318, 4

	.type	.L.str2122319,@object   # @.str2122319
.L.str2122319:
	.asciz	"2"
	.size	.L.str2122319, 2

	.type	.L.str2132320,@object   # @.str2132320
.L.str2132320:
	.asciz	"phi"
	.size	.L.str2132320, 4

	.type	.L.str2142321,@object   # @.str2142321
.L.str2142321:
	.asciz	"euclid_dist_2"
	.size	.L.str2142321, 14

	.type	.L.str2152322,@object   # @.str2152322
.L.str2152322:
	.asciz	".lr.ph"
	.size	.L.str2152322, 7

	.type	.L.str2162323,@object   # @.str2162323
.L.str2162323:
	.asciz	"3"
	.size	.L.str2162323, 2

	.type	.L.str2172324,@object   # @.str2172324
.L.str2172324:
	.asciz	"2"
	.size	.L.str2172324, 2

	.type	.L.str2182325,@object   # @.str2182325
.L.str2182325:
	.asciz	"phi"
	.size	.L.str2182325, 4

	.type	.L.str2192326,@object   # @.str2192326
.L.str2192326:
	.asciz	"3"
	.size	.L.str2192326, 2

	.type	.L.str2202327,@object   # @.str2202327
.L.str2202327:
	.asciz	"phi"
	.size	.L.str2202327, 4

	.type	.L.str2212328,@object   # @.str2212328
.L.str2212328:
	.asciz	"euclid_dist_2"
	.size	.L.str2212328, 14

	.type	.L.str2222329,@object   # @.str2222329
.L.str2222329:
	.asciz	".lr.ph"
	.size	.L.str2222329, 7

	.type	.L.str2232330,@object   # @.str2232330
.L.str2232330:
	.asciz	"4"
	.size	.L.str2232330, 2

	.type	.L.str2242331,@object   # @.str2242331
.L.str2242331:
	.asciz	"indvars.iv"
	.size	.L.str2242331, 11

	.type	.L.str2252332,@object   # @.str2252332
.L.str2252332:
	.asciz	"phi"
	.size	.L.str2252332, 4

	.type	.L.str2262333,@object   # @.str2262333
.L.str2262333:
	.asciz	"pt2"
	.size	.L.str2262333, 4

	.type	.L.str2272334,@object   # @.str2272334
.L.str2272334:
	.asciz	"phi"
	.size	.L.str2272334, 4

	.type	.L.str2282335,@object   # @.str2282335
.L.str2282335:
	.asciz	"4"
	.size	.L.str2282335, 2

	.type	.L.str2292336,@object   # @.str2292336
.L.str2292336:
	.asciz	"phi"
	.size	.L.str2292336, 4

	.type	.L.str2302337,@object   # @.str2302337
.L.str2302337:
	.asciz	"euclid_dist_2"
	.size	.L.str2302337, 14

	.type	.L.str2312338,@object   # @.str2312338
.L.str2312338:
	.asciz	".lr.ph"
	.size	.L.str2312338, 7

	.type	.L.str2322339,@object   # @.str2322339
.L.str2322339:
	.asciz	"5"
	.size	.L.str2322339, 2

	.type	.L.str2332340,@object   # @.str2332340
.L.str2332340:
	.asciz	"4"
	.size	.L.str2332340, 2

	.type	.L.str2342341,@object   # @.str2342341
.L.str2342341:
	.asciz	"phi"
	.size	.L.str2342341, 4

	.type	.L.str2352342,@object   # @.str2352342
.L.str2352342:
	.asciz	"5"
	.size	.L.str2352342, 2

	.type	.L.str2362343,@object   # @.str2362343
.L.str2362343:
	.asciz	"phi"
	.size	.L.str2362343, 4

	.type	.L.str2372344,@object   # @.str2372344
.L.str2372344:
	.asciz	"euclid_dist_2"
	.size	.L.str2372344, 14

	.type	.L.str2382345,@object   # @.str2382345
.L.str2382345:
	.asciz	".lr.ph"
	.size	.L.str2382345, 7

	.type	.L.str2392346,@object   # @.str2392346
.L.str2392346:
	.asciz	"6"
	.size	.L.str2392346, 2

	.type	.L.str2402347,@object   # @.str2402347
.L.str2402347:
	.asciz	"5"
	.size	.L.str2402347, 2

	.type	.L.str2412348,@object   # @.str2412348
.L.str2412348:
	.asciz	"phi"
	.size	.L.str2412348, 4

	.type	.L.str2422349,@object   # @.str2422349
.L.str2422349:
	.asciz	"3"
	.size	.L.str2422349, 2

	.type	.L.str2432350,@object   # @.str2432350
.L.str2432350:
	.asciz	"phi"
	.size	.L.str2432350, 4

	.type	.L.str2442351,@object   # @.str2442351
.L.str2442351:
	.asciz	"6"
	.size	.L.str2442351, 2

	.type	.L.str2452352,@object   # @.str2452352
.L.str2452352:
	.asciz	"phi"
	.size	.L.str2452352, 4

	.type	.L.str2462353,@object   # @.str2462353
.L.str2462353:
	.asciz	"euclid_dist_2"
	.size	.L.str2462353, 14

	.type	.L.str2472354,@object   # @.str2472354
.L.str2472354:
	.asciz	".lr.ph"
	.size	.L.str2472354, 7

	.type	.L.str2482355,@object   # @.str2482355
.L.str2482355:
	.asciz	"7"
	.size	.L.str2482355, 2

	.type	.L.str2492356,@object   # @.str2492356
.L.str2492356:
	.asciz	"6"
	.size	.L.str2492356, 2

	.type	.L.str2502357,@object   # @.str2502357
.L.str2502357:
	.asciz	"phi"
	.size	.L.str2502357, 4

	.type	.L.str2512358,@object   # @.str2512358
.L.str2512358:
	.asciz	"6"
	.size	.L.str2512358, 2

	.type	.L.str2522359,@object   # @.str2522359
.L.str2522359:
	.asciz	"phi"
	.size	.L.str2522359, 4

	.type	.L.str2532360,@object   # @.str2532360
.L.str2532360:
	.asciz	"7"
	.size	.L.str2532360, 2

	.type	.L.str2542361,@object   # @.str2542361
.L.str2542361:
	.asciz	"phi"
	.size	.L.str2542361, 4

	.type	.L.str2552362,@object   # @.str2552362
.L.str2552362:
	.asciz	"euclid_dist_2"
	.size	.L.str2552362, 14

	.type	.L.str2562363,@object   # @.str2562363
.L.str2562363:
	.asciz	".lr.ph"
	.size	.L.str2562363, 7

	.type	.L.str2572364,@object   # @.str2572364
.L.str2572364:
	.asciz	"8"
	.size	.L.str2572364, 2

	.type	.L.str2582365,@object   # @.str2582365
.L.str2582365:
	.asciz	"7"
	.size	.L.str2582365, 2

	.type	.L.str2592366,@object   # @.str2592366
.L.str2592366:
	.asciz	"phi"
	.size	.L.str2592366, 4

	.type	.L.str2602367,@object   # @.str2602367
.L.str2602367:
	.asciz	"ans.02"
	.size	.L.str2602367, 7

	.type	.L.str2612368,@object   # @.str2612368
.L.str2612368:
	.asciz	"phi"
	.size	.L.str2612368, 4

	.type	.L.str2622369,@object   # @.str2622369
.L.str2622369:
	.asciz	"8"
	.size	.L.str2622369, 2

	.type	.L.str2632370,@object   # @.str2632370
.L.str2632370:
	.asciz	"phi"
	.size	.L.str2632370, 4

	.type	.L.str2642371,@object   # @.str2642371
.L.str2642371:
	.asciz	"euclid_dist_2"
	.size	.L.str2642371, 14

	.type	.L.str2652372,@object   # @.str2652372
.L.str2652372:
	.asciz	".lr.ph"
	.size	.L.str2652372, 7

	.type	.L.str2662373,@object   # @.str2662373
.L.str2662373:
	.asciz	"indvars.iv.next"
	.size	.L.str2662373, 16

	.type	.L.str2672374,@object   # @.str2672374
.L.str2672374:
	.zero	1
	.size	.L.str2672374, 1

	.type	.L.str2682375,@object   # @.str2682375
.L.str2682375:
	.asciz	"phi"
	.size	.L.str2682375, 4

	.type	.L.str2692376,@object   # @.str2692376
.L.str2692376:
	.asciz	"indvars.iv"
	.size	.L.str2692376, 11

	.type	.L.str2702377,@object   # @.str2702377
.L.str2702377:
	.asciz	"phi"
	.size	.L.str2702377, 4

	.type	.L.str2712378,@object   # @.str2712378
.L.str2712378:
	.asciz	"indvars.iv.next"
	.size	.L.str2712378, 16

	.type	.L.str2722379,@object   # @.str2722379
.L.str2722379:
	.asciz	"phi"
	.size	.L.str2722379, 4

	.type	.L.str2732380,@object   # @.str2732380
.L.str2732380:
	.asciz	"euclid_dist_2"
	.size	.L.str2732380, 14

	.type	.L.str2742381,@object   # @.str2742381
.L.str2742381:
	.asciz	".lr.ph"
	.size	.L.str2742381, 7

	.type	.L.str2752382,@object   # @.str2752382
.L.str2752382:
	.asciz	"lftr.wideiv"
	.size	.L.str2752382, 12

	.type	.L.str2762383,@object   # @.str2762383
.L.str2762383:
	.asciz	"indvars.iv.next"
	.size	.L.str2762383, 16

	.type	.L.str2772384,@object   # @.str2772384
.L.str2772384:
	.asciz	"phi"
	.size	.L.str2772384, 4

	.type	.L.str2782385,@object   # @.str2782385
.L.str2782385:
	.asciz	"lftr.wideiv"
	.size	.L.str2782385, 12

	.type	.L.str2792386,@object   # @.str2792386
.L.str2792386:
	.asciz	"phi"
	.size	.L.str2792386, 4

	.type	.L.str2802387,@object   # @.str2802387
.L.str2802387:
	.asciz	"euclid_dist_2"
	.size	.L.str2802387, 14

	.type	.L.str2812388,@object   # @.str2812388
.L.str2812388:
	.asciz	".lr.ph"
	.size	.L.str2812388, 7

	.type	.L.str2822389,@object   # @.str2822389
.L.str2822389:
	.asciz	"exitcond"
	.size	.L.str2822389, 9

	.type	.L.str2832390,@object   # @.str2832390
.L.str2832390:
	.asciz	"numdims"
	.size	.L.str2832390, 8

	.type	.L.str2842391,@object   # @.str2842391
.L.str2842391:
	.asciz	"phi"
	.size	.L.str2842391, 4

	.type	.L.str2852392,@object   # @.str2852392
.L.str2852392:
	.asciz	"lftr.wideiv"
	.size	.L.str2852392, 12

	.type	.L.str2862393,@object   # @.str2862393
.L.str2862393:
	.asciz	"phi"
	.size	.L.str2862393, 4

	.type	.L.str2872394,@object   # @.str2872394
.L.str2872394:
	.asciz	"exitcond"
	.size	.L.str2872394, 9

	.type	.L.str2882395,@object   # @.str2882395
.L.str2882395:
	.asciz	"phi"
	.size	.L.str2882395, 4

	.type	.L.str2892396,@object   # @.str2892396
.L.str2892396:
	.asciz	"euclid_dist_2"
	.size	.L.str2892396, 14

	.type	.L.str2902397,@object   # @.str2902397
.L.str2902397:
	.asciz	".lr.ph"
	.size	.L.str2902397, 7

	.type	.L.str2912398,@object   # @.str2912398
.L.str2912398:
	.asciz	".lr.ph-1"
	.size	.L.str2912398, 9

	.type	.L.str2922399,@object   # @.str2922399
.L.str2922399:
	.asciz	"._crit_edge"
	.size	.L.str2922399, 12

	.type	.L.str2932400,@object   # @.str2932400
.L.str2932400:
	.asciz	"phi"
	.size	.L.str2932400, 4

	.type	.L.str2942401,@object   # @.str2942401
.L.str2942401:
	.asciz	".lr.ph"
	.size	.L.str2942401, 7

	.type	.L.str2952402,@object   # @.str2952402
.L.str2952402:
	.asciz	"phi"
	.size	.L.str2952402, 4

	.type	.L.str2962403,@object   # @.str2962403
.L.str2962403:
	.asciz	"exitcond"
	.size	.L.str2962403, 9

	.type	.L.str2972404,@object   # @.str2972404
.L.str2972404:
	.asciz	"phi"
	.size	.L.str2972404, 4

	.type	.L.str2982405,@object   # @.str2982405
.L.str2982405:
	.asciz	"euclid_dist_2"
	.size	.L.str2982405, 14

	.type	.L.str2992406,@object   # @.str2992406
.L.str2992406:
	.asciz	"._crit_edge"
	.size	.L.str2992406, 12

	.type	.L.str3002407,@object   # @.str3002407
.L.str3002407:
	.asciz	"ans.0.lcssa"
	.size	.L.str3002407, 12

	.type	.L.str3012408,@object   # @.str3012408
.L.str3012408:
	.asciz	"8"
	.size	.L.str3012408, 2

	.type	.L.str3022409,@object   # @.str3022409
.L.str3022409:
	.asciz	".lr.ph"
	.size	.L.str3022409, 7

	.type	.L.str3032410,@object   # @.str3032410
.L.str3032410:
	.zero	1
	.size	.L.str3032410, 1

	.type	.L.str3042411,@object   # @.str3042411
.L.str3042411:
	.asciz	"0"
	.size	.L.str3042411, 2

	.type	.L.str3052412,@object   # @.str3052412
.L.str3052412:
	.asciz	"ans.0.lcssa"
	.size	.L.str3052412, 12

	.type	.L.str3062413,@object   # @.str3062413
.L.str3062413:
	.asciz	"phi"
	.size	.L.str3062413, 4

	.type	.L.str3072414,@object   # @.str3072414
.L.str3072414:
	.asciz	"euclid_dist_2"
	.size	.L.str3072414, 14

	.type	.L.str3082415,@object   # @.str3082415
.L.str3082415:
	.asciz	"._crit_edge"
	.size	.L.str3082415, 12

	.type	.L.str3092416,@object   # @.str3092416
.L.str3092416:
	.asciz	"._crit_edge-0"
	.size	.L.str3092416, 14

	.type	.L.str3102417,@object   # @.str3102417
.L.str3102417:
	.asciz	"ans.0.lcssa"
	.size	.L.str3102417, 12

	.type	.L.str3112418,@object   # @.str3112418
.L.str3112418:
	.asciz	"phi"
	.size	.L.str3112418, 4

	.type	.L.str3122419,@object   # @.str3122419
	.align	16
.L.str3122419:
	.asciz	"kmeans_clustering"
	.size	.L.str3122419, 18

	.type	.L.str3132420,@object   # @.str3132420
.L.str3132420:
	.asciz	"0"
	.size	.L.str3132420, 2

	.type	.L.str3142421,@object   # @.str3142421
.L.str3142421:
	.asciz	"membership43"
	.size	.L.str3142421, 13

	.type	.L.str3152422,@object   # @.str3152422
.L.str3152422:
	.asciz	"membership"
	.size	.L.str3152422, 11

	.type	.L.str3162423,@object   # @.str3162423
.L.str3162423:
	.asciz	"phi"
	.size	.L.str3162423, 4

	.type	.L.str3172424,@object   # @.str3172424
.L.str3172424:
	.asciz	"membership43"
	.size	.L.str3172424, 13

	.type	.L.str3182425,@object   # @.str3182425
.L.str3182425:
	.asciz	"phi"
	.size	.L.str3182425, 4

	.type	.L.str3192426,@object   # @.str3192426
	.align	16
.L.str3192426:
	.asciz	"kmeans_clustering"
	.size	.L.str3192426, 18

	.type	.L.str3202427,@object   # @.str3202427
.L.str3202427:
	.asciz	"0"
	.size	.L.str3202427, 2

	.type	.L.str3212428,@object   # @.str3212428
.L.str3212428:
	.asciz	"1"
	.size	.L.str3212428, 2

	.type	.L.str3222429,@object   # @.str3222429
.L.str3222429:
	.asciz	"fopen"
	.size	.L.str3222429, 6

	.type	.L.str3232430,@object   # @.str3232430
.L.str3232430:
	.asciz	"phi"
	.size	.L.str3232430, 4

	.type	.L.str3242431,@object   # @.str3242431
.L.str3242431:
	.zero	1
	.size	.L.str3242431, 1

	.type	.L.str3252432,@object   # @.str3252432
.L.str3252432:
	.asciz	"phi"
	.size	.L.str3252432, 4

	.type	.L.str3262433,@object   # @.str3262433
.L.str3262433:
	.zero	1
	.size	.L.str3262433, 1

	.type	.L.str3272434,@object   # @.str3272434
.L.str3272434:
	.asciz	"phi"
	.size	.L.str3272434, 4

	.type	.L.str3282435,@object   # @.str3282435
.L.str3282435:
	.zero	1
	.size	.L.str3282435, 1

	.type	.L.str3292436,@object   # @.str3292436
.L.str3292436:
	.asciz	"phi"
	.size	.L.str3292436, 4

	.type	.L.str3302437,@object   # @.str3302437
.L.str3302437:
	.zero	1
	.size	.L.str3302437, 1

	.type	.L.str3312438,@object   # @.str3312438
.L.str3312438:
	.asciz	"phi"
	.size	.L.str3312438, 4

	.type	.L.str3322439,@object   # @.str3322439
.L.str3322439:
	.asciz	"1"
	.size	.L.str3322439, 2

	.type	.L.str3332440,@object   # @.str3332440
.L.str3332440:
	.asciz	"phi"
	.size	.L.str3332440, 4

	.type	.L.str3342441,@object   # @.str3342441
	.align	16
.L.str3342441:
	.asciz	"kmeans_clustering"
	.size	.L.str3342441, 18

	.type	.L.str3352442,@object   # @.str3352442
.L.str3352442:
	.asciz	"0"
	.size	.L.str3352442, 2

	.type	.L.str3362443,@object   # @.str3362443
.L.str3362443:
	.asciz	"2"
	.size	.L.str3362443, 2

	.type	.L.str3372444,@object   # @.str3372444
.L.str3372444:
	.asciz	"fprintf"
	.size	.L.str3372444, 8

	.type	.L.str3382445,@object   # @.str3382445
.L.str3382445:
	.asciz	"phi"
	.size	.L.str3382445, 4

	.type	.L.str3392446,@object   # @.str3392446
.L.str3392446:
	.asciz	"1"
	.size	.L.str3392446, 2

	.type	.L.str3402447,@object   # @.str3402447
.L.str3402447:
	.asciz	"phi"
	.size	.L.str3402447, 4

	.type	.L.str3412448,@object   # @.str3412448
.L.str3412448:
	.zero	1
	.size	.L.str3412448, 1

	.type	.L.str3422449,@object   # @.str3422449
.L.str3422449:
	.asciz	"phi"
	.size	.L.str3422449, 4

	.type	.L.str3432450,@object   # @.str3432450
.L.str3432450:
	.zero	1
	.size	.L.str3432450, 1

	.type	.L.str3442451,@object   # @.str3442451
.L.str3442451:
	.asciz	"phi"
	.size	.L.str3442451, 4

	.type	.L.str3452452,@object   # @.str3452452
.L.str3452452:
	.zero	1
	.size	.L.str3452452, 1

	.type	.L.str3462453,@object   # @.str3462453
.L.str3462453:
	.asciz	"phi"
	.size	.L.str3462453, 4

	.type	.L.str3472454,@object   # @.str3472454
.L.str3472454:
	.asciz	"2"
	.size	.L.str3472454, 2

	.type	.L.str3482455,@object   # @.str3482455
.L.str3482455:
	.asciz	"phi"
	.size	.L.str3482455, 4

	.type	.L.str3492456,@object   # @.str3492456
	.align	16
.L.str3492456:
	.asciz	"kmeans_clustering"
	.size	.L.str3492456, 18

	.type	.L.str3502457,@object   # @.str3502457
.L.str3502457:
	.asciz	"0"
	.size	.L.str3502457, 2

	.type	.L.str3512458,@object   # @.str3512458
.L.str3512458:
	.asciz	"3"
	.size	.L.str3512458, 2

	.type	.L.str3522459,@object   # @.str3522459
.L.str3522459:
	.asciz	"fclose"
	.size	.L.str3522459, 7

	.type	.L.str3532460,@object   # @.str3532460
.L.str3532460:
	.asciz	"phi"
	.size	.L.str3532460, 4

	.type	.L.str3542461,@object   # @.str3542461
.L.str3542461:
	.asciz	"1"
	.size	.L.str3542461, 2

	.type	.L.str3552462,@object   # @.str3552462
.L.str3552462:
	.asciz	"phi"
	.size	.L.str3552462, 4

	.type	.L.str3562463,@object   # @.str3562463
.L.str3562463:
	.zero	1
	.size	.L.str3562463, 1

	.type	.L.str3572464,@object   # @.str3572464
.L.str3572464:
	.asciz	"phi"
	.size	.L.str3572464, 4

	.type	.L.str3582465,@object   # @.str3582465
.L.str3582465:
	.asciz	"3"
	.size	.L.str3582465, 2

	.type	.L.str3592466,@object   # @.str3592466
.L.str3592466:
	.asciz	"phi"
	.size	.L.str3592466, 4

	.type	.L.str3602467,@object   # @.str3602467
	.align	16
.L.str3602467:
	.asciz	"kmeans_clustering"
	.size	.L.str3602467, 18

	.type	.L.str3612468,@object   # @.str3612468
.L.str3612468:
	.asciz	"0"
	.size	.L.str3612468, 2

	.type	.L.str3622469,@object   # @.str3622469
.L.str3622469:
	.asciz	"4"
	.size	.L.str3622469, 2

	.type	.L.str3632470,@object   # @.str3632470
.L.str3632470:
	.asciz	"nclusters"
	.size	.L.str3632470, 10

	.type	.L.str3642471,@object   # @.str3642471
.L.str3642471:
	.asciz	"phi"
	.size	.L.str3642471, 4

	.type	.L.str3652472,@object   # @.str3652472
.L.str3652472:
	.asciz	"4"
	.size	.L.str3652472, 2

	.type	.L.str3662473,@object   # @.str3662473
.L.str3662473:
	.asciz	"phi"
	.size	.L.str3662473, 4

	.type	.L.str3672474,@object   # @.str3672474
	.align	16
.L.str3672474:
	.asciz	"kmeans_clustering"
	.size	.L.str3672474, 18

	.type	.L.str3682475,@object   # @.str3682475
.L.str3682475:
	.asciz	"0"
	.size	.L.str3682475, 2

	.type	.L.str3692476,@object   # @.str3692476
.L.str3692476:
	.asciz	"5"
	.size	.L.str3692476, 2

	.type	.L.str3702477,@object   # @.str3702477
.L.str3702477:
	.zero	1
	.size	.L.str3702477, 1

	.type	.L.str3712478,@object   # @.str3712478
.L.str3712478:
	.asciz	"phi"
	.size	.L.str3712478, 4

	.type	.L.str3722479,@object   # @.str3722479
.L.str3722479:
	.asciz	"4"
	.size	.L.str3722479, 2

	.type	.L.str3732480,@object   # @.str3732480
.L.str3732480:
	.asciz	"phi"
	.size	.L.str3732480, 4

	.type	.L.str3742481,@object   # @.str3742481
.L.str3742481:
	.asciz	"5"
	.size	.L.str3742481, 2

	.type	.L.str3752482,@object   # @.str3752482
.L.str3752482:
	.asciz	"phi"
	.size	.L.str3752482, 4

	.type	.L.str3762483,@object   # @.str3762483
	.align	16
.L.str3762483:
	.asciz	"kmeans_clustering"
	.size	.L.str3762483, 18

	.type	.L.str3772484,@object   # @.str3772484
.L.str3772484:
	.asciz	"0"
	.size	.L.str3772484, 2

	.type	.L.str3782485,@object   # @.str3782485
.L.str3782485:
	.asciz	"6"
	.size	.L.str3782485, 2

	.type	.L.str3792486,@object   # @.str3792486
.L.str3792486:
	.asciz	"malloc"
	.size	.L.str3792486, 7

	.type	.L.str3802487,@object   # @.str3802487
.L.str3802487:
	.asciz	"phi"
	.size	.L.str3802487, 4

	.type	.L.str3812488,@object   # @.str3812488
.L.str3812488:
	.asciz	"5"
	.size	.L.str3812488, 2

	.type	.L.str3822489,@object   # @.str3822489
.L.str3822489:
	.asciz	"phi"
	.size	.L.str3822489, 4

	.type	.L.str3832490,@object   # @.str3832490
.L.str3832490:
	.zero	1
	.size	.L.str3832490, 1

	.type	.L.str3842491,@object   # @.str3842491
.L.str3842491:
	.asciz	"phi"
	.size	.L.str3842491, 4

	.type	.L.str3852492,@object   # @.str3852492
.L.str3852492:
	.asciz	"6"
	.size	.L.str3852492, 2

	.type	.L.str3862493,@object   # @.str3862493
.L.str3862493:
	.asciz	"phi"
	.size	.L.str3862493, 4

	.type	.L.str3872494,@object   # @.str3872494
	.align	16
.L.str3872494:
	.asciz	"kmeans_clustering"
	.size	.L.str3872494, 18

	.type	.L.str3882495,@object   # @.str3882495
.L.str3882495:
	.asciz	"0"
	.size	.L.str3882495, 2

	.type	.L.str3892496,@object   # @.str3892496
.L.str3892496:
	.asciz	"7"
	.size	.L.str3892496, 2

	.type	.L.str3902497,@object   # @.str3902497
.L.str3902497:
	.asciz	"6"
	.size	.L.str3902497, 2

	.type	.L.str3912498,@object   # @.str3912498
.L.str3912498:
	.asciz	"phi"
	.size	.L.str3912498, 4

	.type	.L.str3922499,@object   # @.str3922499
.L.str3922499:
	.asciz	"7"
	.size	.L.str3922499, 2

	.type	.L.str3932500,@object   # @.str3932500
.L.str3932500:
	.asciz	"phi"
	.size	.L.str3932500, 4

	.type	.L.str3942501,@object   # @.str3942501
	.align	16
.L.str3942501:
	.asciz	"kmeans_clustering"
	.size	.L.str3942501, 18

	.type	.L.str3952502,@object   # @.str3952502
.L.str3952502:
	.asciz	"0"
	.size	.L.str3952502, 2

	.type	.L.str3962503,@object   # @.str3962503
.L.str3962503:
	.asciz	"8"
	.size	.L.str3962503, 2

	.type	.L.str3972504,@object   # @.str3972504
.L.str3972504:
	.asciz	"nfeatures"
	.size	.L.str3972504, 10

	.type	.L.str3982505,@object   # @.str3982505
.L.str3982505:
	.asciz	"phi"
	.size	.L.str3982505, 4

	.type	.L.str3992506,@object   # @.str3992506
.L.str3992506:
	.asciz	"nclusters"
	.size	.L.str3992506, 10

	.type	.L.str4002507,@object   # @.str4002507
.L.str4002507:
	.asciz	"phi"
	.size	.L.str4002507, 4

	.type	.L.str4012508,@object   # @.str4012508
.L.str4012508:
	.asciz	"8"
	.size	.L.str4012508, 2

	.type	.L.str4022509,@object   # @.str4022509
.L.str4022509:
	.asciz	"phi"
	.size	.L.str4022509, 4

	.type	.L.str4032510,@object   # @.str4032510
	.align	16
.L.str4032510:
	.asciz	"kmeans_clustering"
	.size	.L.str4032510, 18

	.type	.L.str4042511,@object   # @.str4042511
.L.str4042511:
	.asciz	"0"
	.size	.L.str4042511, 2

	.type	.L.str4052512,@object   # @.str4052512
.L.str4052512:
	.asciz	"9"
	.size	.L.str4052512, 2

	.type	.L.str4062513,@object   # @.str4062513
.L.str4062513:
	.asciz	"8"
	.size	.L.str4062513, 2

	.type	.L.str4072514,@object   # @.str4072514
.L.str4072514:
	.asciz	"phi"
	.size	.L.str4072514, 4

	.type	.L.str4082515,@object   # @.str4082515
.L.str4082515:
	.asciz	"9"
	.size	.L.str4082515, 2

	.type	.L.str4092516,@object   # @.str4092516
.L.str4092516:
	.asciz	"phi"
	.size	.L.str4092516, 4

	.type	.L.str4102517,@object   # @.str4102517
	.align	16
.L.str4102517:
	.asciz	"kmeans_clustering"
	.size	.L.str4102517, 18

	.type	.L.str4112518,@object   # @.str4112518
.L.str4112518:
	.asciz	"0"
	.size	.L.str4112518, 2

	.type	.L.str4122519,@object   # @.str4122519
.L.str4122519:
	.asciz	"10"
	.size	.L.str4122519, 3

	.type	.L.str4132520,@object   # @.str4132520
.L.str4132520:
	.zero	1
	.size	.L.str4132520, 1

	.type	.L.str4142521,@object   # @.str4142521
.L.str4142521:
	.asciz	"phi"
	.size	.L.str4142521, 4

	.type	.L.str4152522,@object   # @.str4152522
.L.str4152522:
	.asciz	"9"
	.size	.L.str4152522, 2

	.type	.L.str4162523,@object   # @.str4162523
.L.str4162523:
	.asciz	"phi"
	.size	.L.str4162523, 4

	.type	.L.str4172524,@object   # @.str4172524
.L.str4172524:
	.asciz	"10"
	.size	.L.str4172524, 3

	.type	.L.str4182525,@object   # @.str4182525
.L.str4182525:
	.asciz	"phi"
	.size	.L.str4182525, 4

	.type	.L.str4192526,@object   # @.str4192526
	.align	16
.L.str4192526:
	.asciz	"kmeans_clustering"
	.size	.L.str4192526, 18

	.type	.L.str4202527,@object   # @.str4202527
.L.str4202527:
	.asciz	"0"
	.size	.L.str4202527, 2

	.type	.L.str4212528,@object   # @.str4212528
.L.str4212528:
	.asciz	"11"
	.size	.L.str4212528, 3

	.type	.L.str4222529,@object   # @.str4222529
.L.str4222529:
	.asciz	"malloc"
	.size	.L.str4222529, 7

	.type	.L.str4232530,@object   # @.str4232530
.L.str4232530:
	.asciz	"phi"
	.size	.L.str4232530, 4

	.type	.L.str4242531,@object   # @.str4242531
.L.str4242531:
	.asciz	"10"
	.size	.L.str4242531, 3

	.type	.L.str4252532,@object   # @.str4252532
.L.str4252532:
	.asciz	"phi"
	.size	.L.str4252532, 4

	.type	.L.str4262533,@object   # @.str4262533
.L.str4262533:
	.zero	1
	.size	.L.str4262533, 1

	.type	.L.str4272534,@object   # @.str4272534
.L.str4272534:
	.asciz	"phi"
	.size	.L.str4272534, 4

	.type	.L.str4282535,@object   # @.str4282535
.L.str4282535:
	.asciz	"11"
	.size	.L.str4282535, 3

	.type	.L.str4292536,@object   # @.str4292536
.L.str4292536:
	.asciz	"phi"
	.size	.L.str4292536, 4

	.type	.L.str4302537,@object   # @.str4302537
	.align	16
.L.str4302537:
	.asciz	"kmeans_clustering"
	.size	.L.str4302537, 18

	.type	.L.str4312538,@object   # @.str4312538
.L.str4312538:
	.asciz	"0"
	.size	.L.str4312538, 2

	.type	.L.str4322539,@object   # @.str4322539
.L.str4322539:
	.asciz	"12"
	.size	.L.str4322539, 3

	.type	.L.str4332540,@object   # @.str4332540
.L.str4332540:
	.asciz	"11"
	.size	.L.str4332540, 3

	.type	.L.str4342541,@object   # @.str4342541
.L.str4342541:
	.asciz	"phi"
	.size	.L.str4342541, 4

	.type	.L.str4352542,@object   # @.str4352542
.L.str4352542:
	.asciz	"12"
	.size	.L.str4352542, 3

	.type	.L.str4362543,@object   # @.str4362543
.L.str4362543:
	.asciz	"phi"
	.size	.L.str4362543, 4

	.type	.L.str4372544,@object   # @.str4372544
	.align	16
.L.str4372544:
	.asciz	"kmeans_clustering"
	.size	.L.str4372544, 18

	.type	.L.str4382545,@object   # @.str4382545
.L.str4382545:
	.asciz	"0"
	.size	.L.str4382545, 2

	.type	.L.str4392546,@object   # @.str4392546
.L.str4392546:
	.asciz	"0-10"
	.size	.L.str4392546, 5

	.type	.L.str4402547,@object   # @.str4402547
.L.str4402547:
	.asciz	"7"
	.size	.L.str4402547, 2

	.type	.L.str4412548,@object   # @.str4412548
.L.str4412548:
	.asciz	"phi"
	.size	.L.str4412548, 4

	.type	.L.str4422549,@object   # @.str4422549
.L.str4422549:
	.asciz	"12"
	.size	.L.str4422549, 3

	.type	.L.str4432550,@object   # @.str4432550
.L.str4432550:
	.asciz	"phi"
	.size	.L.str4432550, 4

	.type	.L.str4442551,@object   # @.str4442551
	.align	16
.L.str4442551:
	.asciz	"kmeans_clustering"
	.size	.L.str4442551, 18

	.type	.L.str4452552,@object   # @.str4452552
.L.str4452552:
	.asciz	"0"
	.size	.L.str4452552, 2

	.type	.L.str4462553,@object   # @.str4462553
.L.str4462553:
	.asciz	"13"
	.size	.L.str4462553, 3

	.type	.L.str4472554,@object   # @.str4472554
.L.str4472554:
	.zero	1
	.size	.L.str4472554, 1

	.type	.L.str4482555,@object   # @.str4482555
.L.str4482555:
	.asciz	"phi"
	.size	.L.str4482555, 4

	.type	.L.str4492556,@object   # @.str4492556
.L.str4492556:
	.asciz	"nclusters"
	.size	.L.str4492556, 10

	.type	.L.str4502557,@object   # @.str4502557
.L.str4502557:
	.asciz	"phi"
	.size	.L.str4502557, 4

	.type	.L.str4512558,@object   # @.str4512558
.L.str4512558:
	.asciz	"13"
	.size	.L.str4512558, 3

	.type	.L.str4522559,@object   # @.str4522559
.L.str4522559:
	.asciz	"phi"
	.size	.L.str4522559, 4

	.type	.L.str4532560,@object   # @.str4532560
	.align	16
.L.str4532560:
	.asciz	"kmeans_clustering"
	.size	.L.str4532560, 18

	.type	.L.str4542561,@object   # @.str4542561
.L.str4542561:
	.asciz	"0"
	.size	.L.str4542561, 2

	.type	.L.str4552562,@object   # @.str4552562
.L.str4552562:
	.asciz	"0-12"
	.size	.L.str4552562, 5

	.type	.L.str4562563,@object   # @.str4562563
.L.str4562563:
	.asciz	".lr.ph26"
	.size	.L.str4562563, 9

	.type	.L.str4572564,@object   # @.str4572564
.L.str4572564:
	.asciz	"phi"
	.size	.L.str4572564, 4

	.type	.L.str4582565,@object   # @.str4582565
.L.str4582565:
	.asciz	".preheader21"
	.size	.L.str4582565, 13

	.type	.L.str4592566,@object   # @.str4592566
.L.str4592566:
	.asciz	"phi"
	.size	.L.str4592566, 4

	.type	.L.str4602567,@object   # @.str4602567
.L.str4602567:
	.asciz	"13"
	.size	.L.str4602567, 3

	.type	.L.str4612568,@object   # @.str4612568
.L.str4612568:
	.asciz	"phi"
	.size	.L.str4612568, 4

	.type	.L.str4622569,@object   # @.str4622569
	.align	16
.L.str4622569:
	.asciz	"kmeans_clustering"
	.size	.L.str4622569, 18

	.type	.L.str4632570,@object   # @.str4632570
.L.str4632570:
	.asciz	".lr.ph26"
	.size	.L.str4632570, 9

	.type	.L.str4642571,@object   # @.str4642571
.L.str4642571:
	.asciz	"14"
	.size	.L.str4642571, 3

	.type	.L.str4652572,@object   # @.str4652572
.L.str4652572:
	.asciz	"nfeatures"
	.size	.L.str4652572, 10

	.type	.L.str4662573,@object   # @.str4662573
.L.str4662573:
	.asciz	"phi"
	.size	.L.str4662573, 4

	.type	.L.str4672574,@object   # @.str4672574
.L.str4672574:
	.asciz	"14"
	.size	.L.str4672574, 3

	.type	.L.str4682575,@object   # @.str4682575
.L.str4682575:
	.asciz	"phi"
	.size	.L.str4682575, 4

	.type	.L.str4692576,@object   # @.str4692576
	.align	16
.L.str4692576:
	.asciz	"kmeans_clustering"
	.size	.L.str4692576, 18

	.type	.L.str4702577,@object   # @.str4702577
.L.str4702577:
	.asciz	".lr.ph26"
	.size	.L.str4702577, 9

	.type	.L.str4712578,@object   # @.str4712578
.L.str4712578:
	.asciz	".lr.ph26-0"
	.size	.L.str4712578, 11

	.type	.L.str4722579,@object   # @.str4722579
.L.str4722579:
	.asciz	"17"
	.size	.L.str4722579, 3

	.type	.L.str4732580,@object   # @.str4732580
.L.str4732580:
	.asciz	"phi"
	.size	.L.str4732580, 4

	.type	.L.str4742581,@object   # @.str4742581
	.align	16
.L.str4742581:
	.asciz	"kmeans_clustering"
	.size	.L.str4742581, 18

	.type	.L.str4752582,@object   # @.str4752582
.L.str4752582:
	.asciz	".preheader21"
	.size	.L.str4752582, 13

	.type	.L.str4762583,@object   # @.str4762583
.L.str4762583:
	.asciz	"15"
	.size	.L.str4762583, 3

	.type	.L.str4772584,@object   # @.str4772584
.L.str4772584:
	.zero	1
	.size	.L.str4772584, 1

	.type	.L.str4782585,@object   # @.str4782585
.L.str4782585:
	.asciz	"phi"
	.size	.L.str4782585, 4

	.type	.L.str4792586,@object   # @.str4792586
.L.str4792586:
	.asciz	"nclusters"
	.size	.L.str4792586, 10

	.type	.L.str4802587,@object   # @.str4802587
.L.str4802587:
	.asciz	"phi"
	.size	.L.str4802587, 4

	.type	.L.str4812588,@object   # @.str4812588
.L.str4812588:
	.asciz	"15"
	.size	.L.str4812588, 3

	.type	.L.str4822589,@object   # @.str4822589
.L.str4822589:
	.asciz	"phi"
	.size	.L.str4822589, 4

	.type	.L.str4832590,@object   # @.str4832590
	.align	16
.L.str4832590:
	.asciz	"kmeans_clustering"
	.size	.L.str4832590, 18

	.type	.L.str4842591,@object   # @.str4842591
.L.str4842591:
	.asciz	".preheader21"
	.size	.L.str4842591, 13

	.type	.L.str4852592,@object   # @.str4852592
.L.str4852592:
	.asciz	".preheader21-0"
	.size	.L.str4852592, 15

	.type	.L.str4862593,@object   # @.str4862593
	.align	16
.L.str4862593:
	.asciz	".preheader17.lr.ph"
	.size	.L.str4862593, 19

	.type	.L.str4872594,@object   # @.str4872594
.L.str4872594:
	.asciz	"phi"
	.size	.L.str4872594, 4

	.type	.L.str4882595,@object   # @.str4882595
.L.str4882595:
	.asciz	".preheader13"
	.size	.L.str4882595, 13

	.type	.L.str4892596,@object   # @.str4892596
.L.str4892596:
	.asciz	"phi"
	.size	.L.str4892596, 4

	.type	.L.str4902597,@object   # @.str4902597
.L.str4902597:
	.asciz	"15"
	.size	.L.str4902597, 3

	.type	.L.str4912598,@object   # @.str4912598
.L.str4912598:
	.asciz	"phi"
	.size	.L.str4912598, 4

	.type	.L.str4922599,@object   # @.str4922599
	.align	16
.L.str4922599:
	.asciz	"kmeans_clustering"
	.size	.L.str4922599, 18

	.type	.L.str4932600,@object   # @.str4932600
	.align	16
.L.str4932600:
	.asciz	".preheader17.lr.ph"
	.size	.L.str4932600, 19

	.type	.L.str4942601,@object   # @.str4942601
.L.str4942601:
	.asciz	"16"
	.size	.L.str4942601, 3

	.type	.L.str4952602,@object   # @.str4952602
.L.str4952602:
	.zero	1
	.size	.L.str4952602, 1

	.type	.L.str4962603,@object   # @.str4962603
.L.str4962603:
	.asciz	"phi"
	.size	.L.str4962603, 4

	.type	.L.str4972604,@object   # @.str4972604
.L.str4972604:
	.asciz	"nfeatures"
	.size	.L.str4972604, 10

	.type	.L.str4982605,@object   # @.str4982605
.L.str4982605:
	.asciz	"phi"
	.size	.L.str4982605, 4

	.type	.L.str4992606,@object   # @.str4992606
.L.str4992606:
	.asciz	"16"
	.size	.L.str4992606, 3

	.type	.L.str5002607,@object   # @.str5002607
.L.str5002607:
	.asciz	"phi"
	.size	.L.str5002607, 4

	.type	.L.str5012608,@object   # @.str5012608
	.align	16
.L.str5012608:
	.asciz	"kmeans_clustering"
	.size	.L.str5012608, 18

	.type	.L.str5022609,@object   # @.str5022609
	.align	16
.L.str5022609:
	.asciz	".preheader17.lr.ph"
	.size	.L.str5022609, 19

	.type	.L.str5032610,@object   # @.str5032610
	.align	16
.L.str5032610:
	.asciz	".preheader17.lr.ph-0"
	.size	.L.str5032610, 21

	.type	.L.str5042611,@object   # @.str5042611
.L.str5042611:
	.asciz	".preheader17"
	.size	.L.str5042611, 13

	.type	.L.str5052612,@object   # @.str5052612
.L.str5052612:
	.asciz	"phi"
	.size	.L.str5052612, 4

	.type	.L.str5062613,@object   # @.str5062613
	.align	16
.L.str5062613:
	.asciz	"kmeans_clustering"
	.size	.L.str5062613, 18

	.type	.L.str5072614,@object   # @.str5072614
.L.str5072614:
	.asciz	"17"
	.size	.L.str5072614, 3

	.type	.L.str5082615,@object   # @.str5082615
.L.str5082615:
	.asciz	"indvars.iv52"
	.size	.L.str5082615, 13

	.type	.L.str5092616,@object   # @.str5092616
	.align	16
.L.str5092616:
	.asciz	"indvars.iv.next53"
	.size	.L.str5092616, 18

	.type	.L.str5102617,@object   # @.str5102617
.L.str5102617:
	.asciz	"17"
	.size	.L.str5102617, 3

	.type	.L.str5112618,@object   # @.str5112618
.L.str5112618:
	.zero	1
	.size	.L.str5112618, 1

	.type	.L.str5122619,@object   # @.str5122619
.L.str5122619:
	.asciz	".lr.ph26"
	.size	.L.str5122619, 9

	.type	.L.str5132620,@object   # @.str5132620
.L.str5132620:
	.asciz	"indvars.iv52"
	.size	.L.str5132620, 13

	.type	.L.str5142621,@object   # @.str5142621
.L.str5142621:
	.asciz	"phi"
	.size	.L.str5142621, 4

	.type	.L.str5152622,@object   # @.str5152622
	.align	16
.L.str5152622:
	.asciz	"kmeans_clustering"
	.size	.L.str5152622, 18

	.type	.L.str5162623,@object   # @.str5162623
.L.str5162623:
	.asciz	"17"
	.size	.L.str5162623, 3

	.type	.L.str5172624,@object   # @.str5172624
.L.str5172624:
	.asciz	"18"
	.size	.L.str5172624, 3

	.type	.L.str5182625,@object   # @.str5182625
.L.str5182625:
	.zero	1
	.size	.L.str5182625, 1

	.type	.L.str5192626,@object   # @.str5192626
.L.str5192626:
	.asciz	"phi"
	.size	.L.str5192626, 4

	.type	.L.str5202627,@object   # @.str5202627
.L.str5202627:
	.asciz	"indvars.iv52"
	.size	.L.str5202627, 13

	.type	.L.str5212628,@object   # @.str5212628
.L.str5212628:
	.asciz	"phi"
	.size	.L.str5212628, 4

	.type	.L.str5222629,@object   # @.str5222629
.L.str5222629:
	.asciz	"18"
	.size	.L.str5222629, 3

	.type	.L.str5232630,@object   # @.str5232630
.L.str5232630:
	.asciz	"phi"
	.size	.L.str5232630, 4

	.type	.L.str5242631,@object   # @.str5242631
	.align	16
.L.str5242631:
	.asciz	"kmeans_clustering"
	.size	.L.str5242631, 18

	.type	.L.str5252632,@object   # @.str5252632
.L.str5252632:
	.asciz	"17"
	.size	.L.str5252632, 3

	.type	.L.str5262633,@object   # @.str5262633
.L.str5262633:
	.asciz	"19"
	.size	.L.str5262633, 3

	.type	.L.str5272634,@object   # @.str5272634
.L.str5272634:
	.asciz	"18"
	.size	.L.str5272634, 3

	.type	.L.str5282635,@object   # @.str5282635
.L.str5282635:
	.asciz	"phi"
	.size	.L.str5282635, 4

	.type	.L.str5292636,@object   # @.str5292636
.L.str5292636:
	.asciz	"7"
	.size	.L.str5292636, 2

	.type	.L.str5302637,@object   # @.str5302637
.L.str5302637:
	.asciz	"phi"
	.size	.L.str5302637, 4

	.type	.L.str5312638,@object   # @.str5312638
.L.str5312638:
	.asciz	"19"
	.size	.L.str5312638, 3

	.type	.L.str5322639,@object   # @.str5322639
.L.str5322639:
	.asciz	"phi"
	.size	.L.str5322639, 4

	.type	.L.str5332640,@object   # @.str5332640
	.align	16
.L.str5332640:
	.asciz	"kmeans_clustering"
	.size	.L.str5332640, 18

	.type	.L.str5342641,@object   # @.str5342641
.L.str5342641:
	.asciz	"17"
	.size	.L.str5342641, 3

	.type	.L.str5352642,@object   # @.str5352642
.L.str5352642:
	.asciz	"20"
	.size	.L.str5352642, 3

	.type	.L.str5362643,@object   # @.str5362643
.L.str5362643:
	.asciz	"19"
	.size	.L.str5362643, 3

	.type	.L.str5372644,@object   # @.str5372644
.L.str5372644:
	.asciz	"phi"
	.size	.L.str5372644, 4

	.type	.L.str5382645,@object   # @.str5382645
.L.str5382645:
	.asciz	"20"
	.size	.L.str5382645, 3

	.type	.L.str5392646,@object   # @.str5392646
.L.str5392646:
	.asciz	"phi"
	.size	.L.str5392646, 4

	.type	.L.str5402647,@object   # @.str5402647
	.align	16
.L.str5402647:
	.asciz	"kmeans_clustering"
	.size	.L.str5402647, 18

	.type	.L.str5412648,@object   # @.str5412648
.L.str5412648:
	.asciz	"17"
	.size	.L.str5412648, 3

	.type	.L.str5422649,@object   # @.str5422649
.L.str5422649:
	.asciz	"21"
	.size	.L.str5422649, 3

	.type	.L.str5432650,@object   # @.str5432650
.L.str5432650:
	.asciz	"14"
	.size	.L.str5432650, 3

	.type	.L.str5442651,@object   # @.str5442651
.L.str5442651:
	.asciz	"phi"
	.size	.L.str5442651, 4

	.type	.L.str5452652,@object   # @.str5452652
.L.str5452652:
	.asciz	"20"
	.size	.L.str5452652, 3

	.type	.L.str5462653,@object   # @.str5462653
.L.str5462653:
	.asciz	"phi"
	.size	.L.str5462653, 4

	.type	.L.str5472654,@object   # @.str5472654
.L.str5472654:
	.asciz	"21"
	.size	.L.str5472654, 3

	.type	.L.str5482655,@object   # @.str5482655
.L.str5482655:
	.asciz	"phi"
	.size	.L.str5482655, 4

	.type	.L.str5492656,@object   # @.str5492656
	.align	16
.L.str5492656:
	.asciz	"kmeans_clustering"
	.size	.L.str5492656, 18

	.type	.L.str5502657,@object   # @.str5502657
.L.str5502657:
	.asciz	"17"
	.size	.L.str5502657, 3

	.type	.L.str5512658,@object   # @.str5512658
.L.str5512658:
	.asciz	"22"
	.size	.L.str5512658, 3

	.type	.L.str5522659,@object   # @.str5522659
.L.str5522659:
	.asciz	"indvars.iv52"
	.size	.L.str5522659, 13

	.type	.L.str5532660,@object   # @.str5532660
.L.str5532660:
	.asciz	"phi"
	.size	.L.str5532660, 4

	.type	.L.str5542661,@object   # @.str5542661
.L.str5542661:
	.asciz	"7"
	.size	.L.str5542661, 2

	.type	.L.str5552662,@object   # @.str5552662
.L.str5552662:
	.asciz	"phi"
	.size	.L.str5552662, 4

	.type	.L.str5562663,@object   # @.str5562663
.L.str5562663:
	.asciz	"22"
	.size	.L.str5562663, 3

	.type	.L.str5572664,@object   # @.str5572664
.L.str5572664:
	.asciz	"phi"
	.size	.L.str5572664, 4

	.type	.L.str5582665,@object   # @.str5582665
	.align	16
.L.str5582665:
	.asciz	"kmeans_clustering"
	.size	.L.str5582665, 18

	.type	.L.str5592666,@object   # @.str5592666
.L.str5592666:
	.asciz	"17"
	.size	.L.str5592666, 3

	.type	.L.str5602667,@object   # @.str5602667
.L.str5602667:
	.asciz	"17-0"
	.size	.L.str5602667, 5

	.type	.L.str5612668,@object   # @.str5612668
.L.str5612668:
	.asciz	"22"
	.size	.L.str5612668, 3

	.type	.L.str5622669,@object   # @.str5622669
.L.str5622669:
	.asciz	"phi"
	.size	.L.str5622669, 4

	.type	.L.str5632670,@object   # @.str5632670
.L.str5632670:
	.asciz	"21"
	.size	.L.str5632670, 3

	.type	.L.str5642671,@object   # @.str5642671
.L.str5642671:
	.asciz	"phi"
	.size	.L.str5642671, 4

	.type	.L.str5652672,@object   # @.str5652672
	.align	16
.L.str5652672:
	.asciz	"kmeans_clustering"
	.size	.L.str5652672, 18

	.type	.L.str5662673,@object   # @.str5662673
.L.str5662673:
	.asciz	"17"
	.size	.L.str5662673, 3

	.type	.L.str5672674,@object   # @.str5672674
	.align	16
.L.str5672674:
	.asciz	"indvars.iv.next53"
	.size	.L.str5672674, 18

	.type	.L.str5682675,@object   # @.str5682675
.L.str5682675:
	.zero	1
	.size	.L.str5682675, 1

	.type	.L.str5692676,@object   # @.str5692676
.L.str5692676:
	.asciz	"phi"
	.size	.L.str5692676, 4

	.type	.L.str5702677,@object   # @.str5702677
.L.str5702677:
	.asciz	"indvars.iv52"
	.size	.L.str5702677, 13

	.type	.L.str5712678,@object   # @.str5712678
.L.str5712678:
	.asciz	"phi"
	.size	.L.str5712678, 4

	.type	.L.str5722679,@object   # @.str5722679
	.align	16
.L.str5722679:
	.asciz	"indvars.iv.next53"
	.size	.L.str5722679, 18

	.type	.L.str5732680,@object   # @.str5732680
.L.str5732680:
	.asciz	"phi"
	.size	.L.str5732680, 4

	.type	.L.str5742681,@object   # @.str5742681
	.align	16
.L.str5742681:
	.asciz	"kmeans_clustering"
	.size	.L.str5742681, 18

	.type	.L.str5752682,@object   # @.str5752682
.L.str5752682:
	.asciz	"17"
	.size	.L.str5752682, 3

	.type	.L.str5762683,@object   # @.str5762683
.L.str5762683:
	.asciz	"lftr.wideiv54"
	.size	.L.str5762683, 14

	.type	.L.str5772684,@object   # @.str5772684
	.align	16
.L.str5772684:
	.asciz	"indvars.iv.next53"
	.size	.L.str5772684, 18

	.type	.L.str5782685,@object   # @.str5782685
.L.str5782685:
	.asciz	"phi"
	.size	.L.str5782685, 4

	.type	.L.str5792686,@object   # @.str5792686
.L.str5792686:
	.asciz	"lftr.wideiv54"
	.size	.L.str5792686, 14

	.type	.L.str5802687,@object   # @.str5802687
.L.str5802687:
	.asciz	"phi"
	.size	.L.str5802687, 4

	.type	.L.str5812688,@object   # @.str5812688
	.align	16
.L.str5812688:
	.asciz	"kmeans_clustering"
	.size	.L.str5812688, 18

	.type	.L.str5822689,@object   # @.str5822689
.L.str5822689:
	.asciz	"17"
	.size	.L.str5822689, 3

	.type	.L.str5832690,@object   # @.str5832690
.L.str5832690:
	.asciz	"exitcond55"
	.size	.L.str5832690, 11

	.type	.L.str5842691,@object   # @.str5842691
.L.str5842691:
	.asciz	"nclusters"
	.size	.L.str5842691, 10

	.type	.L.str5852692,@object   # @.str5852692
.L.str5852692:
	.asciz	"phi"
	.size	.L.str5852692, 4

	.type	.L.str5862693,@object   # @.str5862693
.L.str5862693:
	.asciz	"lftr.wideiv54"
	.size	.L.str5862693, 14

	.type	.L.str5872694,@object   # @.str5872694
.L.str5872694:
	.asciz	"phi"
	.size	.L.str5872694, 4

	.type	.L.str5882695,@object   # @.str5882695
.L.str5882695:
	.asciz	"exitcond55"
	.size	.L.str5882695, 11

	.type	.L.str5892696,@object   # @.str5892696
.L.str5892696:
	.asciz	"phi"
	.size	.L.str5892696, 4

	.type	.L.str5902697,@object   # @.str5902697
	.align	16
.L.str5902697:
	.asciz	"kmeans_clustering"
	.size	.L.str5902697, 18

	.type	.L.str5912698,@object   # @.str5912698
.L.str5912698:
	.asciz	"17"
	.size	.L.str5912698, 3

	.type	.L.str5922699,@object   # @.str5922699
.L.str5922699:
	.asciz	"17-1"
	.size	.L.str5922699, 5

	.type	.L.str5932700,@object   # @.str5932700
.L.str5932700:
	.asciz	".preheader21"
	.size	.L.str5932700, 13

	.type	.L.str5942701,@object   # @.str5942701
.L.str5942701:
	.asciz	"phi"
	.size	.L.str5942701, 4

	.type	.L.str5952702,@object   # @.str5952702
.L.str5952702:
	.asciz	"17"
	.size	.L.str5952702, 3

	.type	.L.str5962703,@object   # @.str5962703
.L.str5962703:
	.asciz	"phi"
	.size	.L.str5962703, 4

	.type	.L.str5972704,@object   # @.str5972704
.L.str5972704:
	.asciz	"exitcond55"
	.size	.L.str5972704, 11

	.type	.L.str5982705,@object   # @.str5982705
.L.str5982705:
	.asciz	"phi"
	.size	.L.str5982705, 4

	.type	.L.str5992706,@object   # @.str5992706
	.align	16
.L.str5992706:
	.asciz	"kmeans_clustering"
	.size	.L.str5992706, 18

	.type	.L.str6002707,@object   # @.str6002707
.L.str6002707:
	.asciz	".preheader17"
	.size	.L.str6002707, 13

	.type	.L.str6012708,@object   # @.str6012708
.L.str6012708:
	.asciz	"indvars.iv48"
	.size	.L.str6012708, 13

	.type	.L.str6022709,@object   # @.str6022709
	.align	16
.L.str6022709:
	.asciz	"indvars.iv.next49"
	.size	.L.str6022709, 18

	.type	.L.str6032710,@object   # @.str6032710
.L.str6032710:
	.asciz	"._crit_edge20"
	.size	.L.str6032710, 14

	.type	.L.str6042711,@object   # @.str6042711
.L.str6042711:
	.zero	1
	.size	.L.str6042711, 1

	.type	.L.str6052712,@object   # @.str6052712
	.align	16
.L.str6052712:
	.asciz	".preheader17.lr.ph"
	.size	.L.str6052712, 19

	.type	.L.str6062713,@object   # @.str6062713
.L.str6062713:
	.asciz	"indvars.iv48"
	.size	.L.str6062713, 13

	.type	.L.str6072714,@object   # @.str6072714
.L.str6072714:
	.asciz	"phi"
	.size	.L.str6072714, 4

	.type	.L.str6082715,@object   # @.str6082715
	.align	16
.L.str6082715:
	.asciz	"kmeans_clustering"
	.size	.L.str6082715, 18

	.type	.L.str6092716,@object   # @.str6092716
.L.str6092716:
	.asciz	".preheader17"
	.size	.L.str6092716, 13

	.type	.L.str6102717,@object   # @.str6102717
.L.str6102717:
	.asciz	".preheader17-0"
	.size	.L.str6102717, 15

	.type	.L.str6112718,@object   # @.str6112718
.L.str6112718:
	.asciz	".lr.ph19"
	.size	.L.str6112718, 9

	.type	.L.str6122719,@object   # @.str6122719
.L.str6122719:
	.asciz	"phi"
	.size	.L.str6122719, 4

	.type	.L.str6132720,@object   # @.str6132720
.L.str6132720:
	.asciz	"._crit_edge20"
	.size	.L.str6132720, 14

	.type	.L.str6142721,@object   # @.str6142721
.L.str6142721:
	.asciz	"phi"
	.size	.L.str6142721, 4

	.type	.L.str6152722,@object   # @.str6152722
.L.str6152722:
	.asciz	"16"
	.size	.L.str6152722, 3

	.type	.L.str6162723,@object   # @.str6162723
.L.str6162723:
	.asciz	"phi"
	.size	.L.str6162723, 4

	.type	.L.str6172724,@object   # @.str6172724
	.align	16
.L.str6172724:
	.asciz	"kmeans_clustering"
	.size	.L.str6172724, 18

	.type	.L.str6182725,@object   # @.str6182725
.L.str6182725:
	.asciz	".lr.ph19"
	.size	.L.str6182725, 9

	.type	.L.str6192726,@object   # @.str6192726
.L.str6192726:
	.asciz	"23"
	.size	.L.str6192726, 3

	.type	.L.str6202727,@object   # @.str6202727
.L.str6202727:
	.asciz	"indvars.iv48"
	.size	.L.str6202727, 13

	.type	.L.str6212728,@object   # @.str6212728
.L.str6212728:
	.asciz	"phi"
	.size	.L.str6212728, 4

	.type	.L.str6222729,@object   # @.str6222729
.L.str6222729:
	.asciz	"feature"
	.size	.L.str6222729, 8

	.type	.L.str6232730,@object   # @.str6232730
.L.str6232730:
	.asciz	"phi"
	.size	.L.str6232730, 4

	.type	.L.str6242731,@object   # @.str6242731
.L.str6242731:
	.asciz	"23"
	.size	.L.str6242731, 3

	.type	.L.str6252732,@object   # @.str6252732
.L.str6252732:
	.asciz	"phi"
	.size	.L.str6252732, 4

	.type	.L.str6262733,@object   # @.str6262733
	.align	16
.L.str6262733:
	.asciz	"kmeans_clustering"
	.size	.L.str6262733, 18

	.type	.L.str6272734,@object   # @.str6272734
.L.str6272734:
	.asciz	".lr.ph19"
	.size	.L.str6272734, 9

	.type	.L.str6282735,@object   # @.str6282735
.L.str6282735:
	.asciz	"24"
	.size	.L.str6282735, 3

	.type	.L.str6292736,@object   # @.str6292736
.L.str6292736:
	.asciz	"23"
	.size	.L.str6292736, 3

	.type	.L.str6302737,@object   # @.str6302737
.L.str6302737:
	.asciz	"phi"
	.size	.L.str6302737, 4

	.type	.L.str6312738,@object   # @.str6312738
.L.str6312738:
	.asciz	"24"
	.size	.L.str6312738, 3

	.type	.L.str6322739,@object   # @.str6322739
.L.str6322739:
	.asciz	"phi"
	.size	.L.str6322739, 4

	.type	.L.str6332740,@object   # @.str6332740
	.align	16
.L.str6332740:
	.asciz	"kmeans_clustering"
	.size	.L.str6332740, 18

	.type	.L.str6342741,@object   # @.str6342741
.L.str6342741:
	.asciz	".lr.ph19"
	.size	.L.str6342741, 9

	.type	.L.str6352742,@object   # @.str6352742
.L.str6352742:
	.asciz	"25"
	.size	.L.str6352742, 3

	.type	.L.str6362743,@object   # @.str6362743
.L.str6362743:
	.asciz	"indvars.iv48"
	.size	.L.str6362743, 13

	.type	.L.str6372744,@object   # @.str6372744
.L.str6372744:
	.asciz	"phi"
	.size	.L.str6372744, 4

	.type	.L.str6382745,@object   # @.str6382745
.L.str6382745:
	.asciz	"7"
	.size	.L.str6382745, 2

	.type	.L.str6392746,@object   # @.str6392746
.L.str6392746:
	.asciz	"phi"
	.size	.L.str6392746, 4

	.type	.L.str6402747,@object   # @.str6402747
.L.str6402747:
	.asciz	"25"
	.size	.L.str6402747, 3

	.type	.L.str6412748,@object   # @.str6412748
.L.str6412748:
	.asciz	"phi"
	.size	.L.str6412748, 4

	.type	.L.str6422749,@object   # @.str6422749
	.align	16
.L.str6422749:
	.asciz	"kmeans_clustering"
	.size	.L.str6422749, 18

	.type	.L.str6432750,@object   # @.str6432750
.L.str6432750:
	.asciz	".lr.ph19"
	.size	.L.str6432750, 9

	.type	.L.str6442751,@object   # @.str6442751
.L.str6442751:
	.asciz	"26"
	.size	.L.str6442751, 3

	.type	.L.str6452752,@object   # @.str6452752
.L.str6452752:
	.asciz	"25"
	.size	.L.str6452752, 3

	.type	.L.str6462753,@object   # @.str6462753
.L.str6462753:
	.asciz	"phi"
	.size	.L.str6462753, 4

	.type	.L.str6472754,@object   # @.str6472754
.L.str6472754:
	.asciz	"26"
	.size	.L.str6472754, 3

	.type	.L.str6482755,@object   # @.str6482755
.L.str6482755:
	.asciz	"phi"
	.size	.L.str6482755, 4

	.type	.L.str6492756,@object   # @.str6492756
	.align	16
.L.str6492756:
	.asciz	"kmeans_clustering"
	.size	.L.str6492756, 18

	.type	.L.str6502757,@object   # @.str6502757
.L.str6502757:
	.asciz	".lr.ph19"
	.size	.L.str6502757, 9

	.type	.L.str6512758,@object   # @.str6512758
.L.str6512758:
	.asciz	".lr.ph19-0"
	.size	.L.str6512758, 11

	.type	.L.str6522759,@object   # @.str6522759
.L.str6522759:
	.asciz	"28"
	.size	.L.str6522759, 3

	.type	.L.str6532760,@object   # @.str6532760
.L.str6532760:
	.asciz	"phi"
	.size	.L.str6532760, 4

	.type	.L.str6542761,@object   # @.str6542761
	.align	16
.L.str6542761:
	.asciz	"kmeans_clustering"
	.size	.L.str6542761, 18

	.type	.L.str6552762,@object   # @.str6552762
.L.str6552762:
	.asciz	".preheader13"
	.size	.L.str6552762, 13

	.type	.L.str6562763,@object   # @.str6562763
.L.str6562763:
	.asciz	"27"
	.size	.L.str6562763, 3

	.type	.L.str6572764,@object   # @.str6572764
.L.str6572764:
	.zero	1
	.size	.L.str6572764, 1

	.type	.L.str6582765,@object   # @.str6582765
.L.str6582765:
	.asciz	"phi"
	.size	.L.str6582765, 4

	.type	.L.str6592766,@object   # @.str6592766
.L.str6592766:
	.asciz	"npoints"
	.size	.L.str6592766, 8

	.type	.L.str6602767,@object   # @.str6602767
.L.str6602767:
	.asciz	"phi"
	.size	.L.str6602767, 4

	.type	.L.str6612768,@object   # @.str6612768
.L.str6612768:
	.asciz	"27"
	.size	.L.str6612768, 3

	.type	.L.str6622769,@object   # @.str6622769
.L.str6622769:
	.asciz	"phi"
	.size	.L.str6622769, 4

	.type	.L.str6632770,@object   # @.str6632770
	.align	16
.L.str6632770:
	.asciz	"kmeans_clustering"
	.size	.L.str6632770, 18

	.type	.L.str6642771,@object   # @.str6642771
.L.str6642771:
	.asciz	".preheader13"
	.size	.L.str6642771, 13

	.type	.L.str6652772,@object   # @.str6652772
.L.str6652772:
	.asciz	".preheader13-0"
	.size	.L.str6652772, 15

	.type	.L.str6662773,@object   # @.str6662773
.L.str6662773:
	.asciz	"._crit_edge16"
	.size	.L.str6662773, 14

	.type	.L.str6672774,@object   # @.str6672774
.L.str6672774:
	.asciz	"phi"
	.size	.L.str6672774, 4

	.type	.L.str6682775,@object   # @.str6682775
.L.str6682775:
	.asciz	"36"
	.size	.L.str6682775, 3

	.type	.L.str6692776,@object   # @.str6692776
.L.str6692776:
	.asciz	"phi"
	.size	.L.str6692776, 4

	.type	.L.str6702777,@object   # @.str6702777
.L.str6702777:
	.asciz	"27"
	.size	.L.str6702777, 3

	.type	.L.str6712778,@object   # @.str6712778
.L.str6712778:
	.asciz	"phi"
	.size	.L.str6712778, 4

	.type	.L.str6722779,@object   # @.str6722779
	.align	16
.L.str6722779:
	.asciz	"kmeans_clustering"
	.size	.L.str6722779, 18

	.type	.L.str6732780,@object   # @.str6732780
.L.str6732780:
	.asciz	"28"
	.size	.L.str6732780, 3

	.type	.L.str6742781,@object   # @.str6742781
.L.str6742781:
	.asciz	"indvars.iv44"
	.size	.L.str6742781, 13

	.type	.L.str6752782,@object   # @.str6752782
	.align	16
.L.str6752782:
	.asciz	"indvars.iv.next45"
	.size	.L.str6752782, 18

	.type	.L.str6762783,@object   # @.str6762783
.L.str6762783:
	.asciz	"28"
	.size	.L.str6762783, 3

	.type	.L.str6772784,@object   # @.str6772784
.L.str6772784:
	.zero	1
	.size	.L.str6772784, 1

	.type	.L.str6782785,@object   # @.str6782785
.L.str6782785:
	.asciz	".lr.ph19"
	.size	.L.str6782785, 9

	.type	.L.str6792786,@object   # @.str6792786
.L.str6792786:
	.asciz	"indvars.iv44"
	.size	.L.str6792786, 13

	.type	.L.str6802787,@object   # @.str6802787
.L.str6802787:
	.asciz	"phi"
	.size	.L.str6802787, 4

	.type	.L.str6812788,@object   # @.str6812788
	.align	16
.L.str6812788:
	.asciz	"kmeans_clustering"
	.size	.L.str6812788, 18

	.type	.L.str6822789,@object   # @.str6822789
.L.str6822789:
	.asciz	"28"
	.size	.L.str6822789, 3

	.type	.L.str6832790,@object   # @.str6832790
.L.str6832790:
	.asciz	"29"
	.size	.L.str6832790, 3

	.type	.L.str6842791,@object   # @.str6842791
.L.str6842791:
	.asciz	"indvars.iv44"
	.size	.L.str6842791, 13

	.type	.L.str6852792,@object   # @.str6852792
.L.str6852792:
	.asciz	"phi"
	.size	.L.str6852792, 4

	.type	.L.str6862793,@object   # @.str6862793
.L.str6862793:
	.asciz	"24"
	.size	.L.str6862793, 3

	.type	.L.str6872794,@object   # @.str6872794
.L.str6872794:
	.asciz	"phi"
	.size	.L.str6872794, 4

	.type	.L.str6882795,@object   # @.str6882795
.L.str6882795:
	.asciz	"29"
	.size	.L.str6882795, 3

	.type	.L.str6892796,@object   # @.str6892796
.L.str6892796:
	.asciz	"phi"
	.size	.L.str6892796, 4

	.type	.L.str6902797,@object   # @.str6902797
	.align	16
.L.str6902797:
	.asciz	"kmeans_clustering"
	.size	.L.str6902797, 18

	.type	.L.str6912798,@object   # @.str6912798
.L.str6912798:
	.asciz	"28"
	.size	.L.str6912798, 3

	.type	.L.str6922799,@object   # @.str6922799
.L.str6922799:
	.asciz	"30"
	.size	.L.str6922799, 3

	.type	.L.str6932800,@object   # @.str6932800
.L.str6932800:
	.asciz	"29"
	.size	.L.str6932800, 3

	.type	.L.str6942801,@object   # @.str6942801
.L.str6942801:
	.asciz	"phi"
	.size	.L.str6942801, 4

	.type	.L.str6952802,@object   # @.str6952802
.L.str6952802:
	.asciz	"30"
	.size	.L.str6952802, 3

	.type	.L.str6962803,@object   # @.str6962803
.L.str6962803:
	.asciz	"phi"
	.size	.L.str6962803, 4

	.type	.L.str6972804,@object   # @.str6972804
	.align	16
.L.str6972804:
	.asciz	"kmeans_clustering"
	.size	.L.str6972804, 18

	.type	.L.str6982805,@object   # @.str6982805
.L.str6982805:
	.asciz	"28"
	.size	.L.str6982805, 3

	.type	.L.str6992806,@object   # @.str6992806
.L.str6992806:
	.asciz	"31"
	.size	.L.str6992806, 3

	.type	.L.str7002807,@object   # @.str7002807
.L.str7002807:
	.asciz	"indvars.iv44"
	.size	.L.str7002807, 13

	.type	.L.str7012808,@object   # @.str7012808
.L.str7012808:
	.asciz	"phi"
	.size	.L.str7012808, 4

	.type	.L.str7022809,@object   # @.str7022809
.L.str7022809:
	.asciz	"26"
	.size	.L.str7022809, 3

	.type	.L.str7032810,@object   # @.str7032810
.L.str7032810:
	.asciz	"phi"
	.size	.L.str7032810, 4

	.type	.L.str7042811,@object   # @.str7042811
.L.str7042811:
	.asciz	"31"
	.size	.L.str7042811, 3

	.type	.L.str7052812,@object   # @.str7052812
.L.str7052812:
	.asciz	"phi"
	.size	.L.str7052812, 4

	.type	.L.str7062813,@object   # @.str7062813
	.align	16
.L.str7062813:
	.asciz	"kmeans_clustering"
	.size	.L.str7062813, 18

	.type	.L.str7072814,@object   # @.str7072814
.L.str7072814:
	.asciz	"28"
	.size	.L.str7072814, 3

	.type	.L.str7082815,@object   # @.str7082815
.L.str7082815:
	.asciz	"28-0"
	.size	.L.str7082815, 5

	.type	.L.str7092816,@object   # @.str7092816
.L.str7092816:
	.asciz	"31"
	.size	.L.str7092816, 3

	.type	.L.str7102817,@object   # @.str7102817
.L.str7102817:
	.asciz	"phi"
	.size	.L.str7102817, 4

	.type	.L.str7112818,@object   # @.str7112818
.L.str7112818:
	.asciz	"30"
	.size	.L.str7112818, 3

	.type	.L.str7122819,@object   # @.str7122819
.L.str7122819:
	.asciz	"phi"
	.size	.L.str7122819, 4

	.type	.L.str7132820,@object   # @.str7132820
	.align	16
.L.str7132820:
	.asciz	"kmeans_clustering"
	.size	.L.str7132820, 18

	.type	.L.str7142821,@object   # @.str7142821
.L.str7142821:
	.asciz	"28"
	.size	.L.str7142821, 3

	.type	.L.str7152822,@object   # @.str7152822
	.align	16
.L.str7152822:
	.asciz	"indvars.iv.next45"
	.size	.L.str7152822, 18

	.type	.L.str7162823,@object   # @.str7162823
.L.str7162823:
	.zero	1
	.size	.L.str7162823, 1

	.type	.L.str7172824,@object   # @.str7172824
.L.str7172824:
	.asciz	"phi"
	.size	.L.str7172824, 4

	.type	.L.str7182825,@object   # @.str7182825
.L.str7182825:
	.asciz	"indvars.iv44"
	.size	.L.str7182825, 13

	.type	.L.str7192826,@object   # @.str7192826
.L.str7192826:
	.asciz	"phi"
	.size	.L.str7192826, 4

	.type	.L.str7202827,@object   # @.str7202827
	.align	16
.L.str7202827:
	.asciz	"indvars.iv.next45"
	.size	.L.str7202827, 18

	.type	.L.str7212828,@object   # @.str7212828
.L.str7212828:
	.asciz	"phi"
	.size	.L.str7212828, 4

	.type	.L.str7222829,@object   # @.str7222829
	.align	16
.L.str7222829:
	.asciz	"kmeans_clustering"
	.size	.L.str7222829, 18

	.type	.L.str7232830,@object   # @.str7232830
.L.str7232830:
	.asciz	"28"
	.size	.L.str7232830, 3

	.type	.L.str7242831,@object   # @.str7242831
.L.str7242831:
	.asciz	"lftr.wideiv46"
	.size	.L.str7242831, 14

	.type	.L.str7252832,@object   # @.str7252832
	.align	16
.L.str7252832:
	.asciz	"indvars.iv.next45"
	.size	.L.str7252832, 18

	.type	.L.str7262833,@object   # @.str7262833
.L.str7262833:
	.asciz	"phi"
	.size	.L.str7262833, 4

	.type	.L.str7272834,@object   # @.str7272834
.L.str7272834:
	.asciz	"lftr.wideiv46"
	.size	.L.str7272834, 14

	.type	.L.str7282835,@object   # @.str7282835
.L.str7282835:
	.asciz	"phi"
	.size	.L.str7282835, 4

	.type	.L.str7292836,@object   # @.str7292836
	.align	16
.L.str7292836:
	.asciz	"kmeans_clustering"
	.size	.L.str7292836, 18

	.type	.L.str7302837,@object   # @.str7302837
.L.str7302837:
	.asciz	"28"
	.size	.L.str7302837, 3

	.type	.L.str7312838,@object   # @.str7312838
.L.str7312838:
	.asciz	"exitcond47"
	.size	.L.str7312838, 11

	.type	.L.str7322839,@object   # @.str7322839
.L.str7322839:
	.asciz	"nfeatures"
	.size	.L.str7322839, 10

	.type	.L.str7332840,@object   # @.str7332840
.L.str7332840:
	.asciz	"phi"
	.size	.L.str7332840, 4

	.type	.L.str7342841,@object   # @.str7342841
.L.str7342841:
	.asciz	"lftr.wideiv46"
	.size	.L.str7342841, 14

	.type	.L.str7352842,@object   # @.str7352842
.L.str7352842:
	.asciz	"phi"
	.size	.L.str7352842, 4

	.type	.L.str7362843,@object   # @.str7362843
.L.str7362843:
	.asciz	"exitcond47"
	.size	.L.str7362843, 11

	.type	.L.str7372844,@object   # @.str7372844
.L.str7372844:
	.asciz	"phi"
	.size	.L.str7372844, 4

	.type	.L.str7382845,@object   # @.str7382845
	.align	16
.L.str7382845:
	.asciz	"kmeans_clustering"
	.size	.L.str7382845, 18

	.type	.L.str7392846,@object   # @.str7392846
.L.str7392846:
	.asciz	"28"
	.size	.L.str7392846, 3

	.type	.L.str7402847,@object   # @.str7402847
.L.str7402847:
	.asciz	"28-1"
	.size	.L.str7402847, 5

	.type	.L.str7412848,@object   # @.str7412848
.L.str7412848:
	.asciz	"._crit_edge20"
	.size	.L.str7412848, 14

	.type	.L.str7422849,@object   # @.str7422849
.L.str7422849:
	.asciz	"phi"
	.size	.L.str7422849, 4

	.type	.L.str7432850,@object   # @.str7432850
.L.str7432850:
	.asciz	"28"
	.size	.L.str7432850, 3

	.type	.L.str7442851,@object   # @.str7442851
.L.str7442851:
	.asciz	"phi"
	.size	.L.str7442851, 4

	.type	.L.str7452852,@object   # @.str7452852
.L.str7452852:
	.asciz	"exitcond47"
	.size	.L.str7452852, 11

	.type	.L.str7462853,@object   # @.str7462853
.L.str7462853:
	.asciz	"phi"
	.size	.L.str7462853, 4

	.type	.L.str7472854,@object   # @.str7472854
	.align	16
.L.str7472854:
	.asciz	"kmeans_clustering"
	.size	.L.str7472854, 18

	.type	.L.str7482855,@object   # @.str7482855
.L.str7482855:
	.asciz	"._crit_edge20"
	.size	.L.str7482855, 14

	.type	.L.str7492856,@object   # @.str7492856
	.align	16
.L.str7492856:
	.asciz	"indvars.iv.next49"
	.size	.L.str7492856, 18

	.type	.L.str7502857,@object   # @.str7502857
.L.str7502857:
	.zero	1
	.size	.L.str7502857, 1

	.type	.L.str7512858,@object   # @.str7512858
.L.str7512858:
	.asciz	"phi"
	.size	.L.str7512858, 4

	.type	.L.str7522859,@object   # @.str7522859
.L.str7522859:
	.asciz	"indvars.iv48"
	.size	.L.str7522859, 13

	.type	.L.str7532860,@object   # @.str7532860
.L.str7532860:
	.asciz	"phi"
	.size	.L.str7532860, 4

	.type	.L.str7542861,@object   # @.str7542861
	.align	16
.L.str7542861:
	.asciz	"indvars.iv.next49"
	.size	.L.str7542861, 18

	.type	.L.str7552862,@object   # @.str7552862
.L.str7552862:
	.asciz	"phi"
	.size	.L.str7552862, 4

	.type	.L.str7562863,@object   # @.str7562863
	.align	16
.L.str7562863:
	.asciz	"kmeans_clustering"
	.size	.L.str7562863, 18

	.type	.L.str7572864,@object   # @.str7572864
.L.str7572864:
	.asciz	"._crit_edge20"
	.size	.L.str7572864, 14

	.type	.L.str7582865,@object   # @.str7582865
.L.str7582865:
	.asciz	"lftr.wideiv50"
	.size	.L.str7582865, 14

	.type	.L.str7592866,@object   # @.str7592866
	.align	16
.L.str7592866:
	.asciz	"indvars.iv.next49"
	.size	.L.str7592866, 18

	.type	.L.str7602867,@object   # @.str7602867
.L.str7602867:
	.asciz	"phi"
	.size	.L.str7602867, 4

	.type	.L.str7612868,@object   # @.str7612868
.L.str7612868:
	.asciz	"lftr.wideiv50"
	.size	.L.str7612868, 14

	.type	.L.str7622869,@object   # @.str7622869
.L.str7622869:
	.asciz	"phi"
	.size	.L.str7622869, 4

	.type	.L.str7632870,@object   # @.str7632870
	.align	16
.L.str7632870:
	.asciz	"kmeans_clustering"
	.size	.L.str7632870, 18

	.type	.L.str7642871,@object   # @.str7642871
.L.str7642871:
	.asciz	"._crit_edge20"
	.size	.L.str7642871, 14

	.type	.L.str7652872,@object   # @.str7652872
.L.str7652872:
	.asciz	"exitcond51"
	.size	.L.str7652872, 11

	.type	.L.str7662873,@object   # @.str7662873
.L.str7662873:
	.asciz	"nclusters"
	.size	.L.str7662873, 10

	.type	.L.str7672874,@object   # @.str7672874
.L.str7672874:
	.asciz	"phi"
	.size	.L.str7672874, 4

	.type	.L.str7682875,@object   # @.str7682875
.L.str7682875:
	.asciz	"lftr.wideiv50"
	.size	.L.str7682875, 14

	.type	.L.str7692876,@object   # @.str7692876
.L.str7692876:
	.asciz	"phi"
	.size	.L.str7692876, 4

	.type	.L.str7702877,@object   # @.str7702877
.L.str7702877:
	.asciz	"exitcond51"
	.size	.L.str7702877, 11

	.type	.L.str7712878,@object   # @.str7712878
.L.str7712878:
	.asciz	"phi"
	.size	.L.str7712878, 4

	.type	.L.str7722879,@object   # @.str7722879
	.align	16
.L.str7722879:
	.asciz	"kmeans_clustering"
	.size	.L.str7722879, 18

	.type	.L.str7732880,@object   # @.str7732880
.L.str7732880:
	.asciz	"._crit_edge20"
	.size	.L.str7732880, 14

	.type	.L.str7742881,@object   # @.str7742881
.L.str7742881:
	.asciz	"._crit_edge20-0"
	.size	.L.str7742881, 16

	.type	.L.str7752882,@object   # @.str7752882
.L.str7752882:
	.asciz	".preheader13"
	.size	.L.str7752882, 13

	.type	.L.str7762883,@object   # @.str7762883
.L.str7762883:
	.asciz	"phi"
	.size	.L.str7762883, 4

	.type	.L.str7772884,@object   # @.str7772884
.L.str7772884:
	.asciz	".preheader17"
	.size	.L.str7772884, 13

	.type	.L.str7782885,@object   # @.str7782885
.L.str7782885:
	.asciz	"phi"
	.size	.L.str7782885, 4

	.type	.L.str7792886,@object   # @.str7792886
.L.str7792886:
	.asciz	"exitcond51"
	.size	.L.str7792886, 11

	.type	.L.str7802887,@object   # @.str7802887
.L.str7802887:
	.asciz	"phi"
	.size	.L.str7802887, 4

	.type	.L.str7812888,@object   # @.str7812888
	.align	16
.L.str7812888:
	.asciz	"kmeans_clustering"
	.size	.L.str7812888, 18

	.type	.L.str7822889,@object   # @.str7822889
.L.str7822889:
	.asciz	"._crit_edge16"
	.size	.L.str7822889, 14

	.type	.L.str7832890,@object   # @.str7832890
.L.str7832890:
	.asciz	"32"
	.size	.L.str7832890, 3

	.type	.L.str7842891,@object   # @.str7842891
.L.str7842891:
	.zero	1
	.size	.L.str7842891, 1

	.type	.L.str7852892,@object   # @.str7852892
.L.str7852892:
	.asciz	"phi"
	.size	.L.str7852892, 4

	.type	.L.str7862893,@object   # @.str7862893
.L.str7862893:
	.asciz	"npoints"
	.size	.L.str7862893, 8

	.type	.L.str7872894,@object   # @.str7872894
.L.str7872894:
	.asciz	"phi"
	.size	.L.str7872894, 4

	.type	.L.str7882895,@object   # @.str7882895
.L.str7882895:
	.asciz	"32"
	.size	.L.str7882895, 3

	.type	.L.str7892896,@object   # @.str7892896
.L.str7892896:
	.asciz	"phi"
	.size	.L.str7892896, 4

	.type	.L.str7902897,@object   # @.str7902897
	.align	16
.L.str7902897:
	.asciz	"kmeans_clustering"
	.size	.L.str7902897, 18

	.type	.L.str7912898,@object   # @.str7912898
.L.str7912898:
	.asciz	"._crit_edge16"
	.size	.L.str7912898, 14

	.type	.L.str7922899,@object   # @.str7922899
.L.str7922899:
	.asciz	"33"
	.size	.L.str7922899, 3

	.type	.L.str7932900,@object   # @.str7932900
.L.str7932900:
	.asciz	"32"
	.size	.L.str7932900, 3

	.type	.L.str7942901,@object   # @.str7942901
.L.str7942901:
	.asciz	"phi"
	.size	.L.str7942901, 4

	.type	.L.str7952902,@object   # @.str7952902
.L.str7952902:
	.asciz	"33"
	.size	.L.str7952902, 3

	.type	.L.str7962903,@object   # @.str7962903
.L.str7962903:
	.asciz	"phi"
	.size	.L.str7962903, 4

	.type	.L.str7972904,@object   # @.str7972904
	.align	16
.L.str7972904:
	.asciz	"kmeans_clustering"
	.size	.L.str7972904, 18

	.type	.L.str7982905,@object   # @.str7982905
.L.str7982905:
	.asciz	"._crit_edge16"
	.size	.L.str7982905, 14

	.type	.L.str7992906,@object   # @.str7992906
.L.str7992906:
	.asciz	"34"
	.size	.L.str7992906, 3

	.type	.L.str8002907,@object   # @.str8002907
.L.str8002907:
	.zero	1
	.size	.L.str8002907, 1

	.type	.L.str8012908,@object   # @.str8012908
.L.str8012908:
	.asciz	"phi"
	.size	.L.str8012908, 4

	.type	.L.str8022909,@object   # @.str8022909
.L.str8022909:
	.asciz	"33"
	.size	.L.str8022909, 3

	.type	.L.str8032910,@object   # @.str8032910
.L.str8032910:
	.asciz	"phi"
	.size	.L.str8032910, 4

	.type	.L.str8042911,@object   # @.str8042911
.L.str8042911:
	.asciz	"34"
	.size	.L.str8042911, 3

	.type	.L.str8052912,@object   # @.str8052912
.L.str8052912:
	.asciz	"phi"
	.size	.L.str8052912, 4

	.type	.L.str8062913,@object   # @.str8062913
	.align	16
.L.str8062913:
	.asciz	"kmeans_clustering"
	.size	.L.str8062913, 18

	.type	.L.str8072914,@object   # @.str8072914
.L.str8072914:
	.asciz	"._crit_edge16"
	.size	.L.str8072914, 14

	.type	.L.str8082915,@object   # @.str8082915
.L.str8082915:
	.asciz	"35"
	.size	.L.str8082915, 3

	.type	.L.str8092916,@object   # @.str8092916
.L.str8092916:
	.zero	1
	.size	.L.str8092916, 1

	.type	.L.str8102917,@object   # @.str8102917
.L.str8102917:
	.asciz	"phi"
	.size	.L.str8102917, 4

	.type	.L.str8112918,@object   # @.str8112918
.L.str8112918:
	.asciz	"34"
	.size	.L.str8112918, 3

	.type	.L.str8122919,@object   # @.str8122919
.L.str8122919:
	.asciz	"phi"
	.size	.L.str8122919, 4

	.type	.L.str8132920,@object   # @.str8132920
.L.str8132920:
	.asciz	"35"
	.size	.L.str8132920, 3

	.type	.L.str8142921,@object   # @.str8142921
.L.str8142921:
	.asciz	"phi"
	.size	.L.str8142921, 4

	.type	.L.str8152922,@object   # @.str8152922
	.align	16
.L.str8152922:
	.asciz	"kmeans_clustering"
	.size	.L.str8152922, 18

	.type	.L.str8162923,@object   # @.str8162923
.L.str8162923:
	.asciz	"._crit_edge16"
	.size	.L.str8162923, 14

	.type	.L.str8172924,@object   # @.str8172924
.L.str8172924:
	.asciz	"._crit_edge16-1"
	.size	.L.str8172924, 16

	.type	.L.str8182925,@object   # @.str8182925
.L.str8182925:
	.asciz	"36"
	.size	.L.str8182925, 3

	.type	.L.str8192926,@object   # @.str8192926
.L.str8192926:
	.asciz	"phi"
	.size	.L.str8192926, 4

	.type	.L.str8202927,@object   # @.str8202927
	.align	16
.L.str8202927:
	.asciz	"kmeans_clustering"
	.size	.L.str8202927, 18

	.type	.L.str8212928,@object   # @.str8212928
.L.str8212928:
	.asciz	"36"
	.size	.L.str8212928, 3

	.type	.L.str8222929,@object   # @.str8222929
.L.str8222929:
	.asciz	"37"
	.size	.L.str8222929, 3

	.type	.L.str8232930,@object   # @.str8232930
.L.str8232930:
	.asciz	"calloc"
	.size	.L.str8232930, 7

	.type	.L.str8242931,@object   # @.str8242931
.L.str8242931:
	.asciz	"phi"
	.size	.L.str8242931, 4

	.type	.L.str8252932,@object   # @.str8252932
.L.str8252932:
	.asciz	"4"
	.size	.L.str8252932, 2

	.type	.L.str8262933,@object   # @.str8262933
.L.str8262933:
	.asciz	"phi"
	.size	.L.str8262933, 4

	.type	.L.str8272934,@object   # @.str8272934
.L.str8272934:
	.zero	1
	.size	.L.str8272934, 1

	.type	.L.str8282935,@object   # @.str8282935
.L.str8282935:
	.asciz	"phi"
	.size	.L.str8282935, 4

	.type	.L.str8292936,@object   # @.str8292936
.L.str8292936:
	.zero	1
	.size	.L.str8292936, 1

	.type	.L.str8302937,@object   # @.str8302937
.L.str8302937:
	.asciz	"phi"
	.size	.L.str8302937, 4

	.type	.L.str8312938,@object   # @.str8312938
.L.str8312938:
	.zero	1
	.size	.L.str8312938, 1

	.type	.L.str8322939,@object   # @.str8322939
.L.str8322939:
	.asciz	"phi"
	.size	.L.str8322939, 4

	.type	.L.str8332940,@object   # @.str8332940
.L.str8332940:
	.asciz	"37"
	.size	.L.str8332940, 3

	.type	.L.str8342941,@object   # @.str8342941
.L.str8342941:
	.asciz	"phi"
	.size	.L.str8342941, 4

	.type	.L.str8352942,@object   # @.str8352942
	.align	16
.L.str8352942:
	.asciz	"kmeans_clustering"
	.size	.L.str8352942, 18

	.type	.L.str8362943,@object   # @.str8362943
.L.str8362943:
	.asciz	"36"
	.size	.L.str8362943, 3

	.type	.L.str8372944,@object   # @.str8372944
.L.str8372944:
	.asciz	"38"
	.size	.L.str8372944, 3

	.type	.L.str8382945,@object   # @.str8382945
.L.str8382945:
	.asciz	"37"
	.size	.L.str8382945, 3

	.type	.L.str8392946,@object   # @.str8392946
.L.str8392946:
	.asciz	"phi"
	.size	.L.str8392946, 4

	.type	.L.str8402947,@object   # @.str8402947
.L.str8402947:
	.asciz	"38"
	.size	.L.str8402947, 3

	.type	.L.str8412948,@object   # @.str8412948
.L.str8412948:
	.asciz	"phi"
	.size	.L.str8412948, 4

	.type	.L.str8422949,@object   # @.str8422949
	.align	16
.L.str8422949:
	.asciz	"kmeans_clustering"
	.size	.L.str8422949, 18

	.type	.L.str8432950,@object   # @.str8432950
.L.str8432950:
	.asciz	"36"
	.size	.L.str8432950, 3

	.type	.L.str8442951,@object   # @.str8442951
.L.str8442951:
	.asciz	"39"
	.size	.L.str8442951, 3

	.type	.L.str8452952,@object   # @.str8452952
.L.str8452952:
	.asciz	"malloc"
	.size	.L.str8452952, 7

	.type	.L.str8462953,@object   # @.str8462953
.L.str8462953:
	.asciz	"phi"
	.size	.L.str8462953, 4

	.type	.L.str8472954,@object   # @.str8472954
.L.str8472954:
	.asciz	"5"
	.size	.L.str8472954, 2

	.type	.L.str8482955,@object   # @.str8482955
.L.str8482955:
	.asciz	"phi"
	.size	.L.str8482955, 4

	.type	.L.str8492956,@object   # @.str8492956
.L.str8492956:
	.zero	1
	.size	.L.str8492956, 1

	.type	.L.str8502957,@object   # @.str8502957
.L.str8502957:
	.asciz	"phi"
	.size	.L.str8502957, 4

	.type	.L.str8512958,@object   # @.str8512958
.L.str8512958:
	.asciz	"39"
	.size	.L.str8512958, 3

	.type	.L.str8522959,@object   # @.str8522959
.L.str8522959:
	.asciz	"phi"
	.size	.L.str8522959, 4

	.type	.L.str8532960,@object   # @.str8532960
	.align	16
.L.str8532960:
	.asciz	"kmeans_clustering"
	.size	.L.str8532960, 18

	.type	.L.str8542961,@object   # @.str8542961
.L.str8542961:
	.asciz	"36"
	.size	.L.str8542961, 3

	.type	.L.str8552962,@object   # @.str8552962
.L.str8552962:
	.asciz	"40"
	.size	.L.str8552962, 3

	.type	.L.str8562963,@object   # @.str8562963
.L.str8562963:
	.asciz	"39"
	.size	.L.str8562963, 3

	.type	.L.str8572964,@object   # @.str8572964
.L.str8572964:
	.asciz	"phi"
	.size	.L.str8572964, 4

	.type	.L.str8582965,@object   # @.str8582965
.L.str8582965:
	.asciz	"40"
	.size	.L.str8582965, 3

	.type	.L.str8592966,@object   # @.str8592966
.L.str8592966:
	.asciz	"phi"
	.size	.L.str8592966, 4

	.type	.L.str8602967,@object   # @.str8602967
	.align	16
.L.str8602967:
	.asciz	"kmeans_clustering"
	.size	.L.str8602967, 18

	.type	.L.str8612968,@object   # @.str8612968
.L.str8612968:
	.asciz	"36"
	.size	.L.str8612968, 3

	.type	.L.str8622969,@object   # @.str8622969
.L.str8622969:
	.asciz	"41"
	.size	.L.str8622969, 3

	.type	.L.str8632970,@object   # @.str8632970
.L.str8632970:
	.asciz	"calloc"
	.size	.L.str8632970, 7

	.type	.L.str8642971,@object   # @.str8642971
.L.str8642971:
	.asciz	"phi"
	.size	.L.str8642971, 4

	.type	.L.str8652972,@object   # @.str8652972
.L.str8652972:
	.asciz	"9"
	.size	.L.str8652972, 2

	.type	.L.str8662973,@object   # @.str8662973
.L.str8662973:
	.asciz	"phi"
	.size	.L.str8662973, 4

	.type	.L.str8672974,@object   # @.str8672974
.L.str8672974:
	.zero	1
	.size	.L.str8672974, 1

	.type	.L.str8682975,@object   # @.str8682975
.L.str8682975:
	.asciz	"phi"
	.size	.L.str8682975, 4

	.type	.L.str8692976,@object   # @.str8692976
.L.str8692976:
	.zero	1
	.size	.L.str8692976, 1

	.type	.L.str8702977,@object   # @.str8702977
.L.str8702977:
	.asciz	"phi"
	.size	.L.str8702977, 4

	.type	.L.str8712978,@object   # @.str8712978
.L.str8712978:
	.zero	1
	.size	.L.str8712978, 1

	.type	.L.str8722979,@object   # @.str8722979
.L.str8722979:
	.asciz	"phi"
	.size	.L.str8722979, 4

	.type	.L.str8732980,@object   # @.str8732980
.L.str8732980:
	.asciz	"41"
	.size	.L.str8732980, 3

	.type	.L.str8742981,@object   # @.str8742981
.L.str8742981:
	.asciz	"phi"
	.size	.L.str8742981, 4

	.type	.L.str8752982,@object   # @.str8752982
	.align	16
.L.str8752982:
	.asciz	"kmeans_clustering"
	.size	.L.str8752982, 18

	.type	.L.str8762983,@object   # @.str8762983
.L.str8762983:
	.asciz	"36"
	.size	.L.str8762983, 3

	.type	.L.str8772984,@object   # @.str8772984
.L.str8772984:
	.asciz	"42"
	.size	.L.str8772984, 3

	.type	.L.str8782985,@object   # @.str8782985
.L.str8782985:
	.asciz	"41"
	.size	.L.str8782985, 3

	.type	.L.str8792986,@object   # @.str8792986
.L.str8792986:
	.asciz	"phi"
	.size	.L.str8792986, 4

	.type	.L.str8802987,@object   # @.str8802987
.L.str8802987:
	.asciz	"42"
	.size	.L.str8802987, 3

	.type	.L.str8812988,@object   # @.str8812988
.L.str8812988:
	.asciz	"phi"
	.size	.L.str8812988, 4

	.type	.L.str8822989,@object   # @.str8822989
	.align	16
.L.str8822989:
	.asciz	"kmeans_clustering"
	.size	.L.str8822989, 18

	.type	.L.str8832990,@object   # @.str8832990
.L.str8832990:
	.asciz	"36"
	.size	.L.str8832990, 3

	.type	.L.str8842991,@object   # @.str8842991
.L.str8842991:
	.asciz	"36-2"
	.size	.L.str8842991, 5

	.type	.L.str8852992,@object   # @.str8852992
.L.str8852992:
	.asciz	"40"
	.size	.L.str8852992, 3

	.type	.L.str8862993,@object   # @.str8862993
.L.str8862993:
	.asciz	"phi"
	.size	.L.str8862993, 4

	.type	.L.str8872994,@object   # @.str8872994
.L.str8872994:
	.asciz	"42"
	.size	.L.str8872994, 3

	.type	.L.str8882995,@object   # @.str8882995
.L.str8882995:
	.asciz	"phi"
	.size	.L.str8882995, 4

	.type	.L.str8892996,@object   # @.str8892996
	.align	16
.L.str8892996:
	.asciz	"kmeans_clustering"
	.size	.L.str8892996, 18

	.type	.L.str8902997,@object   # @.str8902997
.L.str8902997:
	.asciz	"36"
	.size	.L.str8902997, 3

	.type	.L.str8912998,@object   # @.str8912998
.L.str8912998:
	.asciz	"43"
	.size	.L.str8912998, 3

	.type	.L.str8922999,@object   # @.str8922999
.L.str8922999:
	.zero	1
	.size	.L.str8922999, 1

	.type	.L.str8933000,@object   # @.str8933000
.L.str8933000:
	.asciz	"phi"
	.size	.L.str8933000, 4

	.type	.L.str8943001,@object   # @.str8943001
.L.str8943001:
	.asciz	"nclusters"
	.size	.L.str8943001, 10

	.type	.L.str8953002,@object   # @.str8953002
.L.str8953002:
	.asciz	"phi"
	.size	.L.str8953002, 4

	.type	.L.str8963003,@object   # @.str8963003
.L.str8963003:
	.asciz	"43"
	.size	.L.str8963003, 3

	.type	.L.str8973004,@object   # @.str8973004
.L.str8973004:
	.asciz	"phi"
	.size	.L.str8973004, 4

	.type	.L.str8983005,@object   # @.str8983005
	.align	16
.L.str8983005:
	.asciz	"kmeans_clustering"
	.size	.L.str8983005, 18

	.type	.L.str8993006,@object   # @.str8993006
.L.str8993006:
	.asciz	"36"
	.size	.L.str8993006, 3

	.type	.L.str9003007,@object   # @.str9003007
.L.str9003007:
	.asciz	"36-4"
	.size	.L.str9003007, 5

	.type	.L.str9013008,@object   # @.str9013008
.L.str9013008:
	.asciz	".lr.ph12"
	.size	.L.str9013008, 9

	.type	.L.str9023009,@object   # @.str9023009
.L.str9023009:
	.asciz	"phi"
	.size	.L.str9023009, 4

	.type	.L.str9033010,@object   # @.str9033010
.L.str9033010:
	.asciz	".preheader9"
	.size	.L.str9033010, 12

	.type	.L.str9043011,@object   # @.str9043011
.L.str9043011:
	.asciz	"phi"
	.size	.L.str9043011, 4

	.type	.L.str9053012,@object   # @.str9053012
.L.str9053012:
	.asciz	"43"
	.size	.L.str9053012, 3

	.type	.L.str9063013,@object   # @.str9063013
.L.str9063013:
	.asciz	"phi"
	.size	.L.str9063013, 4

	.type	.L.str9073014,@object   # @.str9073014
	.align	16
.L.str9073014:
	.asciz	"kmeans_clustering"
	.size	.L.str9073014, 18

	.type	.L.str9083015,@object   # @.str9083015
.L.str9083015:
	.asciz	".lr.ph12"
	.size	.L.str9083015, 9

	.type	.L.str9093016,@object   # @.str9093016
.L.str9093016:
	.asciz	"44"
	.size	.L.str9093016, 3

	.type	.L.str9103017,@object   # @.str9103017
.L.str9103017:
	.asciz	"nfeatures"
	.size	.L.str9103017, 10

	.type	.L.str9113018,@object   # @.str9113018
.L.str9113018:
	.asciz	"phi"
	.size	.L.str9113018, 4

	.type	.L.str9123019,@object   # @.str9123019
.L.str9123019:
	.asciz	"44"
	.size	.L.str9123019, 3

	.type	.L.str9133020,@object   # @.str9133020
.L.str9133020:
	.asciz	"phi"
	.size	.L.str9133020, 4

	.type	.L.str9143021,@object   # @.str9143021
	.align	16
.L.str9143021:
	.asciz	"kmeans_clustering"
	.size	.L.str9143021, 18

	.type	.L.str9153022,@object   # @.str9153022
.L.str9153022:
	.asciz	".lr.ph12"
	.size	.L.str9153022, 9

	.type	.L.str9163023,@object   # @.str9163023
.L.str9163023:
	.asciz	".lr.ph12-0"
	.size	.L.str9163023, 11

	.type	.L.str9173024,@object   # @.str9173024
.L.str9173024:
	.asciz	"48"
	.size	.L.str9173024, 3

	.type	.L.str9183025,@object   # @.str9183025
.L.str9183025:
	.asciz	"phi"
	.size	.L.str9183025, 4

	.type	.L.str9193026,@object   # @.str9193026
	.align	16
.L.str9193026:
	.asciz	"kmeans_clustering"
	.size	.L.str9193026, 18

	.type	.L.str9203027,@object   # @.str9203027
.L.str9203027:
	.asciz	".preheader9"
	.size	.L.str9203027, 12

	.type	.L.str9213028,@object   # @.str9213028
.L.str9213028:
	.asciz	"45"
	.size	.L.str9213028, 3

	.type	.L.str9223029,@object   # @.str9223029
.L.str9223029:
	.zero	1
	.size	.L.str9223029, 1

	.type	.L.str9233030,@object   # @.str9233030
.L.str9233030:
	.asciz	"phi"
	.size	.L.str9233030, 4

	.type	.L.str9243031,@object   # @.str9243031
.L.str9243031:
	.asciz	"nfeatures"
	.size	.L.str9243031, 10

	.type	.L.str9253032,@object   # @.str9253032
.L.str9253032:
	.asciz	"phi"
	.size	.L.str9253032, 4

	.type	.L.str9263033,@object   # @.str9263033
.L.str9263033:
	.asciz	"45"
	.size	.L.str9263033, 3

	.type	.L.str9273034,@object   # @.str9273034
.L.str9273034:
	.asciz	"phi"
	.size	.L.str9273034, 4

	.type	.L.str9283035,@object   # @.str9283035
	.align	16
.L.str9283035:
	.asciz	"kmeans_clustering"
	.size	.L.str9283035, 18

	.type	.L.str9293036,@object   # @.str9293036
.L.str9293036:
	.asciz	".preheader9"
	.size	.L.str9293036, 12

	.type	.L.str9303037,@object   # @.str9303037
.L.str9303037:
	.asciz	"46"
	.size	.L.str9303037, 3

	.type	.L.str9313038,@object   # @.str9313038
.L.str9313038:
	.zero	1
	.size	.L.str9313038, 1

	.type	.L.str9323039,@object   # @.str9323039
.L.str9323039:
	.asciz	"phi"
	.size	.L.str9323039, 4

	.type	.L.str9333040,@object   # @.str9333040
.L.str9333040:
	.asciz	"nclusters"
	.size	.L.str9333040, 10

	.type	.L.str9343041,@object   # @.str9343041
.L.str9343041:
	.asciz	"phi"
	.size	.L.str9343041, 4

	.type	.L.str9353042,@object   # @.str9353042
.L.str9353042:
	.asciz	"46"
	.size	.L.str9353042, 3

	.type	.L.str9363043,@object   # @.str9363043
.L.str9363043:
	.asciz	"phi"
	.size	.L.str9363043, 4

	.type	.L.str9373044,@object   # @.str9373044
	.align	16
.L.str9373044:
	.asciz	"kmeans_clustering"
	.size	.L.str9373044, 18

	.type	.L.str9383045,@object   # @.str9383045
.L.str9383045:
	.asciz	".preheader9"
	.size	.L.str9383045, 12

	.type	.L.str9393046,@object   # @.str9393046
.L.str9393046:
	.asciz	"47"
	.size	.L.str9393046, 3

	.type	.L.str9403047,@object   # @.str9403047
.L.str9403047:
	.zero	1
	.size	.L.str9403047, 1

	.type	.L.str9413048,@object   # @.str9413048
.L.str9413048:
	.asciz	"phi"
	.size	.L.str9413048, 4

	.type	.L.str9423049,@object   # @.str9423049
.L.str9423049:
	.asciz	"nfeatures"
	.size	.L.str9423049, 10

	.type	.L.str9433050,@object   # @.str9433050
.L.str9433050:
	.asciz	"phi"
	.size	.L.str9433050, 4

	.type	.L.str9443051,@object   # @.str9443051
.L.str9443051:
	.asciz	"47"
	.size	.L.str9443051, 3

	.type	.L.str9453052,@object   # @.str9453052
.L.str9453052:
	.asciz	"phi"
	.size	.L.str9453052, 4

	.type	.L.str9463053,@object   # @.str9463053
	.align	16
.L.str9463053:
	.asciz	"kmeans_clustering"
	.size	.L.str9463053, 18

	.type	.L.str9473054,@object   # @.str9473054
.L.str9473054:
	.asciz	".preheader9"
	.size	.L.str9473054, 12

	.type	.L.str9483055,@object   # @.str9483055
.L.str9483055:
	.asciz	".preheader9-0"
	.size	.L.str9483055, 14

	.type	.L.str9493056,@object   # @.str9493056
.L.str9493056:
	.asciz	".backedge"
	.size	.L.str9493056, 10

	.type	.L.str9503057,@object   # @.str9503057
.L.str9503057:
	.asciz	"phi"
	.size	.L.str9503057, 4

	.type	.L.str9513058,@object   # @.str9513058
	.align	16
.L.str9513058:
	.asciz	"kmeans_clustering"
	.size	.L.str9513058, 18

	.type	.L.str9523059,@object   # @.str9523059
.L.str9523059:
	.asciz	"48"
	.size	.L.str9523059, 3

	.type	.L.str9533060,@object   # @.str9533060
.L.str9533060:
	.asciz	"indvars.iv35"
	.size	.L.str9533060, 13

	.type	.L.str9543061,@object   # @.str9543061
	.align	16
.L.str9543061:
	.asciz	"indvars.iv.next36"
	.size	.L.str9543061, 18

	.type	.L.str9553062,@object   # @.str9553062
.L.str9553062:
	.asciz	"48"
	.size	.L.str9553062, 3

	.type	.L.str9563063,@object   # @.str9563063
.L.str9563063:
	.zero	1
	.size	.L.str9563063, 1

	.type	.L.str9573064,@object   # @.str9573064
.L.str9573064:
	.asciz	".lr.ph12"
	.size	.L.str9573064, 9

	.type	.L.str9583065,@object   # @.str9583065
.L.str9583065:
	.asciz	"indvars.iv35"
	.size	.L.str9583065, 13

	.type	.L.str9593066,@object   # @.str9593066
.L.str9593066:
	.asciz	"phi"
	.size	.L.str9593066, 4

	.type	.L.str9603067,@object   # @.str9603067
	.align	16
.L.str9603067:
	.asciz	"kmeans_clustering"
	.size	.L.str9603067, 18

	.type	.L.str9613068,@object   # @.str9613068
.L.str9613068:
	.asciz	"48"
	.size	.L.str9613068, 3

	.type	.L.str9623069,@object   # @.str9623069
.L.str9623069:
	.asciz	"49"
	.size	.L.str9623069, 3

	.type	.L.str9633070,@object   # @.str9633070
.L.str9633070:
	.zero	1
	.size	.L.str9633070, 1

	.type	.L.str9643071,@object   # @.str9643071
.L.str9643071:
	.asciz	"phi"
	.size	.L.str9643071, 4

	.type	.L.str9653072,@object   # @.str9653072
.L.str9653072:
	.asciz	"indvars.iv35"
	.size	.L.str9653072, 13

	.type	.L.str9663073,@object   # @.str9663073
.L.str9663073:
	.asciz	"phi"
	.size	.L.str9663073, 4

	.type	.L.str9673074,@object   # @.str9673074
.L.str9673074:
	.asciz	"49"
	.size	.L.str9673074, 3

	.type	.L.str9683075,@object   # @.str9683075
.L.str9683075:
	.asciz	"phi"
	.size	.L.str9683075, 4

	.type	.L.str9693076,@object   # @.str9693076
	.align	16
.L.str9693076:
	.asciz	"kmeans_clustering"
	.size	.L.str9693076, 18

	.type	.L.str9703077,@object   # @.str9703077
.L.str9703077:
	.asciz	"48"
	.size	.L.str9703077, 3

	.type	.L.str9713078,@object   # @.str9713078
.L.str9713078:
	.asciz	"50"
	.size	.L.str9713078, 3

	.type	.L.str9723079,@object   # @.str9723079
.L.str9723079:
	.asciz	"49"
	.size	.L.str9723079, 3

	.type	.L.str9733080,@object   # @.str9733080
.L.str9733080:
	.asciz	"phi"
	.size	.L.str9733080, 4

	.type	.L.str9743081,@object   # @.str9743081
.L.str9743081:
	.asciz	"40"
	.size	.L.str9743081, 3

	.type	.L.str9753082,@object   # @.str9753082
.L.str9753082:
	.asciz	"phi"
	.size	.L.str9753082, 4

	.type	.L.str9763083,@object   # @.str9763083
.L.str9763083:
	.asciz	"50"
	.size	.L.str9763083, 3

	.type	.L.str9773084,@object   # @.str9773084
.L.str9773084:
	.asciz	"phi"
	.size	.L.str9773084, 4

	.type	.L.str9783085,@object   # @.str9783085
	.align	16
.L.str9783085:
	.asciz	"kmeans_clustering"
	.size	.L.str9783085, 18

	.type	.L.str9793086,@object   # @.str9793086
.L.str9793086:
	.asciz	"48"
	.size	.L.str9793086, 3

	.type	.L.str9803087,@object   # @.str9803087
.L.str9803087:
	.asciz	"51"
	.size	.L.str9803087, 3

	.type	.L.str9813088,@object   # @.str9813088
.L.str9813088:
	.asciz	"50"
	.size	.L.str9813088, 3

	.type	.L.str9823089,@object   # @.str9823089
.L.str9823089:
	.asciz	"phi"
	.size	.L.str9823089, 4

	.type	.L.str9833090,@object   # @.str9833090
.L.str9833090:
	.asciz	"51"
	.size	.L.str9833090, 3

	.type	.L.str9843091,@object   # @.str9843091
.L.str9843091:
	.asciz	"phi"
	.size	.L.str9843091, 4

	.type	.L.str9853092,@object   # @.str9853092
	.align	16
.L.str9853092:
	.asciz	"kmeans_clustering"
	.size	.L.str9853092, 18

	.type	.L.str9863093,@object   # @.str9863093
.L.str9863093:
	.asciz	"48"
	.size	.L.str9863093, 3

	.type	.L.str9873094,@object   # @.str9873094
.L.str9873094:
	.asciz	"52"
	.size	.L.str9873094, 3

	.type	.L.str9883095,@object   # @.str9883095
.L.str9883095:
	.asciz	"44"
	.size	.L.str9883095, 3

	.type	.L.str9893096,@object   # @.str9893096
.L.str9893096:
	.asciz	"phi"
	.size	.L.str9893096, 4

	.type	.L.str9903097,@object   # @.str9903097
.L.str9903097:
	.asciz	"51"
	.size	.L.str9903097, 3

	.type	.L.str9913098,@object   # @.str9913098
.L.str9913098:
	.asciz	"phi"
	.size	.L.str9913098, 4

	.type	.L.str9923099,@object   # @.str9923099
.L.str9923099:
	.asciz	"52"
	.size	.L.str9923099, 3

	.type	.L.str9933100,@object   # @.str9933100
.L.str9933100:
	.asciz	"phi"
	.size	.L.str9933100, 4

	.type	.L.str9943101,@object   # @.str9943101
	.align	16
.L.str9943101:
	.asciz	"kmeans_clustering"
	.size	.L.str9943101, 18

	.type	.L.str9953102,@object   # @.str9953102
.L.str9953102:
	.asciz	"48"
	.size	.L.str9953102, 3

	.type	.L.str9963103,@object   # @.str9963103
.L.str9963103:
	.asciz	"53"
	.size	.L.str9963103, 3

	.type	.L.str9973104,@object   # @.str9973104
.L.str9973104:
	.asciz	"indvars.iv35"
	.size	.L.str9973104, 13

	.type	.L.str9983105,@object   # @.str9983105
.L.str9983105:
	.asciz	"phi"
	.size	.L.str9983105, 4

	.type	.L.str9993106,@object   # @.str9993106
.L.str9993106:
	.asciz	"40"
	.size	.L.str9993106, 3

	.type	.L.str10003107,@object  # @.str10003107
.L.str10003107:
	.asciz	"phi"
	.size	.L.str10003107, 4

	.type	.L.str10013108,@object  # @.str10013108
.L.str10013108:
	.asciz	"53"
	.size	.L.str10013108, 3

	.type	.L.str10023109,@object  # @.str10023109
.L.str10023109:
	.asciz	"phi"
	.size	.L.str10023109, 4

	.type	.L.str10033110,@object  # @.str10033110
	.align	16
.L.str10033110:
	.asciz	"kmeans_clustering"
	.size	.L.str10033110, 18

	.type	.L.str10043111,@object  # @.str10043111
.L.str10043111:
	.asciz	"48"
	.size	.L.str10043111, 3

	.type	.L.str10053112,@object  # @.str10053112
.L.str10053112:
	.asciz	"48-0"
	.size	.L.str10053112, 5

	.type	.L.str10063113,@object  # @.str10063113
.L.str10063113:
	.asciz	"53"
	.size	.L.str10063113, 3

	.type	.L.str10073114,@object  # @.str10073114
.L.str10073114:
	.asciz	"phi"
	.size	.L.str10073114, 4

	.type	.L.str10083115,@object  # @.str10083115
.L.str10083115:
	.asciz	"52"
	.size	.L.str10083115, 3

	.type	.L.str10093116,@object  # @.str10093116
.L.str10093116:
	.asciz	"phi"
	.size	.L.str10093116, 4

	.type	.L.str10103117,@object  # @.str10103117
	.align	16
.L.str10103117:
	.asciz	"kmeans_clustering"
	.size	.L.str10103117, 18

	.type	.L.str10113118,@object  # @.str10113118
.L.str10113118:
	.asciz	"48"
	.size	.L.str10113118, 3

	.type	.L.str10123119,@object  # @.str10123119
	.align	16
.L.str10123119:
	.asciz	"indvars.iv.next36"
	.size	.L.str10123119, 18

	.type	.L.str10133120,@object  # @.str10133120
.L.str10133120:
	.zero	1
	.size	.L.str10133120, 1

	.type	.L.str10143121,@object  # @.str10143121
.L.str10143121:
	.asciz	"phi"
	.size	.L.str10143121, 4

	.type	.L.str10153122,@object  # @.str10153122
.L.str10153122:
	.asciz	"indvars.iv35"
	.size	.L.str10153122, 13

	.type	.L.str10163123,@object  # @.str10163123
.L.str10163123:
	.asciz	"phi"
	.size	.L.str10163123, 4

	.type	.L.str10173124,@object  # @.str10173124
	.align	16
.L.str10173124:
	.asciz	"indvars.iv.next36"
	.size	.L.str10173124, 18

	.type	.L.str10183125,@object  # @.str10183125
.L.str10183125:
	.asciz	"phi"
	.size	.L.str10183125, 4

	.type	.L.str10193126,@object  # @.str10193126
	.align	16
.L.str10193126:
	.asciz	"kmeans_clustering"
	.size	.L.str10193126, 18

	.type	.L.str10203127,@object  # @.str10203127
.L.str10203127:
	.asciz	"48"
	.size	.L.str10203127, 3

	.type	.L.str10213128,@object  # @.str10213128
.L.str10213128:
	.asciz	"lftr.wideiv37"
	.size	.L.str10213128, 14

	.type	.L.str10223129,@object  # @.str10223129
	.align	16
.L.str10223129:
	.asciz	"indvars.iv.next36"
	.size	.L.str10223129, 18

	.type	.L.str10233130,@object  # @.str10233130
.L.str10233130:
	.asciz	"phi"
	.size	.L.str10233130, 4

	.type	.L.str10243131,@object  # @.str10243131
.L.str10243131:
	.asciz	"lftr.wideiv37"
	.size	.L.str10243131, 14

	.type	.L.str10253132,@object  # @.str10253132
.L.str10253132:
	.asciz	"phi"
	.size	.L.str10253132, 4

	.type	.L.str10263133,@object  # @.str10263133
	.align	16
.L.str10263133:
	.asciz	"kmeans_clustering"
	.size	.L.str10263133, 18

	.type	.L.str10273134,@object  # @.str10273134
.L.str10273134:
	.asciz	"48"
	.size	.L.str10273134, 3

	.type	.L.str10283135,@object  # @.str10283135
.L.str10283135:
	.asciz	"exitcond38"
	.size	.L.str10283135, 11

	.type	.L.str10293136,@object  # @.str10293136
.L.str10293136:
	.asciz	"nclusters"
	.size	.L.str10293136, 10

	.type	.L.str10303137,@object  # @.str10303137
.L.str10303137:
	.asciz	"phi"
	.size	.L.str10303137, 4

	.type	.L.str10313138,@object  # @.str10313138
.L.str10313138:
	.asciz	"lftr.wideiv37"
	.size	.L.str10313138, 14

	.type	.L.str10323139,@object  # @.str10323139
.L.str10323139:
	.asciz	"phi"
	.size	.L.str10323139, 4

	.type	.L.str10333140,@object  # @.str10333140
.L.str10333140:
	.asciz	"exitcond38"
	.size	.L.str10333140, 11

	.type	.L.str10343141,@object  # @.str10343141
.L.str10343141:
	.asciz	"phi"
	.size	.L.str10343141, 4

	.type	.L.str10353142,@object  # @.str10353142
	.align	16
.L.str10353142:
	.asciz	"kmeans_clustering"
	.size	.L.str10353142, 18

	.type	.L.str10363143,@object  # @.str10363143
.L.str10363143:
	.asciz	"48"
	.size	.L.str10363143, 3

	.type	.L.str10373144,@object  # @.str10373144
.L.str10373144:
	.asciz	"48-1"
	.size	.L.str10373144, 5

	.type	.L.str10383145,@object  # @.str10383145
.L.str10383145:
	.asciz	".preheader9"
	.size	.L.str10383145, 12

	.type	.L.str10393146,@object  # @.str10393146
.L.str10393146:
	.asciz	"phi"
	.size	.L.str10393146, 4

	.type	.L.str10403147,@object  # @.str10403147
.L.str10403147:
	.asciz	"48"
	.size	.L.str10403147, 3

	.type	.L.str10413148,@object  # @.str10413148
.L.str10413148:
	.asciz	"phi"
	.size	.L.str10413148, 4

	.type	.L.str10423149,@object  # @.str10423149
.L.str10423149:
	.asciz	"exitcond38"
	.size	.L.str10423149, 11

	.type	.L.str10433150,@object  # @.str10433150
.L.str10433150:
	.asciz	"phi"
	.size	.L.str10433150, 4

	.type	.L.str10443151,@object  # @.str10443151
	.align	16
.L.str10443151:
	.asciz	"kmeans_clustering"
	.size	.L.str10443151, 18

	.type	.L.str10453152,@object  # @.str10453152
.L.str10453152:
	.asciz	".backedge"
	.size	.L.str10453152, 10

	.type	.L.str10463153,@object  # @.str10463153
.L.str10463153:
	.asciz	"delta.0"
	.size	.L.str10463153, 8

	.type	.L.str10473154,@object  # @.str10473154
.L.str10473154:
	.zero	1
	.size	.L.str10473154, 1

	.type	.L.str10483155,@object  # @.str10483155
.L.str10483155:
	.asciz	"._crit_edge4"
	.size	.L.str10483155, 13

	.type	.L.str10493156,@object  # @.str10493156
.L.str10493156:
	.asciz	"delta.1"
	.size	.L.str10493156, 8

	.type	.L.str10503157,@object  # @.str10503157
.L.str10503157:
	.asciz	"._crit_edge8"
	.size	.L.str10503157, 13

	.type	.L.str10513158,@object  # @.str10513158
.L.str10513158:
	.zero	1
	.size	.L.str10513158, 1

	.type	.L.str10523159,@object  # @.str10523159
.L.str10523159:
	.asciz	".preheader9"
	.size	.L.str10523159, 12

	.type	.L.str10533160,@object  # @.str10533160
.L.str10533160:
	.asciz	"delta.0"
	.size	.L.str10533160, 8

	.type	.L.str10543161,@object  # @.str10543161
.L.str10543161:
	.asciz	"phi"
	.size	.L.str10543161, 4

	.type	.L.str10553162,@object  # @.str10553162
	.align	16
.L.str10553162:
	.asciz	"kmeans_clustering"
	.size	.L.str10553162, 18

	.type	.L.str10563163,@object  # @.str10563163
.L.str10563163:
	.asciz	".backedge"
	.size	.L.str10563163, 10

	.type	.L.str10573164,@object  # @.str10573164
.L.str10573164:
	.asciz	"i.4"
	.size	.L.str10573164, 4

	.type	.L.str10583165,@object  # @.str10583165
.L.str10583165:
	.zero	1
	.size	.L.str10583165, 1

	.type	.L.str10593166,@object  # @.str10593166
.L.str10593166:
	.asciz	"._crit_edge4"
	.size	.L.str10593166, 13

	.type	.L.str10603167,@object  # @.str10603167
.L.str10603167:
	.asciz	"79"
	.size	.L.str10603167, 3

	.type	.L.str10613168,@object  # @.str10613168
.L.str10613168:
	.asciz	"._crit_edge8"
	.size	.L.str10613168, 13

	.type	.L.str10623169,@object  # @.str10623169
.L.str10623169:
	.zero	1
	.size	.L.str10623169, 1

	.type	.L.str10633170,@object  # @.str10633170
.L.str10633170:
	.asciz	".preheader9"
	.size	.L.str10633170, 12

	.type	.L.str10643171,@object  # @.str10643171
.L.str10643171:
	.asciz	"i.4"
	.size	.L.str10643171, 4

	.type	.L.str10653172,@object  # @.str10653172
.L.str10653172:
	.asciz	"phi"
	.size	.L.str10653172, 4

	.type	.L.str10663173,@object  # @.str10663173
	.align	16
.L.str10663173:
	.asciz	"kmeans_clustering"
	.size	.L.str10663173, 18

	.type	.L.str10673174,@object  # @.str10673174
.L.str10673174:
	.asciz	".backedge"
	.size	.L.str10673174, 10

	.type	.L.str10683175,@object  # @.str10683175
.L.str10683175:
	.asciz	"54"
	.size	.L.str10683175, 3

	.type	.L.str10693176,@object  # @.str10693176
.L.str10693176:
	.asciz	"npoints"
	.size	.L.str10693176, 8

	.type	.L.str10703177,@object  # @.str10703177
.L.str10703177:
	.asciz	"phi"
	.size	.L.str10703177, 4

	.type	.L.str10713178,@object  # @.str10713178
.L.str10713178:
	.asciz	"i.4"
	.size	.L.str10713178, 4

	.type	.L.str10723179,@object  # @.str10723179
.L.str10723179:
	.asciz	"phi"
	.size	.L.str10723179, 4

	.type	.L.str10733180,@object  # @.str10733180
.L.str10733180:
	.asciz	"54"
	.size	.L.str10733180, 3

	.type	.L.str10743181,@object  # @.str10743181
.L.str10743181:
	.asciz	"phi"
	.size	.L.str10743181, 4

	.type	.L.str10753182,@object  # @.str10753182
	.align	16
.L.str10753182:
	.asciz	"kmeans_clustering"
	.size	.L.str10753182, 18

	.type	.L.str10763183,@object  # @.str10763183
.L.str10763183:
	.asciz	".backedge"
	.size	.L.str10763183, 10

	.type	.L.str10773184,@object  # @.str10773184
.L.str10773184:
	.asciz	".backedge-0"
	.size	.L.str10773184, 12

	.type	.L.str10783185,@object  # @.str10783185
.L.str10783185:
	.asciz	"55"
	.size	.L.str10783185, 3

	.type	.L.str10793186,@object  # @.str10793186
.L.str10793186:
	.asciz	"phi"
	.size	.L.str10793186, 4

	.type	.L.str10803187,@object  # @.str10803187
.L.str10803187:
	.asciz	".preheader2"
	.size	.L.str10803187, 12

	.type	.L.str10813188,@object  # @.str10813188
.L.str10813188:
	.asciz	"phi"
	.size	.L.str10813188, 4

	.type	.L.str10823189,@object  # @.str10823189
.L.str10823189:
	.asciz	"54"
	.size	.L.str10823189, 3

	.type	.L.str10833190,@object  # @.str10833190
.L.str10833190:
	.asciz	"phi"
	.size	.L.str10833190, 4

	.type	.L.str10843191,@object  # @.str10843191
	.align	16
.L.str10843191:
	.asciz	"kmeans_clustering"
	.size	.L.str10843191, 18

	.type	.L.str10853192,@object  # @.str10853192
.L.str10853192:
	.asciz	".preheader2"
	.size	.L.str10853192, 12

	.type	.L.str10863193,@object  # @.str10863193
.L.str10863193:
	.asciz	".preheader2-0"
	.size	.L.str10863193, 14

	.type	.L.str10873194,@object  # @.str10873194
.L.str10873194:
	.asciz	".preheader"
	.size	.L.str10873194, 11

	.type	.L.str10883195,@object  # @.str10883195
.L.str10883195:
	.asciz	"phi"
	.size	.L.str10883195, 4

	.type	.L.str10893196,@object  # @.str10893196
.L.str10893196:
	.asciz	"._crit_edge4"
	.size	.L.str10893196, 13

	.type	.L.str10903197,@object  # @.str10903197
.L.str10903197:
	.asciz	"phi"
	.size	.L.str10903197, 4

	.type	.L.str10913198,@object  # @.str10913198
.L.str10913198:
	.asciz	"46"
	.size	.L.str10913198, 3

	.type	.L.str10923199,@object  # @.str10923199
.L.str10923199:
	.asciz	"phi"
	.size	.L.str10923199, 4

	.type	.L.str10933200,@object  # @.str10933200
	.align	16
.L.str10933200:
	.asciz	"kmeans_clustering"
	.size	.L.str10933200, 18

	.type	.L.str10943201,@object  # @.str10943201
.L.str10943201:
	.asciz	"55"
	.size	.L.str10943201, 3

	.type	.L.str10953202,@object  # @.str10953202
.L.str10953202:
	.asciz	"56"
	.size	.L.str10953202, 3

	.type	.L.str10963203,@object  # @.str10963203
.L.str10963203:
	.asciz	"i.4"
	.size	.L.str10963203, 4

	.type	.L.str10973204,@object  # @.str10973204
.L.str10973204:
	.asciz	"phi"
	.size	.L.str10973204, 4

	.type	.L.str10983205,@object  # @.str10983205
.L.str10983205:
	.asciz	"56"
	.size	.L.str10983205, 3

	.type	.L.str10993206,@object  # @.str10993206
.L.str10993206:
	.asciz	"phi"
	.size	.L.str10993206, 4

	.type	.L.str11003207,@object  # @.str11003207
	.align	16
.L.str11003207:
	.asciz	"kmeans_clustering"
	.size	.L.str11003207, 18

	.type	.L.str11013208,@object  # @.str11013208
.L.str11013208:
	.asciz	"55"
	.size	.L.str11013208, 3

	.type	.L.str11023209,@object  # @.str11023209
.L.str11023209:
	.asciz	"57"
	.size	.L.str11023209, 3

	.type	.L.str11033210,@object  # @.str11033210
.L.str11033210:
	.asciz	"56"
	.size	.L.str11033210, 3

	.type	.L.str11043211,@object  # @.str11043211
.L.str11043211:
	.asciz	"phi"
	.size	.L.str11043211, 4

	.type	.L.str11053212,@object  # @.str11053212
.L.str11053212:
	.asciz	"feature"
	.size	.L.str11053212, 8

	.type	.L.str11063213,@object  # @.str11063213
.L.str11063213:
	.asciz	"phi"
	.size	.L.str11063213, 4

	.type	.L.str11073214,@object  # @.str11073214
.L.str11073214:
	.asciz	"57"
	.size	.L.str11073214, 3

	.type	.L.str11083215,@object  # @.str11083215
.L.str11083215:
	.asciz	"phi"
	.size	.L.str11083215, 4

	.type	.L.str11093216,@object  # @.str11093216
	.align	16
.L.str11093216:
	.asciz	"kmeans_clustering"
	.size	.L.str11093216, 18

	.type	.L.str11103217,@object  # @.str11103217
.L.str11103217:
	.asciz	"55"
	.size	.L.str11103217, 3

	.type	.L.str11113218,@object  # @.str11113218
.L.str11113218:
	.asciz	"58"
	.size	.L.str11113218, 3

	.type	.L.str11123219,@object  # @.str11123219
.L.str11123219:
	.asciz	"57"
	.size	.L.str11123219, 3

	.type	.L.str11133220,@object  # @.str11133220
.L.str11133220:
	.asciz	"phi"
	.size	.L.str11133220, 4

	.type	.L.str11143221,@object  # @.str11143221
.L.str11143221:
	.asciz	"58"
	.size	.L.str11143221, 3

	.type	.L.str11153222,@object  # @.str11153222
.L.str11153222:
	.asciz	"phi"
	.size	.L.str11153222, 4

	.type	.L.str11163223,@object  # @.str11163223
	.align	16
.L.str11163223:
	.asciz	"kmeans_clustering"
	.size	.L.str11163223, 18

	.type	.L.str11173224,@object  # @.str11173224
.L.str11173224:
	.asciz	"55"
	.size	.L.str11173224, 3

	.type	.L.str11183225,@object  # @.str11183225
.L.str11183225:
	.asciz	"59"
	.size	.L.str11183225, 3

	.type	.L.str11193226,@object  # @.str11193226
	.align	16
.L.str11193226:
	.asciz	"find_nearest_point"
	.size	.L.str11193226, 19

	.type	.L.str11203227,@object  # @.str11203227
.L.str11203227:
	.asciz	"phi"
	.size	.L.str11203227, 4

	.type	.L.str11213228,@object  # @.str11213228
.L.str11213228:
	.asciz	"58"
	.size	.L.str11213228, 3

	.type	.L.str11223229,@object  # @.str11223229
.L.str11223229:
	.asciz	"phi"
	.size	.L.str11223229, 4

	.type	.L.str11233230,@object  # @.str11233230
.L.str11233230:
	.asciz	"pt"
	.size	.L.str11233230, 3

	.type	.L.str11243231,@object  # @.str11243231
.L.str11243231:
	.asciz	"phi"
	.size	.L.str11243231, 4

	.type	.L.str11253232,@object  # @.str11253232
.L.str11253232:
	.asciz	"nfeatures"
	.size	.L.str11253232, 10

	.type	.L.str11263233,@object  # @.str11263233
.L.str11263233:
	.asciz	"phi"
	.size	.L.str11263233, 4

	.type	.L.str11273234,@object  # @.str11273234
.L.str11273234:
	.asciz	"nfeatures"
	.size	.L.str11273234, 10

	.type	.L.str11283235,@object  # @.str11283235
.L.str11283235:
	.asciz	"phi"
	.size	.L.str11283235, 4

	.type	.L.str11293236,@object  # @.str11293236
.L.str11293236:
	.asciz	"7"
	.size	.L.str11293236, 2

	.type	.L.str11303237,@object  # @.str11303237
.L.str11303237:
	.asciz	"phi"
	.size	.L.str11303237, 4

	.type	.L.str11313238,@object  # @.str11313238
.L.str11313238:
	.asciz	"pts"
	.size	.L.str11313238, 4

	.type	.L.str11323239,@object  # @.str11323239
.L.str11323239:
	.asciz	"phi"
	.size	.L.str11323239, 4

	.type	.L.str11333240,@object  # @.str11333240
.L.str11333240:
	.asciz	"nclusters"
	.size	.L.str11333240, 10

	.type	.L.str11343241,@object  # @.str11343241
.L.str11343241:
	.asciz	"phi"
	.size	.L.str11343241, 4

	.type	.L.str11353242,@object  # @.str11353242
.L.str11353242:
	.asciz	"npts"
	.size	.L.str11353242, 5

	.type	.L.str11363243,@object  # @.str11363243
.L.str11363243:
	.asciz	"phi"
	.size	.L.str11363243, 4

	.type	.L.str11373244,@object  # @.str11373244
.L.str11373244:
	.asciz	"59"
	.size	.L.str11373244, 3

	.type	.L.str11383245,@object  # @.str11383245
.L.str11383245:
	.asciz	"phi"
	.size	.L.str11383245, 4

	.type	.L.str11393246,@object  # @.str11393246
	.align	16
.L.str11393246:
	.asciz	"kmeans_clustering"
	.size	.L.str11393246, 18

	.type	.L.str11403247,@object  # @.str11403247
.L.str11403247:
	.asciz	"55"
	.size	.L.str11403247, 3

	.type	.L.str11413248,@object  # @.str11413248
.L.str11413248:
	.asciz	"60"
	.size	.L.str11413248, 3

	.type	.L.str11423249,@object  # @.str11423249
.L.str11423249:
	.asciz	"56"
	.size	.L.str11423249, 3

	.type	.L.str11433250,@object  # @.str11433250
.L.str11433250:
	.asciz	"phi"
	.size	.L.str11433250, 4

	.type	.L.str11443251,@object  # @.str11443251
.L.str11443251:
	.asciz	"membership"
	.size	.L.str11443251, 11

	.type	.L.str11453252,@object  # @.str11453252
.L.str11453252:
	.asciz	"phi"
	.size	.L.str11453252, 4

	.type	.L.str11463253,@object  # @.str11463253
.L.str11463253:
	.asciz	"60"
	.size	.L.str11463253, 3

	.type	.L.str11473254,@object  # @.str11473254
.L.str11473254:
	.asciz	"phi"
	.size	.L.str11473254, 4

	.type	.L.str11483255,@object  # @.str11483255
	.align	16
.L.str11483255:
	.asciz	"kmeans_clustering"
	.size	.L.str11483255, 18

	.type	.L.str11493256,@object  # @.str11493256
.L.str11493256:
	.asciz	"55"
	.size	.L.str11493256, 3

	.type	.L.str11503257,@object  # @.str11503257
.L.str11503257:
	.asciz	"61"
	.size	.L.str11503257, 3

	.type	.L.str11513258,@object  # @.str11513258
.L.str11513258:
	.asciz	"60"
	.size	.L.str11513258, 3

	.type	.L.str11523259,@object  # @.str11523259
.L.str11523259:
	.asciz	"phi"
	.size	.L.str11523259, 4

	.type	.L.str11533260,@object  # @.str11533260
.L.str11533260:
	.asciz	"61"
	.size	.L.str11533260, 3

	.type	.L.str11543261,@object  # @.str11543261
.L.str11543261:
	.asciz	"phi"
	.size	.L.str11543261, 4

	.type	.L.str11553262,@object  # @.str11553262
	.align	16
.L.str11553262:
	.asciz	"kmeans_clustering"
	.size	.L.str11553262, 18

	.type	.L.str11563263,@object  # @.str11563263
.L.str11563263:
	.asciz	"55"
	.size	.L.str11563263, 3

	.type	.L.str11573264,@object  # @.str11573264
.L.str11573264:
	.asciz	"62"
	.size	.L.str11573264, 3

	.type	.L.str11583265,@object  # @.str11583265
.L.str11583265:
	.asciz	"59"
	.size	.L.str11583265, 3

	.type	.L.str11593266,@object  # @.str11593266
.L.str11593266:
	.asciz	"phi"
	.size	.L.str11593266, 4

	.type	.L.str11603267,@object  # @.str11603267
.L.str11603267:
	.asciz	"61"
	.size	.L.str11603267, 3

	.type	.L.str11613268,@object  # @.str11613268
.L.str11613268:
	.asciz	"phi"
	.size	.L.str11613268, 4

	.type	.L.str11623269,@object  # @.str11623269
.L.str11623269:
	.asciz	"62"
	.size	.L.str11623269, 3

	.type	.L.str11633270,@object  # @.str11633270
.L.str11633270:
	.asciz	"phi"
	.size	.L.str11633270, 4

	.type	.L.str11643271,@object  # @.str11643271
	.align	16
.L.str11643271:
	.asciz	"kmeans_clustering"
	.size	.L.str11643271, 18

	.type	.L.str11653272,@object  # @.str11653272
.L.str11653272:
	.asciz	"55"
	.size	.L.str11653272, 3

	.type	.L.str11663273,@object  # @.str11663273
.L.str11663273:
	.asciz	"55-1"
	.size	.L.str11663273, 5

	.type	.L.str11673274,@object  # @.str11673274
.L.str11673274:
	.asciz	"65"
	.size	.L.str11673274, 3

	.type	.L.str11683275,@object  # @.str11683275
.L.str11683275:
	.asciz	"phi"
	.size	.L.str11683275, 4

	.type	.L.str11693276,@object  # @.str11693276
.L.str11693276:
	.asciz	"63"
	.size	.L.str11693276, 3

	.type	.L.str11703277,@object  # @.str11703277
.L.str11703277:
	.asciz	"phi"
	.size	.L.str11703277, 4

	.type	.L.str11713278,@object  # @.str11713278
.L.str11713278:
	.asciz	"62"
	.size	.L.str11713278, 3

	.type	.L.str11723279,@object  # @.str11723279
.L.str11723279:
	.asciz	"phi"
	.size	.L.str11723279, 4

	.type	.L.str11733280,@object  # @.str11733280
	.align	16
.L.str11733280:
	.asciz	"kmeans_clustering"
	.size	.L.str11733280, 18

	.type	.L.str11743281,@object  # @.str11743281
.L.str11743281:
	.asciz	"63"
	.size	.L.str11743281, 3

	.type	.L.str11753282,@object  # @.str11753282
.L.str11753282:
	.asciz	"64"
	.size	.L.str11753282, 3

	.type	.L.str11763283,@object  # @.str11763283
.L.str11763283:
	.zero	1
	.size	.L.str11763283, 1

	.type	.L.str11773284,@object  # @.str11773284
.L.str11773284:
	.asciz	"phi"
	.size	.L.str11773284, 4

	.type	.L.str11783285,@object  # @.str11783285
.L.str11783285:
	.asciz	"delta.0"
	.size	.L.str11783285, 8

	.type	.L.str11793286,@object  # @.str11793286
.L.str11793286:
	.asciz	"phi"
	.size	.L.str11793286, 4

	.type	.L.str11803287,@object  # @.str11803287
.L.str11803287:
	.asciz	"64"
	.size	.L.str11803287, 3

	.type	.L.str11813288,@object  # @.str11813288
.L.str11813288:
	.asciz	"phi"
	.size	.L.str11813288, 4

	.type	.L.str11823289,@object  # @.str11823289
	.align	16
.L.str11823289:
	.asciz	"kmeans_clustering"
	.size	.L.str11823289, 18

	.type	.L.str11833290,@object  # @.str11833290
.L.str11833290:
	.asciz	"63"
	.size	.L.str11833290, 3

	.type	.L.str11843291,@object  # @.str11843291
.L.str11843291:
	.asciz	"63-1"
	.size	.L.str11843291, 5

	.type	.L.str11853292,@object  # @.str11853292
.L.str11853292:
	.asciz	"65"
	.size	.L.str11853292, 3

	.type	.L.str11863293,@object  # @.str11863293
.L.str11863293:
	.asciz	"phi"
	.size	.L.str11863293, 4

	.type	.L.str11873294,@object  # @.str11873294
	.align	16
.L.str11873294:
	.asciz	"kmeans_clustering"
	.size	.L.str11873294, 18

	.type	.L.str11883295,@object  # @.str11883295
.L.str11883295:
	.asciz	"65"
	.size	.L.str11883295, 3

	.type	.L.str11893296,@object  # @.str11893296
.L.str11893296:
	.asciz	"delta.1"
	.size	.L.str11893296, 8

	.type	.L.str11903297,@object  # @.str11903297
.L.str11903297:
	.asciz	"delta.0"
	.size	.L.str11903297, 8

	.type	.L.str11913298,@object  # @.str11913298
.L.str11913298:
	.asciz	"55"
	.size	.L.str11913298, 3

	.type	.L.str11923299,@object  # @.str11923299
.L.str11923299:
	.asciz	"64"
	.size	.L.str11923299, 3

	.type	.L.str11933300,@object  # @.str11933300
.L.str11933300:
	.asciz	"63"
	.size	.L.str11933300, 3

	.type	.L.str11943301,@object  # @.str11943301
.L.str11943301:
	.asciz	"delta.1"
	.size	.L.str11943301, 8

	.type	.L.str11953302,@object  # @.str11953302
.L.str11953302:
	.asciz	"phi"
	.size	.L.str11953302, 4

	.type	.L.str11963303,@object  # @.str11963303
	.align	16
.L.str11963303:
	.asciz	"kmeans_clustering"
	.size	.L.str11963303, 18

	.type	.L.str11973304,@object  # @.str11973304
.L.str11973304:
	.asciz	"65"
	.size	.L.str11973304, 3

	.type	.L.str11983305,@object  # @.str11983305
.L.str11983305:
	.asciz	"65-0"
	.size	.L.str11983305, 5

	.type	.L.str11993306,@object  # @.str11993306
.L.str11993306:
	.asciz	"60"
	.size	.L.str11993306, 3

	.type	.L.str12003307,@object  # @.str12003307
.L.str12003307:
	.asciz	"phi"
	.size	.L.str12003307, 4

	.type	.L.str12013308,@object  # @.str12013308
.L.str12013308:
	.asciz	"59"
	.size	.L.str12013308, 3

	.type	.L.str12023309,@object  # @.str12023309
.L.str12023309:
	.asciz	"phi"
	.size	.L.str12023309, 4

	.type	.L.str12033310,@object  # @.str12033310
	.align	16
.L.str12033310:
	.asciz	"kmeans_clustering"
	.size	.L.str12033310, 18

	.type	.L.str12043311,@object  # @.str12043311
.L.str12043311:
	.asciz	"65"
	.size	.L.str12043311, 3

	.type	.L.str12053312,@object  # @.str12053312
.L.str12053312:
	.asciz	"66"
	.size	.L.str12053312, 3

	.type	.L.str12063313,@object  # @.str12063313
.L.str12063313:
	.asciz	"59"
	.size	.L.str12063313, 3

	.type	.L.str12073314,@object  # @.str12073314
.L.str12073314:
	.asciz	"phi"
	.size	.L.str12073314, 4

	.type	.L.str12083315,@object  # @.str12083315
.L.str12083315:
	.asciz	"66"
	.size	.L.str12083315, 3

	.type	.L.str12093316,@object  # @.str12093316
.L.str12093316:
	.asciz	"phi"
	.size	.L.str12093316, 4

	.type	.L.str12103317,@object  # @.str12103317
	.align	16
.L.str12103317:
	.asciz	"kmeans_clustering"
	.size	.L.str12103317, 18

	.type	.L.str12113318,@object  # @.str12113318
.L.str12113318:
	.asciz	"65"
	.size	.L.str12113318, 3

	.type	.L.str12123319,@object  # @.str12123319
.L.str12123319:
	.asciz	"67"
	.size	.L.str12123319, 3

	.type	.L.str12133320,@object  # @.str12133320
.L.str12133320:
	.asciz	"66"
	.size	.L.str12133320, 3

	.type	.L.str12143321,@object  # @.str12143321
.L.str12143321:
	.asciz	"phi"
	.size	.L.str12143321, 4

	.type	.L.str12153322,@object  # @.str12153322
.L.str12153322:
	.asciz	"38"
	.size	.L.str12153322, 3

	.type	.L.str12163323,@object  # @.str12163323
.L.str12163323:
	.asciz	"phi"
	.size	.L.str12163323, 4

	.type	.L.str12173324,@object  # @.str12173324
.L.str12173324:
	.asciz	"67"
	.size	.L.str12173324, 3

	.type	.L.str12183325,@object  # @.str12183325
.L.str12183325:
	.asciz	"phi"
	.size	.L.str12183325, 4

	.type	.L.str12193326,@object  # @.str12193326
	.align	16
.L.str12193326:
	.asciz	"kmeans_clustering"
	.size	.L.str12193326, 18

	.type	.L.str12203327,@object  # @.str12203327
.L.str12203327:
	.asciz	"65"
	.size	.L.str12203327, 3

	.type	.L.str12213328,@object  # @.str12213328
.L.str12213328:
	.asciz	"68"
	.size	.L.str12213328, 3

	.type	.L.str12223329,@object  # @.str12223329
.L.str12223329:
	.asciz	"67"
	.size	.L.str12223329, 3

	.type	.L.str12233330,@object  # @.str12233330
.L.str12233330:
	.asciz	"phi"
	.size	.L.str12233330, 4

	.type	.L.str12243331,@object  # @.str12243331
.L.str12243331:
	.asciz	"68"
	.size	.L.str12243331, 3

	.type	.L.str12253332,@object  # @.str12253332
.L.str12253332:
	.asciz	"phi"
	.size	.L.str12253332, 4

	.type	.L.str12263333,@object  # @.str12263333
	.align	16
.L.str12263333:
	.asciz	"kmeans_clustering"
	.size	.L.str12263333, 18

	.type	.L.str12273334,@object  # @.str12273334
.L.str12273334:
	.asciz	"65"
	.size	.L.str12273334, 3

	.type	.L.str12283335,@object  # @.str12283335
.L.str12283335:
	.asciz	"69"
	.size	.L.str12283335, 3

	.type	.L.str12293336,@object  # @.str12293336
.L.str12293336:
	.zero	1
	.size	.L.str12293336, 1

	.type	.L.str12303337,@object  # @.str12303337
.L.str12303337:
	.asciz	"phi"
	.size	.L.str12303337, 4

	.type	.L.str12313338,@object  # @.str12313338
.L.str12313338:
	.asciz	"68"
	.size	.L.str12313338, 3

	.type	.L.str12323339,@object  # @.str12323339
.L.str12323339:
	.asciz	"phi"
	.size	.L.str12323339, 4

	.type	.L.str12333340,@object  # @.str12333340
.L.str12333340:
	.asciz	"69"
	.size	.L.str12333340, 3

	.type	.L.str12343341,@object  # @.str12343341
.L.str12343341:
	.asciz	"phi"
	.size	.L.str12343341, 4

	.type	.L.str12353342,@object  # @.str12353342
	.align	16
.L.str12353342:
	.asciz	"kmeans_clustering"
	.size	.L.str12353342, 18

	.type	.L.str12363343,@object  # @.str12363343
.L.str12363343:
	.asciz	"65"
	.size	.L.str12363343, 3

	.type	.L.str12373344,@object  # @.str12373344
.L.str12373344:
	.asciz	"65-1"
	.size	.L.str12373344, 5

	.type	.L.str12383345,@object  # @.str12383345
.L.str12383345:
	.asciz	"67"
	.size	.L.str12383345, 3

	.type	.L.str12393346,@object  # @.str12393346
.L.str12393346:
	.asciz	"phi"
	.size	.L.str12393346, 4

	.type	.L.str12403347,@object  # @.str12403347
.L.str12403347:
	.asciz	"69"
	.size	.L.str12403347, 3

	.type	.L.str12413348,@object  # @.str12413348
.L.str12413348:
	.asciz	"phi"
	.size	.L.str12413348, 4

	.type	.L.str12423349,@object  # @.str12423349
	.align	16
.L.str12423349:
	.asciz	"kmeans_clustering"
	.size	.L.str12423349, 18

	.type	.L.str12433350,@object  # @.str12433350
.L.str12433350:
	.asciz	"65"
	.size	.L.str12433350, 3

	.type	.L.str12443351,@object  # @.str12443351
.L.str12443351:
	.asciz	"65-3"
	.size	.L.str12443351, 5

	.type	.L.str12453352,@object  # @.str12453352
.L.str12453352:
	.asciz	".lr.ph7"
	.size	.L.str12453352, 8

	.type	.L.str12463353,@object  # @.str12463353
.L.str12463353:
	.asciz	"phi"
	.size	.L.str12463353, 4

	.type	.L.str12473354,@object  # @.str12473354
.L.str12473354:
	.asciz	"._crit_edge8"
	.size	.L.str12473354, 13

	.type	.L.str12483355,@object  # @.str12483355
.L.str12483355:
	.asciz	"phi"
	.size	.L.str12483355, 4

	.type	.L.str12493356,@object  # @.str12493356
.L.str12493356:
	.asciz	"45"
	.size	.L.str12493356, 3

	.type	.L.str12503357,@object  # @.str12503357
.L.str12503357:
	.asciz	"phi"
	.size	.L.str12503357, 4

	.type	.L.str12513358,@object  # @.str12513358
	.align	16
.L.str12513358:
	.asciz	"kmeans_clustering"
	.size	.L.str12513358, 18

	.type	.L.str12523359,@object  # @.str12523359
.L.str12523359:
	.asciz	".lr.ph7"
	.size	.L.str12523359, 8

	.type	.L.str12533360,@object  # @.str12533360
.L.str12533360:
	.asciz	"70"
	.size	.L.str12533360, 3

	.type	.L.str12543361,@object  # @.str12543361
.L.str12543361:
	.asciz	"57"
	.size	.L.str12543361, 3

	.type	.L.str12553362,@object  # @.str12553362
.L.str12553362:
	.asciz	"phi"
	.size	.L.str12553362, 4

	.type	.L.str12563363,@object  # @.str12563363
.L.str12563363:
	.asciz	"70"
	.size	.L.str12563363, 3

	.type	.L.str12573364,@object  # @.str12573364
.L.str12573364:
	.asciz	"phi"
	.size	.L.str12573364, 4

	.type	.L.str12583365,@object  # @.str12583365
	.align	16
.L.str12583365:
	.asciz	"kmeans_clustering"
	.size	.L.str12583365, 18

	.type	.L.str12593366,@object  # @.str12593366
.L.str12593366:
	.asciz	".lr.ph7"
	.size	.L.str12593366, 8

	.type	.L.str12603367,@object  # @.str12603367
.L.str12603367:
	.asciz	"71"
	.size	.L.str12603367, 3

	.type	.L.str12613368,@object  # @.str12613368
.L.str12613368:
	.asciz	"66"
	.size	.L.str12613368, 3

	.type	.L.str12623369,@object  # @.str12623369
.L.str12623369:
	.asciz	"phi"
	.size	.L.str12623369, 4

	.type	.L.str12633370,@object  # @.str12633370
.L.str12633370:
	.asciz	"40"
	.size	.L.str12633370, 3

	.type	.L.str12643371,@object  # @.str12643371
.L.str12643371:
	.asciz	"phi"
	.size	.L.str12643371, 4

	.type	.L.str12653372,@object  # @.str12653372
.L.str12653372:
	.asciz	"71"
	.size	.L.str12653372, 3

	.type	.L.str12663373,@object  # @.str12663373
.L.str12663373:
	.asciz	"phi"
	.size	.L.str12663373, 4

	.type	.L.str12673374,@object  # @.str12673374
	.align	16
.L.str12673374:
	.asciz	"kmeans_clustering"
	.size	.L.str12673374, 18

	.type	.L.str12683375,@object  # @.str12683375
.L.str12683375:
	.asciz	".lr.ph7"
	.size	.L.str12683375, 8

	.type	.L.str12693376,@object  # @.str12693376
.L.str12693376:
	.asciz	"72"
	.size	.L.str12693376, 3

	.type	.L.str12703377,@object  # @.str12703377
.L.str12703377:
	.asciz	"71"
	.size	.L.str12703377, 3

	.type	.L.str12713378,@object  # @.str12713378
.L.str12713378:
	.asciz	"phi"
	.size	.L.str12713378, 4

	.type	.L.str12723379,@object  # @.str12723379
.L.str12723379:
	.asciz	"72"
	.size	.L.str12723379, 3

	.type	.L.str12733380,@object  # @.str12733380
.L.str12733380:
	.asciz	"phi"
	.size	.L.str12733380, 4

	.type	.L.str12743381,@object  # @.str12743381
	.align	16
.L.str12743381:
	.asciz	"kmeans_clustering"
	.size	.L.str12743381, 18

	.type	.L.str12753382,@object  # @.str12753382
.L.str12753382:
	.asciz	".lr.ph7"
	.size	.L.str12753382, 8

	.type	.L.str12763383,@object  # @.str12763383
.L.str12763383:
	.asciz	".lr.ph7-0"
	.size	.L.str12763383, 10

	.type	.L.str12773384,@object  # @.str12773384
.L.str12773384:
	.asciz	"73"
	.size	.L.str12773384, 3

	.type	.L.str12783385,@object  # @.str12783385
.L.str12783385:
	.asciz	"phi"
	.size	.L.str12783385, 4

	.type	.L.str12793386,@object  # @.str12793386
	.align	16
.L.str12793386:
	.asciz	"kmeans_clustering"
	.size	.L.str12793386, 18

	.type	.L.str12803387,@object  # @.str12803387
.L.str12803387:
	.asciz	"73"
	.size	.L.str12803387, 3

	.type	.L.str12813388,@object  # @.str12813388
.L.str12813388:
	.asciz	"indvars.iv31"
	.size	.L.str12813388, 13

	.type	.L.str12823389,@object  # @.str12823389
	.align	16
.L.str12823389:
	.asciz	"indvars.iv.next32"
	.size	.L.str12823389, 18

	.type	.L.str12833390,@object  # @.str12833390
.L.str12833390:
	.asciz	"73"
	.size	.L.str12833390, 3

	.type	.L.str12843391,@object  # @.str12843391
.L.str12843391:
	.zero	1
	.size	.L.str12843391, 1

	.type	.L.str12853392,@object  # @.str12853392
.L.str12853392:
	.asciz	".lr.ph7"
	.size	.L.str12853392, 8

	.type	.L.str12863393,@object  # @.str12863393
.L.str12863393:
	.asciz	"indvars.iv31"
	.size	.L.str12863393, 13

	.type	.L.str12873394,@object  # @.str12873394
.L.str12873394:
	.asciz	"phi"
	.size	.L.str12873394, 4

	.type	.L.str12883395,@object  # @.str12883395
	.align	16
.L.str12883395:
	.asciz	"kmeans_clustering"
	.size	.L.str12883395, 18

	.type	.L.str12893396,@object  # @.str12893396
.L.str12893396:
	.asciz	"73"
	.size	.L.str12893396, 3

	.type	.L.str12903397,@object  # @.str12903397
.L.str12903397:
	.asciz	"74"
	.size	.L.str12903397, 3

	.type	.L.str12913398,@object  # @.str12913398
.L.str12913398:
	.asciz	"indvars.iv31"
	.size	.L.str12913398, 13

	.type	.L.str12923399,@object  # @.str12923399
.L.str12923399:
	.asciz	"phi"
	.size	.L.str12923399, 4

	.type	.L.str12933400,@object  # @.str12933400
.L.str12933400:
	.asciz	"70"
	.size	.L.str12933400, 3

	.type	.L.str12943401,@object  # @.str12943401
.L.str12943401:
	.asciz	"phi"
	.size	.L.str12943401, 4

	.type	.L.str12953402,@object  # @.str12953402
.L.str12953402:
	.asciz	"74"
	.size	.L.str12953402, 3

	.type	.L.str12963403,@object  # @.str12963403
.L.str12963403:
	.asciz	"phi"
	.size	.L.str12963403, 4

	.type	.L.str12973404,@object  # @.str12973404
	.align	16
.L.str12973404:
	.asciz	"kmeans_clustering"
	.size	.L.str12973404, 18

	.type	.L.str12983405,@object  # @.str12983405
.L.str12983405:
	.asciz	"73"
	.size	.L.str12983405, 3

	.type	.L.str12993406,@object  # @.str12993406
.L.str12993406:
	.asciz	"75"
	.size	.L.str12993406, 3

	.type	.L.str13003407,@object  # @.str13003407
.L.str13003407:
	.asciz	"74"
	.size	.L.str13003407, 3

	.type	.L.str13013408,@object  # @.str13013408
.L.str13013408:
	.asciz	"phi"
	.size	.L.str13013408, 4

	.type	.L.str13023409,@object  # @.str13023409
.L.str13023409:
	.asciz	"75"
	.size	.L.str13023409, 3

	.type	.L.str13033410,@object  # @.str13033410
.L.str13033410:
	.asciz	"phi"
	.size	.L.str13033410, 4

	.type	.L.str13043411,@object  # @.str13043411
	.align	16
.L.str13043411:
	.asciz	"kmeans_clustering"
	.size	.L.str13043411, 18

	.type	.L.str13053412,@object  # @.str13053412
.L.str13053412:
	.asciz	"73"
	.size	.L.str13053412, 3

	.type	.L.str13063413,@object  # @.str13063413
.L.str13063413:
	.asciz	"76"
	.size	.L.str13063413, 3

	.type	.L.str13073414,@object  # @.str13073414
.L.str13073414:
	.asciz	"indvars.iv31"
	.size	.L.str13073414, 13

	.type	.L.str13083415,@object  # @.str13083415
.L.str13083415:
	.asciz	"phi"
	.size	.L.str13083415, 4

	.type	.L.str13093416,@object  # @.str13093416
.L.str13093416:
	.asciz	"72"
	.size	.L.str13093416, 3

	.type	.L.str13103417,@object  # @.str13103417
.L.str13103417:
	.asciz	"phi"
	.size	.L.str13103417, 4

	.type	.L.str13113418,@object  # @.str13113418
.L.str13113418:
	.asciz	"76"
	.size	.L.str13113418, 3

	.type	.L.str13123419,@object  # @.str13123419
.L.str13123419:
	.asciz	"phi"
	.size	.L.str13123419, 4

	.type	.L.str13133420,@object  # @.str13133420
	.align	16
.L.str13133420:
	.asciz	"kmeans_clustering"
	.size	.L.str13133420, 18

	.type	.L.str13143421,@object  # @.str13143421
.L.str13143421:
	.asciz	"73"
	.size	.L.str13143421, 3

	.type	.L.str13153422,@object  # @.str13153422
.L.str13153422:
	.asciz	"77"
	.size	.L.str13153422, 3

	.type	.L.str13163423,@object  # @.str13163423
.L.str13163423:
	.asciz	"76"
	.size	.L.str13163423, 3

	.type	.L.str13173424,@object  # @.str13173424
.L.str13173424:
	.asciz	"phi"
	.size	.L.str13173424, 4

	.type	.L.str13183425,@object  # @.str13183425
.L.str13183425:
	.asciz	"77"
	.size	.L.str13183425, 3

	.type	.L.str13193426,@object  # @.str13193426
.L.str13193426:
	.asciz	"phi"
	.size	.L.str13193426, 4

	.type	.L.str13203427,@object  # @.str13203427
	.align	16
.L.str13203427:
	.asciz	"kmeans_clustering"
	.size	.L.str13203427, 18

	.type	.L.str13213428,@object  # @.str13213428
.L.str13213428:
	.asciz	"73"
	.size	.L.str13213428, 3

	.type	.L.str13223429,@object  # @.str13223429
.L.str13223429:
	.asciz	"78"
	.size	.L.str13223429, 3

	.type	.L.str13233430,@object  # @.str13233430
.L.str13233430:
	.asciz	"77"
	.size	.L.str13233430, 3

	.type	.L.str13243431,@object  # @.str13243431
.L.str13243431:
	.asciz	"phi"
	.size	.L.str13243431, 4

	.type	.L.str13253432,@object  # @.str13253432
.L.str13253432:
	.asciz	"75"
	.size	.L.str13253432, 3

	.type	.L.str13263433,@object  # @.str13263433
.L.str13263433:
	.asciz	"phi"
	.size	.L.str13263433, 4

	.type	.L.str13273434,@object  # @.str13273434
.L.str13273434:
	.asciz	"78"
	.size	.L.str13273434, 3

	.type	.L.str13283435,@object  # @.str13283435
.L.str13283435:
	.asciz	"phi"
	.size	.L.str13283435, 4

	.type	.L.str13293436,@object  # @.str13293436
	.align	16
.L.str13293436:
	.asciz	"kmeans_clustering"
	.size	.L.str13293436, 18

	.type	.L.str13303437,@object  # @.str13303437
.L.str13303437:
	.asciz	"73"
	.size	.L.str13303437, 3

	.type	.L.str13313438,@object  # @.str13313438
.L.str13313438:
	.asciz	"73-0"
	.size	.L.str13313438, 5

	.type	.L.str13323439,@object  # @.str13323439
.L.str13323439:
	.asciz	"76"
	.size	.L.str13323439, 3

	.type	.L.str13333440,@object  # @.str13333440
.L.str13333440:
	.asciz	"phi"
	.size	.L.str13333440, 4

	.type	.L.str13343441,@object  # @.str13343441
.L.str13343441:
	.asciz	"78"
	.size	.L.str13343441, 3

	.type	.L.str13353442,@object  # @.str13353442
.L.str13353442:
	.asciz	"phi"
	.size	.L.str13353442, 4

	.type	.L.str13363443,@object  # @.str13363443
	.align	16
.L.str13363443:
	.asciz	"kmeans_clustering"
	.size	.L.str13363443, 18

	.type	.L.str13373444,@object  # @.str13373444
.L.str13373444:
	.asciz	"73"
	.size	.L.str13373444, 3

	.type	.L.str13383445,@object  # @.str13383445
	.align	16
.L.str13383445:
	.asciz	"indvars.iv.next32"
	.size	.L.str13383445, 18

	.type	.L.str13393446,@object  # @.str13393446
.L.str13393446:
	.zero	1
	.size	.L.str13393446, 1

	.type	.L.str13403447,@object  # @.str13403447
.L.str13403447:
	.asciz	"phi"
	.size	.L.str13403447, 4

	.type	.L.str13413448,@object  # @.str13413448
.L.str13413448:
	.asciz	"indvars.iv31"
	.size	.L.str13413448, 13

	.type	.L.str13423449,@object  # @.str13423449
.L.str13423449:
	.asciz	"phi"
	.size	.L.str13423449, 4

	.type	.L.str13433450,@object  # @.str13433450
	.align	16
.L.str13433450:
	.asciz	"indvars.iv.next32"
	.size	.L.str13433450, 18

	.type	.L.str13443451,@object  # @.str13443451
.L.str13443451:
	.asciz	"phi"
	.size	.L.str13443451, 4

	.type	.L.str13453452,@object  # @.str13453452
	.align	16
.L.str13453452:
	.asciz	"kmeans_clustering"
	.size	.L.str13453452, 18

	.type	.L.str13463453,@object  # @.str13463453
.L.str13463453:
	.asciz	"73"
	.size	.L.str13463453, 3

	.type	.L.str13473454,@object  # @.str13473454
.L.str13473454:
	.asciz	"lftr.wideiv33"
	.size	.L.str13473454, 14

	.type	.L.str13483455,@object  # @.str13483455
	.align	16
.L.str13483455:
	.asciz	"indvars.iv.next32"
	.size	.L.str13483455, 18

	.type	.L.str13493456,@object  # @.str13493456
.L.str13493456:
	.asciz	"phi"
	.size	.L.str13493456, 4

	.type	.L.str13503457,@object  # @.str13503457
.L.str13503457:
	.asciz	"lftr.wideiv33"
	.size	.L.str13503457, 14

	.type	.L.str13513458,@object  # @.str13513458
.L.str13513458:
	.asciz	"phi"
	.size	.L.str13513458, 4

	.type	.L.str13523459,@object  # @.str13523459
	.align	16
.L.str13523459:
	.asciz	"kmeans_clustering"
	.size	.L.str13523459, 18

	.type	.L.str13533460,@object  # @.str13533460
.L.str13533460:
	.asciz	"73"
	.size	.L.str13533460, 3

	.type	.L.str13543461,@object  # @.str13543461
.L.str13543461:
	.asciz	"exitcond34"
	.size	.L.str13543461, 11

	.type	.L.str13553462,@object  # @.str13553462
.L.str13553462:
	.asciz	"nfeatures"
	.size	.L.str13553462, 10

	.type	.L.str13563463,@object  # @.str13563463
.L.str13563463:
	.asciz	"phi"
	.size	.L.str13563463, 4

	.type	.L.str13573464,@object  # @.str13573464
.L.str13573464:
	.asciz	"lftr.wideiv33"
	.size	.L.str13573464, 14

	.type	.L.str13583465,@object  # @.str13583465
.L.str13583465:
	.asciz	"phi"
	.size	.L.str13583465, 4

	.type	.L.str13593466,@object  # @.str13593466
.L.str13593466:
	.asciz	"exitcond34"
	.size	.L.str13593466, 11

	.type	.L.str13603467,@object  # @.str13603467
.L.str13603467:
	.asciz	"phi"
	.size	.L.str13603467, 4

	.type	.L.str13613468,@object  # @.str13613468
	.align	16
.L.str13613468:
	.asciz	"kmeans_clustering"
	.size	.L.str13613468, 18

	.type	.L.str13623469,@object  # @.str13623469
.L.str13623469:
	.asciz	"73"
	.size	.L.str13623469, 3

	.type	.L.str13633470,@object  # @.str13633470
.L.str13633470:
	.asciz	"73-1"
	.size	.L.str13633470, 5

	.type	.L.str13643471,@object  # @.str13643471
.L.str13643471:
	.asciz	"._crit_edge8"
	.size	.L.str13643471, 13

	.type	.L.str13653472,@object  # @.str13653472
.L.str13653472:
	.asciz	"phi"
	.size	.L.str13653472, 4

	.type	.L.str13663473,@object  # @.str13663473
.L.str13663473:
	.asciz	"73"
	.size	.L.str13663473, 3

	.type	.L.str13673474,@object  # @.str13673474
.L.str13673474:
	.asciz	"phi"
	.size	.L.str13673474, 4

	.type	.L.str13683475,@object  # @.str13683475
.L.str13683475:
	.asciz	"exitcond34"
	.size	.L.str13683475, 11

	.type	.L.str13693476,@object  # @.str13693476
.L.str13693476:
	.asciz	"phi"
	.size	.L.str13693476, 4

	.type	.L.str13703477,@object  # @.str13703477
	.align	16
.L.str13703477:
	.asciz	"kmeans_clustering"
	.size	.L.str13703477, 18

	.type	.L.str13713478,@object  # @.str13713478
.L.str13713478:
	.asciz	"._crit_edge8"
	.size	.L.str13713478, 13

	.type	.L.str13723479,@object  # @.str13723479
.L.str13723479:
	.asciz	"79"
	.size	.L.str13723479, 3

	.type	.L.str13733480,@object  # @.str13733480
.L.str13733480:
	.zero	1
	.size	.L.str13733480, 1

	.type	.L.str13743481,@object  # @.str13743481
.L.str13743481:
	.asciz	"phi"
	.size	.L.str13743481, 4

	.type	.L.str13753482,@object  # @.str13753482
.L.str13753482:
	.asciz	"i.4"
	.size	.L.str13753482, 4

	.type	.L.str13763483,@object  # @.str13763483
.L.str13763483:
	.asciz	"phi"
	.size	.L.str13763483, 4

	.type	.L.str13773484,@object  # @.str13773484
.L.str13773484:
	.asciz	"79"
	.size	.L.str13773484, 3

	.type	.L.str13783485,@object  # @.str13783485
.L.str13783485:
	.asciz	"phi"
	.size	.L.str13783485, 4

	.type	.L.str13793486,@object  # @.str13793486
	.align	16
.L.str13793486:
	.asciz	"kmeans_clustering"
	.size	.L.str13793486, 18

	.type	.L.str13803487,@object  # @.str13803487
.L.str13803487:
	.asciz	"._crit_edge8"
	.size	.L.str13803487, 13

	.type	.L.str13813488,@object  # @.str13813488
.L.str13813488:
	.asciz	"._crit_edge8-1"
	.size	.L.str13813488, 15

	.type	.L.str13823489,@object  # @.str13823489
.L.str13823489:
	.asciz	".backedge"
	.size	.L.str13823489, 10

	.type	.L.str13833490,@object  # @.str13833490
.L.str13833490:
	.asciz	"phi"
	.size	.L.str13833490, 4

	.type	.L.str13843491,@object  # @.str13843491
	.align	16
.L.str13843491:
	.asciz	"kmeans_clustering"
	.size	.L.str13843491, 18

	.type	.L.str13853492,@object  # @.str13853492
.L.str13853492:
	.asciz	".preheader"
	.size	.L.str13853492, 11

	.type	.L.str13863493,@object  # @.str13863493
.L.str13863493:
	.asciz	"indvars.iv27"
	.size	.L.str13863493, 13

	.type	.L.str13873494,@object  # @.str13873494
.L.str13873494:
	.zero	1
	.size	.L.str13873494, 1

	.type	.L.str13883495,@object  # @.str13883495
.L.str13883495:
	.asciz	".preheader2"
	.size	.L.str13883495, 12

	.type	.L.str13893496,@object  # @.str13893496
	.align	16
.L.str13893496:
	.asciz	"indvars.iv.next28"
	.size	.L.str13893496, 18

	.type	.L.str13903497,@object  # @.str13903497
.L.str13903497:
	.asciz	"._crit_edge"
	.size	.L.str13903497, 12

	.type	.L.str13913498,@object  # @.str13913498
.L.str13913498:
	.asciz	"indvars.iv27"
	.size	.L.str13913498, 13

	.type	.L.str13923499,@object  # @.str13923499
.L.str13923499:
	.asciz	"phi"
	.size	.L.str13923499, 4

	.type	.L.str13933500,@object  # @.str13933500
	.align	16
.L.str13933500:
	.asciz	"kmeans_clustering"
	.size	.L.str13933500, 18

	.type	.L.str13943501,@object  # @.str13943501
.L.str13943501:
	.asciz	".preheader"
	.size	.L.str13943501, 11

	.type	.L.str13953502,@object  # @.str13953502
.L.str13953502:
	.asciz	"80"
	.size	.L.str13953502, 3

	.type	.L.str13963503,@object  # @.str13963503
.L.str13963503:
	.asciz	"indvars.iv27"
	.size	.L.str13963503, 13

	.type	.L.str13973504,@object  # @.str13973504
.L.str13973504:
	.asciz	"phi"
	.size	.L.str13973504, 4

	.type	.L.str13983505,@object  # @.str13983505
.L.str13983505:
	.asciz	"38"
	.size	.L.str13983505, 3

	.type	.L.str13993506,@object  # @.str13993506
.L.str13993506:
	.asciz	"phi"
	.size	.L.str13993506, 4

	.type	.L.str14003507,@object  # @.str14003507
.L.str14003507:
	.asciz	"80"
	.size	.L.str14003507, 3

	.type	.L.str14013508,@object  # @.str14013508
.L.str14013508:
	.asciz	"phi"
	.size	.L.str14013508, 4

	.type	.L.str14023509,@object  # @.str14023509
	.align	16
.L.str14023509:
	.asciz	"kmeans_clustering"
	.size	.L.str14023509, 18

	.type	.L.str14033510,@object  # @.str14033510
.L.str14033510:
	.asciz	".preheader"
	.size	.L.str14033510, 11

	.type	.L.str14043511,@object  # @.str14043511
.L.str14043511:
	.asciz	".preheader-0"
	.size	.L.str14043511, 13

	.type	.L.str14053512,@object  # @.str14053512
.L.str14053512:
	.asciz	".lr.ph"
	.size	.L.str14053512, 7

	.type	.L.str14063513,@object  # @.str14063513
.L.str14063513:
	.asciz	"phi"
	.size	.L.str14063513, 4

	.type	.L.str14073514,@object  # @.str14073514
.L.str14073514:
	.asciz	"._crit_edge"
	.size	.L.str14073514, 12

	.type	.L.str14083515,@object  # @.str14083515
.L.str14083515:
	.asciz	"phi"
	.size	.L.str14083515, 4

	.type	.L.str14093516,@object  # @.str14093516
.L.str14093516:
	.asciz	"47"
	.size	.L.str14093516, 3

	.type	.L.str14103517,@object  # @.str14103517
.L.str14103517:
	.asciz	"phi"
	.size	.L.str14103517, 4

	.type	.L.str14113518,@object  # @.str14113518
	.align	16
.L.str14113518:
	.asciz	"kmeans_clustering"
	.size	.L.str14113518, 18

	.type	.L.str14123519,@object  # @.str14123519
.L.str14123519:
	.asciz	".lr.ph"
	.size	.L.str14123519, 7

	.type	.L.str14133520,@object  # @.str14133520
.L.str14133520:
	.asciz	"81"
	.size	.L.str14133520, 3

	.type	.L.str14143521,@object  # @.str14143521
.L.str14143521:
	.asciz	"80"
	.size	.L.str14143521, 3

	.type	.L.str14153522,@object  # @.str14153522
.L.str14153522:
	.asciz	"phi"
	.size	.L.str14153522, 4

	.type	.L.str14163523,@object  # @.str14163523
.L.str14163523:
	.asciz	"81"
	.size	.L.str14163523, 3

	.type	.L.str14173524,@object  # @.str14173524
.L.str14173524:
	.asciz	"phi"
	.size	.L.str14173524, 4

	.type	.L.str14183525,@object  # @.str14183525
	.align	16
.L.str14183525:
	.asciz	"kmeans_clustering"
	.size	.L.str14183525, 18

	.type	.L.str14193526,@object  # @.str14193526
.L.str14193526:
	.asciz	".lr.ph"
	.size	.L.str14193526, 7

	.type	.L.str14203527,@object  # @.str14203527
.L.str14203527:
	.asciz	"82"
	.size	.L.str14203527, 3

	.type	.L.str14213528,@object  # @.str14213528
.L.str14213528:
	.zero	1
	.size	.L.str14213528, 1

	.type	.L.str14223529,@object  # @.str14223529
.L.str14223529:
	.asciz	"phi"
	.size	.L.str14223529, 4

	.type	.L.str14233530,@object  # @.str14233530
.L.str14233530:
	.asciz	"81"
	.size	.L.str14233530, 3

	.type	.L.str14243531,@object  # @.str14243531
.L.str14243531:
	.asciz	"phi"
	.size	.L.str14243531, 4

	.type	.L.str14253532,@object  # @.str14253532
.L.str14253532:
	.asciz	"82"
	.size	.L.str14253532, 3

	.type	.L.str14263533,@object  # @.str14263533
.L.str14263533:
	.asciz	"phi"
	.size	.L.str14263533, 4

	.type	.L.str14273534,@object  # @.str14273534
	.align	16
.L.str14273534:
	.asciz	"kmeans_clustering"
	.size	.L.str14273534, 18

	.type	.L.str14283535,@object  # @.str14283535
.L.str14283535:
	.asciz	".lr.ph"
	.size	.L.str14283535, 7

	.type	.L.str14293536,@object  # @.str14293536
.L.str14293536:
	.asciz	"83"
	.size	.L.str14293536, 3

	.type	.L.str14303537,@object  # @.str14303537
.L.str14303537:
	.asciz	"indvars.iv27"
	.size	.L.str14303537, 13

	.type	.L.str14313538,@object  # @.str14313538
.L.str14313538:
	.asciz	"phi"
	.size	.L.str14313538, 4

	.type	.L.str14323539,@object  # @.str14323539
.L.str14323539:
	.asciz	"40"
	.size	.L.str14323539, 3

	.type	.L.str14333540,@object  # @.str14333540
.L.str14333540:
	.asciz	"phi"
	.size	.L.str14333540, 4

	.type	.L.str14343541,@object  # @.str14343541
.L.str14343541:
	.asciz	"83"
	.size	.L.str14343541, 3

	.type	.L.str14353542,@object  # @.str14353542
.L.str14353542:
	.asciz	"phi"
	.size	.L.str14353542, 4

	.type	.L.str14363543,@object  # @.str14363543
	.align	16
.L.str14363543:
	.asciz	"kmeans_clustering"
	.size	.L.str14363543, 18

	.type	.L.str14373544,@object  # @.str14373544
.L.str14373544:
	.asciz	".lr.ph"
	.size	.L.str14373544, 7

	.type	.L.str14383545,@object  # @.str14383545
.L.str14383545:
	.asciz	"84"
	.size	.L.str14383545, 3

	.type	.L.str14393546,@object  # @.str14393546
.L.str14393546:
	.asciz	"81"
	.size	.L.str14393546, 3

	.type	.L.str14403547,@object  # @.str14403547
.L.str14403547:
	.asciz	"phi"
	.size	.L.str14403547, 4

	.type	.L.str14413548,@object  # @.str14413548
.L.str14413548:
	.asciz	"84"
	.size	.L.str14413548, 3

	.type	.L.str14423549,@object  # @.str14423549
.L.str14423549:
	.asciz	"phi"
	.size	.L.str14423549, 4

	.type	.L.str14433550,@object  # @.str14433550
	.align	16
.L.str14433550:
	.asciz	"kmeans_clustering"
	.size	.L.str14433550, 18

	.type	.L.str14443551,@object  # @.str14443551
.L.str14443551:
	.asciz	".lr.ph"
	.size	.L.str14443551, 7

	.type	.L.str14453552,@object  # @.str14453552
.L.str14453552:
	.asciz	"85"
	.size	.L.str14453552, 3

	.type	.L.str14463553,@object  # @.str14463553
.L.str14463553:
	.asciz	"indvars.iv27"
	.size	.L.str14463553, 13

	.type	.L.str14473554,@object  # @.str14473554
.L.str14473554:
	.asciz	"phi"
	.size	.L.str14473554, 4

	.type	.L.str14483555,@object  # @.str14483555
.L.str14483555:
	.asciz	"7"
	.size	.L.str14483555, 2

	.type	.L.str14493556,@object  # @.str14493556
.L.str14493556:
	.asciz	"phi"
	.size	.L.str14493556, 4

	.type	.L.str14503557,@object  # @.str14503557
.L.str14503557:
	.asciz	"85"
	.size	.L.str14503557, 3

	.type	.L.str14513558,@object  # @.str14513558
.L.str14513558:
	.asciz	"phi"
	.size	.L.str14513558, 4

	.type	.L.str14523559,@object  # @.str14523559
	.align	16
.L.str14523559:
	.asciz	"kmeans_clustering"
	.size	.L.str14523559, 18

	.type	.L.str14533560,@object  # @.str14533560
.L.str14533560:
	.asciz	".lr.ph"
	.size	.L.str14533560, 7

	.type	.L.str14543561,@object  # @.str14543561
.L.str14543561:
	.asciz	"86"
	.size	.L.str14543561, 3

	.type	.L.str14553562,@object  # @.str14553562
.L.str14553562:
	.asciz	"indvars.iv27"
	.size	.L.str14553562, 13

	.type	.L.str14563563,@object  # @.str14563563
.L.str14563563:
	.asciz	"phi"
	.size	.L.str14563563, 4

	.type	.L.str14573564,@object  # @.str14573564
.L.str14573564:
	.asciz	"40"
	.size	.L.str14573564, 3

	.type	.L.str14583565,@object  # @.str14583565
.L.str14583565:
	.asciz	"phi"
	.size	.L.str14583565, 4

	.type	.L.str14593566,@object  # @.str14593566
.L.str14593566:
	.asciz	"86"
	.size	.L.str14593566, 3

	.type	.L.str14603567,@object  # @.str14603567
.L.str14603567:
	.asciz	"phi"
	.size	.L.str14603567, 4

	.type	.L.str14613568,@object  # @.str14613568
	.align	16
.L.str14613568:
	.asciz	"kmeans_clustering"
	.size	.L.str14613568, 18

	.type	.L.str14623569,@object  # @.str14623569
.L.str14623569:
	.asciz	".lr.ph"
	.size	.L.str14623569, 7

	.type	.L.str14633570,@object  # @.str14633570
.L.str14633570:
	.asciz	"87"
	.size	.L.str14633570, 3

	.type	.L.str14643571,@object  # @.str14643571
.L.str14643571:
	.asciz	"86"
	.size	.L.str14643571, 3

	.type	.L.str14653572,@object  # @.str14653572
.L.str14653572:
	.asciz	"phi"
	.size	.L.str14653572, 4

	.type	.L.str14663573,@object  # @.str14663573
.L.str14663573:
	.asciz	"87"
	.size	.L.str14663573, 3

	.type	.L.str14673574,@object  # @.str14673574
.L.str14673574:
	.asciz	"phi"
	.size	.L.str14673574, 4

	.type	.L.str14683575,@object  # @.str14683575
	.align	16
.L.str14683575:
	.asciz	"kmeans_clustering"
	.size	.L.str14683575, 18

	.type	.L.str14693576,@object  # @.str14693576
.L.str14693576:
	.asciz	".lr.ph"
	.size	.L.str14693576, 7

	.type	.L.str14703577,@object  # @.str14703577
.L.str14703577:
	.asciz	".lr.ph-0"
	.size	.L.str14703577, 9

	.type	.L.str14713578,@object  # @.str14713578
.L.str14713578:
	.asciz	"88"
	.size	.L.str14713578, 3

	.type	.L.str14723579,@object  # @.str14723579
.L.str14723579:
	.asciz	"phi"
	.size	.L.str14723579, 4

	.type	.L.str14733580,@object  # @.str14733580
	.align	16
.L.str14733580:
	.asciz	"kmeans_clustering"
	.size	.L.str14733580, 18

	.type	.L.str14743581,@object  # @.str14743581
.L.str14743581:
	.asciz	"88"
	.size	.L.str14743581, 3

	.type	.L.str14753582,@object  # @.str14753582
.L.str14753582:
	.asciz	"indvars.iv"
	.size	.L.str14753582, 11

	.type	.L.str14763583,@object  # @.str14763583
.L.str14763583:
	.asciz	"indvars.iv.next"
	.size	.L.str14763583, 16

	.type	.L.str14773584,@object  # @.str14773584
.L.str14773584:
	.asciz	"96"
	.size	.L.str14773584, 3

	.type	.L.str14783585,@object  # @.str14783585
.L.str14783585:
	.zero	1
	.size	.L.str14783585, 1

	.type	.L.str14793586,@object  # @.str14793586
.L.str14793586:
	.asciz	".lr.ph"
	.size	.L.str14793586, 7

	.type	.L.str14803587,@object  # @.str14803587
.L.str14803587:
	.asciz	"indvars.iv"
	.size	.L.str14803587, 11

	.type	.L.str14813588,@object  # @.str14813588
.L.str14813588:
	.asciz	"phi"
	.size	.L.str14813588, 4

	.type	.L.str14823589,@object  # @.str14823589
	.align	16
.L.str14823589:
	.asciz	"kmeans_clustering"
	.size	.L.str14823589, 18

	.type	.L.str14833590,@object  # @.str14833590
.L.str14833590:
	.asciz	"88"
	.size	.L.str14833590, 3

	.type	.L.str14843591,@object  # @.str14843591
.L.str14843591:
	.asciz	"88-0"
	.size	.L.str14843591, 5

	.type	.L.str14853592,@object  # @.str14853592
.L.str14853592:
	.asciz	"89"
	.size	.L.str14853592, 3

	.type	.L.str14863593,@object  # @.str14863593
.L.str14863593:
	.asciz	"phi"
	.size	.L.str14863593, 4

	.type	.L.str14873594,@object  # @.str14873594
.L.str14873594:
	.asciz	"96"
	.size	.L.str14873594, 3

	.type	.L.str14883595,@object  # @.str14883595
.L.str14883595:
	.asciz	"phi"
	.size	.L.str14883595, 4

	.type	.L.str14893596,@object  # @.str14893596
.L.str14893596:
	.asciz	"82"
	.size	.L.str14893596, 3

	.type	.L.str14903597,@object  # @.str14903597
.L.str14903597:
	.asciz	"phi"
	.size	.L.str14903597, 4

	.type	.L.str14913598,@object  # @.str14913598
	.align	16
.L.str14913598:
	.asciz	"kmeans_clustering"
	.size	.L.str14913598, 18

	.type	.L.str14923599,@object  # @.str14923599
.L.str14923599:
	.asciz	"89"
	.size	.L.str14923599, 3

	.type	.L.str14933600,@object  # @.str14933600
.L.str14933600:
	.asciz	"90"
	.size	.L.str14933600, 3

	.type	.L.str14943601,@object  # @.str14943601
.L.str14943601:
	.asciz	"83"
	.size	.L.str14943601, 3

	.type	.L.str14953602,@object  # @.str14953602
.L.str14953602:
	.asciz	"phi"
	.size	.L.str14953602, 4

	.type	.L.str14963603,@object  # @.str14963603
.L.str14963603:
	.asciz	"90"
	.size	.L.str14963603, 3

	.type	.L.str14973604,@object  # @.str14973604
.L.str14973604:
	.asciz	"phi"
	.size	.L.str14973604, 4

	.type	.L.str14983605,@object  # @.str14983605
	.align	16
.L.str14983605:
	.asciz	"kmeans_clustering"
	.size	.L.str14983605, 18

	.type	.L.str14993606,@object  # @.str14993606
.L.str14993606:
	.asciz	"89"
	.size	.L.str14993606, 3

	.type	.L.str15003607,@object  # @.str15003607
.L.str15003607:
	.asciz	"91"
	.size	.L.str15003607, 3

	.type	.L.str15013608,@object  # @.str15013608
.L.str15013608:
	.asciz	"indvars.iv"
	.size	.L.str15013608, 11

	.type	.L.str15023609,@object  # @.str15023609
.L.str15023609:
	.asciz	"phi"
	.size	.L.str15023609, 4

	.type	.L.str15033610,@object  # @.str15033610
.L.str15033610:
	.asciz	"90"
	.size	.L.str15033610, 3

	.type	.L.str15043611,@object  # @.str15043611
.L.str15043611:
	.asciz	"phi"
	.size	.L.str15043611, 4

	.type	.L.str15053612,@object  # @.str15053612
.L.str15053612:
	.asciz	"91"
	.size	.L.str15053612, 3

	.type	.L.str15063613,@object  # @.str15063613
.L.str15063613:
	.asciz	"phi"
	.size	.L.str15063613, 4

	.type	.L.str15073614,@object  # @.str15073614
	.align	16
.L.str15073614:
	.asciz	"kmeans_clustering"
	.size	.L.str15073614, 18

	.type	.L.str15083615,@object  # @.str15083615
.L.str15083615:
	.asciz	"89"
	.size	.L.str15083615, 3

	.type	.L.str15093616,@object  # @.str15093616
.L.str15093616:
	.asciz	"92"
	.size	.L.str15093616, 3

	.type	.L.str15103617,@object  # @.str15103617
.L.str15103617:
	.asciz	"91"
	.size	.L.str15103617, 3

	.type	.L.str15113618,@object  # @.str15113618
.L.str15113618:
	.asciz	"phi"
	.size	.L.str15113618, 4

	.type	.L.str15123619,@object  # @.str15123619
.L.str15123619:
	.asciz	"92"
	.size	.L.str15123619, 3

	.type	.L.str15133620,@object  # @.str15133620
.L.str15133620:
	.asciz	"phi"
	.size	.L.str15133620, 4

	.type	.L.str15143621,@object  # @.str15143621
	.align	16
.L.str15143621:
	.asciz	"kmeans_clustering"
	.size	.L.str15143621, 18

	.type	.L.str15153622,@object  # @.str15153622
.L.str15153622:
	.asciz	"89"
	.size	.L.str15153622, 3

	.type	.L.str15163623,@object  # @.str15163623
.L.str15163623:
	.asciz	"93"
	.size	.L.str15163623, 3

	.type	.L.str15173624,@object  # @.str15173624
.L.str15173624:
	.asciz	"84"
	.size	.L.str15173624, 3

	.type	.L.str15183625,@object  # @.str15183625
.L.str15183625:
	.asciz	"phi"
	.size	.L.str15183625, 4

	.type	.L.str15193626,@object  # @.str15193626
.L.str15193626:
	.asciz	"92"
	.size	.L.str15193626, 3

	.type	.L.str15203627,@object  # @.str15203627
.L.str15203627:
	.asciz	"phi"
	.size	.L.str15203627, 4

	.type	.L.str15213628,@object  # @.str15213628
.L.str15213628:
	.asciz	"93"
	.size	.L.str15213628, 3

	.type	.L.str15223629,@object  # @.str15223629
.L.str15223629:
	.asciz	"phi"
	.size	.L.str15223629, 4

	.type	.L.str15233630,@object  # @.str15233630
	.align	16
.L.str15233630:
	.asciz	"kmeans_clustering"
	.size	.L.str15233630, 18

	.type	.L.str15243631,@object  # @.str15243631
.L.str15243631:
	.asciz	"89"
	.size	.L.str15243631, 3

	.type	.L.str15253632,@object  # @.str15253632
.L.str15253632:
	.asciz	"94"
	.size	.L.str15253632, 3

	.type	.L.str15263633,@object  # @.str15263633
.L.str15263633:
	.asciz	"85"
	.size	.L.str15263633, 3

	.type	.L.str15273634,@object  # @.str15273634
.L.str15273634:
	.asciz	"phi"
	.size	.L.str15273634, 4

	.type	.L.str15283635,@object  # @.str15283635
.L.str15283635:
	.asciz	"94"
	.size	.L.str15283635, 3

	.type	.L.str15293636,@object  # @.str15293636
.L.str15293636:
	.asciz	"phi"
	.size	.L.str15293636, 4

	.type	.L.str15303637,@object  # @.str15303637
	.align	16
.L.str15303637:
	.asciz	"kmeans_clustering"
	.size	.L.str15303637, 18

	.type	.L.str15313638,@object  # @.str15313638
.L.str15313638:
	.asciz	"89"
	.size	.L.str15313638, 3

	.type	.L.str15323639,@object  # @.str15323639
.L.str15323639:
	.asciz	"95"
	.size	.L.str15323639, 3

	.type	.L.str15333640,@object  # @.str15333640
.L.str15333640:
	.asciz	"indvars.iv"
	.size	.L.str15333640, 11

	.type	.L.str15343641,@object  # @.str15343641
.L.str15343641:
	.asciz	"phi"
	.size	.L.str15343641, 4

	.type	.L.str15353642,@object  # @.str15353642
.L.str15353642:
	.asciz	"94"
	.size	.L.str15353642, 3

	.type	.L.str15363643,@object  # @.str15363643
.L.str15363643:
	.asciz	"phi"
	.size	.L.str15363643, 4

	.type	.L.str15373644,@object  # @.str15373644
.L.str15373644:
	.asciz	"95"
	.size	.L.str15373644, 3

	.type	.L.str15383645,@object  # @.str15383645
.L.str15383645:
	.asciz	"phi"
	.size	.L.str15383645, 4

	.type	.L.str15393646,@object  # @.str15393646
	.align	16
.L.str15393646:
	.asciz	"kmeans_clustering"
	.size	.L.str15393646, 18

	.type	.L.str15403647,@object  # @.str15403647
.L.str15403647:
	.asciz	"89"
	.size	.L.str15403647, 3

	.type	.L.str15413648,@object  # @.str15413648
.L.str15413648:
	.asciz	"89-0"
	.size	.L.str15413648, 5

	.type	.L.str15423649,@object  # @.str15423649
.L.str15423649:
	.asciz	"95"
	.size	.L.str15423649, 3

	.type	.L.str15433650,@object  # @.str15433650
.L.str15433650:
	.asciz	"phi"
	.size	.L.str15433650, 4

	.type	.L.str15443651,@object  # @.str15443651
.L.str15443651:
	.asciz	"93"
	.size	.L.str15443651, 3

	.type	.L.str15453652,@object  # @.str15453652
.L.str15453652:
	.asciz	"phi"
	.size	.L.str15453652, 4

	.type	.L.str15463653,@object  # @.str15463653
	.align	16
.L.str15463653:
	.asciz	"kmeans_clustering"
	.size	.L.str15463653, 18

	.type	.L.str15473654,@object  # @.str15473654
.L.str15473654:
	.asciz	"89"
	.size	.L.str15473654, 3

	.type	.L.str15483655,@object  # @.str15483655
.L.str15483655:
	.asciz	"89-1"
	.size	.L.str15483655, 5

	.type	.L.str15493656,@object  # @.str15493656
.L.str15493656:
	.asciz	"96"
	.size	.L.str15493656, 3

	.type	.L.str15503657,@object  # @.str15503657
.L.str15503657:
	.asciz	"phi"
	.size	.L.str15503657, 4

	.type	.L.str15513658,@object  # @.str15513658
	.align	16
.L.str15513658:
	.asciz	"kmeans_clustering"
	.size	.L.str15513658, 18

	.type	.L.str15523659,@object  # @.str15523659
.L.str15523659:
	.asciz	"96"
	.size	.L.str15523659, 3

	.type	.L.str15533660,@object  # @.str15533660
.L.str15533660:
	.asciz	"97"
	.size	.L.str15533660, 3

	.type	.L.str15543661,@object  # @.str15543661
.L.str15543661:
	.asciz	"indvars.iv"
	.size	.L.str15543661, 11

	.type	.L.str15553662,@object  # @.str15553662
.L.str15553662:
	.asciz	"phi"
	.size	.L.str15553662, 4

	.type	.L.str15563663,@object  # @.str15563663
.L.str15563663:
	.asciz	"87"
	.size	.L.str15563663, 3

	.type	.L.str15573664,@object  # @.str15573664
.L.str15573664:
	.asciz	"phi"
	.size	.L.str15573664, 4

	.type	.L.str15583665,@object  # @.str15583665
.L.str15583665:
	.asciz	"97"
	.size	.L.str15583665, 3

	.type	.L.str15593666,@object  # @.str15593666
.L.str15593666:
	.asciz	"phi"
	.size	.L.str15593666, 4

	.type	.L.str15603667,@object  # @.str15603667
	.align	16
.L.str15603667:
	.asciz	"kmeans_clustering"
	.size	.L.str15603667, 18

	.type	.L.str15613668,@object  # @.str15613668
.L.str15613668:
	.asciz	"96"
	.size	.L.str15613668, 3

	.type	.L.str15623669,@object  # @.str15623669
.L.str15623669:
	.asciz	"96-0"
	.size	.L.str15623669, 5

	.type	.L.str15633670,@object  # @.str15633670
.L.str15633670:
	.asciz	"97"
	.size	.L.str15633670, 3

	.type	.L.str15643671,@object  # @.str15643671
.L.str15643671:
	.asciz	"phi"
	.size	.L.str15643671, 4

	.type	.L.str15653672,@object  # @.str15653672
.L.str15653672:
	.zero	1
	.size	.L.str15653672, 1

	.type	.L.str15663673,@object  # @.str15663673
.L.str15663673:
	.asciz	"phi"
	.size	.L.str15663673, 4

	.type	.L.str15673674,@object  # @.str15673674
	.align	16
.L.str15673674:
	.asciz	"kmeans_clustering"
	.size	.L.str15673674, 18

	.type	.L.str15683675,@object  # @.str15683675
.L.str15683675:
	.asciz	"96"
	.size	.L.str15683675, 3

	.type	.L.str15693676,@object  # @.str15693676
.L.str15693676:
	.asciz	"indvars.iv.next"
	.size	.L.str15693676, 16

	.type	.L.str15703677,@object  # @.str15703677
.L.str15703677:
	.zero	1
	.size	.L.str15703677, 1

	.type	.L.str15713678,@object  # @.str15713678
.L.str15713678:
	.asciz	"phi"
	.size	.L.str15713678, 4

	.type	.L.str15723679,@object  # @.str15723679
.L.str15723679:
	.asciz	"indvars.iv"
	.size	.L.str15723679, 11

	.type	.L.str15733680,@object  # @.str15733680
.L.str15733680:
	.asciz	"phi"
	.size	.L.str15733680, 4

	.type	.L.str15743681,@object  # @.str15743681
.L.str15743681:
	.asciz	"indvars.iv.next"
	.size	.L.str15743681, 16

	.type	.L.str15753682,@object  # @.str15753682
.L.str15753682:
	.asciz	"phi"
	.size	.L.str15753682, 4

	.type	.L.str15763683,@object  # @.str15763683
	.align	16
.L.str15763683:
	.asciz	"kmeans_clustering"
	.size	.L.str15763683, 18

	.type	.L.str15773684,@object  # @.str15773684
.L.str15773684:
	.asciz	"96"
	.size	.L.str15773684, 3

	.type	.L.str15783685,@object  # @.str15783685
.L.str15783685:
	.asciz	"lftr.wideiv"
	.size	.L.str15783685, 12

	.type	.L.str15793686,@object  # @.str15793686
.L.str15793686:
	.asciz	"indvars.iv.next"
	.size	.L.str15793686, 16

	.type	.L.str15803687,@object  # @.str15803687
.L.str15803687:
	.asciz	"phi"
	.size	.L.str15803687, 4

	.type	.L.str15813688,@object  # @.str15813688
.L.str15813688:
	.asciz	"lftr.wideiv"
	.size	.L.str15813688, 12

	.type	.L.str15823689,@object  # @.str15823689
.L.str15823689:
	.asciz	"phi"
	.size	.L.str15823689, 4

	.type	.L.str15833690,@object  # @.str15833690
	.align	16
.L.str15833690:
	.asciz	"kmeans_clustering"
	.size	.L.str15833690, 18

	.type	.L.str15843691,@object  # @.str15843691
.L.str15843691:
	.asciz	"96"
	.size	.L.str15843691, 3

	.type	.L.str15853692,@object  # @.str15853692
.L.str15853692:
	.asciz	"exitcond"
	.size	.L.str15853692, 9

	.type	.L.str15863693,@object  # @.str15863693
.L.str15863693:
	.asciz	"nfeatures"
	.size	.L.str15863693, 10

	.type	.L.str15873694,@object  # @.str15873694
.L.str15873694:
	.asciz	"phi"
	.size	.L.str15873694, 4

	.type	.L.str15883695,@object  # @.str15883695
.L.str15883695:
	.asciz	"lftr.wideiv"
	.size	.L.str15883695, 12

	.type	.L.str15893696,@object  # @.str15893696
.L.str15893696:
	.asciz	"phi"
	.size	.L.str15893696, 4

	.type	.L.str15903697,@object  # @.str15903697
.L.str15903697:
	.asciz	"exitcond"
	.size	.L.str15903697, 9

	.type	.L.str15913698,@object  # @.str15913698
.L.str15913698:
	.asciz	"phi"
	.size	.L.str15913698, 4

	.type	.L.str15923699,@object  # @.str15923699
	.align	16
.L.str15923699:
	.asciz	"kmeans_clustering"
	.size	.L.str15923699, 18

	.type	.L.str15933700,@object  # @.str15933700
.L.str15933700:
	.asciz	"96"
	.size	.L.str15933700, 3

	.type	.L.str15943701,@object  # @.str15943701
.L.str15943701:
	.asciz	"96-1"
	.size	.L.str15943701, 5

	.type	.L.str15953702,@object  # @.str15953702
.L.str15953702:
	.asciz	"._crit_edge"
	.size	.L.str15953702, 12

	.type	.L.str15963703,@object  # @.str15963703
.L.str15963703:
	.asciz	"phi"
	.size	.L.str15963703, 4

	.type	.L.str15973704,@object  # @.str15973704
.L.str15973704:
	.asciz	"88"
	.size	.L.str15973704, 3

	.type	.L.str15983705,@object  # @.str15983705
.L.str15983705:
	.asciz	"phi"
	.size	.L.str15983705, 4

	.type	.L.str15993706,@object  # @.str15993706
.L.str15993706:
	.asciz	"exitcond"
	.size	.L.str15993706, 9

	.type	.L.str16003707,@object  # @.str16003707
.L.str16003707:
	.asciz	"phi"
	.size	.L.str16003707, 4

	.type	.L.str16013708,@object  # @.str16013708
	.align	16
.L.str16013708:
	.asciz	"kmeans_clustering"
	.size	.L.str16013708, 18

	.type	.L.str16023709,@object  # @.str16023709
.L.str16023709:
	.asciz	"._crit_edge"
	.size	.L.str16023709, 12

	.type	.L.str16033710,@object  # @.str16033710
.L.str16033710:
	.asciz	"._crit_edge-0"
	.size	.L.str16033710, 14

	.type	.L.str16043711,@object  # @.str16043711
.L.str16043711:
	.asciz	"80"
	.size	.L.str16043711, 3

	.type	.L.str16053712,@object  # @.str16053712
.L.str16053712:
	.asciz	"phi"
	.size	.L.str16053712, 4

	.type	.L.str16063713,@object  # @.str16063713
.L.str16063713:
	.zero	1
	.size	.L.str16063713, 1

	.type	.L.str16073714,@object  # @.str16073714
.L.str16073714:
	.asciz	"phi"
	.size	.L.str16073714, 4

	.type	.L.str16083715,@object  # @.str16083715
	.align	16
.L.str16083715:
	.asciz	"kmeans_clustering"
	.size	.L.str16083715, 18

	.type	.L.str16093716,@object  # @.str16093716
.L.str16093716:
	.asciz	"._crit_edge"
	.size	.L.str16093716, 12

	.type	.L.str16103717,@object  # @.str16103717
	.align	16
.L.str16103717:
	.asciz	"indvars.iv.next28"
	.size	.L.str16103717, 18

	.type	.L.str16113718,@object  # @.str16113718
.L.str16113718:
	.zero	1
	.size	.L.str16113718, 1

	.type	.L.str16123719,@object  # @.str16123719
.L.str16123719:
	.asciz	"phi"
	.size	.L.str16123719, 4

	.type	.L.str16133720,@object  # @.str16133720
.L.str16133720:
	.asciz	"indvars.iv27"
	.size	.L.str16133720, 13

	.type	.L.str16143721,@object  # @.str16143721
.L.str16143721:
	.asciz	"phi"
	.size	.L.str16143721, 4

	.type	.L.str16153722,@object  # @.str16153722
	.align	16
.L.str16153722:
	.asciz	"indvars.iv.next28"
	.size	.L.str16153722, 18

	.type	.L.str16163723,@object  # @.str16163723
.L.str16163723:
	.asciz	"phi"
	.size	.L.str16163723, 4

	.type	.L.str16173724,@object  # @.str16173724
	.align	16
.L.str16173724:
	.asciz	"kmeans_clustering"
	.size	.L.str16173724, 18

	.type	.L.str16183725,@object  # @.str16183725
.L.str16183725:
	.asciz	"._crit_edge"
	.size	.L.str16183725, 12

	.type	.L.str16193726,@object  # @.str16193726
.L.str16193726:
	.asciz	"lftr.wideiv29"
	.size	.L.str16193726, 14

	.type	.L.str16203727,@object  # @.str16203727
	.align	16
.L.str16203727:
	.asciz	"indvars.iv.next28"
	.size	.L.str16203727, 18

	.type	.L.str16213728,@object  # @.str16213728
.L.str16213728:
	.asciz	"phi"
	.size	.L.str16213728, 4

	.type	.L.str16223729,@object  # @.str16223729
.L.str16223729:
	.asciz	"lftr.wideiv29"
	.size	.L.str16223729, 14

	.type	.L.str16233730,@object  # @.str16233730
.L.str16233730:
	.asciz	"phi"
	.size	.L.str16233730, 4

	.type	.L.str16243731,@object  # @.str16243731
	.align	16
.L.str16243731:
	.asciz	"kmeans_clustering"
	.size	.L.str16243731, 18

	.type	.L.str16253732,@object  # @.str16253732
.L.str16253732:
	.asciz	"._crit_edge"
	.size	.L.str16253732, 12

	.type	.L.str16263733,@object  # @.str16263733
.L.str16263733:
	.asciz	"exitcond30"
	.size	.L.str16263733, 11

	.type	.L.str16273734,@object  # @.str16273734
.L.str16273734:
	.asciz	"nclusters"
	.size	.L.str16273734, 10

	.type	.L.str16283735,@object  # @.str16283735
.L.str16283735:
	.asciz	"phi"
	.size	.L.str16283735, 4

	.type	.L.str16293736,@object  # @.str16293736
.L.str16293736:
	.asciz	"lftr.wideiv29"
	.size	.L.str16293736, 14

	.type	.L.str16303737,@object  # @.str16303737
.L.str16303737:
	.asciz	"phi"
	.size	.L.str16303737, 4

	.type	.L.str16313738,@object  # @.str16313738
.L.str16313738:
	.asciz	"exitcond30"
	.size	.L.str16313738, 11

	.type	.L.str16323739,@object  # @.str16323739
.L.str16323739:
	.asciz	"phi"
	.size	.L.str16323739, 4

	.type	.L.str16333740,@object  # @.str16333740
	.align	16
.L.str16333740:
	.asciz	"kmeans_clustering"
	.size	.L.str16333740, 18

	.type	.L.str16343741,@object  # @.str16343741
.L.str16343741:
	.asciz	"._crit_edge"
	.size	.L.str16343741, 12

	.type	.L.str16353742,@object  # @.str16353742
.L.str16353742:
	.asciz	"._crit_edge-1"
	.size	.L.str16353742, 14

	.type	.L.str16363743,@object  # @.str16363743
.L.str16363743:
	.asciz	"._crit_edge4"
	.size	.L.str16363743, 13

	.type	.L.str16373744,@object  # @.str16373744
.L.str16373744:
	.asciz	"phi"
	.size	.L.str16373744, 4

	.type	.L.str16383745,@object  # @.str16383745
.L.str16383745:
	.asciz	".preheader"
	.size	.L.str16383745, 11

	.type	.L.str16393746,@object  # @.str16393746
.L.str16393746:
	.asciz	"phi"
	.size	.L.str16393746, 4

	.type	.L.str16403747,@object  # @.str16403747
.L.str16403747:
	.asciz	"exitcond30"
	.size	.L.str16403747, 11

	.type	.L.str16413748,@object  # @.str16413748
.L.str16413748:
	.asciz	"phi"
	.size	.L.str16413748, 4

	.type	.L.str16423749,@object  # @.str16423749
	.align	16
.L.str16423749:
	.asciz	"kmeans_clustering"
	.size	.L.str16423749, 18

	.type	.L.str16433750,@object  # @.str16433750
.L.str16433750:
	.asciz	"._crit_edge4"
	.size	.L.str16433750, 13

	.type	.L.str16443751,@object  # @.str16443751
.L.str16443751:
	.asciz	"98"
	.size	.L.str16443751, 3

	.type	.L.str16453752,@object  # @.str16453752
.L.str16453752:
	.asciz	"threshold"
	.size	.L.str16453752, 10

	.type	.L.str16463753,@object  # @.str16463753
.L.str16463753:
	.asciz	"phi"
	.size	.L.str16463753, 4

	.type	.L.str16473754,@object  # @.str16473754
.L.str16473754:
	.asciz	"delta.0"
	.size	.L.str16473754, 8

	.type	.L.str16483755,@object  # @.str16483755
.L.str16483755:
	.asciz	"phi"
	.size	.L.str16483755, 4

	.type	.L.str16493756,@object  # @.str16493756
.L.str16493756:
	.asciz	"98"
	.size	.L.str16493756, 3

	.type	.L.str16503757,@object  # @.str16503757
.L.str16503757:
	.asciz	"phi"
	.size	.L.str16503757, 4

	.type	.L.str16513758,@object  # @.str16513758
	.align	16
.L.str16513758:
	.asciz	"kmeans_clustering"
	.size	.L.str16513758, 18

	.type	.L.str16523759,@object  # @.str16523759
.L.str16523759:
	.asciz	"._crit_edge4"
	.size	.L.str16523759, 13

	.type	.L.str16533760,@object  # @.str16533760
.L.str16533760:
	.asciz	"._crit_edge4-0"
	.size	.L.str16533760, 15

	.type	.L.str16543761,@object  # @.str16543761
.L.str16543761:
	.asciz	".backedge"
	.size	.L.str16543761, 10

	.type	.L.str16553762,@object  # @.str16553762
.L.str16553762:
	.asciz	"phi"
	.size	.L.str16553762, 4

	.type	.L.str16563763,@object  # @.str16563763
.L.str16563763:
	.asciz	"99"
	.size	.L.str16563763, 3

	.type	.L.str16573764,@object  # @.str16573764
.L.str16573764:
	.asciz	"phi"
	.size	.L.str16573764, 4

	.type	.L.str16583765,@object  # @.str16583765
.L.str16583765:
	.asciz	"98"
	.size	.L.str16583765, 3

	.type	.L.str16593766,@object  # @.str16593766
.L.str16593766:
	.asciz	"phi"
	.size	.L.str16593766, 4

	.type	.L.str16603767,@object  # @.str16603767
	.align	16
.L.str16603767:
	.asciz	"kmeans_clustering"
	.size	.L.str16603767, 18

	.type	.L.str16613768,@object  # @.str16613768
.L.str16613768:
	.asciz	"99"
	.size	.L.str16613768, 3

	.type	.L.str16623769,@object  # @.str16623769
.L.str16623769:
	.asciz	"100"
	.size	.L.str16623769, 4

	.type	.L.str16633770,@object  # @.str16633770
.L.str16633770:
	.asciz	"40"
	.size	.L.str16633770, 3

	.type	.L.str16643771,@object  # @.str16643771
.L.str16643771:
	.asciz	"phi"
	.size	.L.str16643771, 4

	.type	.L.str16653772,@object  # @.str16653772
.L.str16653772:
	.asciz	"100"
	.size	.L.str16653772, 4

	.type	.L.str16663773,@object  # @.str16663773
.L.str16663773:
	.asciz	"phi"
	.size	.L.str16663773, 4

	.type	.L.str16673774,@object  # @.str16673774
	.align	16
.L.str16673774:
	.asciz	"kmeans_clustering"
	.size	.L.str16673774, 18

	.type	.L.str16683775,@object  # @.str16683775
.L.str16683775:
	.asciz	"99"
	.size	.L.str16683775, 3

	.type	.L.str16693776,@object  # @.str16693776
.L.str16693776:
	.asciz	"101"
	.size	.L.str16693776, 4

	.type	.L.str16703777,@object  # @.str16703777
.L.str16703777:
	.asciz	"100"
	.size	.L.str16703777, 4

	.type	.L.str16713778,@object  # @.str16713778
.L.str16713778:
	.asciz	"phi"
	.size	.L.str16713778, 4

	.type	.L.str16723779,@object  # @.str16723779
.L.str16723779:
	.asciz	"101"
	.size	.L.str16723779, 4

	.type	.L.str16733780,@object  # @.str16733780
.L.str16733780:
	.asciz	"phi"
	.size	.L.str16733780, 4

	.type	.L.str16743781,@object  # @.str16743781
	.align	16
.L.str16743781:
	.asciz	"kmeans_clustering"
	.size	.L.str16743781, 18

	.type	.L.str16753782,@object  # @.str16753782
.L.str16753782:
	.asciz	"99"
	.size	.L.str16753782, 3

	.type	.L.str16763783,@object  # @.str16763783
.L.str16763783:
	.asciz	"99-0"
	.size	.L.str16763783, 5

	.type	.L.str16773784,@object  # @.str16773784
.L.str16773784:
	.asciz	"free"
	.size	.L.str16773784, 5

	.type	.L.str16783785,@object  # @.str16783785
.L.str16783785:
	.asciz	"phi"
	.size	.L.str16783785, 4

	.type	.L.str16793786,@object  # @.str16793786
.L.str16793786:
	.asciz	"101"
	.size	.L.str16793786, 4

	.type	.L.str16803787,@object  # @.str16803787
.L.str16803787:
	.asciz	"phi"
	.size	.L.str16803787, 4

	.type	.L.str16813788,@object  # @.str16813788
.L.str16813788:
	.zero	1
	.size	.L.str16813788, 1

	.type	.L.str16823789,@object  # @.str16823789
.L.str16823789:
	.asciz	"phi"
	.size	.L.str16823789, 4

	.type	.L.str16833790,@object  # @.str16833790
	.align	16
.L.str16833790:
	.asciz	"kmeans_clustering"
	.size	.L.str16833790, 18

	.type	.L.str16843791,@object  # @.str16843791
.L.str16843791:
	.asciz	"99"
	.size	.L.str16843791, 3

	.type	.L.str16853792,@object  # @.str16853792
.L.str16853792:
	.asciz	"99-1"
	.size	.L.str16853792, 5

	.type	.L.str16863793,@object  # @.str16863793
.L.str16863793:
	.asciz	"free"
	.size	.L.str16863793, 5

	.type	.L.str16873794,@object  # @.str16873794
.L.str16873794:
	.asciz	"phi"
	.size	.L.str16873794, 4

	.type	.L.str16883795,@object  # @.str16883795
.L.str16883795:
	.asciz	"39"
	.size	.L.str16883795, 3

	.type	.L.str16893796,@object  # @.str16893796
.L.str16893796:
	.asciz	"phi"
	.size	.L.str16893796, 4

	.type	.L.str16903797,@object  # @.str16903797
.L.str16903797:
	.zero	1
	.size	.L.str16903797, 1

	.type	.L.str16913798,@object  # @.str16913798
.L.str16913798:
	.asciz	"phi"
	.size	.L.str16913798, 4

	.type	.L.str16923799,@object  # @.str16923799
	.align	16
.L.str16923799:
	.asciz	"kmeans_clustering"
	.size	.L.str16923799, 18

	.type	.L.str16933800,@object  # @.str16933800
.L.str16933800:
	.asciz	"99"
	.size	.L.str16933800, 3

	.type	.L.str16943801,@object  # @.str16943801
.L.str16943801:
	.asciz	"99-2"
	.size	.L.str16943801, 5

	.type	.L.str16953802,@object  # @.str16953802
.L.str16953802:
	.asciz	"free"
	.size	.L.str16953802, 5

	.type	.L.str16963803,@object  # @.str16963803
.L.str16963803:
	.asciz	"phi"
	.size	.L.str16963803, 4

	.type	.L.str16973804,@object  # @.str16973804
.L.str16973804:
	.asciz	"37"
	.size	.L.str16973804, 3

	.type	.L.str16983805,@object  # @.str16983805
.L.str16983805:
	.asciz	"phi"
	.size	.L.str16983805, 4

	.type	.L.str16993806,@object  # @.str16993806
.L.str16993806:
	.zero	1
	.size	.L.str16993806, 1

	.type	.L.str17003807,@object  # @.str17003807
.L.str17003807:
	.asciz	"phi"
	.size	.L.str17003807, 4

	.type	.L.str17013808,@object  # @.str17013808
	.align	16
.L.str17013808:
	.asciz	"kmeans_clustering"
	.size	.L.str17013808, 18

	.type	.L.str17023809,@object  # @.str17023809
.L.str17023809:
	.asciz	"99"
	.size	.L.str17023809, 3

	.type	.L.str17033810,@object  # @.str17033810
.L.str17033810:
	.asciz	"99-3"
	.size	.L.str17033810, 5

	.type	.L.str17043811,@object  # @.str17043811
.L.str17043811:
	.asciz	"7"
	.size	.L.str17043811, 2

	.type	.L.str17053812,@object  # @.str17053812
.L.str17053812:
	.asciz	"phi"
	.size	.L.str17053812, 4

	.type	initp,@object           # @initp
	.bss
	.globl	initp
	.align	4
initp:
	.long	0                       # 0x0
	.size	initp, 4

	.type	track_curr_inst,@object # @track_curr_inst
	.globl	track_curr_inst
track_curr_inst:
	.byte	0                       # 0x0
	.size	track_curr_inst, 1

	.type	track_next_inst,@object # @track_next_inst
	.globl	track_next_inst
track_next_inst:
	.byte	0                       # 0x0
	.size	track_next_inst, 1

	.type	inst_count,@object      # @inst_count
	.globl	inst_count
	.align	4
inst_count:
	.long	0                       # 0x0
	.size	inst_count, 4

	.type	.L.str3815,@object      # @.str3815
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str3815:
	.asciz	"dynamic_trace.gz"
	.size	.L.str3815, 17

	.type	.L.str13816,@object     # @.str13816
.L.str13816:
	.asciz	"w"
	.size	.L.str13816, 2

	.type	full_trace_file,@object # @full_trace_file
	.comm	full_trace_file,8,8
	.type	.L.str23817,@object     # @.str23817
.L.str23817:
	.asciz	"Failed to open logfile \"dynamic_trace\""
	.size	.L.str23817, 39

	.type	.L.str33818,@object     # @.str33818
.L.str33818:
	.asciz	"\n0,%d,%s,%s,%s,%d,%d\n"
	.size	.L.str33818, 22

	.type	.L.str43819,@object     # @.str43819
.L.str43819:
	.asciz	"initp == 1"
	.size	.L.str43819, 11

	.type	.L.str53820,@object     # @.str53820
.L.str53820:
	.asciz	"trace_logger.c"
	.size	.L.str53820, 15

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_int,@object # @__PRETTY_FUNCTION__.trace_logger_log_int
.L__PRETTY_FUNCTION__.trace_logger_log_int:
	.asciz	"void trace_logger_log_int(int, int, int64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_int, 71

	.type	.L.str63821,@object     # @.str63821
.L.str63821:
	.asciz	"r,%d,%ld,%d"
	.size	.L.str63821, 12

	.type	.L.str73822,@object     # @.str73822
.L.str73822:
	.asciz	"f,%d,%ld,%d"
	.size	.L.str73822, 12

	.type	.L.str83823,@object     # @.str83823
.L.str83823:
	.asciz	"%d,%d,%ld,%d"
	.size	.L.str83823, 13

	.type	.L.str93824,@object     # @.str93824
.L.str93824:
	.asciz	",%s"
	.size	.L.str93824, 4

	.type	.L.str103825,@object    # @.str103825
.L.str103825:
	.asciz	", "
	.size	.L.str103825, 3

	.type	.L.str113826,@object    # @.str113826
.L.str113826:
	.asciz	",%s,\n"
	.size	.L.str113826, 6

	.type	.L.str123827,@object    # @.str123827
.L.str123827:
	.asciz	",\n"
	.size	.L.str123827, 3

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_double,@object # @__PRETTY_FUNCTION__.trace_logger_log_double
.L__PRETTY_FUNCTION__.trace_logger_log_double:
	.asciz	"void trace_logger_log_double(int, int, double, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_double, 73

	.type	.L.str133828,@object    # @.str133828
.L.str133828:
	.asciz	"r,%d,%f,%d"
	.size	.L.str133828, 11

	.type	.L.str143829,@object    # @.str143829
.L.str143829:
	.asciz	"f,%d,%f,%d"
	.size	.L.str143829, 11

	.type	.L.str153830,@object    # @.str153830
.L.str153830:
	.asciz	"%d,%d,%f,%d"
	.size	.L.str153830, 12

	.text
.Ldebug_end0:
	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
.Linfo_string1:
	.asciz	"cluster.c"
.Linfo_string2:
	.asciz	"/home/azguolu/ARAT-0.1/llvm-tracer/example/kmeans"
.Linfo_string3:
	.asciz	"cluster"
.Linfo_string4:
	.asciz	"int"
.Linfo_string5:
	.asciz	"getopt.c"
.Linfo_string6:
	.asciz	"kmeans.c"
.Linfo_string7:
	.asciz	"usage"
.Linfo_string8:
	.asciz	"main"
.Linfo_string9:
	.asciz	"atoi"
.Linfo_string10:
	.asciz	"atof"
.Linfo_string11:
	.asciz	"double"
.Linfo_string12:
	.asciz	"kmeans_clustering.c"
.Linfo_string13:
	.asciz	"find_nearest_point"
.Linfo_string14:
	.asciz	"euclid_dist_2"
.Linfo_string15:
	.asciz	"float"
.Linfo_string16:
	.asciz	"kmeans_clustering"
.Linfo_string17:
	.asciz	"numObjects"
.Linfo_string18:
	.asciz	"numAttributes"
.Linfo_string19:
	.asciz	"attributes"
.Linfo_string20:
	.asciz	"num_nclusters"
.Linfo_string21:
	.asciz	"threshold"
.Linfo_string22:
	.asciz	"cluster_centres"
.Linfo_string23:
	.asciz	"membership"
.Linfo_string24:
	.asciz	"nclusters"
.Linfo_string25:
	.asciz	"tmp_cluster_centres"
.Linfo_string26:
	.asciz	"argv0"
.Linfo_string27:
	.asciz	"char"
.Linfo_string28:
	.asciz	"help"
.Linfo_string29:
	.asciz	"argc"
.Linfo_string30:
	.asciz	"argv"
.Linfo_string31:
	.asciz	"line"
.Linfo_string32:
	.asciz	"filename"
.Linfo_string33:
	.asciz	"isBinaryFile"
.Linfo_string34:
	.asciz	"opt"
.Linfo_string35:
	.asciz	"buf"
.Linfo_string36:
	.asciz	"i"
.Linfo_string37:
	.asciz	"j"
.Linfo_string38:
	.asciz	"nloops"
.Linfo_string39:
	.asciz	"timing"
.Linfo_string40:
	.asciz	"infile"
.Linfo_string41:
	.asciz	"_flags"
.Linfo_string42:
	.asciz	"_IO_read_ptr"
.Linfo_string43:
	.asciz	"_IO_read_end"
.Linfo_string44:
	.asciz	"_IO_read_base"
.Linfo_string45:
	.asciz	"_IO_write_base"
.Linfo_string46:
	.asciz	"_IO_write_ptr"
.Linfo_string47:
	.asciz	"_IO_write_end"
.Linfo_string48:
	.asciz	"_IO_buf_base"
.Linfo_string49:
	.asciz	"_IO_buf_end"
.Linfo_string50:
	.asciz	"_IO_save_base"
.Linfo_string51:
	.asciz	"_IO_backup_base"
.Linfo_string52:
	.asciz	"_IO_save_end"
.Linfo_string53:
	.asciz	"_markers"
.Linfo_string54:
	.asciz	"_next"
.Linfo_string55:
	.asciz	"_sbuf"
.Linfo_string56:
	.asciz	"_pos"
.Linfo_string57:
	.asciz	"_IO_marker"
.Linfo_string58:
	.asciz	"_chain"
.Linfo_string59:
	.asciz	"_fileno"
.Linfo_string60:
	.asciz	"_flags2"
.Linfo_string61:
	.asciz	"_old_offset"
.Linfo_string62:
	.asciz	"long int"
.Linfo_string63:
	.asciz	"__off_t"
.Linfo_string64:
	.asciz	"_cur_column"
.Linfo_string65:
	.asciz	"unsigned short"
.Linfo_string66:
	.asciz	"_vtable_offset"
.Linfo_string67:
	.asciz	"signed char"
.Linfo_string68:
	.asciz	"_shortbuf"
.Linfo_string69:
	.asciz	"_lock"
.Linfo_string70:
	.asciz	"_offset"
.Linfo_string71:
	.asciz	"__off64_t"
.Linfo_string72:
	.asciz	"__pad1"
.Linfo_string73:
	.asciz	"__pad2"
.Linfo_string74:
	.asciz	"__pad3"
.Linfo_string75:
	.asciz	"__pad4"
.Linfo_string76:
	.asciz	"__pad5"
.Linfo_string77:
	.asciz	"long unsigned int"
.Linfo_string78:
	.asciz	"size_t"
.Linfo_string79:
	.asciz	"_mode"
.Linfo_string80:
	.asciz	"_unused2"
.Linfo_string81:
	.asciz	"_IO_FILE"
.Linfo_string82:
	.asciz	"FILE"
.Linfo_string83:
	.asciz	"pt"
.Linfo_string84:
	.asciz	"nfeatures"
.Linfo_string85:
	.asciz	"pts"
.Linfo_string86:
	.asciz	"npts"
.Linfo_string87:
	.asciz	"max_dist"
.Linfo_string88:
	.asciz	"index"
.Linfo_string89:
	.asciz	"dist"
.Linfo_string90:
	.asciz	"pt1"
.Linfo_string91:
	.asciz	"pt2"
.Linfo_string92:
	.asciz	"numdims"
.Linfo_string93:
	.asciz	"ans"
.Linfo_string94:
	.asciz	"feature"
.Linfo_string95:
	.asciz	"npoints"
.Linfo_string96:
	.asciz	"n"
.Linfo_string97:
	.asciz	"loop"
.Linfo_string98:
	.asciz	"tmp"
.Linfo_string99:
	.asciz	"clusters"
.Linfo_string100:
	.asciz	"new_centers_len"
.Linfo_string101:
	.asciz	"new_centers"
.Linfo_string102:
	.asciz	"delta"
.Linfo_string103:
	.asciz	"__nptr"
	.section	.debug_info,"",@progbits
.L.debug_info_begin0:
	.long	217                     # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0xd2 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string1          # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	2                       # Abbrev [2] 0x26:0xa5 DW_TAG_subprogram
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	203                     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin0           # DW_AT_low_pc
	.quad	.Lfunc_end0             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	3                       # Abbrev [3] 0x43:0xf DW_TAG_formal_parameter
	.long	.Linfo_string17         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	203                     # DW_AT_type
	.long	.Ldebug_loc0            # DW_AT_location
	.byte	3                       # Abbrev [3] 0x52:0xf DW_TAG_formal_parameter
	.long	.Linfo_string18         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	78                      # DW_AT_decl_line
	.long	203                     # DW_AT_type
	.long	.Ldebug_loc3            # DW_AT_location
	.byte	4                       # Abbrev [4] 0x61:0xf DW_TAG_formal_parameter
	.long	.Linfo_string19         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	79                      # DW_AT_decl_line
	.long	.Lsection_info+1971     # DW_AT_type
	.long	.Ldebug_loc6            # DW_AT_location
	.byte	3                       # Abbrev [3] 0x70:0xf DW_TAG_formal_parameter
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	80                      # DW_AT_decl_line
	.long	203                     # DW_AT_type
	.long	.Ldebug_loc9            # DW_AT_location
	.byte	4                       # Abbrev [4] 0x7f:0xf DW_TAG_formal_parameter
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	81                      # DW_AT_decl_line
	.long	.Lsection_info+1703     # DW_AT_type
	.long	.Ldebug_loc11           # DW_AT_location
	.byte	3                       # Abbrev [3] 0x8e:0xf DW_TAG_formal_parameter
	.long	.Linfo_string22         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	82                      # DW_AT_decl_line
	.long	210                     # DW_AT_type
	.long	.Ldebug_loc14           # DW_AT_location
	.byte	5                       # Abbrev [5] 0x9d:0xf DW_TAG_variable
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	87                      # DW_AT_decl_line
	.long	215                     # DW_AT_type
	.long	.Ldebug_loc17           # DW_AT_location
	.byte	5                       # Abbrev [5] 0xac:0xf DW_TAG_variable
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	86                      # DW_AT_decl_line
	.long	203                     # DW_AT_type
	.long	.Ldebug_loc19           # DW_AT_location
	.byte	6                       # Abbrev [6] 0xbb:0xf DW_TAG_variable
	.long	.Linfo_string25         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	88                      # DW_AT_decl_line
	.long	.Lsection_info+1971     # DW_AT_type
	.long	.Ldebug_loc21           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	7                       # Abbrev [7] 0xcb:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	5                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	8                       # Abbrev [8] 0xd2:0x5 DW_TAG_pointer_type
	.long	.Lsection_info+1971     # DW_AT_type
	.byte	9                       # Abbrev [9] 0xd7:0x5 DW_TAG_pointer_type
	.long	203                     # DW_AT_type
	.byte	0                       # End Of Children Mark
.L.debug_info_end0:
.L.debug_info_begin1:
	.long	34                      # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	10                      # Abbrev [10] 0xb:0x1b DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string5          # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
.L.debug_info_end1:
.L.debug_info_begin2:
	.long	1121                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x45a DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string6          # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	11                      # Abbrev [11] 0x26:0x34 DW_TAG_subprogram
	.long	.Linfo_string7          # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	85                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.quad	.Lfunc_end1             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	3                       # Abbrev [3] 0x3f:0xf DW_TAG_formal_parameter
	.long	.Linfo_string26         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	85                      # DW_AT_decl_line
	.long	508                     # DW_AT_type
	.long	.Ldebug_loc23           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x4e:0xb DW_TAG_variable
	.long	.Linfo_string28         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	86                      # DW_AT_decl_line
	.long	508                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	13                      # Abbrev [13] 0x5a:0x16b DW_TAG_subprogram
	.long	.Linfo_string8          # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	97                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+203      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin2           # DW_AT_low_pc
	.quad	.Lfunc_end2             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	4                       # Abbrev [4] 0x77:0xf DW_TAG_formal_parameter
	.long	.Linfo_string29         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	97                      # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc26           # DW_AT_location
	.byte	3                       # Abbrev [3] 0x86:0xf DW_TAG_formal_parameter
	.long	.Linfo_string30         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	97                      # DW_AT_decl_line
	.long	520                     # DW_AT_type
	.long	.Ldebug_loc28           # DW_AT_location
	.byte	14                      # Abbrev [14] 0x95:0x10 DW_TAG_variable
	.long	.Linfo_string22         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	105                     # DW_AT_decl_line
	.long	.Lsection_info+1971     # DW_AT_type
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\340\307\001"
	.byte	14                      # Abbrev [14] 0xa5:0x10 DW_TAG_variable
	.long	.Linfo_string18         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	108                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\334\307\001"
	.byte	14                      # Abbrev [14] 0xb5:0x10 DW_TAG_variable
	.long	.Linfo_string17         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	109                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\330\307\001"
	.byte	15                      # Abbrev [15] 0xc5:0x10 DW_TAG_variable
	.long	.Linfo_string31         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	110                     # DW_AT_decl_line
	.long	525                     # DW_AT_type
	.byte	4                       # DW_AT_location
	.byte	145
	.ascii	"\320\277\001"
	.byte	6                       # Abbrev [6] 0xd5:0xf DW_TAG_variable
	.long	.Linfo_string24         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	101                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc30           # DW_AT_location
	.byte	5                       # Abbrev [5] 0xe4:0xf DW_TAG_variable
	.long	.Linfo_string32         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	508                     # DW_AT_type
	.long	.Ldebug_loc33           # DW_AT_location
	.byte	16                      # Abbrev [16] 0xf3:0xc DW_TAG_variable
	.long	.Linfo_string33         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	111                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	6                       # Abbrev [6] 0xff:0xf DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	113                     # DW_AT_decl_line
	.long	.Lsection_info+1703     # DW_AT_type
	.long	.Ldebug_loc36           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x10e:0xf DW_TAG_variable
	.long	.Linfo_string34         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	98                      # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc39           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x11d:0xf DW_TAG_variable
	.long	.Linfo_string35         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	103                     # DW_AT_decl_line
	.long	.Lsection_info+1976     # DW_AT_type
	.long	.Ldebug_loc44           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x12c:0xf DW_TAG_variable
	.long	.Linfo_string19         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	104                     # DW_AT_decl_line
	.long	.Lsection_info+1971     # DW_AT_type
	.long	.Ldebug_loc47           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x13b:0xf DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	106                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc50           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x14a:0xf DW_TAG_variable
	.long	.Linfo_string37         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	106                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc58           # DW_AT_location
	.byte	16                      # Abbrev [16] 0x159:0xc DW_TAG_variable
	.long	.Linfo_string38         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	112                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	12                      # Abbrev [12] 0x165:0xb DW_TAG_variable
	.long	.Linfo_string39         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	114                     # DW_AT_decl_line
	.long	501                     # DW_AT_type
	.byte	17                      # Abbrev [17] 0x170:0x54 DW_TAG_lexical_block
	.quad	.Ltmp99                 # DW_AT_low_pc
	.quad	.Ltmp154                # DW_AT_high_pc
	.byte	17                      # Abbrev [17] 0x181:0x21 DW_TAG_lexical_block
	.quad	.Ltmp100                # DW_AT_low_pc
	.quad	.Ltmp117                # DW_AT_high_pc
	.byte	6                       # Abbrev [6] 0x192:0xf DW_TAG_variable
	.long	.Linfo_string40         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	142                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc42           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	17                      # Abbrev [17] 0x1a2:0x21 DW_TAG_lexical_block
	.quad	.Ltmp118                # DW_AT_low_pc
	.quad	.Ltmp154                # DW_AT_high_pc
	.byte	5                       # Abbrev [5] 0x1b3:0xf DW_TAG_variable
	.long	.Linfo_string40         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	163                     # DW_AT_decl_line
	.long	545                     # DW_AT_type
	.long	.Ldebug_loc56           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	18                      # Abbrev [18] 0x1c5:0x19 DW_TAG_subprogram
	.long	.Linfo_string9          # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.short	278                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+203      # DW_AT_type
                                        # DW_AT_external
	.byte	19                      # Abbrev [19] 0x1d1:0xc DW_TAG_formal_parameter
	.long	.Linfo_string103        # DW_AT_name
	.byte	4                       # DW_AT_decl_file
	.short	278                     # DW_AT_decl_line
	.long	1114                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	20                      # Abbrev [20] 0x1de:0x17 DW_TAG_subprogram
	.long	.Linfo_string10         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	501                     # DW_AT_type
                                        # DW_AT_external
	.byte	21                      # Abbrev [21] 0x1e9:0xb DW_TAG_formal_parameter
	.long	.Linfo_string103        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	1114                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	7                       # Abbrev [7] 0x1f5:0x7 DW_TAG_base_type
	.long	.Linfo_string11         # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	9                       # Abbrev [9] 0x1fc:0x5 DW_TAG_pointer_type
	.long	513                     # DW_AT_type
	.byte	7                       # Abbrev [7] 0x201:0x7 DW_TAG_base_type
	.long	.Linfo_string27         # DW_AT_name
	.byte	6                       # DW_AT_encoding
	.byte	1                       # DW_AT_byte_size
	.byte	9                       # Abbrev [9] 0x208:0x5 DW_TAG_pointer_type
	.long	508                     # DW_AT_type
	.byte	22                      # Abbrev [22] 0x20d:0xd DW_TAG_array_type
	.long	513                     # DW_AT_type
	.byte	23                      # Abbrev [23] 0x212:0x7 DW_TAG_subrange_type
	.long	538                     # DW_AT_type
	.short	1023                    # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	24                      # Abbrev [24] 0x21a:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # DW_AT_encoding
	.byte	9                       # Abbrev [9] 0x221:0x5 DW_TAG_pointer_type
	.long	550                     # DW_AT_type
	.byte	25                      # Abbrev [25] 0x226:0xb DW_TAG_typedef
	.long	561                     # DW_AT_type
	.long	.Linfo_string82         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	48                      # DW_AT_decl_line
	.byte	26                      # Abbrev [26] 0x231:0x199 DW_TAG_structure_type
	.long	.Linfo_string81         # DW_AT_name
	.byte	216                     # DW_AT_byte_size
	.byte	7                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.byte	27                      # Abbrev [27] 0x239:0xd DW_TAG_member
	.long	.Linfo_string41         # DW_AT_name
	.long	.Lsection_info+203      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	246                     # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	28                      # Abbrev [28] 0x246:0xd DW_TAG_member
	.long	.Linfo_string42         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	251                     # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	28                      # Abbrev [28] 0x253:0xd DW_TAG_member
	.long	.Linfo_string43         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	252                     # DW_AT_decl_line
	.byte	16                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	28                      # Abbrev [28] 0x260:0xd DW_TAG_member
	.long	.Linfo_string44         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	253                     # DW_AT_decl_line
	.byte	24                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	28                      # Abbrev [28] 0x26d:0xd DW_TAG_member
	.long	.Linfo_string45         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	254                     # DW_AT_decl_line
	.byte	32                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	28                      # Abbrev [28] 0x27a:0xd DW_TAG_member
	.long	.Linfo_string46         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	255                     # DW_AT_decl_line
	.byte	40                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x287:0xe DW_TAG_member
	.long	.Linfo_string47         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	256                     # DW_AT_decl_line
	.byte	48                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x295:0xe DW_TAG_member
	.long	.Linfo_string48         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	257                     # DW_AT_decl_line
	.byte	56                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x2a3:0xe DW_TAG_member
	.long	.Linfo_string49         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	258                     # DW_AT_decl_line
	.byte	64                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x2b1:0xe DW_TAG_member
	.long	.Linfo_string50         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	260                     # DW_AT_decl_line
	.byte	72                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x2bf:0xe DW_TAG_member
	.long	.Linfo_string51         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	261                     # DW_AT_decl_line
	.byte	80                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x2cd:0xe DW_TAG_member
	.long	.Linfo_string52         # DW_AT_name
	.long	508                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	262                     # DW_AT_decl_line
	.byte	88                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x2db:0xe DW_TAG_member
	.long	.Linfo_string53         # DW_AT_name
	.long	970                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	264                     # DW_AT_decl_line
	.byte	96                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x2e9:0xe DW_TAG_member
	.long	.Linfo_string58         # DW_AT_name
	.long	1023                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	266                     # DW_AT_decl_line
	.byte	104                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x2f7:0xe DW_TAG_member
	.long	.Linfo_string59         # DW_AT_name
	.long	.Lsection_info+203      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	268                     # DW_AT_decl_line
	.byte	112                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x305:0xe DW_TAG_member
	.long	.Linfo_string60         # DW_AT_name
	.long	.Lsection_info+203      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	272                     # DW_AT_decl_line
	.byte	116                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x313:0xe DW_TAG_member
	.long	.Linfo_string61         # DW_AT_name
	.long	1028                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	274                     # DW_AT_decl_line
	.byte	120                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x321:0xe DW_TAG_member
	.long	.Linfo_string64         # DW_AT_name
	.long	1046                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	278                     # DW_AT_decl_line
	.byte	128                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x32f:0xe DW_TAG_member
	.long	.Linfo_string66         # DW_AT_name
	.long	1053                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	279                     # DW_AT_decl_line
	.byte	130                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x33d:0xe DW_TAG_member
	.long	.Linfo_string68         # DW_AT_name
	.long	1060                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	280                     # DW_AT_decl_line
	.byte	131                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x34b:0xe DW_TAG_member
	.long	.Linfo_string69         # DW_AT_name
	.long	1072                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	284                     # DW_AT_decl_line
	.byte	136                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x359:0xe DW_TAG_member
	.long	.Linfo_string70         # DW_AT_name
	.long	1073                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	293                     # DW_AT_decl_line
	.byte	144                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x367:0xe DW_TAG_member
	.long	.Linfo_string72         # DW_AT_name
	.long	1072                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	302                     # DW_AT_decl_line
	.byte	152                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x375:0xe DW_TAG_member
	.long	.Linfo_string73         # DW_AT_name
	.long	1072                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	303                     # DW_AT_decl_line
	.byte	160                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x383:0xe DW_TAG_member
	.long	.Linfo_string74         # DW_AT_name
	.long	1072                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	304                     # DW_AT_decl_line
	.byte	168                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x391:0xe DW_TAG_member
	.long	.Linfo_string75         # DW_AT_name
	.long	1072                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.byte	176                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x39f:0xe DW_TAG_member
	.long	.Linfo_string76         # DW_AT_name
	.long	1084                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	306                     # DW_AT_decl_line
	.byte	184                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x3ad:0xe DW_TAG_member
	.long	.Linfo_string79         # DW_AT_name
	.long	.Lsection_info+203      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	308                     # DW_AT_decl_line
	.byte	192                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x3bb:0xe DW_TAG_member
	.long	.Linfo_string80         # DW_AT_name
	.long	1102                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	310                     # DW_AT_decl_line
	.byte	196                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x3ca:0x5 DW_TAG_pointer_type
	.long	975                     # DW_AT_type
	.byte	26                      # Abbrev [26] 0x3cf:0x30 DW_TAG_structure_type
	.long	.Linfo_string57         # DW_AT_name
	.byte	24                      # DW_AT_byte_size
	.byte	7                       # DW_AT_decl_file
	.byte	160                     # DW_AT_decl_line
	.byte	28                      # Abbrev [28] 0x3d7:0xd DW_TAG_member
	.long	.Linfo_string54         # DW_AT_name
	.long	970                     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	28                      # Abbrev [28] 0x3e4:0xd DW_TAG_member
	.long	.Linfo_string55         # DW_AT_name
	.long	1023                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	162                     # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	27                      # Abbrev [27] 0x3f1:0xd DW_TAG_member
	.long	.Linfo_string56         # DW_AT_name
	.long	.Lsection_info+203      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	166                     # DW_AT_decl_line
	.byte	16                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x3ff:0x5 DW_TAG_pointer_type
	.long	561                     # DW_AT_type
	.byte	25                      # Abbrev [25] 0x404:0xb DW_TAG_typedef
	.long	1039                    # DW_AT_type
	.long	.Linfo_string63         # DW_AT_name
	.byte	7                       # DW_AT_decl_file
	.byte	131                     # DW_AT_decl_line
	.byte	7                       # Abbrev [7] 0x40f:0x7 DW_TAG_base_type
	.long	.Linfo_string62         # DW_AT_name
	.byte	5                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	7                       # Abbrev [7] 0x416:0x7 DW_TAG_base_type
	.long	.Linfo_string65         # DW_AT_name
	.byte	7                       # DW_AT_encoding
	.byte	2                       # DW_AT_byte_size
	.byte	7                       # Abbrev [7] 0x41d:0x7 DW_TAG_base_type
	.long	.Linfo_string67         # DW_AT_name
	.byte	6                       # DW_AT_encoding
	.byte	1                       # DW_AT_byte_size
	.byte	22                      # Abbrev [22] 0x424:0xc DW_TAG_array_type
	.long	513                     # DW_AT_type
	.byte	31                      # Abbrev [31] 0x429:0x6 DW_TAG_subrange_type
	.long	538                     # DW_AT_type
	.byte	0                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	32                      # Abbrev [32] 0x430:0x1 DW_TAG_pointer_type
	.byte	25                      # Abbrev [25] 0x431:0xb DW_TAG_typedef
	.long	1039                    # DW_AT_type
	.long	.Linfo_string71         # DW_AT_name
	.byte	7                       # DW_AT_decl_file
	.byte	132                     # DW_AT_decl_line
	.byte	25                      # Abbrev [25] 0x43c:0xb DW_TAG_typedef
	.long	1095                    # DW_AT_type
	.long	.Linfo_string78         # DW_AT_name
	.byte	7                       # DW_AT_decl_file
	.byte	42                      # DW_AT_decl_line
	.byte	7                       # Abbrev [7] 0x447:0x7 DW_TAG_base_type
	.long	.Linfo_string77         # DW_AT_name
	.byte	7                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	22                      # Abbrev [22] 0x44e:0xc DW_TAG_array_type
	.long	513                     # DW_AT_type
	.byte	31                      # Abbrev [31] 0x453:0x6 DW_TAG_subrange_type
	.long	538                     # DW_AT_type
	.byte	19                      # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x45a:0x5 DW_TAG_pointer_type
	.long	1119                    # DW_AT_type
	.byte	33                      # Abbrev [33] 0x45f:0x5 DW_TAG_const_type
	.long	513                     # DW_AT_type
	.byte	0                       # End Of Children Mark
.L.debug_info_end2:
.L.debug_info_begin3:
	.long	1077                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x42e DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string12         # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	13                      # Abbrev [13] 0x26:0xb3 DW_TAG_subprogram
	.long	.Linfo_string13         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+203      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin5           # DW_AT_low_pc
	.quad	.Lfunc_end5             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	3                       # Abbrev [3] 0x43:0xf DW_TAG_formal_parameter
	.long	.Linfo_string83         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	592                     # DW_AT_type
	.long	.Ldebug_loc60           # DW_AT_location
	.byte	4                       # Abbrev [4] 0x52:0xf DW_TAG_formal_parameter
	.long	.Linfo_string84         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	78                      # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc63           # DW_AT_location
	.byte	3                       # Abbrev [3] 0x61:0xf DW_TAG_formal_parameter
	.long	.Linfo_string85         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	79                      # DW_AT_decl_line
	.long	587                     # DW_AT_type
	.long	.Ldebug_loc66           # DW_AT_location
	.byte	4                       # Abbrev [4] 0x70:0xf DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	80                      # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc69           # DW_AT_location
	.byte	5                       # Abbrev [5] 0x7f:0xf DW_TAG_variable
	.long	.Linfo_string87         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	83                      # DW_AT_decl_line
	.long	319                     # DW_AT_type
	.long	.Ldebug_loc71           # DW_AT_location
	.byte	16                      # Abbrev [16] 0x8e:0xc DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	82                      # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	34                      # Abbrev [34] 0x9a:0xb DW_TAG_variable
	.long	.Linfo_string88         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	82                      # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.byte	17                      # Abbrev [17] 0xa5:0x33 DW_TAG_lexical_block
	.quad	.Ltmp188                # DW_AT_low_pc
	.quad	.Ltmp202                # DW_AT_high_pc
	.byte	17                      # Abbrev [17] 0xb6:0x21 DW_TAG_lexical_block
	.quad	.Ltmp193                # DW_AT_low_pc
	.quad	.Ltmp201                # DW_AT_high_pc
	.byte	5                       # Abbrev [5] 0xc7:0xf DW_TAG_variable
	.long	.Linfo_string89         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	87                      # DW_AT_decl_line
	.long	319                     # DW_AT_type
	.long	.Ldebug_loc75           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	2                       # Abbrev [2] 0xd9:0x66 DW_TAG_subprogram
	.long	.Linfo_string14         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	100                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	319                     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin6           # DW_AT_low_pc
	.quad	.Lfunc_end6             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	3                       # Abbrev [3] 0xf6:0xf DW_TAG_formal_parameter
	.long	.Linfo_string90         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	100                     # DW_AT_decl_line
	.long	592                     # DW_AT_type
	.long	.Ldebug_loc78           # DW_AT_location
	.byte	3                       # Abbrev [3] 0x105:0xf DW_TAG_formal_parameter
	.long	.Linfo_string91         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	101                     # DW_AT_decl_line
	.long	592                     # DW_AT_type
	.long	.Ldebug_loc81           # DW_AT_location
	.byte	4                       # Abbrev [4] 0x114:0xf DW_TAG_formal_parameter
	.long	.Linfo_string92         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc84           # DW_AT_location
	.byte	5                       # Abbrev [5] 0x123:0xf DW_TAG_variable
	.long	.Linfo_string93         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	105                     # DW_AT_decl_line
	.long	319                     # DW_AT_type
	.long	.Ldebug_loc86           # DW_AT_location
	.byte	16                      # Abbrev [16] 0x132:0xc DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	104                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	7                       # Abbrev [7] 0x13f:0x7 DW_TAG_base_type
	.long	.Linfo_string15         # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	2                       # Abbrev [2] 0x146:0x105 DW_TAG_subprogram
	.long	.Linfo_string16         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	115                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	587                     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin7           # DW_AT_low_pc
	.quad	.Lfunc_end7             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	3                       # Abbrev [3] 0x163:0xf DW_TAG_formal_parameter
	.long	.Linfo_string94         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	115                     # DW_AT_decl_line
	.long	587                     # DW_AT_type
	.long	.Ldebug_loc89           # DW_AT_location
	.byte	4                       # Abbrev [4] 0x172:0xf DW_TAG_formal_parameter
	.long	.Linfo_string84         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	116                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc92           # DW_AT_location
	.byte	4                       # Abbrev [4] 0x181:0xf DW_TAG_formal_parameter
	.long	.Linfo_string95         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	117                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc95           # DW_AT_location
	.byte	4                       # Abbrev [4] 0x190:0xf DW_TAG_formal_parameter
	.long	.Linfo_string24         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	118                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc98           # DW_AT_location
	.byte	3                       # Abbrev [3] 0x19f:0xf DW_TAG_formal_parameter
	.long	.Linfo_string21         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	119                     # DW_AT_decl_line
	.long	319                     # DW_AT_type
	.long	.Ldebug_loc100          # DW_AT_location
	.byte	4                       # Abbrev [4] 0x1ae:0xf DW_TAG_formal_parameter
	.long	.Linfo_string23         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	120                     # DW_AT_decl_line
	.long	.Lsection_info+215      # DW_AT_type
	.long	.Ldebug_loc103          # DW_AT_location
	.byte	16                      # Abbrev [16] 0x1bd:0xc DW_TAG_variable
	.long	.Linfo_string96         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	123                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	16                      # Abbrev [16] 0x1c9:0xc DW_TAG_variable
	.long	.Linfo_string97         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	123                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	5                       # Abbrev [5] 0x1d5:0xf DW_TAG_variable
	.long	.Linfo_string98         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	129                     # DW_AT_decl_line
	.long	597                     # DW_AT_type
	.long	.Ldebug_loc106          # DW_AT_location
	.byte	5                       # Abbrev [5] 0x1e4:0xf DW_TAG_variable
	.long	.Linfo_string99         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	126                     # DW_AT_decl_line
	.long	587                     # DW_AT_type
	.long	.Ldebug_loc108          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x1f3:0xf DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	123                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc110          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x202:0xf DW_TAG_variable
	.long	.Linfo_string100        # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	124                     # DW_AT_decl_line
	.long	.Lsection_info+215      # DW_AT_type
	.long	.Ldebug_loc114          # DW_AT_location
	.byte	5                       # Abbrev [5] 0x211:0xf DW_TAG_variable
	.long	.Linfo_string101        # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	127                     # DW_AT_decl_line
	.long	587                     # DW_AT_type
	.long	.Ldebug_loc116          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x220:0xf DW_TAG_variable
	.long	.Linfo_string88         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	123                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.long	.Ldebug_loc118          # DW_AT_location
	.byte	5                       # Abbrev [5] 0x22f:0xf DW_TAG_variable
	.long	.Linfo_string102        # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	125                     # DW_AT_decl_line
	.long	319                     # DW_AT_type
	.long	.Ldebug_loc120          # DW_AT_location
	.byte	16                      # Abbrev [16] 0x23e:0xc DW_TAG_variable
	.long	.Linfo_string37         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	123                     # DW_AT_decl_line
	.long	.Lsection_info+203      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x24b:0x5 DW_TAG_pointer_type
	.long	592                     # DW_AT_type
	.byte	9                       # Abbrev [9] 0x250:0x5 DW_TAG_pointer_type
	.long	319                     # DW_AT_type
	.byte	9                       # Abbrev [9] 0x255:0x5 DW_TAG_pointer_type
	.long	602                     # DW_AT_type
	.byte	25                      # Abbrev [25] 0x25a:0xb DW_TAG_typedef
	.long	613                     # DW_AT_type
	.long	.Linfo_string82         # DW_AT_name
	.byte	6                       # DW_AT_decl_file
	.byte	48                      # DW_AT_decl_line
	.byte	26                      # Abbrev [26] 0x265:0x199 DW_TAG_structure_type
	.long	.Linfo_string81         # DW_AT_name
	.byte	216                     # DW_AT_byte_size
	.byte	7                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.byte	27                      # Abbrev [27] 0x26d:0xd DW_TAG_member
	.long	.Linfo_string41         # DW_AT_name
	.long	.Lsection_info+203      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	246                     # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	27                      # Abbrev [27] 0x27a:0xd DW_TAG_member
	.long	.Linfo_string42         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	251                     # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	27                      # Abbrev [27] 0x287:0xd DW_TAG_member
	.long	.Linfo_string43         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	252                     # DW_AT_decl_line
	.byte	16                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	27                      # Abbrev [27] 0x294:0xd DW_TAG_member
	.long	.Linfo_string44         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	253                     # DW_AT_decl_line
	.byte	24                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	27                      # Abbrev [27] 0x2a1:0xd DW_TAG_member
	.long	.Linfo_string45         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	254                     # DW_AT_decl_line
	.byte	32                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	27                      # Abbrev [27] 0x2ae:0xd DW_TAG_member
	.long	.Linfo_string46         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	255                     # DW_AT_decl_line
	.byte	40                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x2bb:0xe DW_TAG_member
	.long	.Linfo_string47         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	256                     # DW_AT_decl_line
	.byte	48                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x2c9:0xe DW_TAG_member
	.long	.Linfo_string48         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	257                     # DW_AT_decl_line
	.byte	56                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x2d7:0xe DW_TAG_member
	.long	.Linfo_string49         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	258                     # DW_AT_decl_line
	.byte	64                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x2e5:0xe DW_TAG_member
	.long	.Linfo_string50         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	260                     # DW_AT_decl_line
	.byte	72                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x2f3:0xe DW_TAG_member
	.long	.Linfo_string51         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	261                     # DW_AT_decl_line
	.byte	80                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x301:0xe DW_TAG_member
	.long	.Linfo_string52         # DW_AT_name
	.long	.Lsection_info+767      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	262                     # DW_AT_decl_line
	.byte	88                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x30f:0xe DW_TAG_member
	.long	.Linfo_string53         # DW_AT_name
	.long	1022                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	264                     # DW_AT_decl_line
	.byte	96                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	29                      # Abbrev [29] 0x31d:0xe DW_TAG_member
	.long	.Linfo_string58         # DW_AT_name
	.long	1075                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	266                     # DW_AT_decl_line
	.byte	104                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x32b:0xe DW_TAG_member
	.long	.Linfo_string59         # DW_AT_name
	.long	.Lsection_info+203      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	268                     # DW_AT_decl_line
	.byte	112                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x339:0xe DW_TAG_member
	.long	.Linfo_string60         # DW_AT_name
	.long	.Lsection_info+203      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	272                     # DW_AT_decl_line
	.byte	116                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x347:0xe DW_TAG_member
	.long	.Linfo_string61         # DW_AT_name
	.long	.Lsection_info+1287     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	274                     # DW_AT_decl_line
	.byte	120                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x355:0xe DW_TAG_member
	.long	.Linfo_string64         # DW_AT_name
	.long	.Lsection_info+1305     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	278                     # DW_AT_decl_line
	.byte	128                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x363:0xe DW_TAG_member
	.long	.Linfo_string66         # DW_AT_name
	.long	.Lsection_info+1312     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	279                     # DW_AT_decl_line
	.byte	130                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x371:0xe DW_TAG_member
	.long	.Linfo_string68         # DW_AT_name
	.long	.Lsection_info+1319     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	280                     # DW_AT_decl_line
	.byte	131                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x37f:0xe DW_TAG_member
	.long	.Linfo_string69         # DW_AT_name
	.long	.Lsection_info+1331     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	284                     # DW_AT_decl_line
	.byte	136                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x38d:0xe DW_TAG_member
	.long	.Linfo_string70         # DW_AT_name
	.long	.Lsection_info+1332     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	293                     # DW_AT_decl_line
	.byte	144                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x39b:0xe DW_TAG_member
	.long	.Linfo_string72         # DW_AT_name
	.long	.Lsection_info+1331     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	302                     # DW_AT_decl_line
	.byte	152                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x3a9:0xe DW_TAG_member
	.long	.Linfo_string73         # DW_AT_name
	.long	.Lsection_info+1331     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	303                     # DW_AT_decl_line
	.byte	160                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x3b7:0xe DW_TAG_member
	.long	.Linfo_string74         # DW_AT_name
	.long	.Lsection_info+1331     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	304                     # DW_AT_decl_line
	.byte	168                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x3c5:0xe DW_TAG_member
	.long	.Linfo_string75         # DW_AT_name
	.long	.Lsection_info+1331     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	305                     # DW_AT_decl_line
	.byte	176                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x3d3:0xe DW_TAG_member
	.long	.Linfo_string76         # DW_AT_name
	.long	.Lsection_info+1343     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	306                     # DW_AT_decl_line
	.byte	184                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x3e1:0xe DW_TAG_member
	.long	.Linfo_string79         # DW_AT_name
	.long	.Lsection_info+203      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	308                     # DW_AT_decl_line
	.byte	192                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	30                      # Abbrev [30] 0x3ef:0xe DW_TAG_member
	.long	.Linfo_string80         # DW_AT_name
	.long	.Lsection_info+1361     # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.short	310                     # DW_AT_decl_line
	.byte	196                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x3fe:0x5 DW_TAG_pointer_type
	.long	1027                    # DW_AT_type
	.byte	26                      # Abbrev [26] 0x403:0x30 DW_TAG_structure_type
	.long	.Linfo_string57         # DW_AT_name
	.byte	24                      # DW_AT_byte_size
	.byte	7                       # DW_AT_decl_file
	.byte	160                     # DW_AT_decl_line
	.byte	28                      # Abbrev [28] 0x40b:0xd DW_TAG_member
	.long	.Linfo_string54         # DW_AT_name
	.long	1022                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	161                     # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	28                      # Abbrev [28] 0x418:0xd DW_TAG_member
	.long	.Linfo_string55         # DW_AT_name
	.long	1075                    # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	162                     # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	27                      # Abbrev [27] 0x425:0xd DW_TAG_member
	.long	.Linfo_string56         # DW_AT_name
	.long	.Lsection_info+203      # DW_AT_type
	.byte	7                       # DW_AT_decl_file
	.byte	166                     # DW_AT_decl_line
	.byte	16                      # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x433:0x5 DW_TAG_pointer_type
	.long	613                     # DW_AT_type
	.byte	0                       # End Of Children Mark
.L.debug_info_end3:
	.section	.debug_abbrev,"",@progbits
.L.debug_abbrev_begin:
	.byte	1                       # Abbreviation Code
	.byte	17                      # DW_TAG_compile_unit
	.byte	1                       # DW_CHILDREN_yes
	.byte	37                      # DW_AT_producer
	.byte	14                      # DW_FORM_strp
	.byte	19                      # DW_AT_language
	.byte	5                       # DW_FORM_data2
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	16                      # DW_AT_stmt_list
	.byte	23                      # DW_FORM_sec_offset
	.byte	27                      # DW_AT_comp_dir
	.byte	14                      # DW_FORM_strp
	.ascii	"\341\177"              # DW_AT_APPLE_optimized
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	2                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	3                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	4                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	5                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	6                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	7                       # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	8                       # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	9                       # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	10                      # Abbreviation Code
	.byte	17                      # DW_TAG_compile_unit
	.byte	0                       # DW_CHILDREN_no
	.byte	37                      # DW_AT_producer
	.byte	14                      # DW_FORM_strp
	.byte	19                      # DW_AT_language
	.byte	5                       # DW_FORM_data2
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	16                      # DW_AT_stmt_list
	.byte	23                      # DW_FORM_sec_offset
	.byte	27                      # DW_AT_comp_dir
	.byte	14                      # DW_FORM_strp
	.ascii	"\341\177"              # DW_AT_APPLE_optimized
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	11                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	12                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	13                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	14                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	15                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	16                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	17                      # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	18                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	19                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	20                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	21                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	22                      # Abbreviation Code
	.byte	1                       # DW_TAG_array_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	23                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	47                      # DW_AT_upper_bound
	.byte	5                       # DW_FORM_data2
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	24                      # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	25                      # Abbreviation Code
	.byte	22                      # DW_TAG_typedef
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	26                      # Abbreviation Code
	.byte	19                      # DW_TAG_structure_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	27                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	28                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	29                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	30                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	31                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	47                      # DW_AT_upper_bound
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	32                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	33                      # Abbreviation Code
	.byte	38                      # DW_TAG_const_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	34                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	0                       # EOM(3)
.L.debug_abbrev_end:
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Lfunc_begin0
	.quad	.Ltmp21
.Lset0 = .Ltmp337-.Ltmp336              # Loc expr size
	.short	.Lset0
.Ltmp336:
	.byte	85                      # DW_OP_reg5
.Ltmp337:
	.quad	.Ltmp21
	.quad	.Ltmp30
.Lset1 = .Ltmp339-.Ltmp338              # Loc expr size
	.short	.Lset1
.Ltmp338:
	.byte	119                     # DW_OP_breg7
	.ascii	"\354\017"
.Ltmp339:
	.quad	0
	.quad	0
.Ldebug_loc3:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset2 = .Ltmp341-.Ltmp340              # Loc expr size
	.short	.Lset2
.Ltmp340:
	.byte	84                      # DW_OP_reg4
.Ltmp341:
	.quad	.Ltmp22
	.quad	.Ltmp30
.Lset3 = .Ltmp343-.Ltmp342              # Loc expr size
	.short	.Lset3
.Ltmp342:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\017"
.Ltmp343:
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Lfunc_begin0
	.quad	.Ltmp23
.Lset4 = .Ltmp345-.Ltmp344              # Loc expr size
	.short	.Lset4
.Ltmp344:
	.byte	81                      # DW_OP_reg1
.Ltmp345:
	.quad	.Ltmp23
	.quad	.Ltmp30
.Lset5 = .Ltmp347-.Ltmp346              # Loc expr size
	.short	.Lset5
.Ltmp346:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\017"
.Ltmp347:
	.quad	0
	.quad	0
.Ldebug_loc9:
	.quad	.Lfunc_begin0
	.quad	.Ltmp30
.Lset6 = .Ltmp349-.Ltmp348              # Loc expr size
	.short	.Lset6
.Ltmp348:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\021"
.Ltmp349:
	.quad	0
	.quad	0
.Ldebug_loc11:
	.quad	.Lfunc_begin0
	.quad	.Ltmp25
.Lset7 = .Ltmp351-.Ltmp350              # Loc expr size
	.short	.Lset7
.Ltmp350:
	.byte	97                      # DW_OP_reg17
.Ltmp351:
	.quad	.Ltmp25
	.quad	.Ltmp26
.Lset8 = .Ltmp353-.Ltmp352              # Loc expr size
	.short	.Lset8
.Ltmp352:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\017"
.Ltmp353:
	.quad	0
	.quad	0
.Ldebug_loc14:
	.quad	.Lfunc_begin0
	.quad	.Ltmp24
.Lset9 = .Ltmp355-.Ltmp354              # Loc expr size
	.short	.Lset9
.Ltmp354:
	.byte	88                      # DW_OP_reg8
.Ltmp355:
	.quad	.Ltmp24
	.quad	.Ltmp30
.Lset10 = .Ltmp357-.Ltmp356             # Loc expr size
	.short	.Lset10
.Ltmp356:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\017"
.Ltmp357:
	.quad	0
	.quad	0
.Ldebug_loc17:
	.quad	.Ltmp27
	.quad	.Ltmp30
.Lset11 = .Ltmp359-.Ltmp358             # Loc expr size
	.short	.Lset11
.Ltmp358:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\f"
.Ltmp359:
	.quad	0
	.quad	0
.Ldebug_loc19:
	.quad	.Ltmp27
	.quad	.Ltmp28
.Lset12 = .Ltmp361-.Ltmp360             # Loc expr size
	.short	.Lset12
.Ltmp360:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\021"
.Ltmp361:
	.quad	0
	.quad	0
.Ldebug_loc21:
	.quad	.Ltmp29
	.quad	.Ltmp30
.Lset13 = .Ltmp363-.Ltmp362             # Loc expr size
	.short	.Lset13
.Ltmp362:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\t"
.Ltmp363:
	.quad	0
	.quad	0
.Ldebug_loc23:
	.quad	.Lfunc_begin1
	.quad	.Ltmp56
.Lset14 = .Ltmp365-.Ltmp364             # Loc expr size
	.short	.Lset14
.Ltmp364:
	.byte	85                      # DW_OP_reg5
.Ltmp365:
	.quad	.Ltmp56
	.quad	.Ltmp57
.Lset15 = .Ltmp367-.Ltmp366             # Loc expr size
	.short	.Lset15
.Ltmp366:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\002"
.Ltmp367:
	.quad	0
	.quad	0
.Ldebug_loc26:
	.quad	.Lfunc_begin2
	.quad	.Ltmp83
.Lset16 = .Ltmp369-.Ltmp368             # Loc expr size
	.short	.Lset16
.Ltmp368:
	.byte	119                     # DW_OP_breg7
	.ascii	"\354\273\001"
.Ltmp369:
	.quad	0
	.quad	0
.Ldebug_loc28:
	.quad	.Lfunc_begin2
	.quad	.Ltmp83
.Lset17 = .Ltmp371-.Ltmp370             # Loc expr size
	.short	.Lset17
.Ltmp370:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\273\001"
.Ltmp371:
	.quad	0
	.quad	0
.Ldebug_loc30:
	.quad	.Ltmp81
	.quad	.Ltmp92
.Lset18 = .Ltmp373-.Ltmp372             # Loc expr size
	.short	.Lset18
.Ltmp372:
	.byte	16                      # DW_OP_constu
	.byte	5
.Ltmp373:
	.quad	.Ltmp92
	.quad	.Ltmp93
.Lset19 = .Ltmp375-.Ltmp374             # Loc expr size
	.short	.Lset19
.Ltmp374:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\251\001"
.Ltmp375:
	.quad	0
	.quad	0
.Ldebug_loc33:
	.quad	.Ltmp81
	.quad	.Ltmp83
.Lset20 = .Ltmp377-.Ltmp376             # Loc expr size
	.short	.Lset20
.Ltmp376:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\277\001"
.Ltmp377:
	.quad	.Ltmp88
	.quad	.Ltmp89
.Lset21 = .Ltmp379-.Ltmp378             # Loc expr size
	.short	.Lset21
.Ltmp378:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\257\001"
.Ltmp379:
	.quad	0
	.quad	0
.Ldebug_loc36:
	.quad	.Ltmp82
	.quad	.Ltmp90
.Lset22 = .Ltmp381-.Ltmp380             # Loc expr size
	.short	.Lset22
.Ltmp380:
.Ltmp381:
	.quad	.Ltmp90
	.quad	.Ltmp91
.Lset23 = .Ltmp383-.Ltmp382             # Loc expr size
	.short	.Lset23
.Ltmp382:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\253\001"
.Ltmp383:
	.quad	0
	.quad	0
.Ldebug_loc39:
	.quad	.Ltmp84
	.quad	.Ltmp85
.Lset24 = .Ltmp385-.Ltmp384             # Loc expr size
	.short	.Lset24
.Ltmp384:
	.byte	80                      # DW_OP_reg0
.Ltmp385:
	.quad	.Ltmp85
	.quad	.Ltmp86
.Lset25 = .Ltmp387-.Ltmp386             # Loc expr size
	.short	.Lset25
.Ltmp386:
	.byte	119                     # DW_OP_breg7
	.ascii	"\244\261\001"
.Ltmp387:
	.quad	0
	.quad	0
.Ldebug_loc42:
	.quad	.Ltmp101
	.quad	.Ltmp102
.Lset26 = .Ltmp389-.Ltmp388             # Loc expr size
	.short	.Lset26
.Ltmp388:
	.byte	119                     # DW_OP_breg7
	.ascii	"\224\235\001"
.Ltmp389:
	.quad	0
	.quad	0
.Ldebug_loc44:
	.quad	.Ltmp107
	.quad	.Ltmp111
.Lset27 = .Ltmp391-.Ltmp390             # Loc expr size
	.short	.Lset27
.Ltmp390:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\216\001"
.Ltmp391:
	.quad	.Ltmp134
	.quad	.Ltmp138
.Lset28 = .Ltmp393-.Ltmp392             # Loc expr size
	.short	.Lset28
.Ltmp392:
	.byte	119                     # DW_OP_breg7
	.asciz	"\320\307"
.Ltmp393:
	.quad	0
	.quad	0
.Ldebug_loc47:
	.quad	.Ltmp108
	.quad	.Ltmp111
.Lset29 = .Ltmp395-.Ltmp394             # Loc expr size
	.short	.Lset29
.Ltmp394:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\211\001"
.Ltmp395:
	.quad	.Ltmp135
	.quad	.Ltmp138
.Lset30 = .Ltmp397-.Ltmp396             # Loc expr size
	.short	.Lset30
.Ltmp396:
	.byte	119                     # DW_OP_breg7
	.asciz	"\300\302"
.Ltmp397:
	.quad	0
	.quad	0
.Ldebug_loc50:
	.quad	.Ltmp110
	.quad	.Ltmp151
.Lset31 = .Ltmp399-.Ltmp398             # Loc expr size
	.short	.Lset31
.Ltmp398:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp399:
	.quad	.Ltmp151
	.quad	.Ltmp153
.Lset32 = .Ltmp401-.Ltmp400             # Loc expr size
	.short	.Lset32
.Ltmp400:
	.byte	119                     # DW_OP_breg7
	.ascii	"\274\032"
.Ltmp401:
	.quad	.Ltmp158
	.quad	.Lfunc_end2
.Lset33 = .Ltmp403-.Ltmp402             # Loc expr size
	.short	.Lset33
.Ltmp402:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp403:
	.quad	0
	.quad	0
.Ldebug_loc56:
	.quad	.Ltmp119
	.quad	.Ltmp120
.Lset34 = .Ltmp405-.Ltmp404             # Loc expr size
	.short	.Lset34
.Ltmp404:
	.byte	119                     # DW_OP_breg7
	.asciz	"\260\365"
.Ltmp405:
	.quad	0
	.quad	0
.Ldebug_loc58:
	.quad	.Ltmp152
	.quad	.Ltmp153
.Lset35 = .Ltmp407-.Ltmp406             # Loc expr size
	.short	.Lset35
.Ltmp406:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\032"
.Ltmp407:
	.quad	0
	.quad	0
.Ldebug_loc60:
	.quad	.Lfunc_begin5
	.quad	.Ltmp189
.Lset36 = .Ltmp409-.Ltmp408             # Loc expr size
	.short	.Lset36
.Ltmp408:
	.byte	85                      # DW_OP_reg5
.Ltmp409:
	.quad	.Ltmp189
	.quad	.Ltmp192
.Lset37 = .Ltmp411-.Ltmp410             # Loc expr size
	.short	.Lset37
.Ltmp410:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\b"
.Ltmp411:
	.quad	0
	.quad	0
.Ldebug_loc63:
	.quad	.Lfunc_begin5
	.quad	.Ltmp190
.Lset38 = .Ltmp413-.Ltmp412             # Loc expr size
	.short	.Lset38
.Ltmp412:
	.byte	84                      # DW_OP_reg4
.Ltmp413:
	.quad	.Ltmp190
	.quad	.Ltmp192
.Lset39 = .Ltmp415-.Ltmp414             # Loc expr size
	.short	.Lset39
.Ltmp414:
	.byte	119                     # DW_OP_breg7
	.ascii	"\324\b"
.Ltmp415:
	.quad	0
	.quad	0
.Ldebug_loc66:
	.quad	.Lfunc_begin5
	.quad	.Ltmp191
.Lset40 = .Ltmp417-.Ltmp416             # Loc expr size
	.short	.Lset40
.Ltmp416:
	.byte	81                      # DW_OP_reg1
.Ltmp417:
	.quad	.Ltmp191
	.quad	.Ltmp192
.Lset41 = .Ltmp419-.Ltmp418             # Loc expr size
	.short	.Lset41
.Ltmp418:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\b"
.Ltmp419:
	.quad	0
	.quad	0
.Ldebug_loc69:
	.quad	.Lfunc_begin5
	.quad	.Ltmp192
.Lset42 = .Ltmp421-.Ltmp420             # Loc expr size
	.short	.Lset42
.Ltmp420:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314\t"
.Ltmp421:
	.quad	0
	.quad	0
.Ldebug_loc71:
	.quad	.Ltmp188
	.quad	.Ltmp194
.Lset43 = .Ltmp423-.Ltmp422             # Loc expr size
	.short	.Lset43
.Ltmp422:
.Ltmp423:
	.quad	.Ltmp194
	.quad	.Ltmp195
.Lset44 = .Ltmp425-.Ltmp424             # Loc expr size
	.short	.Lset44
.Ltmp424:
	.byte	97                      # DW_OP_reg17
.Ltmp425:
	.quad	.Ltmp195
	.quad	.Ltmp196
.Lset45 = .Ltmp427-.Ltmp426             # Loc expr size
	.short	.Lset45
.Ltmp426:
	.byte	119                     # DW_OP_breg7
	.ascii	"\204\002"
.Ltmp427:
	.quad	0
	.quad	0
.Ldebug_loc75:
	.quad	.Ltmp194
	.quad	.Ltmp195
.Lset46 = .Ltmp429-.Ltmp428             # Loc expr size
	.short	.Lset46
.Ltmp428:
	.byte	97                      # DW_OP_reg17
.Ltmp429:
	.quad	.Ltmp195
	.quad	.Ltmp202
.Lset47 = .Ltmp431-.Ltmp430             # Loc expr size
	.short	.Lset47
.Ltmp430:
	.byte	119                     # DW_OP_breg7
	.ascii	"\204\002"
.Ltmp431:
	.quad	0
	.quad	0
.Ldebug_loc78:
	.quad	.Lfunc_begin6
	.quad	.Ltmp226
.Lset48 = .Ltmp433-.Ltmp432             # Loc expr size
	.short	.Lset48
.Ltmp432:
	.byte	85                      # DW_OP_reg5
.Ltmp433:
	.quad	.Ltmp226
	.quad	.Ltmp228
.Lset49 = .Ltmp435-.Ltmp434             # Loc expr size
	.short	.Lset49
.Ltmp434:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\013"
.Ltmp435:
	.quad	0
	.quad	0
.Ldebug_loc81:
	.quad	.Lfunc_begin6
	.quad	.Ltmp227
.Lset50 = .Ltmp437-.Ltmp436             # Loc expr size
	.short	.Lset50
.Ltmp436:
	.byte	84                      # DW_OP_reg4
.Ltmp437:
	.quad	.Ltmp227
	.quad	.Ltmp228
.Lset51 = .Ltmp439-.Ltmp438             # Loc expr size
	.short	.Lset51
.Ltmp438:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\013"
.Ltmp439:
	.quad	0
	.quad	0
.Ldebug_loc84:
	.quad	.Lfunc_begin6
	.quad	.Ltmp228
.Lset52 = .Ltmp441-.Ltmp440             # Loc expr size
	.short	.Lset52
.Ltmp440:
	.byte	119                     # DW_OP_breg7
	.ascii	"\304\f"
.Ltmp441:
	.quad	0
	.quad	0
.Ldebug_loc86:
	.quad	.Ltmp225
	.quad	.Ltmp229
.Lset53 = .Ltmp443-.Ltmp442             # Loc expr size
	.short	.Lset53
.Ltmp442:
.Ltmp443:
	.quad	.Ltmp229
	.quad	.Ltmp230
.Lset54 = .Ltmp445-.Ltmp444             # Loc expr size
	.short	.Lset54
.Ltmp444:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\001"
.Ltmp445:
	.quad	0
	.quad	0
.Ldebug_loc89:
	.quad	.Lfunc_begin7
	.quad	.Ltmp254
.Lset55 = .Ltmp447-.Ltmp446             # Loc expr size
	.short	.Lset55
.Ltmp446:
	.byte	85                      # DW_OP_reg5
.Ltmp447:
	.quad	.Ltmp254
	.quad	.Ltmp266
.Lset56 = .Ltmp449-.Ltmp448             # Loc expr size
	.short	.Lset56
.Ltmp448:
	.byte	119                     # DW_OP_breg7
	.asciz	"\200\374"
.Ltmp449:
	.quad	0
	.quad	0
.Ldebug_loc92:
	.quad	.Lfunc_begin7
	.quad	.Ltmp255
.Lset57 = .Ltmp451-.Ltmp450             # Loc expr size
	.short	.Lset57
.Ltmp450:
	.byte	84                      # DW_OP_reg4
.Ltmp451:
	.quad	.Ltmp255
	.quad	.Ltmp266
.Lset58 = .Ltmp453-.Ltmp452             # Loc expr size
	.short	.Lset58
.Ltmp452:
	.byte	119                     # DW_OP_breg7
	.asciz	"\374\373"
.Ltmp453:
	.quad	0
	.quad	0
.Ldebug_loc95:
	.quad	.Lfunc_begin7
	.quad	.Ltmp256
.Lset59 = .Ltmp455-.Ltmp454             # Loc expr size
	.short	.Lset59
.Ltmp454:
	.byte	81                      # DW_OP_reg1
.Ltmp455:
	.quad	.Ltmp256
	.quad	.Ltmp266
.Lset60 = .Ltmp457-.Ltmp456             # Loc expr size
	.short	.Lset60
.Ltmp456:
	.byte	119                     # DW_OP_breg7
	.asciz	"\370\373"
.Ltmp457:
	.quad	0
	.quad	0
.Ldebug_loc98:
	.quad	.Lfunc_begin7
	.quad	.Ltmp266
.Lset61 = .Ltmp459-.Ltmp458             # Loc expr size
	.short	.Lset61
.Ltmp458:
	.byte	119                     # DW_OP_breg7
	.asciz	"\344\374"
.Ltmp459:
	.quad	0
	.quad	0
.Ldebug_loc100:
	.quad	.Lfunc_begin7
	.quad	.Ltmp258
.Lset62 = .Ltmp461-.Ltmp460             # Loc expr size
	.short	.Lset62
.Ltmp460:
	.byte	97                      # DW_OP_reg17
.Ltmp461:
	.quad	.Ltmp258
	.quad	.Ltmp260
.Lset63 = .Ltmp463-.Ltmp462             # Loc expr size
	.short	.Lset63
.Ltmp462:
	.byte	119                     # DW_OP_breg7
	.asciz	"\314\373"
.Ltmp463:
	.quad	0
	.quad	0
.Ldebug_loc103:
	.quad	.Lfunc_begin7
	.quad	.Ltmp257
.Lset64 = .Ltmp465-.Ltmp464             # Loc expr size
	.short	.Lset64
.Ltmp464:
	.byte	88                      # DW_OP_reg8
.Ltmp465:
	.quad	.Ltmp257
	.quad	.Ltmp266
.Lset65 = .Ltmp467-.Ltmp466             # Loc expr size
	.short	.Lset65
.Ltmp466:
	.byte	119                     # DW_OP_breg7
	.asciz	"\350\373"
.Ltmp467:
	.quad	0
	.quad	0
.Ldebug_loc106:
	.quad	.Ltmp261
	.quad	.Ltmp262
.Lset66 = .Ltmp469-.Ltmp468             # Loc expr size
	.short	.Lset66
.Ltmp468:
	.byte	119                     # DW_OP_breg7
	.asciz	"\210\373"
.Ltmp469:
	.quad	0
	.quad	0
.Ldebug_loc108:
	.quad	.Ltmp263
	.quad	.Ltmp264
.Lset67 = .Ltmp471-.Ltmp470             # Loc expr size
	.short	.Lset67
.Ltmp470:
	.byte	119                     # DW_OP_breg7
	.asciz	"\240\361"
.Ltmp471:
	.quad	0
	.quad	0
.Ldebug_loc110:
	.quad	.Ltmp265
	.quad	.Ltmp307
.Lset68 = .Ltmp473-.Ltmp472             # Loc expr size
	.short	.Lset68
.Ltmp472:
	.byte	16                      # DW_OP_constu
	.byte	1
.Ltmp473:
	.quad	.Ltmp307
	.quad	.Ltmp308
.Lset69 = .Ltmp475-.Ltmp474             # Loc expr size
	.short	.Lset69
.Ltmp474:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314\033"
.Ltmp475:
	.quad	0
	.quad	0
.Ldebug_loc114:
	.quad	.Ltmp283
	.quad	.Ltmp284
.Lset70 = .Ltmp477-.Ltmp476             # Loc expr size
	.short	.Lset70
.Ltmp476:
	.byte	119                     # DW_OP_breg7
	.asciz	"\310\312"
.Ltmp477:
	.quad	0
	.quad	0
.Ldebug_loc116:
	.quad	.Ltmp285
	.quad	.Ltmp286
.Lset71 = .Ltmp479-.Ltmp478             # Loc expr size
	.short	.Lset71
.Ltmp478:
	.byte	119                     # DW_OP_breg7
	.asciz	"\230\310"
.Ltmp479:
	.quad	0
	.quad	0
.Ldebug_loc118:
	.quad	.Ltmp301
	.quad	.Ltmp302
.Lset72 = .Ltmp481-.Ltmp480             # Loc expr size
	.short	.Lset72
.Ltmp480:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2241"
.Ltmp481:
	.quad	0
	.quad	0
.Ldebug_loc120:
	.quad	.Ltmp303
	.quad	.Ltmp304
.Lset73 = .Ltmp483-.Ltmp482             # Loc expr size
	.short	.Lset73
.Ltmp482:
	.byte	119                     # DW_OP_breg7
	.ascii	"\254,"
.Ltmp483:
	.quad	0
	.quad	0
.Ldebug_loc122:
	.section	.debug_aranges,"",@progbits
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin0    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin0
.Lset74 = .Lfunc_begin1-.Lfunc_begin0
	.quad	.Lset74
	.quad	0                       # ARange terminator
	.quad	0
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin2    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin1
.Lset75 = .Lfunc_begin5-.Lfunc_begin1
	.quad	.Lset75
	.quad	0                       # ARange terminator
	.quad	0
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin3    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin5
.Lset76 = .Ldebug_end0-.Lfunc_begin5
	.quad	.Lset76
	.quad	0                       # ARange terminator
	.quad	0
	.section	.debug_ranges,"",@progbits
	.section	.debug_macinfo,"",@progbits
	.section	.debug_pubnames,"",@progbits
.Lset77 = .Lpubnames_end1-.Lpubnames_begin1 # Length of Public Names Info
	.long	.Lset77
.Lpubnames_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset78 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset78
	.long	0                       # End Mark
.Lpubnames_end1:
.Lset79 = .Lpubnames_end2-.Lpubnames_begin2 # Length of Public Names Info
	.long	.Lset79
.Lpubnames_begin2:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin2    # Offset of Compilation Unit Info
.Lset80 = .L.debug_info_end2-.L.debug_info_begin2 # Compilation Unit Length
	.long	.Lset80
	.long	38                      # DIE offset
	.asciz	"usage"                 # External Name
	.long	90                      # DIE offset
	.asciz	"main"                  # External Name
	.long	478                     # DIE offset
	.asciz	"atof"                  # External Name
	.long	453                     # DIE offset
	.asciz	"atoi"                  # External Name
	.long	0                       # End Mark
.Lpubnames_end2:
.Lset81 = .Lpubnames_end0-.Lpubnames_begin0 # Length of Public Names Info
	.long	.Lset81
.Lpubnames_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset82 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset82
	.long	38                      # DIE offset
	.asciz	"cluster"               # External Name
	.long	0                       # End Mark
.Lpubnames_end0:
.Lset83 = .Lpubnames_end3-.Lpubnames_begin3 # Length of Public Names Info
	.long	.Lset83
.Lpubnames_begin3:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin3    # Offset of Compilation Unit Info
.Lset84 = .L.debug_info_end3-.L.debug_info_begin3 # Compilation Unit Length
	.long	.Lset84
	.long	217                     # DIE offset
	.asciz	"euclid_dist_2"         # External Name
	.long	38                      # DIE offset
	.asciz	"find_nearest_point"    # External Name
	.long	326                     # DIE offset
	.asciz	"kmeans_clustering"     # External Name
	.long	0                       # End Mark
.Lpubnames_end3:
	.section	.debug_pubtypes,"",@progbits
.Lset85 = .Lpubtypes_end1-.Lpubtypes_begin1 # Length of Public Types Info
	.long	.Lset85
.Lpubtypes_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset86 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset86
	.long	0                       # End Mark
.Lpubtypes_end1:
.Lset87 = .Lpubtypes_end2-.Lpubtypes_begin2 # Length of Public Types Info
	.long	.Lset87
.Lpubtypes_begin2:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin2    # Offset of Compilation Unit Info
.Lset88 = .L.debug_info_end2-.L.debug_info_begin2 # Compilation Unit Length
	.long	.Lset88
	.long	550                     # DIE offset
	.asciz	"FILE"                  # External Name
	.long	1053                    # DIE offset
	.asciz	"signed char"           # External Name
	.long	203                     # DIE offset
	.asciz	"int"                   # External Name
	.long	1028                    # DIE offset
	.asciz	"__off_t"               # External Name
	.long	1046                    # DIE offset
	.asciz	"unsigned short"        # External Name
	.long	1084                    # DIE offset
	.asciz	"size_t"                # External Name
	.long	1073                    # DIE offset
	.asciz	"__off64_t"             # External Name
	.long	319                     # DIE offset
	.asciz	"float"                 # External Name
	.long	1095                    # DIE offset
	.asciz	"long unsigned int"     # External Name
	.long	561                     # DIE offset
	.asciz	"_IO_FILE"              # External Name
	.long	1039                    # DIE offset
	.asciz	"long int"              # External Name
	.long	501                     # DIE offset
	.asciz	"double"                # External Name
	.long	975                     # DIE offset
	.asciz	"_IO_marker"            # External Name
	.long	513                     # DIE offset
	.asciz	"char"                  # External Name
	.long	0                       # End Mark
.Lpubtypes_end2:
.Lset89 = .Lpubtypes_end0-.Lpubtypes_begin0 # Length of Public Types Info
	.long	.Lset89
.Lpubtypes_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset90 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset90
	.long	319                     # DIE offset
	.asciz	"float"                 # External Name
	.long	203                     # DIE offset
	.asciz	"int"                   # External Name
	.long	0                       # End Mark
.Lpubtypes_end0:
.Lset91 = .Lpubtypes_end3-.Lpubtypes_begin3 # Length of Public Types Info
	.long	.Lset91
.Lpubtypes_begin3:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin3    # Offset of Compilation Unit Info
.Lset92 = .L.debug_info_end3-.L.debug_info_begin3 # Compilation Unit Length
	.long	.Lset92
	.long	1073                    # DIE offset
	.asciz	"__off64_t"             # External Name
	.long	602                     # DIE offset
	.asciz	"FILE"                  # External Name
	.long	319                     # DIE offset
	.asciz	"float"                 # External Name
	.long	613                     # DIE offset
	.asciz	"_IO_FILE"              # External Name
	.long	1027                    # DIE offset
	.asciz	"_IO_marker"            # External Name
	.long	1053                    # DIE offset
	.asciz	"signed char"           # External Name
	.long	203                     # DIE offset
	.asciz	"int"                   # External Name
	.long	1028                    # DIE offset
	.asciz	"__off_t"               # External Name
	.long	1046                    # DIE offset
	.asciz	"unsigned short"        # External Name
	.long	1084                    # DIE offset
	.asciz	"size_t"                # External Name
	.long	0                       # End Mark
.Lpubtypes_end3:

	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.section	".note.GNU-stack","",@progbits
