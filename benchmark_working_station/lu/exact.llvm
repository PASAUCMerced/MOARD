; ModuleID = 'exact.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@nx0 = external global i32, align 4
@ny0 = external global i32, align 4
@nz = external global i32, align 4
@ce = external global [5 x [13 x double]], align 16

; Function Attrs: noinline norecurse nounwind uwtable
define void @exact(i32 %i, i32 %j, i32 %k, double* nocapture %u000ijk) #0 !dbg !6 {
  tail call void @llvm.dbg.value(metadata i32 %i, i64 0, metadata !12, metadata !24), !dbg !25
  tail call void @llvm.dbg.value(metadata i32 %j, i64 0, metadata !13, metadata !24), !dbg !26
  tail call void @llvm.dbg.value(metadata i32 %k, i64 0, metadata !14, metadata !24), !dbg !27
  tail call void @llvm.dbg.value(metadata double* %u000ijk, i64 0, metadata !15, metadata !24), !dbg !28
  %1 = sitofp i32 %i to double, !dbg !29
  %2 = load i32, i32* @nx0, align 4, !dbg !30, !tbaa !31
  %3 = add nsw i32 %2, -1, !dbg !35
  %4 = sitofp i32 %3 to double, !dbg !36
  %5 = fdiv double %1, %4, !dbg !37
  tail call void @llvm.dbg.value(metadata double %5, i64 0, metadata !17, metadata !24), !dbg !38
  %6 = sitofp i32 %j to double, !dbg !39
  %7 = load i32, i32* @ny0, align 4, !dbg !40, !tbaa !31
  %8 = add nsw i32 %7, -1, !dbg !41
  %9 = sitofp i32 %8 to double, !dbg !42
  %10 = fdiv double %6, %9, !dbg !43
  tail call void @llvm.dbg.value(metadata double %10, i64 0, metadata !18, metadata !24), !dbg !44
  %11 = sitofp i32 %k to double, !dbg !45
  %12 = load i32, i32* @nz, align 4, !dbg !46, !tbaa !31
  %13 = add nsw i32 %12, -1, !dbg !47
  %14 = sitofp i32 %13 to double, !dbg !48
  %15 = fdiv double %11, %14, !dbg !49
  tail call void @llvm.dbg.value(metadata double %15, i64 0, metadata !19, metadata !24), !dbg !50
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !16, metadata !24), !dbg !51
  br label %16, !dbg !52

; <label>:16                                      ; preds = %16, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %16 ]
  %17 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 0, !dbg !56
  %18 = load double, double* %17, align 8, !dbg !56, !tbaa !58
  %19 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 1, !dbg !60
  %20 = load double, double* %19, align 8, !dbg !60, !tbaa !58
  %21 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 4, !dbg !61
  %22 = load double, double* %21, align 8, !dbg !61, !tbaa !58
  %23 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 7, !dbg !62
  %24 = load double, double* %23, align 8, !dbg !62, !tbaa !58
  %25 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 10, !dbg !63
  %26 = load double, double* %25, align 8, !dbg !63, !tbaa !58
  %27 = fmul double %5, %26, !dbg !64
  %28 = fadd double %24, %27, !dbg !65
  %29 = fmul double %5, %28, !dbg !66
  %30 = fadd double %22, %29, !dbg !67
  %31 = fmul double %5, %30, !dbg !68
  %32 = fadd double %20, %31, !dbg !69
  %33 = fmul double %5, %32, !dbg !70
  %34 = fadd double %18, %33, !dbg !71
  %35 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 2, !dbg !72
  %36 = load double, double* %35, align 8, !dbg !72, !tbaa !58
  %37 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 5, !dbg !73
  %38 = load double, double* %37, align 8, !dbg !73, !tbaa !58
  %39 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 8, !dbg !74
  %40 = load double, double* %39, align 8, !dbg !74, !tbaa !58
  %41 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 11, !dbg !75
  %42 = load double, double* %41, align 8, !dbg !75, !tbaa !58
  %43 = fmul double %10, %42, !dbg !76
  %44 = fadd double %40, %43, !dbg !77
  %45 = fmul double %10, %44, !dbg !78
  %46 = fadd double %38, %45, !dbg !79
  %47 = fmul double %10, %46, !dbg !80
  %48 = fadd double %36, %47, !dbg !81
  %49 = fmul double %10, %48, !dbg !82
  %50 = fadd double %34, %49, !dbg !83
  %51 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 3, !dbg !84
  %52 = load double, double* %51, align 8, !dbg !84, !tbaa !58
  %53 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 6, !dbg !85
  %54 = load double, double* %53, align 8, !dbg !85, !tbaa !58
  %55 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 9, !dbg !86
  %56 = load double, double* %55, align 8, !dbg !86, !tbaa !58
  %57 = getelementptr inbounds [5 x [13 x double]], [5 x [13 x double]]* @ce, i64 0, i64 %indvars.iv, i64 12, !dbg !87
  %58 = load double, double* %57, align 8, !dbg !87, !tbaa !58
  %59 = fmul double %15, %58, !dbg !88
  %60 = fadd double %56, %59, !dbg !89
  %61 = fmul double %15, %60, !dbg !90
  %62 = fadd double %54, %61, !dbg !91
  %63 = fmul double %15, %62, !dbg !92
  %64 = fadd double %52, %63, !dbg !93
  %65 = fmul double %15, %64, !dbg !94
  %66 = fadd double %50, %65, !dbg !95
  %67 = getelementptr inbounds double, double* %u000ijk, i64 %indvars.iv, !dbg !96
  store double %66, double* %67, align 8, !dbg !97, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !52
  %exitcond = icmp eq i64 %indvars.iv.next, 5, !dbg !52
  br i1 %exitcond, label %68, label %16, !dbg !52

; <label>:68                                      ; preds = %16
  ret void, !dbg !98
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!20, !21, !22}
!llvm.ident = !{!23}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.8.0 (tags/RELEASE_380/final)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !5)
!1 = !DIFile(filename: "exact.c", directory: "/home/jingl/trace_analysis_code/trace_analysis_code_lulesh_m_delv_zeta/benchmark_working_station/lu")
!2 = !{}
!3 = !{!4}
!4 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!5 = !{!6}
!6 = distinct !DISubprogram(name: "exact", scope: !1, file: !1, line: 41, type: !7, isLocal: false, isDefinition: true, scopeLine: 42, flags: DIFlagPrototyped, isOptimized: true, variables: !11)
!7 = !DISubroutineType(types: !8)
!8 = !{null, !9, !9, !9, !10}
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64, align: 64)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19}
!12 = !DILocalVariable(name: "i", arg: 1, scope: !6, file: !1, line: 41, type: !9)
!13 = !DILocalVariable(name: "j", arg: 2, scope: !6, file: !1, line: 41, type: !9)
!14 = !DILocalVariable(name: "k", arg: 3, scope: !6, file: !1, line: 41, type: !9)
!15 = !DILocalVariable(name: "u000ijk", arg: 4, scope: !6, file: !1, line: 41, type: !10)
!16 = !DILocalVariable(name: "m", scope: !6, file: !1, line: 46, type: !9)
!17 = !DILocalVariable(name: "xi", scope: !6, file: !1, line: 47, type: !4)
!18 = !DILocalVariable(name: "eta", scope: !6, file: !1, line: 47, type: !4)
!19 = !DILocalVariable(name: "zeta", scope: !6, file: !1, line: 47, type: !4)
!20 = !{i32 2, !"Dwarf Version", i32 4}
!21 = !{i32 2, !"Debug Info Version", i32 3}
!22 = !{i32 1, !"PIC Level", i32 2}
!23 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!24 = !DIExpression()
!25 = !DILocation(line: 41, column: 16, scope: !6)
!26 = !DILocation(line: 41, column: 23, scope: !6)
!27 = !DILocation(line: 41, column: 30, scope: !6)
!28 = !DILocation(line: 41, column: 40, scope: !6)
!29 = !DILocation(line: 49, column: 12, scope: !6)
!30 = !DILocation(line: 49, column: 28, scope: !6)
!31 = !{!32, !32, i64 0}
!32 = !{!"int", !33, i64 0}
!33 = !{!"omnipotent char", !34, i64 0}
!34 = !{!"Simple C/C++ TBAA"}
!35 = !DILocation(line: 49, column: 32, scope: !6)
!36 = !DILocation(line: 49, column: 26, scope: !6)
!37 = !DILocation(line: 49, column: 24, scope: !6)
!38 = !DILocation(line: 47, column: 10, scope: !6)
!39 = !DILocation(line: 50, column: 12, scope: !6)
!40 = !DILocation(line: 50, column: 28, scope: !6)
!41 = !DILocation(line: 50, column: 32, scope: !6)
!42 = !DILocation(line: 50, column: 26, scope: !6)
!43 = !DILocation(line: 50, column: 24, scope: !6)
!44 = !DILocation(line: 47, column: 14, scope: !6)
!45 = !DILocation(line: 51, column: 12, scope: !6)
!46 = !DILocation(line: 51, column: 28, scope: !6)
!47 = !DILocation(line: 51, column: 31, scope: !6)
!48 = !DILocation(line: 51, column: 26, scope: !6)
!49 = !DILocation(line: 51, column: 24, scope: !6)
!50 = !DILocation(line: 47, column: 19, scope: !6)
!51 = !DILocation(line: 46, column: 7, scope: !6)
!52 = !DILocation(line: 53, column: 3, scope: !53)
!53 = !DILexicalBlockFile(scope: !54, file: !1, discriminator: 1)
!54 = distinct !DILexicalBlock(scope: !55, file: !1, line: 53, column: 3)
!55 = distinct !DILexicalBlock(scope: !6, file: !1, line: 53, column: 3)
!56 = !DILocation(line: 54, column: 19, scope: !57)
!57 = distinct !DILexicalBlock(scope: !54, file: !1, line: 53, column: 27)
!58 = !{!59, !59, i64 0}
!59 = !{!"double", !33, i64 0}
!60 = !DILocation(line: 55, column: 10, scope: !57)
!61 = !DILocation(line: 56, column: 10, scope: !57)
!62 = !DILocation(line: 57, column: 10, scope: !57)
!63 = !DILocation(line: 58, column: 10, scope: !57)
!64 = !DILocation(line: 58, column: 20, scope: !57)
!65 = !DILocation(line: 58, column: 7, scope: !57)
!66 = !DILocation(line: 58, column: 26, scope: !57)
!67 = !DILocation(line: 57, column: 7, scope: !57)
!68 = !DILocation(line: 58, column: 32, scope: !57)
!69 = !DILocation(line: 56, column: 7, scope: !57)
!70 = !DILocation(line: 58, column: 38, scope: !57)
!71 = !DILocation(line: 55, column: 7, scope: !57)
!72 = !DILocation(line: 59, column: 10, scope: !57)
!73 = !DILocation(line: 60, column: 10, scope: !57)
!74 = !DILocation(line: 61, column: 10, scope: !57)
!75 = !DILocation(line: 62, column: 10, scope: !57)
!76 = !DILocation(line: 62, column: 20, scope: !57)
!77 = !DILocation(line: 62, column: 7, scope: !57)
!78 = !DILocation(line: 62, column: 27, scope: !57)
!79 = !DILocation(line: 61, column: 7, scope: !57)
!80 = !DILocation(line: 62, column: 34, scope: !57)
!81 = !DILocation(line: 60, column: 7, scope: !57)
!82 = !DILocation(line: 62, column: 41, scope: !57)
!83 = !DILocation(line: 59, column: 7, scope: !57)
!84 = !DILocation(line: 63, column: 10, scope: !57)
!85 = !DILocation(line: 64, column: 10, scope: !57)
!86 = !DILocation(line: 65, column: 10, scope: !57)
!87 = !DILocation(line: 66, column: 10, scope: !57)
!88 = !DILocation(line: 66, column: 20, scope: !57)
!89 = !DILocation(line: 66, column: 7, scope: !57)
!90 = !DILocation(line: 66, column: 28, scope: !57)
!91 = !DILocation(line: 65, column: 7, scope: !57)
!92 = !DILocation(line: 66, column: 36, scope: !57)
!93 = !DILocation(line: 64, column: 7, scope: !57)
!94 = !DILocation(line: 66, column: 44, scope: !57)
!95 = !DILocation(line: 63, column: 7, scope: !57)
!96 = !DILocation(line: 54, column: 5, scope: !57)
!97 = !DILocation(line: 54, column: 16, scope: !57)
!98 = !DILocation(line: 68, column: 1, scope: !6)
