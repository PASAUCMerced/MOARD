; ModuleID = 'error.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@errnm = external global [5 x double], align 16
@nz = external global i32, align 4
@jst = external global i32, align 4
@jend = external global i32, align 4
@ist = external global i32, align 4
@iend = external global i32, align 4
@u = external global [12 x [13 x [13 x [5 x double]]]], align 16
@nx0 = external global i32, align 4
@ny0 = external global i32, align 4
@nz0 = external global i32, align 4

; Function Attrs: noinline nounwind uwtable
define void @error() #0 !dbg !4 {
  %u000ijk = alloca [5 x double], align 16
  %1 = bitcast [5 x double]* %u000ijk to i8*, !dbg !23
  call void @llvm.lifetime.start(i64 40, i8* %1) #5, !dbg !23
  tail call void @llvm.dbg.declare(metadata [5 x double]* %u000ijk, metadata !15, metadata !24), !dbg !25
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !12, metadata !24), !dbg !26
  br label %6, !dbg !27

.preheader1:                                      ; preds = %6
  %2 = load i32, i32* @nz, align 4, !dbg !31, !tbaa !35
  %3 = add nsw i32 %2, -1, !dbg !39
  %4 = icmp sgt i32 %3, 1, !dbg !40
  br i1 %4, label %.lr.ph10, label %.preheader, !dbg !41

.lr.ph10:                                         ; preds = %.preheader1
  %5 = getelementptr inbounds [5 x double], [5 x double]* %u000ijk, i64 0, i64 0, !dbg !42
  br label %8, !dbg !41

; <label>:6                                       ; preds = %6, %0
  %indvars.iv21 = phi i64 [ 0, %0 ], [ %indvars.iv.next22, %6 ]
  %7 = getelementptr inbounds [5 x double], [5 x double]* @errnm, i64 0, i64 %indvars.iv21, !dbg !50
  store double 0.000000e+00, double* %7, align 8, !dbg !52, !tbaa !53
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1, !dbg !27
  %exitcond23 = icmp eq i64 %indvars.iv.next22, 5, !dbg !27
  br i1 %exitcond23, label %.preheader1, label %6, !dbg !27

; <label>:8                                       ; preds = %.lr.ph10, %._crit_edge8
  %indvars.iv19 = phi i64 [ 1, %.lr.ph10 ], [ %indvars.iv.next20, %._crit_edge8 ]
  %9 = load i32, i32* @jst, align 4, !dbg !55, !tbaa !35
  call void @llvm.dbg.value(metadata i32 %9, i64 0, metadata !10, metadata !24), !dbg !56
  %10 = load i32, i32* @jend, align 4, !dbg !57, !tbaa !35
  %11 = icmp slt i32 %9, %10, !dbg !59
  br i1 %11, label %.lr.ph7, label %._crit_edge8, !dbg !60

.lr.ph7:                                          ; preds = %8
  %12 = sext i32 %9 to i64, !dbg !60
  %13 = trunc i64 %indvars.iv19 to i32, !dbg !61
  br label %14, !dbg !60

; <label>:14                                      ; preds = %.lr.ph7, %._crit_edge
  %indvars.iv17 = phi i64 [ %12, %.lr.ph7 ], [ %indvars.iv.next18, %._crit_edge ]
  %15 = load i32, i32* @ist, align 4, !dbg !62, !tbaa !35
  call void @llvm.dbg.value(metadata i32 %15, i64 0, metadata !8, metadata !24), !dbg !63
  %16 = load i32, i32* @iend, align 4, !dbg !64, !tbaa !35
  %17 = icmp slt i32 %15, %16, !dbg !66
  br i1 %17, label %.lr.ph, label %._crit_edge, !dbg !67

.lr.ph:                                           ; preds = %14
  %18 = sext i32 %15 to i64, !dbg !67
  %19 = trunc i64 %indvars.iv17 to i32, !dbg !61
  br label %20, !dbg !67

; <label>:20                                      ; preds = %.lr.ph, %32
  %indvars.iv15 = phi i64 [ %18, %.lr.ph ], [ %indvars.iv.next16, %32 ]
  %21 = trunc i64 %indvars.iv15 to i32, !dbg !61
  call void @exact(i32 %21, i32 %19, i32 %13, double* %5) #6, !dbg !61
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !12, metadata !24), !dbg !26
  br label %22, !dbg !68

; <label>:22                                      ; preds = %22, %20
  %indvars.iv12 = phi i64 [ 0, %20 ], [ %indvars.iv.next13, %22 ]
  %23 = getelementptr inbounds [5 x double], [5 x double]* %u000ijk, i64 0, i64 %indvars.iv12, !dbg !72
  %24 = load double, double* %23, align 8, !dbg !72, !tbaa !53
  %25 = getelementptr inbounds [12 x [13 x [13 x [5 x double]]]], [12 x [13 x [13 x [5 x double]]]]* @u, i64 0, i64 %indvars.iv19, i64 %indvars.iv17, i64 %indvars.iv15, i64 %indvars.iv12, !dbg !74
  %26 = load double, double* %25, align 8, !dbg !74, !tbaa !53
  %27 = fsub double %24, %26, !dbg !75
  call void @llvm.dbg.value(metadata double %27, i64 0, metadata !13, metadata !24), !dbg !76
  %28 = getelementptr inbounds [5 x double], [5 x double]* @errnm, i64 0, i64 %indvars.iv12, !dbg !77
  %29 = load double, double* %28, align 8, !dbg !77, !tbaa !53
  %30 = fmul double %27, %27, !dbg !78
  %31 = fadd double %29, %30, !dbg !79
  store double %31, double* %28, align 8, !dbg !80, !tbaa !53
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1, !dbg !68
  %exitcond14 = icmp eq i64 %indvars.iv.next13, 5, !dbg !68
  br i1 %exitcond14, label %32, label %22, !dbg !68

; <label>:32                                      ; preds = %22
  %indvars.iv.next16 = add i64 %indvars.iv15, 1, !dbg !67
  %33 = load i32, i32* @iend, align 4, !dbg !64, !tbaa !35
  %34 = sext i32 %33 to i64, !dbg !66
  %35 = icmp slt i64 %indvars.iv.next16, %34, !dbg !66
  br i1 %35, label %20, label %._crit_edge, !dbg !67

._crit_edge:                                      ; preds = %32, %14
  %indvars.iv.next18 = add i64 %indvars.iv17, 1, !dbg !60
  %36 = load i32, i32* @jend, align 4, !dbg !57, !tbaa !35
  %37 = sext i32 %36 to i64, !dbg !59
  %38 = icmp slt i64 %indvars.iv.next18, %37, !dbg !59
  br i1 %38, label %14, label %._crit_edge8, !dbg !60

._crit_edge8:                                     ; preds = %._crit_edge, %8
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1, !dbg !41
  %39 = load i32, i32* @nz, align 4, !dbg !31, !tbaa !35
  %40 = add nsw i32 %39, -1, !dbg !39
  %41 = sext i32 %40 to i64, !dbg !40
  %42 = icmp slt i64 %indvars.iv.next20, %41, !dbg !40
  br i1 %42, label %8, label %.preheader, !dbg !41

.preheader:                                       ; preds = %.preheader1, %._crit_edge8, %.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %.preheader ], [ 0, %._crit_edge8 ], [ 0, %.preheader1 ]
  %43 = getelementptr inbounds [5 x double], [5 x double]* @errnm, i64 0, i64 %indvars.iv, !dbg !81
  %44 = load double, double* %43, align 8, !dbg !81, !tbaa !53
  %45 = load i32, i32* @nx0, align 4, !dbg !85, !tbaa !35
  %46 = add nsw i32 %45, -2, !dbg !86
  %47 = load i32, i32* @ny0, align 4, !dbg !87, !tbaa !35
  %48 = add nsw i32 %47, -2, !dbg !88
  %49 = mul nsw i32 %48, %46, !dbg !89
  %50 = load i32, i32* @nz0, align 4, !dbg !90, !tbaa !35
  %51 = add nsw i32 %50, -2, !dbg !91
  %52 = mul nsw i32 %49, %51, !dbg !92
  %53 = sitofp i32 %52 to double, !dbg !93
  %54 = fdiv double %44, %53, !dbg !94
  %55 = call double @sqrt(double %54) #6, !dbg !95
  store double %55, double* %43, align 8, !dbg !96, !tbaa !53
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !97
  %exitcond = icmp eq i64 %indvars.iv.next, 5, !dbg !97
  br i1 %exitcond, label %56, label %.preheader, !dbg !97

; <label>:56                                      ; preds = %.preheader
  call void @llvm.lifetime.end(i64 40, i8* %1) #5, !dbg !99
  ret void, !dbg !99
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

declare void @exact(i32, i32, i32, double*) #3

; Function Attrs: nounwind
declare double @sqrt(double) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #2

attributes #0 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nobuiltin nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!19, !20, !21}
!llvm.ident = !{!22}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.8.0 (tags/RELEASE_380/final)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "error.c", directory: "/home/jingl/trace_analysis_code/trace_analysis_code_lulesh_m_delv_zeta/benchmark_working_station/lu")
!2 = !{}
!3 = !{!4}
!4 = distinct !DISubprogram(name: "error", scope: !1, file: !1, line: 43, type: !5, isLocal: false, isDefinition: true, scopeLine: 44, isOptimized: true, variables: !7)
!5 = !DISubroutineType(types: !6)
!6 = !{null}
!7 = !{!8, !10, !11, !12, !13, !15}
!8 = !DILocalVariable(name: "i", scope: !4, file: !1, line: 48, type: !9)
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !DILocalVariable(name: "j", scope: !4, file: !1, line: 48, type: !9)
!11 = !DILocalVariable(name: "k", scope: !4, file: !1, line: 48, type: !9)
!12 = !DILocalVariable(name: "m", scope: !4, file: !1, line: 48, type: !9)
!13 = !DILocalVariable(name: "tmp", scope: !4, file: !1, line: 49, type: !14)
!14 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!15 = !DILocalVariable(name: "u000ijk", scope: !4, file: !1, line: 50, type: !16)
!16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 320, align: 64, elements: !17)
!17 = !{!18}
!18 = !DISubrange(count: 5)
!19 = !{i32 2, !"Dwarf Version", i32 4}
!20 = !{i32 2, !"Debug Info Version", i32 3}
!21 = !{i32 1, !"PIC Level", i32 2}
!22 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!23 = !DILocation(line: 50, column: 3, scope: !4)
!24 = !DIExpression()
!25 = !DILocation(line: 50, column: 10, scope: !4)
!26 = !DILocation(line: 48, column: 16, scope: !4)
!27 = !DILocation(line: 52, column: 3, scope: !28)
!28 = !DILexicalBlockFile(scope: !29, file: !1, discriminator: 1)
!29 = distinct !DILexicalBlock(scope: !30, file: !1, line: 52, column: 3)
!30 = distinct !DILexicalBlock(scope: !4, file: !1, line: 52, column: 3)
!31 = !DILocation(line: 56, column: 19, scope: !32)
!32 = !DILexicalBlockFile(scope: !33, file: !1, discriminator: 1)
!33 = distinct !DILexicalBlock(scope: !34, file: !1, line: 56, column: 3)
!34 = distinct !DILexicalBlock(scope: !4, file: !1, line: 56, column: 3)
!35 = !{!36, !36, i64 0}
!36 = !{!"int", !37, i64 0}
!37 = !{!"omnipotent char", !38, i64 0}
!38 = !{!"Simple C/C++ TBAA"}
!39 = !DILocation(line: 56, column: 21, scope: !32)
!40 = !DILocation(line: 56, column: 17, scope: !32)
!41 = !DILocation(line: 56, column: 3, scope: !32)
!42 = !DILocation(line: 59, column: 25, scope: !43)
!43 = distinct !DILexicalBlock(scope: !44, file: !1, line: 58, column: 36)
!44 = distinct !DILexicalBlock(scope: !45, file: !1, line: 58, column: 7)
!45 = distinct !DILexicalBlock(scope: !46, file: !1, line: 58, column: 7)
!46 = distinct !DILexicalBlock(scope: !47, file: !1, line: 57, column: 34)
!47 = distinct !DILexicalBlock(scope: !48, file: !1, line: 57, column: 5)
!48 = distinct !DILexicalBlock(scope: !49, file: !1, line: 57, column: 5)
!49 = distinct !DILexicalBlock(scope: !33, file: !1, line: 56, column: 30)
!50 = !DILocation(line: 53, column: 5, scope: !51)
!51 = distinct !DILexicalBlock(scope: !29, file: !1, line: 52, column: 27)
!52 = !DILocation(line: 53, column: 14, scope: !51)
!53 = !{!54, !54, i64 0}
!54 = !{!"double", !37, i64 0}
!55 = !DILocation(line: 57, column: 14, scope: !48)
!56 = !DILocation(line: 48, column: 10, scope: !4)
!57 = !DILocation(line: 57, column: 23, scope: !58)
!58 = !DILexicalBlockFile(scope: !47, file: !1, discriminator: 1)
!59 = !DILocation(line: 57, column: 21, scope: !58)
!60 = !DILocation(line: 57, column: 5, scope: !58)
!61 = !DILocation(line: 59, column: 9, scope: !43)
!62 = !DILocation(line: 58, column: 16, scope: !45)
!63 = !DILocation(line: 48, column: 7, scope: !4)
!64 = !DILocation(line: 58, column: 25, scope: !65)
!65 = !DILexicalBlockFile(scope: !44, file: !1, discriminator: 1)
!66 = !DILocation(line: 58, column: 23, scope: !65)
!67 = !DILocation(line: 58, column: 7, scope: !65)
!68 = !DILocation(line: 60, column: 9, scope: !69)
!69 = !DILexicalBlockFile(scope: !70, file: !1, discriminator: 1)
!70 = distinct !DILexicalBlock(scope: !71, file: !1, line: 60, column: 9)
!71 = distinct !DILexicalBlock(scope: !43, file: !1, line: 60, column: 9)
!72 = !DILocation(line: 61, column: 19, scope: !73)
!73 = distinct !DILexicalBlock(scope: !70, file: !1, line: 60, column: 33)
!74 = !DILocation(line: 61, column: 32, scope: !73)
!75 = !DILocation(line: 61, column: 30, scope: !73)
!76 = !DILocation(line: 49, column: 10, scope: !4)
!77 = !DILocation(line: 62, column: 22, scope: !73)
!78 = !DILocation(line: 62, column: 37, scope: !73)
!79 = !DILocation(line: 62, column: 31, scope: !73)
!80 = !DILocation(line: 62, column: 20, scope: !73)
!81 = !DILocation(line: 69, column: 23, scope: !82)
!82 = distinct !DILexicalBlock(scope: !83, file: !1, line: 68, column: 27)
!83 = distinct !DILexicalBlock(scope: !84, file: !1, line: 68, column: 3)
!84 = distinct !DILexicalBlock(scope: !4, file: !1, line: 68, column: 3)
!85 = !DILocation(line: 69, column: 37, scope: !82)
!86 = !DILocation(line: 69, column: 40, scope: !82)
!87 = !DILocation(line: 69, column: 45, scope: !82)
!88 = !DILocation(line: 69, column: 48, scope: !82)
!89 = !DILocation(line: 69, column: 43, scope: !82)
!90 = !DILocation(line: 69, column: 53, scope: !82)
!91 = !DILocation(line: 69, column: 56, scope: !82)
!92 = !DILocation(line: 69, column: 51, scope: !82)
!93 = !DILocation(line: 69, column: 34, scope: !82)
!94 = !DILocation(line: 69, column: 32, scope: !82)
!95 = !DILocation(line: 69, column: 16, scope: !82)
!96 = !DILocation(line: 69, column: 14, scope: !82)
!97 = !DILocation(line: 68, column: 3, scope: !98)
!98 = !DILexicalBlockFile(scope: !83, file: !1, discriminator: 1)
!99 = !DILocation(line: 80, column: 1, scope: !4)
