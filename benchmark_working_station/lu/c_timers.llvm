; ModuleID = 'c_timers.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@elapsed = internal unnamed_addr global [64 x double] zeroinitializer, align 16
@start = internal unnamed_addr global [64 x double] zeroinitializer, align 16

; Function Attrs: noinline norecurse nounwind uwtable
define void @timer_clear(i32 %n) #0 !dbg !4 {
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !9, metadata !39), !dbg !40
  %1 = sext i32 %n to i64, !dbg !41
  %2 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %1, !dbg !41
  store double 0.000000e+00, double* %2, align 8, !dbg !42, !tbaa !43
  ret void, !dbg !47
}

; Function Attrs: noinline nounwind uwtable
define void @timer_start(i32 %n) #1 !dbg !10 {
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !12, metadata !39), !dbg !48
  %1 = tail call fastcc double @elapsed_time() #6, !dbg !49
  %2 = sext i32 %n to i64, !dbg !50
  %3 = getelementptr inbounds [64 x double], [64 x double]* @start, i64 0, i64 %2, !dbg !50
  store double %1, double* %3, align 8, !dbg !51, !tbaa !43
  ret void, !dbg !52
}

; Function Attrs: noinline nounwind uwtable
define internal fastcc double @elapsed_time() unnamed_addr #1 !dbg !24 {
  %t = alloca double, align 8
  %1 = bitcast double* %t to i8*, !dbg !53
  call void @llvm.lifetime.start(i64 8, i8* %1) #7, !dbg !53
  tail call void @llvm.dbg.value(metadata double* %t, i64 0, metadata !28, metadata !54), !dbg !55
  call void @wtime_(double* nonnull %t) #8, !dbg !56
  %2 = load double, double* %t, align 8, !dbg !57, !tbaa !43
  call void @llvm.dbg.value(metadata double %2, i64 0, metadata !28, metadata !39), !dbg !55
  call void @llvm.lifetime.end(i64 8, i8* %1) #7, !dbg !58
  ret double %2, !dbg !59
}

; Function Attrs: noinline nounwind uwtable
define void @timer_stop(i32 %n) #1 !dbg !13 {
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !15, metadata !39), !dbg !60
  %1 = tail call fastcc double @elapsed_time() #6, !dbg !61
  tail call void @llvm.dbg.value(metadata double %1, i64 0, metadata !18, metadata !39), !dbg !62
  %2 = sext i32 %n to i64, !dbg !63
  %3 = getelementptr inbounds [64 x double], [64 x double]* @start, i64 0, i64 %2, !dbg !63
  %4 = load double, double* %3, align 8, !dbg !63, !tbaa !43
  %5 = fsub double %1, %4, !dbg !64
  tail call void @llvm.dbg.value(metadata double %5, i64 0, metadata !16, metadata !39), !dbg !65
  %6 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %2, !dbg !66
  %7 = load double, double* %6, align 8, !dbg !67, !tbaa !43
  %8 = fadd double %7, %5, !dbg !67
  store double %8, double* %6, align 8, !dbg !67, !tbaa !43
  ret void, !dbg !68
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: noinline norecurse nounwind readonly uwtable
define double @timer_read(i32 %n) #3 !dbg !19 {
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !23, metadata !39), !dbg !69
  %1 = sext i32 %n to i64, !dbg !70
  %2 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %1, !dbg !70
  %3 = load double, double* %2, align 8, !dbg !70, !tbaa !43
  ret double %3, !dbg !71
}

declare void @wtime_(double*) #4

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #5

attributes #0 = { noinline norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noinline norecurse nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nobuiltin }
attributes #7 = { nounwind }
attributes #8 = { nobuiltin nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!35, !36, !37}
!llvm.ident = !{!38}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.8.0 (tags/RELEASE_380/final)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !29)
!1 = !DIFile(filename: "c_timers.c", directory: "/home/jingl/trace_analysis_code/trace_analysis_code_lulesh_m_delv_zeta/benchmark_working_station/lu")
!2 = !{}
!3 = !{!4, !10, !13, !19, !24}
!4 = distinct !DISubprogram(name: "timer_clear", scope: !1, file: !1, line: 25, type: !5, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: true, variables: !8)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7}
!7 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!8 = !{!9}
!9 = !DILocalVariable(name: "n", arg: 1, scope: !4, file: !1, line: 25, type: !7)
!10 = distinct !DISubprogram(name: "timer_start", scope: !1, file: !1, line: 34, type: !5, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: true, variables: !11)
!11 = !{!12}
!12 = !DILocalVariable(name: "n", arg: 1, scope: !10, file: !1, line: 34, type: !7)
!13 = distinct !DISubprogram(name: "timer_stop", scope: !1, file: !1, line: 43, type: !5, isLocal: false, isDefinition: true, scopeLine: 44, flags: DIFlagPrototyped, isOptimized: true, variables: !14)
!14 = !{!15, !16, !18}
!15 = !DILocalVariable(name: "n", arg: 1, scope: !13, file: !1, line: 43, type: !7)
!16 = !DILocalVariable(name: "t", scope: !13, file: !1, line: 45, type: !17)
!17 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!18 = !DILocalVariable(name: "now", scope: !13, file: !1, line: 45, type: !17)
!19 = distinct !DISubprogram(name: "timer_read", scope: !1, file: !1, line: 57, type: !20, isLocal: false, isDefinition: true, scopeLine: 58, flags: DIFlagPrototyped, isOptimized: true, variables: !22)
!20 = !DISubroutineType(types: !21)
!21 = !{!17, !7}
!22 = !{!23}
!23 = !DILocalVariable(name: "n", arg: 1, scope: !19, file: !1, line: 57, type: !7)
!24 = distinct !DISubprogram(name: "elapsed_time", scope: !1, file: !1, line: 11, type: !25, isLocal: true, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: true, variables: !27)
!25 = !DISubroutineType(types: !26)
!26 = !{!17}
!27 = !{!28}
!28 = !DILocalVariable(name: "t", scope: !24, file: !1, line: 13, type: !17)
!29 = !{!30, !34}
!30 = !DIGlobalVariable(name: "start", scope: !0, file: !1, line: 20, type: !31, isLocal: true, isDefinition: true, variable: [64 x double]* @start)
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 4096, align: 64, elements: !32)
!32 = !{!33}
!33 = !DISubrange(count: 64)
!34 = !DIGlobalVariable(name: "elapsed", scope: !0, file: !1, line: 20, type: !31, isLocal: true, isDefinition: true, variable: [64 x double]* @elapsed)
!35 = !{i32 2, !"Dwarf Version", i32 4}
!36 = !{i32 2, !"Debug Info Version", i32 3}
!37 = !{i32 1, !"PIC Level", i32 2}
!38 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!39 = !DIExpression()
!40 = !DILocation(line: 25, column: 23, scope: !4)
!41 = !DILocation(line: 27, column: 5, scope: !4)
!42 = !DILocation(line: 27, column: 16, scope: !4)
!43 = !{!44, !44, i64 0}
!44 = !{!"double", !45, i64 0}
!45 = !{!"omnipotent char", !46, i64 0}
!46 = !{!"Simple C/C++ TBAA"}
!47 = !DILocation(line: 28, column: 1, scope: !4)
!48 = !DILocation(line: 34, column: 23, scope: !10)
!49 = !DILocation(line: 36, column: 16, scope: !10)
!50 = !DILocation(line: 36, column: 5, scope: !10)
!51 = !DILocation(line: 36, column: 14, scope: !10)
!52 = !DILocation(line: 37, column: 1, scope: !10)
!53 = !DILocation(line: 13, column: 5, scope: !24)
!54 = !DIExpression(DW_OP_deref)
!55 = !DILocation(line: 13, column: 12, scope: !24)
!56 = !DILocation(line: 15, column: 5, scope: !24)
!57 = !DILocation(line: 16, column: 13, scope: !24)
!58 = !DILocation(line: 17, column: 1, scope: !24)
!59 = !DILocation(line: 16, column: 5, scope: !24)
!60 = !DILocation(line: 43, column: 22, scope: !13)
!61 = !DILocation(line: 47, column: 11, scope: !13)
!62 = !DILocation(line: 45, column: 15, scope: !13)
!63 = !DILocation(line: 48, column: 15, scope: !13)
!64 = !DILocation(line: 48, column: 13, scope: !13)
!65 = !DILocation(line: 45, column: 12, scope: !13)
!66 = !DILocation(line: 49, column: 5, scope: !13)
!67 = !DILocation(line: 49, column: 16, scope: !13)
!68 = !DILocation(line: 51, column: 1, scope: !13)
!69 = !DILocation(line: 57, column: 24, scope: !19)
!70 = !DILocation(line: 59, column: 13, scope: !19)
!71 = !DILocation(line: 59, column: 5, scope: !19)
