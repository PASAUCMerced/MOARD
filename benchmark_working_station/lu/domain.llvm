; ModuleID = 'domain.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@nx0 = external global i32, align 4
@nx = external global i32, align 4
@ny0 = external global i32, align 4
@ny = external global i32, align 4
@nz0 = external global i32, align 4
@nz = external global i32, align 4
@.str = private unnamed_addr constant [177 x i8] c"     SUBDOMAIN SIZE IS TOO SMALL - \0A     ADJUST PROBLEM SIZE OR NUMBER OF PROCESSORS\0A     SO THAT NX, NY AND NZ ARE GREATER THAN OR EQUAL\0A     TO 4 THEY ARE CURRENTLY%3d%3d%3d\0A\00", align 1
@.str.1 = private unnamed_addr constant [217 x i8] c"     SUBDOMAIN SIZE IS TOO LARGE - \0A     ADJUST PROBLEM SIZE OR NUMBER OF PROCESSORS\0A     SO THAT NX, NY AND NZ ARE LESS THAN OR EQUAL TO \0A     ISIZ1, ISIZ2 AND ISIZ3 RESPECTIVELY.  THEY ARE\0A     CURRENTLYi%4d%4d%4d\0A\00", align 1
@ist = external global i32, align 4
@iend = external global i32, align 4
@jst = external global i32, align 4
@jend = external global i32, align 4
@ii1 = external global i32, align 4
@ii2 = external global i32, align 4
@ji1 = external global i32, align 4
@ji2 = external global i32, align 4
@ki1 = external global i32, align 4
@ki2 = external global i32, align 4

; Function Attrs: noinline nounwind uwtable
define void @domain() #0 !dbg !4 {
  %1 = load i32, i32* @nx0, align 4, !dbg !11, !tbaa !12
  store i32 %1, i32* @nx, align 4, !dbg !16, !tbaa !12
  %2 = load i32, i32* @ny0, align 4, !dbg !17
  store i32 %2, i32* @ny, align 4, !dbg !18, !tbaa !12
  %3 = load i32, i32* @nz0, align 4, !dbg !19, !tbaa !12
  store i32 %3, i32* @nz, align 4, !dbg !20, !tbaa !12
  %4 = icmp slt i32 %1, 4, !dbg !21
  %5 = icmp slt i32 %2, 4, !dbg !23
  %or.cond = or i1 %4, %5, !dbg !25
  %6 = icmp slt i32 %3, 4, !dbg !26
  %or.cond3 = or i1 %or.cond, %6, !dbg !25
  br i1 %or.cond3, label %7, label %9, !dbg !25

; <label>:7                                       ; preds = %0
  %8 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([177 x i8], [177 x i8]* @.str, i64 0, i64 0), i32 %1, i32 %2, i32 %3) #3, !dbg !28
  tail call void @exit(i32 1) #4, !dbg !30
  unreachable, !dbg !30

; <label>:9                                       ; preds = %0
  %10 = icmp sgt i32 %1, 12, !dbg !31
  %11 = icmp sgt i32 %2, 12, !dbg !33
  %or.cond5 = or i1 %10, %11, !dbg !35
  %12 = icmp sgt i32 %3, 12, !dbg !36
  %or.cond7 = or i1 %or.cond5, %12, !dbg !35
  br i1 %or.cond7, label %13, label %15, !dbg !35

; <label>:13                                      ; preds = %9
  %14 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([217 x i8], [217 x i8]* @.str.1, i64 0, i64 0), i32 %1, i32 %2, i32 %3) #3, !dbg !38
  tail call void @exit(i32 1) #4, !dbg !40
  unreachable, !dbg !40

; <label>:15                                      ; preds = %9
  store i32 1, i32* @ist, align 4, !dbg !41, !tbaa !12
  %16 = load i32, i32* @nx, align 4, !dbg !42, !tbaa !12
  %17 = add nsw i32 %16, -1, !dbg !43
  store i32 %17, i32* @iend, align 4, !dbg !44, !tbaa !12
  store i32 1, i32* @jst, align 4, !dbg !45, !tbaa !12
  %18 = load i32, i32* @ny, align 4, !dbg !46, !tbaa !12
  %19 = add nsw i32 %18, -1, !dbg !47
  store i32 %19, i32* @jend, align 4, !dbg !48, !tbaa !12
  store i32 1, i32* @ii1, align 4, !dbg !49, !tbaa !12
  %20 = load i32, i32* @nx0, align 4, !dbg !50, !tbaa !12
  %21 = add nsw i32 %20, -1, !dbg !51
  store i32 %21, i32* @ii2, align 4, !dbg !52, !tbaa !12
  store i32 1, i32* @ji1, align 4, !dbg !53, !tbaa !12
  %22 = load i32, i32* @ny0, align 4, !dbg !54, !tbaa !12
  %23 = add nsw i32 %22, -2, !dbg !55
  store i32 %23, i32* @ji2, align 4, !dbg !56, !tbaa !12
  store i32 2, i32* @ki1, align 4, !dbg !57, !tbaa !12
  %24 = load i32, i32* @nz0, align 4, !dbg !58, !tbaa !12
  %25 = add nsw i32 %24, -1, !dbg !59
  store i32 %25, i32* @ki2, align 4, !dbg !60, !tbaa !12
  ret void, !dbg !61
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) #2

attributes #0 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind }
attributes #4 = { nobuiltin noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!7, !8, !9}
!llvm.ident = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.8.0 (tags/RELEASE_380/final)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "domain.c", directory: "/home/jingl/trace_analysis_code/trace_analysis_code_lulesh_m_delv_zeta/benchmark_working_station/lu")
!2 = !{}
!3 = !{!4}
!4 = distinct !DISubprogram(name: "domain", scope: !1, file: !1, line: 38, type: !5, isLocal: false, isDefinition: true, scopeLine: 39, isOptimized: true, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{null}
!7 = !{i32 2, !"Dwarf Version", i32 4}
!8 = !{i32 2, !"Debug Info Version", i32 3}
!9 = !{i32 1, !"PIC Level", i32 2}
!10 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!11 = !DILocation(line: 43, column: 8, scope: !4)
!12 = !{!13, !13, i64 0}
!13 = !{!"int", !14, i64 0}
!14 = !{!"omnipotent char", !15, i64 0}
!15 = !{!"Simple C/C++ TBAA"}
!16 = !DILocation(line: 43, column: 6, scope: !4)
!17 = !DILocation(line: 44, column: 8, scope: !4)
!18 = !DILocation(line: 44, column: 6, scope: !4)
!19 = !DILocation(line: 45, column: 8, scope: !4)
!20 = !DILocation(line: 45, column: 6, scope: !4)
!21 = !DILocation(line: 50, column: 13, scope: !22)
!22 = distinct !DILexicalBlock(scope: !4, file: !1, line: 50, column: 8)
!23 = !DILocation(line: 50, column: 27, scope: !24)
!24 = !DILexicalBlockFile(scope: !22, file: !1, discriminator: 1)
!25 = !DILocation(line: 50, column: 19, scope: !22)
!26 = !DILocation(line: 50, column: 41, scope: !27)
!27 = !DILexicalBlockFile(scope: !22, file: !1, discriminator: 2)
!28 = !DILocation(line: 51, column: 5, scope: !29)
!29 = distinct !DILexicalBlock(scope: !22, file: !1, line: 50, column: 49)
!30 = !DILocation(line: 55, column: 5, scope: !29)
!31 = !DILocation(line: 58, column: 13, scope: !32)
!32 = distinct !DILexicalBlock(scope: !4, file: !1, line: 58, column: 8)
!33 = !DILocation(line: 58, column: 31, scope: !34)
!34 = !DILexicalBlockFile(scope: !32, file: !1, discriminator: 1)
!35 = !DILocation(line: 58, column: 23, scope: !32)
!36 = !DILocation(line: 58, column: 49, scope: !37)
!37 = !DILexicalBlockFile(scope: !32, file: !1, discriminator: 2)
!38 = !DILocation(line: 59, column: 5, scope: !39)
!39 = distinct !DILexicalBlock(scope: !32, file: !1, line: 58, column: 61)
!40 = !DILocation(line: 64, column: 5, scope: !39)
!41 = !DILocation(line: 70, column: 7, scope: !4)
!42 = !DILocation(line: 71, column: 10, scope: !4)
!43 = !DILocation(line: 71, column: 13, scope: !4)
!44 = !DILocation(line: 71, column: 8, scope: !4)
!45 = !DILocation(line: 73, column: 7, scope: !4)
!46 = !DILocation(line: 74, column: 10, scope: !4)
!47 = !DILocation(line: 74, column: 13, scope: !4)
!48 = !DILocation(line: 74, column: 8, scope: !4)
!49 = !DILocation(line: 76, column: 7, scope: !4)
!50 = !DILocation(line: 77, column: 9, scope: !4)
!51 = !DILocation(line: 77, column: 13, scope: !4)
!52 = !DILocation(line: 77, column: 7, scope: !4)
!53 = !DILocation(line: 78, column: 7, scope: !4)
!54 = !DILocation(line: 79, column: 9, scope: !4)
!55 = !DILocation(line: 79, column: 13, scope: !4)
!56 = !DILocation(line: 79, column: 7, scope: !4)
!57 = !DILocation(line: 80, column: 7, scope: !4)
!58 = !DILocation(line: 81, column: 9, scope: !4)
!59 = !DILocation(line: 81, column: 13, scope: !4)
!60 = !DILocation(line: 81, column: 7, scope: !4)
!61 = !DILocation(line: 82, column: 1, scope: !4)
